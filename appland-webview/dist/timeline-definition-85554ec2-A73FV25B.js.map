{"version":3,"sources":["../node_modules/mermaid/dist/timeline-definition-85554ec2.js"],"names":["clear"],"mappings":"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","file":"timeline-definition-85554ec2-A73FV25B.js","sourcesContent":["import { L as commonDb, v as clear$1, c as getConfig, l as log, o as setupGraphViewbox } from \"./mermaid-b5860b54.js\";\nimport { select, arc } from \"d3\";\nimport { isDark, lighten, darken } from \"khroma\";\nimport \"ts-dedent\";\nimport \"dayjs\";\nimport \"@braintree/sanitize-url\";\nimport \"dompurify\";\nimport \"lodash-es/memoize.js\";\nimport \"lodash-es/merge.js\";\nimport \"stylis\";\nimport \"lodash-es/isEmpty.js\";\nvar parser = function() {\n  var o = function(k, v, o2, l) {\n    for (o2 = o2 || {}, l = k.length; l--; o2[k[l]] = v)\n      ;\n    return o2;\n  }, $V0 = [6, 8, 10, 11, 12, 14, 16, 17, 20, 21], $V1 = [1, 9], $V2 = [1, 10], $V3 = [1, 11], $V4 = [1, 12], $V5 = [1, 13], $V6 = [1, 16], $V7 = [1, 17];\n  var parser2 = {\n    trace: function trace() {\n    },\n    yy: {},\n    symbols_: { \"error\": 2, \"start\": 3, \"timeline\": 4, \"document\": 5, \"EOF\": 6, \"line\": 7, \"SPACE\": 8, \"statement\": 9, \"NEWLINE\": 10, \"title\": 11, \"acc_title\": 12, \"acc_title_value\": 13, \"acc_descr\": 14, \"acc_descr_value\": 15, \"acc_descr_multiline_value\": 16, \"section\": 17, \"period_statement\": 18, \"event_statement\": 19, \"period\": 20, \"event\": 21, \"$accept\": 0, \"$end\": 1 },\n    terminals_: { 2: \"error\", 4: \"timeline\", 6: \"EOF\", 8: \"SPACE\", 10: \"NEWLINE\", 11: \"title\", 12: \"acc_title\", 13: \"acc_title_value\", 14: \"acc_descr\", 15: \"acc_descr_value\", 16: \"acc_descr_multiline_value\", 17: \"section\", 20: \"period\", 21: \"event\" },\n    productions_: [0, [3, 3], [5, 0], [5, 2], [7, 2], [7, 1], [7, 1], [7, 1], [9, 1], [9, 2], [9, 2], [9, 1], [9, 1], [9, 1], [9, 1], [18, 1], [19, 1]],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$) {\n      var $0 = $$.length - 1;\n      switch (yystate) {\n        case 1:\n          return $$[$0 - 1];\n        case 2:\n          this.$ = [];\n          break;\n        case 3:\n          $$[$0 - 1].push($$[$0]);\n          this.$ = $$[$0 - 1];\n          break;\n        case 4:\n        case 5:\n          this.$ = $$[$0];\n          break;\n        case 6:\n        case 7:\n          this.$ = [];\n          break;\n        case 8:\n          yy.getCommonDb().setDiagramTitle($$[$0].substr(6));\n          this.$ = $$[$0].substr(6);\n          break;\n        case 9:\n          this.$ = $$[$0].trim();\n          yy.getCommonDb().setAccTitle(this.$);\n          break;\n        case 10:\n        case 11:\n          this.$ = $$[$0].trim();\n          yy.getCommonDb().setAccDescription(this.$);\n          break;\n        case 12:\n          yy.addSection($$[$0].substr(8));\n          this.$ = $$[$0].substr(8);\n          break;\n        case 15:\n          yy.addTask($$[$0], 0, \"\");\n          this.$ = $$[$0];\n          break;\n        case 16:\n          yy.addEvent($$[$0].substr(2));\n          this.$ = $$[$0];\n          break;\n      }\n    },\n    table: [{ 3: 1, 4: [1, 2] }, { 1: [3] }, o($V0, [2, 2], { 5: 3 }), { 6: [1, 4], 7: 5, 8: [1, 6], 9: 7, 10: [1, 8], 11: $V1, 12: $V2, 14: $V3, 16: $V4, 17: $V5, 18: 14, 19: 15, 20: $V6, 21: $V7 }, o($V0, [2, 7], { 1: [2, 1] }), o($V0, [2, 3]), { 9: 18, 11: $V1, 12: $V2, 14: $V3, 16: $V4, 17: $V5, 18: 14, 19: 15, 20: $V6, 21: $V7 }, o($V0, [2, 5]), o($V0, [2, 6]), o($V0, [2, 8]), { 13: [1, 19] }, { 15: [1, 20] }, o($V0, [2, 11]), o($V0, [2, 12]), o($V0, [2, 13]), o($V0, [2, 14]), o($V0, [2, 15]), o($V0, [2, 16]), o($V0, [2, 4]), o($V0, [2, 9]), o($V0, [2, 10])],\n    defaultActions: {},\n    parseError: function parseError(str, hash) {\n      if (hash.recoverable) {\n        this.trace(str);\n      } else {\n        var error = new Error(str);\n        error.hash = hash;\n        throw error;\n      }\n    },\n    parse: function parse(input) {\n      var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = \"\", yylineno = 0, yyleng = 0, TERROR = 2, EOF = 1;\n      var args = lstack.slice.call(arguments, 1);\n      var lexer2 = Object.create(this.lexer);\n      var sharedState = { yy: {} };\n      for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n          sharedState.yy[k] = this.yy[k];\n        }\n      }\n      lexer2.setInput(input, sharedState.yy);\n      sharedState.yy.lexer = lexer2;\n      sharedState.yy.parser = this;\n      if (typeof lexer2.yylloc == \"undefined\") {\n        lexer2.yylloc = {};\n      }\n      var yyloc = lexer2.yylloc;\n      lstack.push(yyloc);\n      var ranges = lexer2.options && lexer2.options.ranges;\n      if (typeof sharedState.yy.parseError === \"function\") {\n        this.parseError = sharedState.yy.parseError;\n      } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n      }\n      function lex() {\n        var token;\n        token = tstack.pop() || lexer2.lex() || EOF;\n        if (typeof token !== \"number\") {\n          if (token instanceof Array) {\n            tstack = token;\n            token = tstack.pop();\n          }\n          token = self.symbols_[token] || token;\n        }\n        return token;\n      }\n      var symbol, state, action, r, yyval = {}, p, len, newState, expected;\n      while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n          action = this.defaultActions[state];\n        } else {\n          if (symbol === null || typeof symbol == \"undefined\") {\n            symbol = lex();\n          }\n          action = table[state] && table[state][symbol];\n        }\n        if (typeof action === \"undefined\" || !action.length || !action[0]) {\n          var errStr = \"\";\n          expected = [];\n          for (p in table[state]) {\n            if (this.terminals_[p] && p > TERROR) {\n              expected.push(\"'\" + this.terminals_[p] + \"'\");\n            }\n          }\n          if (lexer2.showPosition) {\n            errStr = \"Parse error on line \" + (yylineno + 1) + \":\\n\" + lexer2.showPosition() + \"\\nExpecting \" + expected.join(\", \") + \", got '\" + (this.terminals_[symbol] || symbol) + \"'\";\n          } else {\n            errStr = \"Parse error on line \" + (yylineno + 1) + \": Unexpected \" + (symbol == EOF ? \"end of input\" : \"'\" + (this.terminals_[symbol] || symbol) + \"'\");\n          }\n          this.parseError(errStr, {\n            text: lexer2.match,\n            token: this.terminals_[symbol] || symbol,\n            line: lexer2.yylineno,\n            loc: yyloc,\n            expected\n          });\n        }\n        if (action[0] instanceof Array && action.length > 1) {\n          throw new Error(\"Parse Error: multiple actions possible at state: \" + state + \", token: \" + symbol);\n        }\n        switch (action[0]) {\n          case 1:\n            stack.push(symbol);\n            vstack.push(lexer2.yytext);\n            lstack.push(lexer2.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            {\n              yyleng = lexer2.yyleng;\n              yytext = lexer2.yytext;\n              yylineno = lexer2.yylineno;\n              yyloc = lexer2.yylloc;\n            }\n            break;\n          case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n              first_line: lstack[lstack.length - (len || 1)].first_line,\n              last_line: lstack[lstack.length - 1].last_line,\n              first_column: lstack[lstack.length - (len || 1)].first_column,\n              last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n              yyval._$.range = [\n                lstack[lstack.length - (len || 1)].range[0],\n                lstack[lstack.length - 1].range[1]\n              ];\n            }\n            r = this.performAction.apply(yyval, [\n              yytext,\n              yyleng,\n              yylineno,\n              sharedState.yy,\n              action[1],\n              vstack,\n              lstack\n            ].concat(args));\n            if (typeof r !== \"undefined\") {\n              return r;\n            }\n            if (len) {\n              stack = stack.slice(0, -1 * len * 2);\n              vstack = vstack.slice(0, -1 * len);\n              lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n          case 3:\n            return true;\n        }\n      }\n      return true;\n    }\n  };\n  var lexer = function() {\n    var lexer2 = {\n      EOF: 1,\n      parseError: function parseError(str, hash) {\n        if (this.yy.parser) {\n          this.yy.parser.parseError(str, hash);\n        } else {\n          throw new Error(str);\n        }\n      },\n      // resets the lexer, sets new input\n      setInput: function(input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = \"\";\n        this.conditionStack = [\"INITIAL\"];\n        this.yylloc = {\n          first_line: 1,\n          first_column: 0,\n          last_line: 1,\n          last_column: 0\n        };\n        if (this.options.ranges) {\n          this.yylloc.range = [0, 0];\n        }\n        this.offset = 0;\n        return this;\n      },\n      // consumes and returns one char from the input\n      input: function() {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n          this.yylineno++;\n          this.yylloc.last_line++;\n        } else {\n          this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n          this.yylloc.range[1]++;\n        }\n        this._input = this._input.slice(1);\n        return ch;\n      },\n      // unshifts one char (or a string) into the input\n      unput: function(ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n        if (lines.length - 1) {\n          this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n        this.yylloc = {\n          first_line: this.yylloc.first_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.first_column,\n          last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len\n        };\n        if (this.options.ranges) {\n          this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n      },\n      // When called from action, caches matched text and appends it on next action\n      more: function() {\n        this._more = true;\n        return this;\n      },\n      // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\n      reject: function() {\n        if (this.options.backtrack_lexer) {\n          this._backtrack = true;\n        } else {\n          return this.parseError(\"Lexical error on line \" + (this.yylineno + 1) + \". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n\" + this.showPosition(), {\n            text: \"\",\n            token: null,\n            line: this.yylineno\n          });\n        }\n        return this;\n      },\n      // retain first n characters of the match\n      less: function(n) {\n        this.unput(this.match.slice(n));\n      },\n      // displays already matched input, i.e. for error messages\n      pastInput: function() {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? \"...\" : \"\") + past.substr(-20).replace(/\\n/g, \"\");\n      },\n      // displays upcoming input, i.e. for error messages\n      upcomingInput: function() {\n        var next = this.match;\n        if (next.length < 20) {\n          next += this._input.substr(0, 20 - next.length);\n        }\n        return (next.substr(0, 20) + (next.length > 20 ? \"...\" : \"\")).replace(/\\n/g, \"\");\n      },\n      // displays the character position where the lexing error occurred, i.e. for error messages\n      showPosition: function() {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n      },\n      // test the lexed token: return FALSE when not a match, otherwise return token\n      test_match: function(match, indexed_rule) {\n        var token, lines, backup;\n        if (this.options.backtrack_lexer) {\n          backup = {\n            yylineno: this.yylineno,\n            yylloc: {\n              first_line: this.yylloc.first_line,\n              last_line: this.last_line,\n              first_column: this.yylloc.first_column,\n              last_column: this.yylloc.last_column\n            },\n            yytext: this.yytext,\n            match: this.match,\n            matches: this.matches,\n            matched: this.matched,\n            yyleng: this.yyleng,\n            offset: this.offset,\n            _more: this._more,\n            _input: this._input,\n            yy: this.yy,\n            conditionStack: this.conditionStack.slice(0),\n            done: this.done\n          };\n          if (this.options.ranges) {\n            backup.yylloc.range = this.yylloc.range.slice(0);\n          }\n        }\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n          this.yylineno += lines.length;\n        }\n        this.yylloc = {\n          first_line: this.yylloc.last_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.last_column,\n          last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length : this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n          this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n          this.done = false;\n        }\n        if (token) {\n          return token;\n        } else if (this._backtrack) {\n          for (var k in backup) {\n            this[k] = backup[k];\n          }\n          return false;\n        }\n        return false;\n      },\n      // return next match in input\n      next: function() {\n        if (this.done) {\n          return this.EOF;\n        }\n        if (!this._input) {\n          this.done = true;\n        }\n        var token, match, tempMatch, index;\n        if (!this._more) {\n          this.yytext = \"\";\n          this.match = \"\";\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n          tempMatch = this._input.match(this.rules[rules[i]]);\n          if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n            match = tempMatch;\n            index = i;\n            if (this.options.backtrack_lexer) {\n              token = this.test_match(tempMatch, rules[i]);\n              if (token !== false) {\n                return token;\n              } else if (this._backtrack) {\n                match = false;\n                continue;\n              } else {\n                return false;\n              }\n            } else if (!this.options.flex) {\n              break;\n            }\n          }\n        }\n        if (match) {\n          token = this.test_match(match, rules[index]);\n          if (token !== false) {\n            return token;\n          }\n          return false;\n        }\n        if (this._input === \"\") {\n          return this.EOF;\n        } else {\n          return this.parseError(\"Lexical error on line \" + (this.yylineno + 1) + \". Unrecognized text.\\n\" + this.showPosition(), {\n            text: \"\",\n            token: null,\n            line: this.yylineno\n          });\n        }\n      },\n      // return next match that has a token\n      lex: function lex() {\n        var r = this.next();\n        if (r) {\n          return r;\n        } else {\n          return this.lex();\n        }\n      },\n      // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\n      begin: function begin(condition) {\n        this.conditionStack.push(condition);\n      },\n      // pop the previously active lexer condition state off the condition stack\n      popState: function popState() {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n          return this.conditionStack.pop();\n        } else {\n          return this.conditionStack[0];\n        }\n      },\n      // produce the lexer rule set which is active for the currently active lexer condition state\n      _currentRules: function _currentRules() {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n          return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n          return this.conditions[\"INITIAL\"].rules;\n        }\n      },\n      // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\n      topState: function topState(n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n          return this.conditionStack[n];\n        } else {\n          return \"INITIAL\";\n        }\n      },\n      // alias for begin(condition)\n      pushState: function pushState(condition) {\n        this.begin(condition);\n      },\n      // return the number of states currently on the stack\n      stateStackSize: function stateStackSize() {\n        return this.conditionStack.length;\n      },\n      options: { \"case-insensitive\": true },\n      performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {\n        switch ($avoiding_name_collisions) {\n          case 0:\n            break;\n          case 1:\n            break;\n          case 2:\n            return 10;\n          case 3:\n            break;\n          case 4:\n            break;\n          case 5:\n            return 4;\n          case 6:\n            return 11;\n          case 7:\n            this.begin(\"acc_title\");\n            return 12;\n          case 8:\n            this.popState();\n            return \"acc_title_value\";\n          case 9:\n            this.begin(\"acc_descr\");\n            return 14;\n          case 10:\n            this.popState();\n            return \"acc_descr_value\";\n          case 11:\n            this.begin(\"acc_descr_multiline\");\n            break;\n          case 12:\n            this.popState();\n            break;\n          case 13:\n            return \"acc_descr_multiline_value\";\n          case 14:\n            return 17;\n          case 15:\n            return 21;\n          case 16:\n            return 20;\n          case 17:\n            return 6;\n          case 18:\n            return \"INVALID\";\n        }\n      },\n      rules: [/^(?:%(?!\\{)[^\\n]*)/i, /^(?:[^\\}]%%[^\\n]*)/i, /^(?:[\\n]+)/i, /^(?:\\s+)/i, /^(?:#[^\\n]*)/i, /^(?:timeline\\b)/i, /^(?:title\\s[^#\\n;]+)/i, /^(?:accTitle\\s*:\\s*)/i, /^(?:(?!\\n||)*[^\\n]*)/i, /^(?:accDescr\\s*:\\s*)/i, /^(?:(?!\\n||)*[^\\n]*)/i, /^(?:accDescr\\s*\\{\\s*)/i, /^(?:[\\}])/i, /^(?:[^\\}]*)/i, /^(?:section\\s[^#:\\n;]+)/i, /^(?::\\s[^#:\\n;]+)/i, /^(?:[^#:\\n;]+)/i, /^(?:$)/i, /^(?:.)/i],\n      conditions: { \"acc_descr_multiline\": { \"rules\": [12, 13], \"inclusive\": false }, \"acc_descr\": { \"rules\": [10], \"inclusive\": false }, \"acc_title\": { \"rules\": [8], \"inclusive\": false }, \"INITIAL\": { \"rules\": [0, 1, 2, 3, 4, 5, 6, 7, 9, 11, 14, 15, 16, 17, 18], \"inclusive\": true } }\n    };\n    return lexer2;\n  }();\n  parser2.lexer = lexer;\n  function Parser() {\n    this.yy = {};\n  }\n  Parser.prototype = parser2;\n  parser2.Parser = Parser;\n  return new Parser();\n}();\nparser.parser = parser;\nconst parser$1 = parser;\nlet currentSection = \"\";\nlet currentTaskId = 0;\nconst sections = [];\nconst tasks = [];\nconst rawTasks = [];\nconst getCommonDb = () => commonDb;\nconst clear = function() {\n  sections.length = 0;\n  tasks.length = 0;\n  currentSection = \"\";\n  rawTasks.length = 0;\n  clear$1();\n};\nconst addSection = function(txt) {\n  currentSection = txt;\n  sections.push(txt);\n};\nconst getSections = function() {\n  return sections;\n};\nconst getTasks = function() {\n  let allItemsProcessed = compileTasks();\n  const maxDepth = 100;\n  let iterationCount = 0;\n  while (!allItemsProcessed && iterationCount < maxDepth) {\n    allItemsProcessed = compileTasks();\n    iterationCount++;\n  }\n  tasks.push(...rawTasks);\n  return tasks;\n};\nconst addTask = function(period, length, event) {\n  const rawTask = {\n    id: currentTaskId++,\n    section: currentSection,\n    type: currentSection,\n    task: period,\n    score: length ? length : 0,\n    //if event is defined, then add it the events array\n    events: event ? [event] : []\n  };\n  rawTasks.push(rawTask);\n};\nconst addEvent = function(event) {\n  const currentTask = rawTasks.find((task) => task.id === currentTaskId - 1);\n  currentTask.events.push(event);\n};\nconst addTaskOrg = function(descr) {\n  const newTask = {\n    section: currentSection,\n    type: currentSection,\n    description: descr,\n    task: descr,\n    classes: []\n  };\n  tasks.push(newTask);\n};\nconst compileTasks = function() {\n  const compileTask = function(pos) {\n    return rawTasks[pos].processed;\n  };\n  let allProcessed = true;\n  for (const [i, rawTask] of rawTasks.entries()) {\n    compileTask(i);\n    allProcessed = allProcessed && rawTask.processed;\n  }\n  return allProcessed;\n};\nconst timelineDb = {\n  clear,\n  getCommonDb,\n  addSection,\n  getSections,\n  getTasks,\n  addTask,\n  addTaskOrg,\n  addEvent\n};\nconst db = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  addEvent,\n  addSection,\n  addTask,\n  addTaskOrg,\n  clear,\n  default: timelineDb,\n  getCommonDb,\n  getSections,\n  getTasks\n}, Symbol.toStringTag, { value: \"Module\" }));\nconst MAX_SECTIONS = 12;\nconst drawRect = function(elem, rectData) {\n  const rectElem = elem.append(\"rect\");\n  rectElem.attr(\"x\", rectData.x);\n  rectElem.attr(\"y\", rectData.y);\n  rectElem.attr(\"fill\", rectData.fill);\n  rectElem.attr(\"stroke\", rectData.stroke);\n  rectElem.attr(\"width\", rectData.width);\n  rectElem.attr(\"height\", rectData.height);\n  rectElem.attr(\"rx\", rectData.rx);\n  rectElem.attr(\"ry\", rectData.ry);\n  if (rectData.class !== void 0) {\n    rectElem.attr(\"class\", rectData.class);\n  }\n  return rectElem;\n};\nconst drawFace = function(element, faceData) {\n  const radius = 15;\n  const circleElement = element.append(\"circle\").attr(\"cx\", faceData.cx).attr(\"cy\", faceData.cy).attr(\"class\", \"face\").attr(\"r\", radius).attr(\"stroke-width\", 2).attr(\"overflow\", \"visible\");\n  const face = element.append(\"g\");\n  face.append(\"circle\").attr(\"cx\", faceData.cx - radius / 3).attr(\"cy\", faceData.cy - radius / 3).attr(\"r\", 1.5).attr(\"stroke-width\", 2).attr(\"fill\", \"#666\").attr(\"stroke\", \"#666\");\n  face.append(\"circle\").attr(\"cx\", faceData.cx + radius / 3).attr(\"cy\", faceData.cy - radius / 3).attr(\"r\", 1.5).attr(\"stroke-width\", 2).attr(\"fill\", \"#666\").attr(\"stroke\", \"#666\");\n  function smile(face2) {\n    const arc$1 = arc().startAngle(Math.PI / 2).endAngle(3 * (Math.PI / 2)).innerRadius(radius / 2).outerRadius(radius / 2.2);\n    face2.append(\"path\").attr(\"class\", \"mouth\").attr(\"d\", arc$1).attr(\"transform\", \"translate(\" + faceData.cx + \",\" + (faceData.cy + 2) + \")\");\n  }\n  function sad(face2) {\n    const arc$1 = arc().startAngle(3 * Math.PI / 2).endAngle(5 * (Math.PI / 2)).innerRadius(radius / 2).outerRadius(radius / 2.2);\n    face2.append(\"path\").attr(\"class\", \"mouth\").attr(\"d\", arc$1).attr(\"transform\", \"translate(\" + faceData.cx + \",\" + (faceData.cy + 7) + \")\");\n  }\n  function ambivalent(face2) {\n    face2.append(\"line\").attr(\"class\", \"mouth\").attr(\"stroke\", 2).attr(\"x1\", faceData.cx - 5).attr(\"y1\", faceData.cy + 7).attr(\"x2\", faceData.cx + 5).attr(\"y2\", faceData.cy + 7).attr(\"class\", \"mouth\").attr(\"stroke-width\", \"1px\").attr(\"stroke\", \"#666\");\n  }\n  if (faceData.score > 3) {\n    smile(face);\n  } else if (faceData.score < 3) {\n    sad(face);\n  } else {\n    ambivalent(face);\n  }\n  return circleElement;\n};\nconst drawCircle = function(element, circleData) {\n  const circleElement = element.append(\"circle\");\n  circleElement.attr(\"cx\", circleData.cx);\n  circleElement.attr(\"cy\", circleData.cy);\n  circleElement.attr(\"class\", \"actor-\" + circleData.pos);\n  circleElement.attr(\"fill\", circleData.fill);\n  circleElement.attr(\"stroke\", circleData.stroke);\n  circleElement.attr(\"r\", circleData.r);\n  if (circleElement.class !== void 0) {\n    circleElement.attr(\"class\", circleElement.class);\n  }\n  if (circleData.title !== void 0) {\n    circleElement.append(\"title\").text(circleData.title);\n  }\n  return circleElement;\n};\nconst drawText = function(elem, textData) {\n  const nText = textData.text.replace(/<br\\s*\\/?>/gi, \" \");\n  const textElem = elem.append(\"text\");\n  textElem.attr(\"x\", textData.x);\n  textElem.attr(\"y\", textData.y);\n  textElem.attr(\"class\", \"legend\");\n  textElem.style(\"text-anchor\", textData.anchor);\n  if (textData.class !== void 0) {\n    textElem.attr(\"class\", textData.class);\n  }\n  const span = textElem.append(\"tspan\");\n  span.attr(\"x\", textData.x + textData.textMargin * 2);\n  span.text(nText);\n  return textElem;\n};\nconst drawLabel = function(elem, txtObject) {\n  function genPoints(x, y, width, height, cut) {\n    return x + \",\" + y + \" \" + (x + width) + \",\" + y + \" \" + (x + width) + \",\" + (y + height - cut) + \" \" + (x + width - cut * 1.2) + \",\" + (y + height) + \" \" + x + \",\" + (y + height);\n  }\n  const polygon = elem.append(\"polygon\");\n  polygon.attr(\"points\", genPoints(txtObject.x, txtObject.y, 50, 20, 7));\n  polygon.attr(\"class\", \"labelBox\");\n  txtObject.y = txtObject.y + txtObject.labelMargin;\n  txtObject.x = txtObject.x + 0.5 * txtObject.labelMargin;\n  drawText(elem, txtObject);\n};\nconst drawSection = function(elem, section, conf) {\n  const g = elem.append(\"g\");\n  const rect = getNoteRect();\n  rect.x = section.x;\n  rect.y = section.y;\n  rect.fill = section.fill;\n  rect.width = conf.width;\n  rect.height = conf.height;\n  rect.class = \"journey-section section-type-\" + section.num;\n  rect.rx = 3;\n  rect.ry = 3;\n  drawRect(g, rect);\n  _drawTextCandidateFunc(conf)(\n    section.text,\n    g,\n    rect.x,\n    rect.y,\n    rect.width,\n    rect.height,\n    { class: \"journey-section section-type-\" + section.num },\n    conf,\n    section.colour\n  );\n};\nlet taskCount = -1;\nconst drawTask = function(elem, task, conf) {\n  const center = task.x + conf.width / 2;\n  const g = elem.append(\"g\");\n  taskCount++;\n  const maxHeight = 300 + 5 * 30;\n  g.append(\"line\").attr(\"id\", \"task\" + taskCount).attr(\"x1\", center).attr(\"y1\", task.y).attr(\"x2\", center).attr(\"y2\", maxHeight).attr(\"class\", \"task-line\").attr(\"stroke-width\", \"1px\").attr(\"stroke-dasharray\", \"4 2\").attr(\"stroke\", \"#666\");\n  drawFace(g, {\n    cx: center,\n    cy: 300 + (5 - task.score) * 30,\n    score: task.score\n  });\n  const rect = getNoteRect();\n  rect.x = task.x;\n  rect.y = task.y;\n  rect.fill = task.fill;\n  rect.width = conf.width;\n  rect.height = conf.height;\n  rect.class = \"task task-type-\" + task.num;\n  rect.rx = 3;\n  rect.ry = 3;\n  drawRect(g, rect);\n  task.x + 14;\n  _drawTextCandidateFunc(conf)(\n    task.task,\n    g,\n    rect.x,\n    rect.y,\n    rect.width,\n    rect.height,\n    { class: \"task\" },\n    conf,\n    task.colour\n  );\n};\nconst drawBackgroundRect = function(elem, bounds) {\n  const rectElem = drawRect(elem, {\n    x: bounds.startx,\n    y: bounds.starty,\n    width: bounds.stopx - bounds.startx,\n    height: bounds.stopy - bounds.starty,\n    fill: bounds.fill,\n    class: \"rect\"\n  });\n  rectElem.lower();\n};\nconst getTextObj = function() {\n  return {\n    x: 0,\n    y: 0,\n    fill: void 0,\n    \"text-anchor\": \"start\",\n    width: 100,\n    height: 100,\n    textMargin: 0,\n    rx: 0,\n    ry: 0\n  };\n};\nconst getNoteRect = function() {\n  return {\n    x: 0,\n    y: 0,\n    width: 100,\n    anchor: \"start\",\n    height: 100,\n    rx: 0,\n    ry: 0\n  };\n};\nconst _drawTextCandidateFunc = function() {\n  function byText(content, g, x, y, width, height, textAttrs, colour) {\n    const text = g.append(\"text\").attr(\"x\", x + width / 2).attr(\"y\", y + height / 2 + 5).style(\"font-color\", colour).style(\"text-anchor\", \"middle\").text(content);\n    _setTextAttrs(text, textAttrs);\n  }\n  function byTspan(content, g, x, y, width, height, textAttrs, conf, colour) {\n    const { taskFontSize, taskFontFamily } = conf;\n    const lines = content.split(/<br\\s*\\/?>/gi);\n    for (let i = 0; i < lines.length; i++) {\n      const dy = i * taskFontSize - taskFontSize * (lines.length - 1) / 2;\n      const text = g.append(\"text\").attr(\"x\", x + width / 2).attr(\"y\", y).attr(\"fill\", colour).style(\"text-anchor\", \"middle\").style(\"font-size\", taskFontSize).style(\"font-family\", taskFontFamily);\n      text.append(\"tspan\").attr(\"x\", x + width / 2).attr(\"dy\", dy).text(lines[i]);\n      text.attr(\"y\", y + height / 2).attr(\"dominant-baseline\", \"central\").attr(\"alignment-baseline\", \"central\");\n      _setTextAttrs(text, textAttrs);\n    }\n  }\n  function byFo(content, g, x, y, width, height, textAttrs, conf) {\n    const body = g.append(\"switch\");\n    const f = body.append(\"foreignObject\").attr(\"x\", x).attr(\"y\", y).attr(\"width\", width).attr(\"height\", height).attr(\"position\", \"fixed\");\n    const text = f.append(\"xhtml:div\").style(\"display\", \"table\").style(\"height\", \"100%\").style(\"width\", \"100%\");\n    text.append(\"div\").attr(\"class\", \"label\").style(\"display\", \"table-cell\").style(\"text-align\", \"center\").style(\"vertical-align\", \"middle\").text(content);\n    byTspan(content, body, x, y, width, height, textAttrs, conf);\n    _setTextAttrs(text, textAttrs);\n  }\n  function _setTextAttrs(toText, fromTextAttrsDict) {\n    for (const key in fromTextAttrsDict) {\n      if (key in fromTextAttrsDict) {\n        toText.attr(key, fromTextAttrsDict[key]);\n      }\n    }\n  }\n  return function(conf) {\n    return conf.textPlacement === \"fo\" ? byFo : conf.textPlacement === \"old\" ? byText : byTspan;\n  };\n}();\nconst initGraphics = function(graphics) {\n  graphics.append(\"defs\").append(\"marker\").attr(\"id\", \"arrowhead\").attr(\"refX\", 5).attr(\"refY\", 2).attr(\"markerWidth\", 6).attr(\"markerHeight\", 4).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M 0,0 V 4 L6,2 Z\");\n};\nfunction wrap(text, width) {\n  text.each(function() {\n    var text2 = select(this), words = text2.text().split(/(\\s+|<br>)/).reverse(), word, line = [], lineHeight = 1.1, y = text2.attr(\"y\"), dy = parseFloat(text2.attr(\"dy\")), tspan = text2.text(null).append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", dy + \"em\");\n    for (let j = 0; j < words.length; j++) {\n      word = words[words.length - 1 - j];\n      line.push(word);\n      tspan.text(line.join(\" \").trim());\n      if (tspan.node().getComputedTextLength() > width || word === \"<br>\") {\n        line.pop();\n        tspan.text(line.join(\" \").trim());\n        if (word === \"<br>\") {\n          line = [\"\"];\n        } else {\n          line = [word];\n        }\n        tspan = text2.append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", lineHeight + \"em\").text(word);\n      }\n    }\n  });\n}\nconst drawNode = function(elem, node, fullSection, conf) {\n  const section = fullSection % MAX_SECTIONS - 1;\n  const nodeElem = elem.append(\"g\");\n  node.section = section;\n  nodeElem.attr(\n    \"class\",\n    (node.class ? node.class + \" \" : \"\") + \"timeline-node \" + (\"section-\" + section)\n  );\n  const bkgElem = nodeElem.append(\"g\");\n  const textElem = nodeElem.append(\"g\");\n  const txt = textElem.append(\"text\").text(node.descr).attr(\"dy\", \"1em\").attr(\"alignment-baseline\", \"middle\").attr(\"dominant-baseline\", \"middle\").attr(\"text-anchor\", \"middle\").call(wrap, node.width);\n  const bbox = txt.node().getBBox();\n  const fontSize = conf.fontSize && conf.fontSize.replace ? conf.fontSize.replace(\"px\", \"\") : conf.fontSize;\n  node.height = bbox.height + fontSize * 1.1 * 0.5 + node.padding;\n  node.height = Math.max(node.height, node.maxHeight);\n  node.width = node.width + 2 * node.padding;\n  textElem.attr(\"transform\", \"translate(\" + node.width / 2 + \", \" + node.padding / 2 + \")\");\n  defaultBkg(bkgElem, node, section);\n  return node;\n};\nconst getVirtualNodeHeight = function(elem, node, conf) {\n  const textElem = elem.append(\"g\");\n  const txt = textElem.append(\"text\").text(node.descr).attr(\"dy\", \"1em\").attr(\"alignment-baseline\", \"middle\").attr(\"dominant-baseline\", \"middle\").attr(\"text-anchor\", \"middle\").call(wrap, node.width);\n  const bbox = txt.node().getBBox();\n  const fontSize = conf.fontSize && conf.fontSize.replace ? conf.fontSize.replace(\"px\", \"\") : conf.fontSize;\n  textElem.remove();\n  return bbox.height + fontSize * 1.1 * 0.5 + node.padding;\n};\nconst defaultBkg = function(elem, node, section) {\n  const rd = 5;\n  elem.append(\"path\").attr(\"id\", \"node-\" + node.id).attr(\"class\", \"node-bkg node-\" + node.type).attr(\n    \"d\",\n    `M0 ${node.height - rd} v${-node.height + 2 * rd} q0,-5 5,-5 h${node.width - 2 * rd} q5,0 5,5 v${node.height - rd} H0 Z`\n  );\n  elem.append(\"line\").attr(\"class\", \"node-line-\" + section).attr(\"x1\", 0).attr(\"y1\", node.height).attr(\"x2\", node.width).attr(\"y2\", node.height);\n};\nconst svgDraw = {\n  drawRect,\n  drawCircle,\n  drawSection,\n  drawText,\n  drawLabel,\n  drawTask,\n  drawBackgroundRect,\n  getTextObj,\n  getNoteRect,\n  initGraphics,\n  drawNode,\n  getVirtualNodeHeight\n};\nconst draw = function(text, id, version, diagObj) {\n  var _a, _b;\n  const conf = getConfig();\n  const LEFT_MARGIN = conf.leftMargin ?? 50;\n  log.debug(\"timeline\", diagObj.db);\n  const securityLevel = conf.securityLevel;\n  let sandboxElement;\n  if (securityLevel === \"sandbox\") {\n    sandboxElement = select(\"#i\" + id);\n  }\n  const root = securityLevel === \"sandbox\" ? select(sandboxElement.nodes()[0].contentDocument.body) : select(\"body\");\n  const svg = root.select(\"#\" + id);\n  svg.append(\"g\");\n  const tasks2 = diagObj.db.getTasks();\n  const title = diagObj.db.getCommonDb().getDiagramTitle();\n  log.debug(\"task\", tasks2);\n  svgDraw.initGraphics(svg);\n  const sections2 = diagObj.db.getSections();\n  log.debug(\"sections\", sections2);\n  let maxSectionHeight = 0;\n  let maxTaskHeight = 0;\n  let depthY = 0;\n  let sectionBeginY = 0;\n  let masterX = 50 + LEFT_MARGIN;\n  let masterY = 50;\n  sectionBeginY = 50;\n  let sectionNumber = 0;\n  let hasSections = true;\n  sections2.forEach(function(section) {\n    const sectionNode = {\n      number: sectionNumber,\n      descr: section,\n      section: sectionNumber,\n      width: 150,\n      padding: 20,\n      maxHeight: maxSectionHeight\n    };\n    const sectionHeight = svgDraw.getVirtualNodeHeight(svg, sectionNode, conf);\n    log.debug(\"sectionHeight before draw\", sectionHeight);\n    maxSectionHeight = Math.max(maxSectionHeight, sectionHeight + 20);\n  });\n  let maxEventCount = 0;\n  let maxEventLineLength = 0;\n  log.debug(\"tasks.length\", tasks2.length);\n  for (const [i, task] of tasks2.entries()) {\n    const taskNode = {\n      number: i,\n      descr: task,\n      section: task.section,\n      width: 150,\n      padding: 20,\n      maxHeight: maxTaskHeight\n    };\n    const taskHeight = svgDraw.getVirtualNodeHeight(svg, taskNode, conf);\n    log.debug(\"taskHeight before draw\", taskHeight);\n    maxTaskHeight = Math.max(maxTaskHeight, taskHeight + 20);\n    maxEventCount = Math.max(maxEventCount, task.events.length);\n    let maxEventLineLengthTemp = 0;\n    for (let j = 0; j < task.events.length; j++) {\n      const event = task.events[j];\n      const eventNode = {\n        descr: event,\n        section: task.section,\n        number: task.section,\n        width: 150,\n        padding: 20,\n        maxHeight: 50\n      };\n      maxEventLineLengthTemp += svgDraw.getVirtualNodeHeight(svg, eventNode, conf);\n    }\n    maxEventLineLength = Math.max(maxEventLineLength, maxEventLineLengthTemp);\n  }\n  log.debug(\"maxSectionHeight before draw\", maxSectionHeight);\n  log.debug(\"maxTaskHeight before draw\", maxTaskHeight);\n  if (sections2 && sections2.length > 0) {\n    sections2.forEach((section) => {\n      const tasksForSection = tasks2.filter((task) => task.section === section);\n      const sectionNode = {\n        number: sectionNumber,\n        descr: section,\n        section: sectionNumber,\n        width: 200 * Math.max(tasksForSection.length, 1) - 50,\n        padding: 20,\n        maxHeight: maxSectionHeight\n      };\n      log.debug(\"sectionNode\", sectionNode);\n      const sectionNodeWrapper = svg.append(\"g\");\n      const node = svgDraw.drawNode(sectionNodeWrapper, sectionNode, sectionNumber, conf);\n      log.debug(\"sectionNode output\", node);\n      sectionNodeWrapper.attr(\"transform\", `translate(${masterX}, ${sectionBeginY})`);\n      masterY += maxSectionHeight + 50;\n      if (tasksForSection.length > 0) {\n        drawTasks(\n          svg,\n          tasksForSection,\n          sectionNumber,\n          masterX,\n          masterY,\n          maxTaskHeight,\n          conf,\n          maxEventCount,\n          maxEventLineLength,\n          maxSectionHeight,\n          false\n        );\n      }\n      masterX += 200 * Math.max(tasksForSection.length, 1);\n      masterY = sectionBeginY;\n      sectionNumber++;\n    });\n  } else {\n    hasSections = false;\n    drawTasks(\n      svg,\n      tasks2,\n      sectionNumber,\n      masterX,\n      masterY,\n      maxTaskHeight,\n      conf,\n      maxEventCount,\n      maxEventLineLength,\n      maxSectionHeight,\n      true\n    );\n  }\n  const box = svg.node().getBBox();\n  log.debug(\"bounds\", box);\n  if (title) {\n    svg.append(\"text\").text(title).attr(\"x\", box.width / 2 - LEFT_MARGIN).attr(\"font-size\", \"4ex\").attr(\"font-weight\", \"bold\").attr(\"y\", 20);\n  }\n  depthY = hasSections ? maxSectionHeight + maxTaskHeight + 150 : maxTaskHeight + 100;\n  const lineWrapper = svg.append(\"g\").attr(\"class\", \"lineWrapper\");\n  lineWrapper.append(\"line\").attr(\"x1\", LEFT_MARGIN).attr(\"y1\", depthY).attr(\"x2\", box.width + 3 * LEFT_MARGIN).attr(\"y2\", depthY).attr(\"stroke-width\", 4).attr(\"stroke\", \"black\").attr(\"marker-end\", \"url(#arrowhead)\");\n  setupGraphViewbox(\n    void 0,\n    svg,\n    ((_a = conf.timeline) == null ? void 0 : _a.padding) ?? 50,\n    ((_b = conf.timeline) == null ? void 0 : _b.useMaxWidth) ?? false\n  );\n};\nconst drawTasks = function(diagram2, tasks2, sectionColor, masterX, masterY, maxTaskHeight, conf, maxEventCount, maxEventLineLength, maxSectionHeight, isWithoutSections) {\n  var _a;\n  for (const task of tasks2) {\n    const taskNode = {\n      descr: task.task,\n      section: sectionColor,\n      number: sectionColor,\n      width: 150,\n      padding: 20,\n      maxHeight: maxTaskHeight\n    };\n    log.debug(\"taskNode\", taskNode);\n    const taskWrapper = diagram2.append(\"g\").attr(\"class\", \"taskWrapper\");\n    const node = svgDraw.drawNode(taskWrapper, taskNode, sectionColor, conf);\n    const taskHeight = node.height;\n    log.debug(\"taskHeight after draw\", taskHeight);\n    taskWrapper.attr(\"transform\", `translate(${masterX}, ${masterY})`);\n    maxTaskHeight = Math.max(maxTaskHeight, taskHeight);\n    if (task.events) {\n      const lineWrapper = diagram2.append(\"g\").attr(\"class\", \"lineWrapper\");\n      let lineLength = maxTaskHeight;\n      masterY += 100;\n      lineLength = lineLength + drawEvents(diagram2, task.events, sectionColor, masterX, masterY, conf);\n      masterY -= 100;\n      lineWrapper.append(\"line\").attr(\"x1\", masterX + 190 / 2).attr(\"y1\", masterY + maxTaskHeight).attr(\"x2\", masterX + 190 / 2).attr(\n        \"y2\",\n        masterY + maxTaskHeight + (isWithoutSections ? maxTaskHeight : maxSectionHeight) + maxEventLineLength + 120\n      ).attr(\"stroke-width\", 2).attr(\"stroke\", \"black\").attr(\"marker-end\", \"url(#arrowhead)\").attr(\"stroke-dasharray\", \"5,5\");\n    }\n    masterX = masterX + 200;\n    if (isWithoutSections && !((_a = conf.timeline) == null ? void 0 : _a.disableMulticolor)) {\n      sectionColor++;\n    }\n  }\n  masterY = masterY - 10;\n};\nconst drawEvents = function(diagram2, events, sectionColor, masterX, masterY, conf) {\n  let maxEventHeight = 0;\n  const eventBeginY = masterY;\n  masterY = masterY + 100;\n  for (const event of events) {\n    const eventNode = {\n      descr: event,\n      section: sectionColor,\n      number: sectionColor,\n      width: 150,\n      padding: 20,\n      maxHeight: 50\n    };\n    log.debug(\"eventNode\", eventNode);\n    const eventWrapper = diagram2.append(\"g\").attr(\"class\", \"eventWrapper\");\n    const node = svgDraw.drawNode(eventWrapper, eventNode, sectionColor, conf);\n    const eventHeight = node.height;\n    maxEventHeight = maxEventHeight + eventHeight;\n    eventWrapper.attr(\"transform\", `translate(${masterX}, ${masterY})`);\n    masterY = masterY + 10 + eventHeight;\n  }\n  masterY = eventBeginY;\n  return maxEventHeight;\n};\nconst renderer = {\n  setConf: () => {\n  },\n  draw\n};\nconst genSections = (options) => {\n  let sections2 = \"\";\n  for (let i = 0; i < options.THEME_COLOR_LIMIT; i++) {\n    options[\"lineColor\" + i] = options[\"lineColor\" + i] || options[\"cScaleInv\" + i];\n    if (isDark(options[\"lineColor\" + i])) {\n      options[\"lineColor\" + i] = lighten(options[\"lineColor\" + i], 20);\n    } else {\n      options[\"lineColor\" + i] = darken(options[\"lineColor\" + i], 20);\n    }\n  }\n  for (let i = 0; i < options.THEME_COLOR_LIMIT; i++) {\n    const sw = \"\" + (17 - 3 * i);\n    sections2 += `\n    .section-${i - 1} rect, .section-${i - 1} path, .section-${i - 1} circle, .section-${i - 1} path  {\n      fill: ${options[\"cScale\" + i]};\n    }\n    .section-${i - 1} text {\n     fill: ${options[\"cScaleLabel\" + i]};\n    }\n    .node-icon-${i - 1} {\n      font-size: 40px;\n      color: ${options[\"cScaleLabel\" + i]};\n    }\n    .section-edge-${i - 1}{\n      stroke: ${options[\"cScale\" + i]};\n    }\n    .edge-depth-${i - 1}{\n      stroke-width: ${sw};\n    }\n    .section-${i - 1} line {\n      stroke: ${options[\"cScaleInv\" + i]} ;\n      stroke-width: 3;\n    }\n\n    .lineWrapper line{\n      stroke: ${options[\"cScaleLabel\" + i]} ;\n    }\n\n    .disabled, .disabled circle, .disabled text {\n      fill: lightgray;\n    }\n    .disabled text {\n      fill: #efefef;\n    }\n    `;\n  }\n  return sections2;\n};\nconst getStyles = (options) => `\n  .edge {\n    stroke-width: 3;\n  }\n  ${genSections(options)}\n  .section-root rect, .section-root path, .section-root circle  {\n    fill: ${options.git0};\n  }\n  .section-root text {\n    fill: ${options.gitBranchLabel0};\n  }\n  .icon-container {\n    height:100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n  .edge {\n    fill: none;\n  }\n  .eventWrapper  {\n   filter: brightness(120%);\n  }\n`;\nconst styles = getStyles;\nconst diagram = {\n  db,\n  renderer,\n  parser: parser$1,\n  styles\n};\nexport {\n  diagram\n};\n"]}