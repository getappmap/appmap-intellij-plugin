{"version":3,"sources":["../node_modules/mermaid/dist/pieDiagram-8a3498a8.js"],"names":["getConfig","clear"],"mappings":"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","file":"pieDiagram-8a3498a8-JMZCJMNM.js","sourcesContent":["import { B as defaultConfig, q as setDiagramTitle, t as getDiagramTitle, s as setAccTitle, g as getAccTitle, b as setAccDescription, a as getAccDescription, v as clear$1, d as sanitizeText, c as getConfig$1, l as log, C as cleanAndMerge, A as selectSvgElement, D as parseFontSize, i as configureSvgSize } from \"./mermaid-b5860b54.js\";\nimport { arc, scaleOrdinal, pie } from \"d3\";\nimport \"ts-dedent\";\nimport \"dayjs\";\nimport \"@braintree/sanitize-url\";\nimport \"dompurify\";\nimport \"khroma\";\nimport \"lodash-es/memoize.js\";\nimport \"lodash-es/merge.js\";\nimport \"stylis\";\nimport \"lodash-es/isEmpty.js\";\nvar parser = function() {\n  var o = function(k, v, o2, l) {\n    for (o2 = o2 || {}, l = k.length; l--; o2[k[l]] = v)\n      ;\n    return o2;\n  }, $V0 = [1, 3], $V1 = [1, 4], $V2 = [1, 5], $V3 = [1, 6], $V4 = [1, 10, 12, 14, 16, 18, 19, 20, 21, 22], $V5 = [2, 4], $V6 = [1, 5, 10, 12, 14, 16, 18, 19, 20, 21, 22], $V7 = [20, 21, 22], $V8 = [2, 7], $V9 = [1, 12], $Va = [1, 13], $Vb = [1, 14], $Vc = [1, 15], $Vd = [1, 16], $Ve = [1, 17];\n  var parser2 = {\n    trace: function trace() {\n    },\n    yy: {},\n    symbols_: { \"error\": 2, \"start\": 3, \"eol\": 4, \"PIE\": 5, \"document\": 6, \"showData\": 7, \"line\": 8, \"statement\": 9, \"txt\": 10, \"value\": 11, \"title\": 12, \"title_value\": 13, \"acc_title\": 14, \"acc_title_value\": 15, \"acc_descr\": 16, \"acc_descr_value\": 17, \"acc_descr_multiline_value\": 18, \"section\": 19, \"NEWLINE\": 20, \";\": 21, \"EOF\": 22, \"$accept\": 0, \"$end\": 1 },\n    terminals_: { 2: \"error\", 5: \"PIE\", 7: \"showData\", 10: \"txt\", 11: \"value\", 12: \"title\", 13: \"title_value\", 14: \"acc_title\", 15: \"acc_title_value\", 16: \"acc_descr\", 17: \"acc_descr_value\", 18: \"acc_descr_multiline_value\", 19: \"section\", 20: \"NEWLINE\", 21: \";\", 22: \"EOF\" },\n    productions_: [0, [3, 2], [3, 2], [3, 3], [6, 0], [6, 2], [8, 2], [9, 0], [9, 2], [9, 2], [9, 2], [9, 2], [9, 1], [9, 1], [4, 1], [4, 1], [4, 1]],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$) {\n      var $0 = $$.length - 1;\n      switch (yystate) {\n        case 3:\n          yy.setShowData(true);\n          break;\n        case 6:\n          this.$ = $$[$0 - 1];\n          break;\n        case 8:\n          yy.addSection($$[$0 - 1], yy.cleanupValue($$[$0]));\n          break;\n        case 9:\n          this.$ = $$[$0].trim();\n          yy.setDiagramTitle(this.$);\n          break;\n        case 10:\n          this.$ = $$[$0].trim();\n          yy.setAccTitle(this.$);\n          break;\n        case 11:\n        case 12:\n          this.$ = $$[$0].trim();\n          yy.setAccDescription(this.$);\n          break;\n        case 13:\n          yy.addSection($$[$0].substr(8));\n          this.$ = $$[$0].substr(8);\n          break;\n      }\n    },\n    table: [{ 3: 1, 4: 2, 5: $V0, 20: $V1, 21: $V2, 22: $V3 }, { 1: [3] }, { 3: 7, 4: 2, 5: $V0, 20: $V1, 21: $V2, 22: $V3 }, o($V4, $V5, { 6: 8, 7: [1, 9] }), o($V6, [2, 14]), o($V6, [2, 15]), o($V6, [2, 16]), { 1: [2, 1] }, o($V7, $V8, { 8: 10, 9: 11, 1: [2, 2], 10: $V9, 12: $Va, 14: $Vb, 16: $Vc, 18: $Vd, 19: $Ve }), o($V4, $V5, { 6: 18 }), o($V4, [2, 5]), { 4: 19, 20: $V1, 21: $V2, 22: $V3 }, { 11: [1, 20] }, { 13: [1, 21] }, { 15: [1, 22] }, { 17: [1, 23] }, o($V7, [2, 12]), o($V7, [2, 13]), o($V7, $V8, { 8: 10, 9: 11, 1: [2, 3], 10: $V9, 12: $Va, 14: $Vb, 16: $Vc, 18: $Vd, 19: $Ve }), o($V4, [2, 6]), o($V7, [2, 8]), o($V7, [2, 9]), o($V7, [2, 10]), o($V7, [2, 11])],\n    defaultActions: { 7: [2, 1] },\n    parseError: function parseError(str, hash) {\n      if (hash.recoverable) {\n        this.trace(str);\n      } else {\n        var error = new Error(str);\n        error.hash = hash;\n        throw error;\n      }\n    },\n    parse: function parse(input) {\n      var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = \"\", yylineno = 0, yyleng = 0, TERROR = 2, EOF = 1;\n      var args = lstack.slice.call(arguments, 1);\n      var lexer2 = Object.create(this.lexer);\n      var sharedState = { yy: {} };\n      for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n          sharedState.yy[k] = this.yy[k];\n        }\n      }\n      lexer2.setInput(input, sharedState.yy);\n      sharedState.yy.lexer = lexer2;\n      sharedState.yy.parser = this;\n      if (typeof lexer2.yylloc == \"undefined\") {\n        lexer2.yylloc = {};\n      }\n      var yyloc = lexer2.yylloc;\n      lstack.push(yyloc);\n      var ranges = lexer2.options && lexer2.options.ranges;\n      if (typeof sharedState.yy.parseError === \"function\") {\n        this.parseError = sharedState.yy.parseError;\n      } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n      }\n      function lex() {\n        var token;\n        token = tstack.pop() || lexer2.lex() || EOF;\n        if (typeof token !== \"number\") {\n          if (token instanceof Array) {\n            tstack = token;\n            token = tstack.pop();\n          }\n          token = self.symbols_[token] || token;\n        }\n        return token;\n      }\n      var symbol, state, action, r, yyval = {}, p, len, newState, expected;\n      while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n          action = this.defaultActions[state];\n        } else {\n          if (symbol === null || typeof symbol == \"undefined\") {\n            symbol = lex();\n          }\n          action = table[state] && table[state][symbol];\n        }\n        if (typeof action === \"undefined\" || !action.length || !action[0]) {\n          var errStr = \"\";\n          expected = [];\n          for (p in table[state]) {\n            if (this.terminals_[p] && p > TERROR) {\n              expected.push(\"'\" + this.terminals_[p] + \"'\");\n            }\n          }\n          if (lexer2.showPosition) {\n            errStr = \"Parse error on line \" + (yylineno + 1) + \":\\n\" + lexer2.showPosition() + \"\\nExpecting \" + expected.join(\", \") + \", got '\" + (this.terminals_[symbol] || symbol) + \"'\";\n          } else {\n            errStr = \"Parse error on line \" + (yylineno + 1) + \": Unexpected \" + (symbol == EOF ? \"end of input\" : \"'\" + (this.terminals_[symbol] || symbol) + \"'\");\n          }\n          this.parseError(errStr, {\n            text: lexer2.match,\n            token: this.terminals_[symbol] || symbol,\n            line: lexer2.yylineno,\n            loc: yyloc,\n            expected\n          });\n        }\n        if (action[0] instanceof Array && action.length > 1) {\n          throw new Error(\"Parse Error: multiple actions possible at state: \" + state + \", token: \" + symbol);\n        }\n        switch (action[0]) {\n          case 1:\n            stack.push(symbol);\n            vstack.push(lexer2.yytext);\n            lstack.push(lexer2.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            {\n              yyleng = lexer2.yyleng;\n              yytext = lexer2.yytext;\n              yylineno = lexer2.yylineno;\n              yyloc = lexer2.yylloc;\n            }\n            break;\n          case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n              first_line: lstack[lstack.length - (len || 1)].first_line,\n              last_line: lstack[lstack.length - 1].last_line,\n              first_column: lstack[lstack.length - (len || 1)].first_column,\n              last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n              yyval._$.range = [\n                lstack[lstack.length - (len || 1)].range[0],\n                lstack[lstack.length - 1].range[1]\n              ];\n            }\n            r = this.performAction.apply(yyval, [\n              yytext,\n              yyleng,\n              yylineno,\n              sharedState.yy,\n              action[1],\n              vstack,\n              lstack\n            ].concat(args));\n            if (typeof r !== \"undefined\") {\n              return r;\n            }\n            if (len) {\n              stack = stack.slice(0, -1 * len * 2);\n              vstack = vstack.slice(0, -1 * len);\n              lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n          case 3:\n            return true;\n        }\n      }\n      return true;\n    }\n  };\n  var lexer = function() {\n    var lexer2 = {\n      EOF: 1,\n      parseError: function parseError(str, hash) {\n        if (this.yy.parser) {\n          this.yy.parser.parseError(str, hash);\n        } else {\n          throw new Error(str);\n        }\n      },\n      // resets the lexer, sets new input\n      setInput: function(input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = \"\";\n        this.conditionStack = [\"INITIAL\"];\n        this.yylloc = {\n          first_line: 1,\n          first_column: 0,\n          last_line: 1,\n          last_column: 0\n        };\n        if (this.options.ranges) {\n          this.yylloc.range = [0, 0];\n        }\n        this.offset = 0;\n        return this;\n      },\n      // consumes and returns one char from the input\n      input: function() {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n          this.yylineno++;\n          this.yylloc.last_line++;\n        } else {\n          this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n          this.yylloc.range[1]++;\n        }\n        this._input = this._input.slice(1);\n        return ch;\n      },\n      // unshifts one char (or a string) into the input\n      unput: function(ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n        if (lines.length - 1) {\n          this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n        this.yylloc = {\n          first_line: this.yylloc.first_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.first_column,\n          last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len\n        };\n        if (this.options.ranges) {\n          this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n      },\n      // When called from action, caches matched text and appends it on next action\n      more: function() {\n        this._more = true;\n        return this;\n      },\n      // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\n      reject: function() {\n        if (this.options.backtrack_lexer) {\n          this._backtrack = true;\n        } else {\n          return this.parseError(\"Lexical error on line \" + (this.yylineno + 1) + \". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n\" + this.showPosition(), {\n            text: \"\",\n            token: null,\n            line: this.yylineno\n          });\n        }\n        return this;\n      },\n      // retain first n characters of the match\n      less: function(n) {\n        this.unput(this.match.slice(n));\n      },\n      // displays already matched input, i.e. for error messages\n      pastInput: function() {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? \"...\" : \"\") + past.substr(-20).replace(/\\n/g, \"\");\n      },\n      // displays upcoming input, i.e. for error messages\n      upcomingInput: function() {\n        var next = this.match;\n        if (next.length < 20) {\n          next += this._input.substr(0, 20 - next.length);\n        }\n        return (next.substr(0, 20) + (next.length > 20 ? \"...\" : \"\")).replace(/\\n/g, \"\");\n      },\n      // displays the character position where the lexing error occurred, i.e. for error messages\n      showPosition: function() {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n      },\n      // test the lexed token: return FALSE when not a match, otherwise return token\n      test_match: function(match, indexed_rule) {\n        var token, lines, backup;\n        if (this.options.backtrack_lexer) {\n          backup = {\n            yylineno: this.yylineno,\n            yylloc: {\n              first_line: this.yylloc.first_line,\n              last_line: this.last_line,\n              first_column: this.yylloc.first_column,\n              last_column: this.yylloc.last_column\n            },\n            yytext: this.yytext,\n            match: this.match,\n            matches: this.matches,\n            matched: this.matched,\n            yyleng: this.yyleng,\n            offset: this.offset,\n            _more: this._more,\n            _input: this._input,\n            yy: this.yy,\n            conditionStack: this.conditionStack.slice(0),\n            done: this.done\n          };\n          if (this.options.ranges) {\n            backup.yylloc.range = this.yylloc.range.slice(0);\n          }\n        }\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n          this.yylineno += lines.length;\n        }\n        this.yylloc = {\n          first_line: this.yylloc.last_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.last_column,\n          last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length : this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n          this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n          this.done = false;\n        }\n        if (token) {\n          return token;\n        } else if (this._backtrack) {\n          for (var k in backup) {\n            this[k] = backup[k];\n          }\n          return false;\n        }\n        return false;\n      },\n      // return next match in input\n      next: function() {\n        if (this.done) {\n          return this.EOF;\n        }\n        if (!this._input) {\n          this.done = true;\n        }\n        var token, match, tempMatch, index;\n        if (!this._more) {\n          this.yytext = \"\";\n          this.match = \"\";\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n          tempMatch = this._input.match(this.rules[rules[i]]);\n          if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n            match = tempMatch;\n            index = i;\n            if (this.options.backtrack_lexer) {\n              token = this.test_match(tempMatch, rules[i]);\n              if (token !== false) {\n                return token;\n              } else if (this._backtrack) {\n                match = false;\n                continue;\n              } else {\n                return false;\n              }\n            } else if (!this.options.flex) {\n              break;\n            }\n          }\n        }\n        if (match) {\n          token = this.test_match(match, rules[index]);\n          if (token !== false) {\n            return token;\n          }\n          return false;\n        }\n        if (this._input === \"\") {\n          return this.EOF;\n        } else {\n          return this.parseError(\"Lexical error on line \" + (this.yylineno + 1) + \". Unrecognized text.\\n\" + this.showPosition(), {\n            text: \"\",\n            token: null,\n            line: this.yylineno\n          });\n        }\n      },\n      // return next match that has a token\n      lex: function lex() {\n        var r = this.next();\n        if (r) {\n          return r;\n        } else {\n          return this.lex();\n        }\n      },\n      // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\n      begin: function begin(condition) {\n        this.conditionStack.push(condition);\n      },\n      // pop the previously active lexer condition state off the condition stack\n      popState: function popState() {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n          return this.conditionStack.pop();\n        } else {\n          return this.conditionStack[0];\n        }\n      },\n      // produce the lexer rule set which is active for the currently active lexer condition state\n      _currentRules: function _currentRules() {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n          return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n          return this.conditions[\"INITIAL\"].rules;\n        }\n      },\n      // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\n      topState: function topState(n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n          return this.conditionStack[n];\n        } else {\n          return \"INITIAL\";\n        }\n      },\n      // alias for begin(condition)\n      pushState: function pushState(condition) {\n        this.begin(condition);\n      },\n      // return the number of states currently on the stack\n      stateStackSize: function stateStackSize() {\n        return this.conditionStack.length;\n      },\n      options: { \"case-insensitive\": true },\n      performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {\n        switch ($avoiding_name_collisions) {\n          case 0:\n            break;\n          case 1:\n            break;\n          case 2:\n            return 20;\n          case 3:\n            break;\n          case 4:\n            break;\n          case 5:\n            this.begin(\"title\");\n            return 12;\n          case 6:\n            this.popState();\n            return \"title_value\";\n          case 7:\n            this.begin(\"acc_title\");\n            return 14;\n          case 8:\n            this.popState();\n            return \"acc_title_value\";\n          case 9:\n            this.begin(\"acc_descr\");\n            return 16;\n          case 10:\n            this.popState();\n            return \"acc_descr_value\";\n          case 11:\n            this.begin(\"acc_descr_multiline\");\n            break;\n          case 12:\n            this.popState();\n            break;\n          case 13:\n            return \"acc_descr_multiline_value\";\n          case 14:\n            this.begin(\"string\");\n            break;\n          case 15:\n            this.popState();\n            break;\n          case 16:\n            return \"txt\";\n          case 17:\n            return 5;\n          case 18:\n            return 7;\n          case 19:\n            return \"value\";\n          case 20:\n            return 22;\n        }\n      },\n      rules: [/^(?:%%(?!\\{)[^\\n]*)/i, /^(?:[^\\}]%%[^\\n]*)/i, /^(?:[\\n\\r]+)/i, /^(?:%%[^\\n]*)/i, /^(?:[\\s]+)/i, /^(?:title\\b)/i, /^(?:(?!\\n||)*[^\\n]*)/i, /^(?:accTitle\\s*:\\s*)/i, /^(?:(?!\\n||)*[^\\n]*)/i, /^(?:accDescr\\s*:\\s*)/i, /^(?:(?!\\n||)*[^\\n]*)/i, /^(?:accDescr\\s*\\{\\s*)/i, /^(?:[\\}])/i, /^(?:[^\\}]*)/i, /^(?:[\"])/i, /^(?:[\"])/i, /^(?:[^\"]*)/i, /^(?:pie\\b)/i, /^(?:showData\\b)/i, /^(?::[\\s]*[\\d]+(?:\\.[\\d]+)?)/i, /^(?:$)/i],\n      conditions: { \"acc_descr_multiline\": { \"rules\": [12, 13], \"inclusive\": false }, \"acc_descr\": { \"rules\": [10], \"inclusive\": false }, \"acc_title\": { \"rules\": [8], \"inclusive\": false }, \"title\": { \"rules\": [6], \"inclusive\": false }, \"string\": { \"rules\": [15, 16], \"inclusive\": false }, \"INITIAL\": { \"rules\": [0, 1, 2, 3, 4, 5, 7, 9, 11, 14, 17, 18, 19, 20], \"inclusive\": true } }\n    };\n    return lexer2;\n  }();\n  parser2.lexer = lexer;\n  function Parser() {\n    this.yy = {};\n  }\n  Parser.prototype = parser2;\n  parser2.Parser = Parser;\n  return new Parser();\n}();\nparser.parser = parser;\nconst parser$1 = parser;\nconst DEFAULT_PIE_CONFIG = defaultConfig.pie;\nconst DEFAULT_PIE_DB = {\n  sections: {},\n  showData: false,\n  config: DEFAULT_PIE_CONFIG\n};\nlet sections = DEFAULT_PIE_DB.sections;\nlet showData = DEFAULT_PIE_DB.showData;\nconst config = structuredClone(DEFAULT_PIE_CONFIG);\nconst getConfig = () => structuredClone(config);\nconst clear = () => {\n  sections = structuredClone(DEFAULT_PIE_DB.sections);\n  showData = DEFAULT_PIE_DB.showData;\n  clear$1();\n};\nconst addSection = (label, value) => {\n  label = sanitizeText(label, getConfig$1());\n  if (sections[label] === void 0) {\n    sections[label] = value;\n    log.debug(`added new section: ${label}, with value: ${value}`);\n  }\n};\nconst getSections = () => sections;\nconst cleanupValue = (value) => {\n  if (value.substring(0, 1) === \":\") {\n    value = value.substring(1).trim();\n  }\n  return Number(value.trim());\n};\nconst setShowData = (toggle) => {\n  showData = toggle;\n};\nconst getShowData = () => showData;\nconst db = {\n  getConfig,\n  clear,\n  setDiagramTitle,\n  getDiagramTitle,\n  setAccTitle,\n  getAccTitle,\n  setAccDescription,\n  getAccDescription,\n  addSection,\n  getSections,\n  cleanupValue,\n  setShowData,\n  getShowData\n};\nconst getStyles = (options) => `\n  .pieCircle{\n    stroke: ${options.pieStrokeColor};\n    stroke-width : ${options.pieStrokeWidth};\n    opacity : ${options.pieOpacity};\n  }\n  .pieOuterCircle{\n    stroke: ${options.pieOuterStrokeColor};\n    stroke-width: ${options.pieOuterStrokeWidth};\n    fill: none;\n  }\n  .pieTitleText {\n    text-anchor: middle;\n    font-size: ${options.pieTitleTextSize};\n    fill: ${options.pieTitleTextColor};\n    font-family: ${options.fontFamily};\n  }\n  .slice {\n    font-family: ${options.fontFamily};\n    fill: ${options.pieSectionTextColor};\n    font-size:${options.pieSectionTextSize};\n    // fill: white;\n  }\n  .legend text {\n    fill: ${options.pieLegendTextColor};\n    font-family: ${options.fontFamily};\n    font-size: ${options.pieLegendTextSize};\n  }\n`;\nconst styles = getStyles;\nconst createPieArcs = (sections2) => {\n  const pieData = Object.entries(sections2).map((element) => {\n    return {\n      label: element[0],\n      value: element[1]\n    };\n  }).sort((a, b) => {\n    return b.value - a.value;\n  });\n  const pie$1 = pie().value(\n    (d3Section) => d3Section.value\n  );\n  return pie$1(pieData);\n};\nconst draw = (text, id, _version, diagObj) => {\n  log.debug(\"rendering pie chart\\n\" + text);\n  const db2 = diagObj.db;\n  const globalConfig = getConfig$1();\n  const pieConfig = cleanAndMerge(db2.getConfig(), globalConfig.pie);\n  const MARGIN = 40;\n  const LEGEND_RECT_SIZE = 18;\n  const LEGEND_SPACING = 4;\n  const height = 450;\n  const pieWidth = height;\n  const svg = selectSvgElement(id);\n  const group = svg.append(\"g\");\n  const sections2 = db2.getSections();\n  group.attr(\"transform\", \"translate(\" + pieWidth / 2 + \",\" + height / 2 + \")\");\n  const { themeVariables } = globalConfig;\n  let [outerStrokeWidth] = parseFontSize(themeVariables.pieOuterStrokeWidth);\n  outerStrokeWidth ?? (outerStrokeWidth = 2);\n  const textPosition = pieConfig.textPosition;\n  const radius = Math.min(pieWidth, height) / 2 - MARGIN;\n  const arcGenerator = arc().innerRadius(0).outerRadius(radius);\n  const labelArcGenerator = arc().innerRadius(radius * textPosition).outerRadius(radius * textPosition);\n  group.append(\"circle\").attr(\"cx\", 0).attr(\"cy\", 0).attr(\"r\", radius + outerStrokeWidth / 2).attr(\"class\", \"pieOuterCircle\");\n  const arcs = createPieArcs(sections2);\n  const myGeneratedColors = [\n    themeVariables.pie1,\n    themeVariables.pie2,\n    themeVariables.pie3,\n    themeVariables.pie4,\n    themeVariables.pie5,\n    themeVariables.pie6,\n    themeVariables.pie7,\n    themeVariables.pie8,\n    themeVariables.pie9,\n    themeVariables.pie10,\n    themeVariables.pie11,\n    themeVariables.pie12\n  ];\n  const color = scaleOrdinal(myGeneratedColors);\n  group.selectAll(\"mySlices\").data(arcs).enter().append(\"path\").attr(\"d\", arcGenerator).attr(\"fill\", (datum) => {\n    return color(datum.data.label);\n  }).attr(\"class\", \"pieCircle\");\n  let sum = 0;\n  Object.keys(sections2).forEach((key) => {\n    sum += sections2[key];\n  });\n  group.selectAll(\"mySlices\").data(arcs).enter().append(\"text\").text((datum) => {\n    return (datum.data.value / sum * 100).toFixed(0) + \"%\";\n  }).attr(\"transform\", (datum) => {\n    return \"translate(\" + labelArcGenerator.centroid(datum) + \")\";\n  }).style(\"text-anchor\", \"middle\").attr(\"class\", \"slice\");\n  group.append(\"text\").text(db2.getDiagramTitle()).attr(\"x\", 0).attr(\"y\", -(height - 50) / 2).attr(\"class\", \"pieTitleText\");\n  const legend = group.selectAll(\".legend\").data(color.domain()).enter().append(\"g\").attr(\"class\", \"legend\").attr(\"transform\", (_datum, index) => {\n    const height2 = LEGEND_RECT_SIZE + LEGEND_SPACING;\n    const offset = height2 * color.domain().length / 2;\n    const horizontal = 12 * LEGEND_RECT_SIZE;\n    const vertical = index * height2 - offset;\n    return \"translate(\" + horizontal + \",\" + vertical + \")\";\n  });\n  legend.append(\"rect\").attr(\"width\", LEGEND_RECT_SIZE).attr(\"height\", LEGEND_RECT_SIZE).style(\"fill\", color).style(\"stroke\", color);\n  legend.data(arcs).append(\"text\").attr(\"x\", LEGEND_RECT_SIZE + LEGEND_SPACING).attr(\"y\", LEGEND_RECT_SIZE - LEGEND_SPACING).text((datum) => {\n    const { label, value } = datum.data;\n    if (db2.getShowData()) {\n      return `${label} [${value}]`;\n    }\n    return label;\n  });\n  const longestTextWidth = Math.max(\n    ...legend.selectAll(\"text\").nodes().map((node) => (node == null ? void 0 : node.getBoundingClientRect().width) ?? 0)\n  );\n  const totalWidth = pieWidth + MARGIN + LEGEND_RECT_SIZE + LEGEND_SPACING + longestTextWidth;\n  svg.attr(\"viewBox\", `0 0 ${totalWidth} ${height}`);\n  configureSvgSize(svg, height, totalWidth, pieConfig.useMaxWidth);\n};\nconst renderer = { draw };\nconst diagram = {\n  parser: parser$1,\n  db,\n  renderer,\n  styles\n};\nexport {\n  diagram\n};\n"]}