{"version":3,"sources":["../node_modules/mermaid/dist/journeyDiagram-49397b02.js"],"names":["clear","drawRect","drawText","drawBackgroundRect"],"mappings":";;;;;AAAA,iBAAA,EAAA,CAAA;AAGO,OAAA,CAAA,YAAA,EAAA,EAAA,CAAA,EAAA;AACA,OAAA,CAAA,iBAAA,EAAA,EAAA,CAAA,EAAA;AACA,OAAA,CAAA,aAAA,EAAA,EAAA,CAAA,EAAA;AACA,OAAA,CAAA,cAAA,EAAA,EAAA,CAAA,EAAA;AAMP,IAAI,SAAS,WAAW;AACtB,EAAA,IAAI,CAAI,GAAA,SAAS,CAAG,EAAA,CAAA,EAAG,IAAI,CAAG,EAAA;AAC5B,IAAA,KAAK,EAAK,GAAA,EAAA,IAAM,EAAC,EAAG,CAAI,GAAA,CAAA,CAAE,MAAQ,EAAA,CAAA,EAAA,EAAK,EAAG,CAAA,CAAA,CAAE,CAAC,CAAC,CAAI,GAAA,CAAA;AAChD,MAAA,CAAA;AACF,IAAO,OAAA,EAAA,CAAA;AAAA,KACN,GAAM,GAAA,CAAC,GAAG,CAAG,EAAA,EAAA,EAAI,IAAI,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,EAAE,CAAG,EAAA,GAAA,GAAM,CAAC,CAAG,EAAA,CAAC,GAAG,GAAM,GAAA,CAAC,CAAG,EAAA,EAAE,GAAG,GAAM,GAAA,CAAC,GAAG,EAAE,CAAA,EAAG,MAAM,CAAC,CAAA,EAAG,EAAE,CAAG,EAAA,GAAA,GAAM,CAAC,CAAG,EAAA,EAAE,GAAG,GAAM,GAAA,CAAC,GAAG,EAAE,CAAA,CAAA;AACnI,EAAA,IAAI,OAAU,GAAA;AAAA,IACZ,KAAA,EAAO,SAAS,KAAQ,GAAA;AAAA,KACxB;AAAA,IACA,IAAI,EAAC;AAAA,IACL,UAAU,EAAE,OAAA,EAAS,GAAG,OAAS,EAAA,CAAA,EAAG,WAAW,CAAG,EAAA,UAAA,EAAY,CAAG,EAAA,KAAA,EAAO,GAAG,MAAQ,EAAA,CAAA,EAAG,SAAS,CAAG,EAAA,WAAA,EAAa,GAAG,SAAW,EAAA,EAAA,EAAI,OAAS,EAAA,EAAA,EAAI,aAAa,EAAI,EAAA,iBAAA,EAAmB,IAAI,WAAa,EAAA,EAAA,EAAI,mBAAmB,EAAI,EAAA,2BAAA,EAA6B,IAAI,SAAW,EAAA,EAAA,EAAI,YAAY,EAAI,EAAA,UAAA,EAAY,IAAI,SAAW,EAAA,CAAA,EAAG,QAAQ,CAAE,EAAA;AAAA,IACtU,UAAY,EAAA,EAAE,CAAG,EAAA,OAAA,EAAS,CAAG,EAAA,SAAA,EAAW,CAAG,EAAA,KAAA,EAAO,CAAG,EAAA,OAAA,EAAS,EAAI,EAAA,SAAA,EAAW,EAAI,EAAA,OAAA,EAAS,EAAI,EAAA,WAAA,EAAa,EAAI,EAAA,iBAAA,EAAmB,EAAI,EAAA,WAAA,EAAa,EAAI,EAAA,iBAAA,EAAmB,EAAI,EAAA,2BAAA,EAA6B,EAAI,EAAA,SAAA,EAAW,EAAI,EAAA,UAAA,EAAY,IAAI,UAAW,EAAA;AAAA,IACzP,YAAA,EAAc,CAAC,CAAA,EAAG,CAAC,CAAA,EAAG,CAAC,CAAG,EAAA,CAAC,CAAG,EAAA,CAAC,CAAG,EAAA,CAAC,GAAG,CAAC,CAAA,EAAG,CAAC,CAAA,EAAG,CAAC,CAAA,EAAG,CAAC,CAAA,EAAG,CAAC,CAAA,EAAG,CAAC,CAAA,EAAG,CAAC,CAAA,EAAG,CAAC,CAAG,EAAA,CAAC,CAAG,EAAA,CAAC,CAAG,EAAA,CAAC,GAAG,CAAC,CAAA,EAAG,CAAC,CAAA,EAAG,CAAC,CAAA,EAAG,CAAC,CAAG,EAAA,CAAC,CAAG,EAAA,CAAC,CAAG,EAAA,CAAC,CAAG,EAAA,CAAC,CAAG,EAAA,CAAC,CAAG,EAAA,CAAC,CAAC,CAAA;AAAA,IACxH,aAAA,EAAe,SAAS,SAAU,CAAA,MAAA,EAAQ,QAAQ,QAAU,EAAA,EAAA,EAAI,OAAS,EAAA,EAAA,EAAI,EAAI,EAAA;AAC/E,MAAI,IAAA,EAAA,GAAK,GAAG,MAAS,GAAA,CAAA,CAAA;AACrB,MAAA,QAAQ,OAAS;AAAA,QACf,KAAK,CAAA;AACH,UAAO,OAAA,EAAA,CAAG,KAAK,CAAC,CAAA,CAAA;AAAA,QAClB,KAAK,CAAA;AACH,UAAA,IAAA,CAAK,IAAI,EAAC,CAAA;AACV,UAAA,MAAA;AAAA,QACF,KAAK,CAAA;AACH,UAAA,EAAA,CAAG,KAAK,CAAC,CAAA,CAAE,IAAK,CAAA,EAAA,CAAG,EAAE,CAAC,CAAA,CAAA;AACtB,UAAK,IAAA,CAAA,CAAA,GAAI,EAAG,CAAA,EAAA,GAAK,CAAC,CAAA,CAAA;AAClB,UAAA,MAAA;AAAA,QACF,KAAK,CAAA,CAAA;AAAA,QACL,KAAK,CAAA;AACH,UAAK,IAAA,CAAA,CAAA,GAAI,GAAG,EAAE,CAAA,CAAA;AACd,UAAA,MAAA;AAAA,QACF,KAAK,CAAA,CAAA;AAAA,QACL,KAAK,CAAA;AACH,UAAA,IAAA,CAAK,IAAI,EAAC,CAAA;AACV,UAAA,MAAA;AAAA,QACF,KAAK,CAAA;AACH,UAAA,EAAA,CAAG,gBAAgB,EAAG,CAAA,EAAE,CAAE,CAAA,MAAA,CAAO,CAAC,CAAC,CAAA,CAAA;AACnC,UAAA,IAAA,CAAK,CAAI,GAAA,EAAA,CAAG,EAAE,CAAA,CAAE,OAAO,CAAC,CAAA,CAAA;AACxB,UAAA,MAAA;AAAA,QACF,KAAK,CAAA;AACH,UAAA,IAAA,CAAK,CAAI,GAAA,EAAA,CAAG,EAAE,CAAA,CAAE,IAAK,EAAA,CAAA;AACrB,UAAG,EAAA,CAAA,WAAA,CAAY,KAAK,CAAC,CAAA,CAAA;AACrB,UAAA,MAAA;AAAA,QACF,KAAK,EAAA,CAAA;AAAA,QACL,KAAK,EAAA;AACH,UAAA,IAAA,CAAK,CAAI,GAAA,EAAA,CAAG,EAAE,CAAA,CAAE,IAAK,EAAA,CAAA;AACrB,UAAG,EAAA,CAAA,iBAAA,CAAkB,KAAK,CAAC,CAAA,CAAA;AAC3B,UAAA,MAAA;AAAA,QACF,KAAK,EAAA;AACH,UAAA,EAAA,CAAG,WAAW,EAAG,CAAA,EAAE,CAAE,CAAA,MAAA,CAAO,CAAC,CAAC,CAAA,CAAA;AAC9B,UAAA,IAAA,CAAK,CAAI,GAAA,EAAA,CAAG,EAAE,CAAA,CAAE,OAAO,CAAC,CAAA,CAAA;AACxB,UAAA,MAAA;AAAA,QACF,KAAK,EAAA;AACH,UAAA,EAAA,CAAG,QAAQ,EAAG,CAAA,EAAA,GAAK,CAAC,CAAG,EAAA,EAAA,CAAG,EAAE,CAAC,CAAA,CAAA;AAC7B,UAAA,IAAA,CAAK,CAAI,GAAA,MAAA,CAAA;AACT,UAAA,MAAA;AAAA,OACJ;AAAA,KACF;AAAA,IACA,OAAO,CAAC,EAAE,GAAG,CAAG,EAAA,CAAA,EAAG,CAAC,CAAG,EAAA,CAAC,GAAK,EAAA,EAAE,GAAG,CAAC,CAAC,GAAK,EAAA,CAAA,CAAE,KAAK,CAAC,CAAA,EAAG,CAAC,CAAA,EAAG,EAAE,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,EAAE,GAAG,CAAC,CAAA,EAAG,CAAC,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAC,GAAG,CAAC,CAAA,EAAG,GAAG,CAAG,EAAA,EAAA,EAAI,CAAC,CAAA,EAAG,CAAC,CAAG,EAAA,EAAA,EAAI,KAAK,EAAI,EAAA,GAAA,EAAK,IAAI,GAAK,EAAA,EAAA,EAAI,KAAK,EAAI,EAAA,GAAA,EAAK,IAAI,GAAI,EAAA,EAAG,EAAE,GAAK,EAAA,CAAC,GAAG,CAAC,CAAA,EAAG,EAAE,CAAA,EAAG,CAAC,CAAG,EAAA,CAAC,GAAG,CAAA,EAAG,EAAE,GAAK,EAAA,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAA,EAAG,IAAI,EAAI,EAAA,GAAA,EAAK,IAAI,GAAK,EAAA,EAAA,EAAI,GAAK,EAAA,EAAA,EAAI,KAAK,EAAI,EAAA,GAAA,EAAK,IAAI,GAAI,EAAA,EAAG,EAAE,GAAK,EAAA,CAAC,GAAG,CAAC,CAAC,GAAG,CAAE,CAAA,GAAA,EAAK,CAAC,CAAG,EAAA,CAAC,CAAC,CAAG,EAAA,CAAA,CAAE,GAAK,EAAA,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAA,EAAI,CAAC,CAAG,EAAA,EAAE,GAAK,EAAA,EAAE,IAAI,CAAC,CAAA,EAAG,EAAE,CAAE,EAAA,EAAG,EAAE,GAAK,EAAA,CAAC,CAAG,EAAA,EAAE,CAAC,CAAG,EAAA,CAAA,CAAE,KAAK,CAAC,CAAA,EAAG,EAAE,CAAC,CAAA,EAAG,EAAE,EAAI,EAAA,CAAC,GAAG,EAAE,CAAA,IAAK,CAAE,CAAA,GAAA,EAAK,CAAC,CAAG,EAAA,CAAC,CAAC,CAAG,EAAA,CAAA,CAAE,KAAK,CAAC,CAAA,EAAG,CAAC,CAAC,CAAA,EAAG,EAAE,GAAK,EAAA,CAAC,GAAG,EAAE,CAAC,GAAG,CAAE,CAAA,GAAA,EAAK,CAAC,CAAG,EAAA,EAAE,CAAC,CAAC,CAAA;AAAA,IAChe,gBAAgB,EAAC;AAAA,IACjB,UAAY,EAAA,SAAS,UAAW,CAAA,GAAA,EAAK,IAAM,EAAA;AACzC,MAAA,IAAI,KAAK,WAAa,EAAA;AACpB,QAAA,IAAA,CAAK,MAAM,GAAG,CAAA,CAAA;AAAA,OACT,MAAA;AACL,QAAI,IAAA,KAAA,GAAQ,IAAI,KAAA,CAAM,GAAG,CAAA,CAAA;AACzB,QAAA,KAAA,CAAM,IAAO,GAAA,IAAA,CAAA;AACb,QAAM,MAAA,KAAA,CAAA;AAAA,OACR;AAAA,KACF;AAAA,IACA,KAAA,EAAO,SAAS,KAAA,CAAM,KAAO,EAAA;AAC3B,MAAI,IAAA,IAAA,GAAO,IAAM,EAAA,KAAA,GAAQ,CAAC,CAAC,CAAG,EAAA,MAAA,GAAS,EAAC,EAAG,MAAS,GAAA,CAAC,IAAI,CAAA,EAAG,MAAS,GAAA,EAAI,EAAA,KAAA,GAAQ,IAAK,CAAA,KAAA,EAAO,MAAS,GAAA,EAAA,EAAI,QAAW,GAAA,CAAA,EAAG,MAAS,GAAA,CAAA,EAAG,MAAS,GAAA,CAAA,EAAG,GAAM,GAAA,CAAA,CAAA;AACtJ,MAAA,IAAI,IAAO,GAAA,MAAA,CAAO,KAAM,CAAA,IAAA,CAAK,WAAW,CAAC,CAAA,CAAA;AACzC,MAAA,IAAI,MAAS,GAAA,MAAA,CAAO,MAAO,CAAA,IAAA,CAAK,KAAK,CAAA,CAAA;AACrC,MAAA,IAAI,WAAc,GAAA,EAAE,EAAI,EAAA,EAAG,EAAA,CAAA;AAC3B,MAAS,KAAA,IAAA,CAAA,IAAK,KAAK,EAAI,EAAA;AACrB,QAAA,IAAI,OAAO,SAAU,CAAA,cAAA,CAAe,KAAK,IAAK,CAAA,EAAA,EAAI,CAAC,CAAG,EAAA;AACpD,UAAA,WAAA,CAAY,EAAG,CAAA,CAAC,CAAI,GAAA,IAAA,CAAK,GAAG,CAAC,CAAA,CAAA;AAAA,SAC/B;AAAA,OACF;AACA,MAAO,MAAA,CAAA,QAAA,CAAS,KAAO,EAAA,WAAA,CAAY,EAAE,CAAA,CAAA;AACrC,MAAA,WAAA,CAAY,GAAG,KAAQ,GAAA,MAAA,CAAA;AACvB,MAAA,WAAA,CAAY,GAAG,MAAS,GAAA,IAAA,CAAA;AACxB,MAAI,IAAA,OAAO,MAAO,CAAA,MAAA,IAAU,WAAa,EAAA;AACvC,QAAA,MAAA,CAAO,SAAS,EAAC,CAAA;AAAA,OACnB;AACA,MAAA,IAAI,QAAQ,MAAO,CAAA,MAAA,CAAA;AACnB,MAAA,MAAA,CAAO,KAAK,KAAK,CAAA,CAAA;AACjB,MAAA,IAAI,MAAS,GAAA,MAAA,CAAO,OAAW,IAAA,MAAA,CAAO,OAAQ,CAAA,MAAA,CAAA;AAC9C,MAAA,IAAI,OAAO,WAAA,CAAY,EAAG,CAAA,UAAA,KAAe,UAAY,EAAA;AACnD,QAAK,IAAA,CAAA,UAAA,GAAa,YAAY,EAAG,CAAA,UAAA,CAAA;AAAA,OAC5B,MAAA;AACL,QAAA,IAAA,CAAK,UAAa,GAAA,MAAA,CAAO,cAAe,CAAA,IAAI,CAAE,CAAA,UAAA,CAAA;AAAA,OAChD;AACA,MAAA,SAAS,GAAM,GAAA;AACb,QAAI,IAAA,KAAA,CAAA;AACJ,QAAA,KAAA,GAAQ,MAAO,CAAA,GAAA,EAAS,IAAA,MAAA,CAAO,KAAS,IAAA,GAAA,CAAA;AACxC,QAAI,IAAA,OAAO,UAAU,QAAU,EAAA;AAC7B,UAAA,IAAI,iBAAiB,KAAO,EAAA;AAC1B,YAAS,MAAA,GAAA,KAAA,CAAA;AACT,YAAA,KAAA,GAAQ,OAAO,GAAI,EAAA,CAAA;AAAA,WACrB;AACA,UAAQ,KAAA,GAAA,IAAA,CAAK,QAAS,CAAA,KAAK,CAAK,IAAA,KAAA,CAAA;AAAA,SAClC;AACA,QAAO,OAAA,KAAA,CAAA;AAAA,OACT;AACA,MAAI,IAAA,MAAA,EAAQ,OAAO,MAAQ,EAAA,CAAA,EAAG,QAAQ,EAAC,EAAG,CAAG,EAAA,GAAA,EAAK,QAAU,EAAA,QAAA,CAAA;AAC5D,MAAA,OAAO,IAAM,EAAA;AACX,QAAQ,KAAA,GAAA,KAAA,CAAM,KAAM,CAAA,MAAA,GAAS,CAAC,CAAA,CAAA;AAC9B,QAAI,IAAA,IAAA,CAAK,cAAe,CAAA,KAAK,CAAG,EAAA;AAC9B,UAAS,MAAA,GAAA,IAAA,CAAK,eAAe,KAAK,CAAA,CAAA;AAAA,SAC7B,MAAA;AACL,UAAA,IAAI,MAAW,KAAA,IAAA,IAAQ,OAAO,MAAA,IAAU,WAAa,EAAA;AACnD,YAAA,MAAA,GAAS,GAAI,EAAA,CAAA;AAAA,WACf;AACA,UAAA,MAAA,GAAS,MAAM,KAAK,CAAA,IAAK,KAAM,CAAA,KAAK,EAAE,MAAM,CAAA,CAAA;AAAA,SAC9C;AACA,QAAI,IAAA,OAAO,WAAW,WAAe,IAAA,CAAC,OAAO,MAAU,IAAA,CAAC,MAAO,CAAA,CAAC,CAAG,EAAA;AACjE,UAAA,IAAI,MAAS,GAAA,EAAA,CAAA;AACb,UAAA,QAAA,GAAW,EAAC,CAAA;AACZ,UAAK,KAAA,CAAA,IAAK,KAAM,CAAA,KAAK,CAAG,EAAA;AACtB,YAAA,IAAI,IAAK,CAAA,UAAA,CAAW,CAAC,CAAA,IAAK,IAAI,MAAQ,EAAA;AACpC,cAAA,QAAA,CAAS,KAAK,GAAM,GAAA,IAAA,CAAK,UAAW,CAAA,CAAC,IAAI,GAAG,CAAA,CAAA;AAAA,aAC9C;AAAA,WACF;AACA,UAAA,IAAI,OAAO,YAAc,EAAA;AACvB,YAAA,MAAA,GAAS,0BAA0B,QAAW,GAAA,CAAA,CAAA,GAAK,KAAQ,GAAA,MAAA,CAAO,cAAiB,GAAA,cAAA,GAAiB,QAAS,CAAA,IAAA,CAAK,IAAI,CAAI,GAAA,SAAA,IAAa,KAAK,UAAW,CAAA,MAAM,KAAK,MAAU,CAAA,GAAA,GAAA,CAAA;AAAA,WACvK,MAAA;AACL,YAAA,MAAA,GAAS,sBAA0B,IAAA,QAAA,GAAW,CAAK,CAAA,GAAA,eAAA,IAAmB,MAAU,IAAA,GAAA,GAAM,cAAiB,GAAA,GAAA,IAAO,IAAK,CAAA,UAAA,CAAW,MAAM,CAAA,IAAK,MAAU,CAAA,GAAA,GAAA,CAAA,CAAA;AAAA,WACrJ;AACA,UAAA,IAAA,CAAK,WAAW,MAAQ,EAAA;AAAA,YACtB,MAAM,MAAO,CAAA,KAAA;AAAA,YACb,KAAO,EAAA,IAAA,CAAK,UAAW,CAAA,MAAM,CAAK,IAAA,MAAA;AAAA,YAClC,MAAM,MAAO,CAAA,QAAA;AAAA,YACb,GAAK,EAAA,KAAA;AAAA,YACL,QAAA;AAAA,WACD,CAAA,CAAA;AAAA,SACH;AACA,QAAA,IAAI,OAAO,CAAC,CAAA,YAAa,KAAS,IAAA,MAAA,CAAO,SAAS,CAAG,EAAA;AACnD,UAAA,MAAM,IAAI,KAAA,CAAM,mDAAsD,GAAA,KAAA,GAAQ,cAAc,MAAM,CAAA,CAAA;AAAA,SACpG;AACA,QAAQ,QAAA,MAAA,CAAO,CAAC,CAAG;AAAA,UACjB,KAAK,CAAA;AACH,YAAA,KAAA,CAAM,KAAK,MAAM,CAAA,CAAA;AACjB,YAAO,MAAA,CAAA,IAAA,CAAK,OAAO,MAAM,CAAA,CAAA;AACzB,YAAO,MAAA,CAAA,IAAA,CAAK,OAAO,MAAM,CAAA,CAAA;AACzB,YAAM,KAAA,CAAA,IAAA,CAAK,MAAO,CAAA,CAAC,CAAC,CAAA,CAAA;AACpB,YAAS,MAAA,GAAA,IAAA,CAAA;AACT,YAAA;AACE,cAAA,MAAA,GAAS,MAAO,CAAA,MAAA,CAAA;AAChB,cAAA,MAAA,GAAS,MAAO,CAAA,MAAA,CAAA;AAChB,cAAA,QAAA,GAAW,MAAO,CAAA,QAAA,CAAA;AAClB,cAAA,KAAA,GAAQ,MAAO,CAAA,MAAA,CAAA;AAAA,aACjB;AACA,YAAA,MAAA;AAAA,UACF,KAAK,CAAA;AACH,YAAA,GAAA,GAAM,KAAK,YAAa,CAAA,MAAA,CAAO,CAAC,CAAC,EAAE,CAAC,CAAA,CAAA;AACpC,YAAA,KAAA,CAAM,CAAI,GAAA,MAAA,CAAO,MAAO,CAAA,MAAA,GAAS,GAAG,CAAA,CAAA;AACpC,YAAA,KAAA,CAAM,EAAK,GAAA;AAAA,cACT,YAAY,MAAO,CAAA,MAAA,CAAO,MAAU,IAAA,GAAA,IAAO,EAAE,CAAE,CAAA,UAAA;AAAA,cAC/C,SAAW,EAAA,MAAA,CAAO,MAAO,CAAA,MAAA,GAAS,CAAC,CAAE,CAAA,SAAA;AAAA,cACrC,cAAc,MAAO,CAAA,MAAA,CAAO,MAAU,IAAA,GAAA,IAAO,EAAE,CAAE,CAAA,YAAA;AAAA,cACjD,WAAa,EAAA,MAAA,CAAO,MAAO,CAAA,MAAA,GAAS,CAAC,CAAE,CAAA,WAAA;AAAA,aACzC,CAAA;AACA,YAAA,IAAI,MAAQ,EAAA;AACV,cAAA,KAAA,CAAM,GAAG,KAAQ,GAAA;AAAA,gBACf,OAAO,MAAO,CAAA,MAAA,IAAU,OAAO,CAAE,CAAA,CAAA,CAAE,MAAM,CAAC,CAAA;AAAA,gBAC1C,OAAO,MAAO,CAAA,MAAA,GAAS,CAAC,CAAA,CAAE,MAAM,CAAC,CAAA;AAAA,eACnC,CAAA;AAAA,aACF;AACA,YAAI,CAAA,GAAA,IAAA,CAAK,aAAc,CAAA,KAAA,CAAM,KAAO,EAAA;AAAA,cAClC,MAAA;AAAA,cACA,MAAA;AAAA,cACA,QAAA;AAAA,cACA,WAAY,CAAA,EAAA;AAAA,cACZ,OAAO,CAAC,CAAA;AAAA,cACR,MAAA;AAAA,cACA,MAAA;AAAA,aACF,CAAE,MAAO,CAAA,IAAI,CAAC,CAAA,CAAA;AACd,YAAI,IAAA,OAAO,MAAM,WAAa,EAAA;AAC5B,cAAO,OAAA,CAAA,CAAA;AAAA,aACT;AACA,YAAA,IAAI,GAAK,EAAA;AACP,cAAA,KAAA,GAAQ,KAAM,CAAA,KAAA,CAAM,CAAG,EAAA,CAAA,CAAA,GAAK,MAAM,CAAC,CAAA,CAAA;AACnC,cAAA,MAAA,GAAS,MAAO,CAAA,KAAA,CAAM,CAAG,EAAA,CAAA,CAAA,GAAK,GAAG,CAAA,CAAA;AACjC,cAAA,MAAA,GAAS,MAAO,CAAA,KAAA,CAAM,CAAG,EAAA,CAAA,CAAA,GAAK,GAAG,CAAA,CAAA;AAAA,aACnC;AACA,YAAM,KAAA,CAAA,IAAA,CAAK,KAAK,YAAa,CAAA,MAAA,CAAO,CAAC,CAAC,CAAA,CAAE,CAAC,CAAC,CAAA,CAAA;AAC1C,YAAO,MAAA,CAAA,IAAA,CAAK,MAAM,CAAC,CAAA,CAAA;AACnB,YAAO,MAAA,CAAA,IAAA,CAAK,MAAM,EAAE,CAAA,CAAA;AACpB,YAAW,QAAA,GAAA,KAAA,CAAM,KAAM,CAAA,KAAA,CAAM,MAAS,GAAA,CAAC,CAAC,CAAA,CAAE,KAAM,CAAA,KAAA,CAAM,MAAS,GAAA,CAAC,CAAC,CAAA,CAAA;AACjE,YAAA,KAAA,CAAM,KAAK,QAAQ,CAAA,CAAA;AACnB,YAAA,MAAA;AAAA,UACF,KAAK,CAAA;AACH,YAAO,OAAA,IAAA,CAAA;AAAA,SACX;AAAA,OACF;AACA,MAAO,OAAA,IAAA,CAAA;AAAA,KACT;AAAA,GACF,CAAA;AACA,EAAA,IAAI,wBAAmB,WAAA;AACrB,IAAA,IAAI,MAAS,GAAA;AAAA,MACX,GAAK,EAAA,CAAA;AAAA,MACL,UAAY,EAAA,SAAS,UAAW,CAAA,GAAA,EAAK,IAAM,EAAA;AACzC,QAAI,IAAA,IAAA,CAAK,GAAG,MAAQ,EAAA;AAClB,UAAA,IAAA,CAAK,EAAG,CAAA,MAAA,CAAO,UAAW,CAAA,GAAA,EAAK,IAAI,CAAA,CAAA;AAAA,SAC9B,MAAA;AACL,UAAM,MAAA,IAAI,MAAM,GAAG,CAAA,CAAA;AAAA,SACrB;AAAA,OACF;AAAA;AAAA,MAEA,QAAA,EAAU,SAAS,KAAA,EAAO,EAAI,EAAA;AAC5B,QAAA,IAAA,CAAK,EAAK,GAAA,EAAA,IAAM,IAAK,CAAA,EAAA,IAAM,EAAC,CAAA;AAC5B,QAAA,IAAA,CAAK,MAAS,GAAA,KAAA,CAAA;AACd,QAAA,IAAA,CAAK,KAAQ,GAAA,IAAA,CAAK,UAAa,GAAA,IAAA,CAAK,IAAO,GAAA,KAAA,CAAA;AAC3C,QAAK,IAAA,CAAA,QAAA,GAAW,KAAK,MAAS,GAAA,CAAA,CAAA;AAC9B,QAAA,IAAA,CAAK,MAAS,GAAA,IAAA,CAAK,OAAU,GAAA,IAAA,CAAK,KAAQ,GAAA,EAAA,CAAA;AAC1C,QAAK,IAAA,CAAA,cAAA,GAAiB,CAAC,SAAS,CAAA,CAAA;AAChC,QAAA,IAAA,CAAK,MAAS,GAAA;AAAA,UACZ,UAAY,EAAA,CAAA;AAAA,UACZ,YAAc,EAAA,CAAA;AAAA,UACd,SAAW,EAAA,CAAA;AAAA,UACX,WAAa,EAAA,CAAA;AAAA,SACf,CAAA;AACA,QAAI,IAAA,IAAA,CAAK,QAAQ,MAAQ,EAAA;AACvB,UAAA,IAAA,CAAK,MAAO,CAAA,KAAA,GAAQ,CAAC,CAAA,EAAG,CAAC,CAAA,CAAA;AAAA,SAC3B;AACA,QAAA,IAAA,CAAK,MAAS,GAAA,CAAA,CAAA;AACd,QAAO,OAAA,IAAA,CAAA;AAAA,OACT;AAAA;AAAA,MAEA,OAAO,WAAW;AAChB,QAAI,IAAA,EAAA,GAAK,IAAK,CAAA,MAAA,CAAO,CAAC,CAAA,CAAA;AACtB,QAAA,IAAA,CAAK,MAAU,IAAA,EAAA,CAAA;AACf,QAAK,IAAA,CAAA,MAAA,EAAA,CAAA;AACL,QAAK,IAAA,CAAA,MAAA,EAAA,CAAA;AACL,QAAA,IAAA,CAAK,KAAS,IAAA,EAAA,CAAA;AACd,QAAA,IAAA,CAAK,OAAW,IAAA,EAAA,CAAA;AAChB,QAAI,IAAA,KAAA,GAAQ,EAAG,CAAA,KAAA,CAAM,iBAAiB,CAAA,CAAA;AACtC,QAAA,IAAI,KAAO,EAAA;AACT,UAAK,IAAA,CAAA,QAAA,EAAA,CAAA;AACL,UAAA,IAAA,CAAK,MAAO,CAAA,SAAA,EAAA,CAAA;AAAA,SACP,MAAA;AACL,UAAA,IAAA,CAAK,MAAO,CAAA,WAAA,EAAA,CAAA;AAAA,SACd;AACA,QAAI,IAAA,IAAA,CAAK,QAAQ,MAAQ,EAAA;AACvB,UAAK,IAAA,CAAA,MAAA,CAAO,MAAM,CAAC,CAAA,EAAA,CAAA;AAAA,SACrB;AACA,QAAA,IAAA,CAAK,MAAS,GAAA,IAAA,CAAK,MAAO,CAAA,KAAA,CAAM,CAAC,CAAA,CAAA;AACjC,QAAO,OAAA,EAAA,CAAA;AAAA,OACT;AAAA;AAAA,MAEA,KAAA,EAAO,SAAS,EAAI,EAAA;AAClB,QAAA,IAAI,MAAM,EAAG,CAAA,MAAA,CAAA;AACb,QAAI,IAAA,KAAA,GAAQ,EAAG,CAAA,KAAA,CAAM,eAAe,CAAA,CAAA;AACpC,QAAK,IAAA,CAAA,MAAA,GAAS,KAAK,IAAK,CAAA,MAAA,CAAA;AACxB,QAAK,IAAA,CAAA,MAAA,GAAS,KAAK,MAAO,CAAA,MAAA,CAAO,GAAG,IAAK,CAAA,MAAA,CAAO,SAAS,GAAG,CAAA,CAAA;AAC5D,QAAA,IAAA,CAAK,MAAU,IAAA,GAAA,CAAA;AACf,QAAA,IAAI,QAAW,GAAA,IAAA,CAAK,KAAM,CAAA,KAAA,CAAM,eAAe,CAAA,CAAA;AAC/C,QAAK,IAAA,CAAA,KAAA,GAAQ,KAAK,KAAM,CAAA,MAAA,CAAO,GAAG,IAAK,CAAA,KAAA,CAAM,SAAS,CAAC,CAAA,CAAA;AACvD,QAAK,IAAA,CAAA,OAAA,GAAU,KAAK,OAAQ,CAAA,MAAA,CAAO,GAAG,IAAK,CAAA,OAAA,CAAQ,SAAS,CAAC,CAAA,CAAA;AAC7D,QAAI,IAAA,KAAA,CAAM,SAAS,CAAG,EAAA;AACpB,UAAK,IAAA,CAAA,QAAA,IAAY,MAAM,MAAS,GAAA,CAAA,CAAA;AAAA,SAClC;AACA,QAAI,IAAA,CAAA,GAAI,KAAK,MAAO,CAAA,KAAA,CAAA;AACpB,QAAA,IAAA,CAAK,MAAS,GAAA;AAAA,UACZ,UAAA,EAAY,KAAK,MAAO,CAAA,UAAA;AAAA,UACxB,SAAA,EAAW,KAAK,QAAW,GAAA,CAAA;AAAA,UAC3B,YAAA,EAAc,KAAK,MAAO,CAAA,YAAA;AAAA,UAC1B,WAAA,EAAa,SAAS,KAAM,CAAA,MAAA,KAAW,SAAS,MAAS,GAAA,IAAA,CAAK,MAAO,CAAA,YAAA,GAAe,CAAK,IAAA,QAAA,CAAS,SAAS,MAAS,GAAA,KAAA,CAAM,MAAM,CAAA,CAAE,MAAS,GAAA,KAAA,CAAM,CAAC,CAAE,CAAA,MAAA,GAAS,IAAK,CAAA,MAAA,CAAO,YAAe,GAAA,GAAA;AAAA,SAC1L,CAAA;AACA,QAAI,IAAA,IAAA,CAAK,QAAQ,MAAQ,EAAA;AACvB,UAAK,IAAA,CAAA,MAAA,CAAO,KAAQ,GAAA,CAAC,CAAE,CAAA,CAAC,CAAG,EAAA,CAAA,CAAE,CAAC,CAAA,GAAI,IAAK,CAAA,MAAA,GAAS,GAAG,CAAA,CAAA;AAAA,SACrD;AACA,QAAK,IAAA,CAAA,MAAA,GAAS,KAAK,MAAO,CAAA,MAAA,CAAA;AAC1B,QAAO,OAAA,IAAA,CAAA;AAAA,OACT;AAAA;AAAA,MAEA,MAAM,WAAW;AACf,QAAA,IAAA,CAAK,KAAQ,GAAA,IAAA,CAAA;AACb,QAAO,OAAA,IAAA,CAAA;AAAA,OACT;AAAA;AAAA,MAEA,QAAQ,WAAW;AACjB,QAAI,IAAA,IAAA,CAAK,QAAQ,eAAiB,EAAA;AAChC,UAAA,IAAA,CAAK,UAAa,GAAA,IAAA,CAAA;AAAA,SACb,MAAA;AACL,UAAO,OAAA,IAAA,CAAK,WAAW,wBAA4B,IAAA,IAAA,CAAK,WAAW,CAAK,CAAA,GAAA,kIAAA,GAAqI,IAAK,CAAA,YAAA,EAAgB,EAAA;AAAA,YAChO,IAAM,EAAA,EAAA;AAAA,YACN,KAAO,EAAA,IAAA;AAAA,YACP,MAAM,IAAK,CAAA,QAAA;AAAA,WACZ,CAAA,CAAA;AAAA,SACH;AACA,QAAO,OAAA,IAAA,CAAA;AAAA,OACT;AAAA;AAAA,MAEA,IAAA,EAAM,SAAS,CAAG,EAAA;AAChB,QAAA,IAAA,CAAK,KAAM,CAAA,IAAA,CAAK,KAAM,CAAA,KAAA,CAAM,CAAC,CAAC,CAAA,CAAA;AAAA,OAChC;AAAA;AAAA,MAEA,WAAW,WAAW;AACpB,QAAI,IAAA,IAAA,GAAO,IAAK,CAAA,OAAA,CAAQ,MAAO,CAAA,CAAA,EAAG,KAAK,OAAQ,CAAA,MAAA,GAAS,IAAK,CAAA,KAAA,CAAM,MAAM,CAAA,CAAA;AACzE,QAAQ,OAAA,CAAA,IAAA,CAAK,MAAS,GAAA,EAAA,GAAK,KAAQ,GAAA,EAAA,IAAM,IAAK,CAAA,MAAA,CAAO,CAAG,EAAA,CAAA,CAAE,OAAQ,CAAA,KAAA,EAAO,EAAE,CAAA,CAAA;AAAA,OAC7E;AAAA;AAAA,MAEA,eAAe,WAAW;AACxB,QAAA,IAAI,OAAO,IAAK,CAAA,KAAA,CAAA;AAChB,QAAI,IAAA,IAAA,CAAK,SAAS,EAAI,EAAA;AACpB,UAAA,IAAA,IAAQ,KAAK,MAAO,CAAA,MAAA,CAAO,CAAG,EAAA,EAAA,GAAK,KAAK,MAAM,CAAA,CAAA;AAAA,SAChD;AACA,QAAA,OAAA,CAAQ,IAAK,CAAA,MAAA,CAAO,CAAG,EAAA,EAAE,CAAK,IAAA,IAAA,CAAK,MAAS,GAAA,EAAA,GAAK,KAAQ,GAAA,EAAA,CAAA,EAAK,OAAQ,CAAA,KAAA,EAAO,EAAE,CAAA,CAAA;AAAA,OACjF;AAAA;AAAA,MAEA,cAAc,WAAW;AACvB,QAAI,IAAA,GAAA,GAAM,KAAK,SAAU,EAAA,CAAA;AACzB,QAAI,IAAA,CAAA,GAAI,IAAI,KAAM,CAAA,GAAA,CAAI,SAAS,CAAC,CAAA,CAAE,KAAK,GAAG,CAAA,CAAA;AAC1C,QAAA,OAAO,GAAM,GAAA,IAAA,CAAK,aAAc,EAAA,GAAI,OAAO,CAAI,GAAA,GAAA,CAAA;AAAA,OACjD;AAAA;AAAA,MAEA,UAAA,EAAY,SAAS,KAAA,EAAO,YAAc,EAAA;AACxC,QAAA,IAAI,OAAO,KAAO,EAAA,MAAA,CAAA;AAClB,QAAI,IAAA,IAAA,CAAK,QAAQ,eAAiB,EAAA;AAChC,UAAS,MAAA,GAAA;AAAA,YACP,UAAU,IAAK,CAAA,QAAA;AAAA,YACf,MAAQ,EAAA;AAAA,cACN,UAAA,EAAY,KAAK,MAAO,CAAA,UAAA;AAAA,cACxB,WAAW,IAAK,CAAA,SAAA;AAAA,cAChB,YAAA,EAAc,KAAK,MAAO,CAAA,YAAA;AAAA,cAC1B,WAAA,EAAa,KAAK,MAAO,CAAA,WAAA;AAAA,aAC3B;AAAA,YACA,QAAQ,IAAK,CAAA,MAAA;AAAA,YACb,OAAO,IAAK,CAAA,KAAA;AAAA,YACZ,SAAS,IAAK,CAAA,OAAA;AAAA,YACd,SAAS,IAAK,CAAA,OAAA;AAAA,YACd,QAAQ,IAAK,CAAA,MAAA;AAAA,YACb,QAAQ,IAAK,CAAA,MAAA;AAAA,YACb,OAAO,IAAK,CAAA,KAAA;AAAA,YACZ,QAAQ,IAAK,CAAA,MAAA;AAAA,YACb,IAAI,IAAK,CAAA,EAAA;AAAA,YACT,cAAgB,EAAA,IAAA,CAAK,cAAe,CAAA,KAAA,CAAM,CAAC,CAAA;AAAA,YAC3C,MAAM,IAAK,CAAA,IAAA;AAAA,WACb,CAAA;AACA,UAAI,IAAA,IAAA,CAAK,QAAQ,MAAQ,EAAA;AACvB,YAAA,MAAA,CAAO,OAAO,KAAQ,GAAA,IAAA,CAAK,MAAO,CAAA,KAAA,CAAM,MAAM,CAAC,CAAA,CAAA;AAAA,WACjD;AAAA,SACF;AACA,QAAA,KAAA,GAAQ,KAAM,CAAA,CAAC,CAAE,CAAA,KAAA,CAAM,iBAAiB,CAAA,CAAA;AACxC,QAAA,IAAI,KAAO,EAAA;AACT,UAAA,IAAA,CAAK,YAAY,KAAM,CAAA,MAAA,CAAA;AAAA,SACzB;AACA,QAAA,IAAA,CAAK,MAAS,GAAA;AAAA,UACZ,UAAA,EAAY,KAAK,MAAO,CAAA,SAAA;AAAA,UACxB,SAAA,EAAW,KAAK,QAAW,GAAA,CAAA;AAAA,UAC3B,YAAA,EAAc,KAAK,MAAO,CAAA,WAAA;AAAA,UAC1B,WAAA,EAAa,KAAQ,GAAA,KAAA,CAAM,KAAM,CAAA,MAAA,GAAS,CAAC,CAAE,CAAA,MAAA,GAAS,KAAM,CAAA,KAAA,CAAM,MAAS,GAAA,CAAC,EAAE,KAAM,CAAA,QAAQ,CAAE,CAAA,CAAC,CAAE,CAAA,MAAA,GAAS,KAAK,MAAO,CAAA,WAAA,GAAc,KAAM,CAAA,CAAC,CAAE,CAAA,MAAA;AAAA,SAC/I,CAAA;AACA,QAAK,IAAA,CAAA,MAAA,IAAU,MAAM,CAAC,CAAA,CAAA;AACtB,QAAK,IAAA,CAAA,KAAA,IAAS,MAAM,CAAC,CAAA,CAAA;AACrB,QAAA,IAAA,CAAK,OAAU,GAAA,KAAA,CAAA;AACf,QAAK,IAAA,CAAA,MAAA,GAAS,KAAK,MAAO,CAAA,MAAA,CAAA;AAC1B,QAAI,IAAA,IAAA,CAAK,QAAQ,MAAQ,EAAA;AACvB,UAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,CAAC,IAAA,CAAK,QAAQ,IAAK,CAAA,MAAA,IAAU,KAAK,MAAM,CAAA,CAAA;AAAA,SAC9D;AACA,QAAA,IAAA,CAAK,KAAQ,GAAA,KAAA,CAAA;AACb,QAAA,IAAA,CAAK,UAAa,GAAA,KAAA,CAAA;AAClB,QAAA,IAAA,CAAK,SAAS,IAAK,CAAA,MAAA,CAAO,MAAM,KAAM,CAAA,CAAC,EAAE,MAAM,CAAA,CAAA;AAC/C,QAAK,IAAA,CAAA,OAAA,IAAW,MAAM,CAAC,CAAA,CAAA;AACvB,QAAA,KAAA,GAAQ,IAAK,CAAA,aAAA,CAAc,IAAK,CAAA,IAAA,EAAM,KAAK,EAAI,EAAA,IAAA,EAAM,YAAc,EAAA,IAAA,CAAK,cAAe,CAAA,IAAA,CAAK,cAAe,CAAA,MAAA,GAAS,CAAC,CAAC,CAAA,CAAA;AACtH,QAAI,IAAA,IAAA,CAAK,IAAQ,IAAA,IAAA,CAAK,MAAQ,EAAA;AAC5B,UAAA,IAAA,CAAK,IAAO,GAAA,KAAA,CAAA;AAAA,SACd;AACA,QAAA,IAAI,KAAO,EAAA;AACT,UAAO,OAAA,KAAA,CAAA;AAAA,SACT,MAAA,IAAW,KAAK,UAAY,EAAA;AAC1B,UAAA,KAAA,IAAS,KAAK,MAAQ,EAAA;AACpB,YAAK,IAAA,CAAA,CAAC,CAAI,GAAA,MAAA,CAAO,CAAC,CAAA,CAAA;AAAA,WACpB;AACA,UAAO,OAAA,KAAA,CAAA;AAAA,SACT;AACA,QAAO,OAAA,KAAA,CAAA;AAAA,OACT;AAAA;AAAA,MAEA,MAAM,WAAW;AACf,QAAA,IAAI,KAAK,IAAM,EAAA;AACb,UAAA,OAAO,IAAK,CAAA,GAAA,CAAA;AAAA,SACd;AACA,QAAI,IAAA,CAAC,KAAK,MAAQ,EAAA;AAChB,UAAA,IAAA,CAAK,IAAO,GAAA,IAAA,CAAA;AAAA,SACd;AACA,QAAI,IAAA,KAAA,EAAO,OAAO,SAAW,EAAA,KAAA,CAAA;AAC7B,QAAI,IAAA,CAAC,KAAK,KAAO,EAAA;AACf,UAAA,IAAA,CAAK,MAAS,GAAA,EAAA,CAAA;AACd,UAAA,IAAA,CAAK,KAAQ,GAAA,EAAA,CAAA;AAAA,SACf;AACA,QAAI,IAAA,KAAA,GAAQ,KAAK,aAAc,EAAA,CAAA;AAC/B,QAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,KAAA,CAAM,QAAQ,CAAK,EAAA,EAAA;AACrC,UAAY,SAAA,GAAA,IAAA,CAAK,OAAO,KAAM,CAAA,IAAA,CAAK,MAAM,KAAM,CAAA,CAAC,CAAC,CAAC,CAAA,CAAA;AAClD,UAAI,IAAA,SAAA,KAAc,CAAC,KAAA,IAAS,SAAU,CAAA,CAAC,EAAE,MAAS,GAAA,KAAA,CAAM,CAAC,CAAA,CAAE,MAAS,CAAA,EAAA;AAClE,YAAQ,KAAA,GAAA,SAAA,CAAA;AACR,YAAQ,KAAA,GAAA,CAAA,CAAA;AACR,YAAI,IAAA,IAAA,CAAK,QAAQ,eAAiB,EAAA;AAChC,cAAA,KAAA,GAAQ,IAAK,CAAA,UAAA,CAAW,SAAW,EAAA,KAAA,CAAM,CAAC,CAAC,CAAA,CAAA;AAC3C,cAAA,IAAI,UAAU,KAAO,EAAA;AACnB,gBAAO,OAAA,KAAA,CAAA;AAAA,eACT,MAAA,IAAW,KAAK,UAAY,EAAA;AAC1B,gBAAQ,KAAA,GAAA,KAAA,CAAA;AACR,gBAAA,SAAA;AAAA,eACK,MAAA;AACL,gBAAO,OAAA,KAAA,CAAA;AAAA,eACT;AAAA,aACS,MAAA,IAAA,CAAC,IAAK,CAAA,OAAA,CAAQ,IAAM,EAAA;AAC7B,cAAA,MAAA;AAAA,aACF;AAAA,WACF;AAAA,SACF;AACA,QAAA,IAAI,KAAO,EAAA;AACT,UAAA,KAAA,GAAQ,IAAK,CAAA,UAAA,CAAW,KAAO,EAAA,KAAA,CAAM,KAAK,CAAC,CAAA,CAAA;AAC3C,UAAA,IAAI,UAAU,KAAO,EAAA;AACnB,YAAO,OAAA,KAAA,CAAA;AAAA,WACT;AACA,UAAO,OAAA,KAAA,CAAA;AAAA,SACT;AACA,QAAI,IAAA,IAAA,CAAK,WAAW,EAAI,EAAA;AACtB,UAAA,OAAO,IAAK,CAAA,GAAA,CAAA;AAAA,SACP,MAAA;AACL,UAAO,OAAA,IAAA,CAAK,WAAW,wBAA4B,IAAA,IAAA,CAAK,WAAW,CAAK,CAAA,GAAA,wBAAA,GAA2B,IAAK,CAAA,YAAA,EAAgB,EAAA;AAAA,YACtH,IAAM,EAAA,EAAA;AAAA,YACN,KAAO,EAAA,IAAA;AAAA,YACP,MAAM,IAAK,CAAA,QAAA;AAAA,WACZ,CAAA,CAAA;AAAA,SACH;AAAA,OACF;AAAA;AAAA,MAEA,GAAA,EAAK,SAAS,GAAM,GAAA;AAClB,QAAI,IAAA,CAAA,GAAI,KAAK,IAAK,EAAA,CAAA;AAClB,QAAA,IAAI,CAAG,EAAA;AACL,UAAO,OAAA,CAAA,CAAA;AAAA,SACF,MAAA;AACL,UAAA,OAAO,KAAK,GAAI,EAAA,CAAA;AAAA,SAClB;AAAA,OACF;AAAA;AAAA,MAEA,KAAA,EAAO,SAAS,KAAA,CAAM,SAAW,EAAA;AAC/B,QAAK,IAAA,CAAA,cAAA,CAAe,KAAK,SAAS,CAAA,CAAA;AAAA,OACpC;AAAA;AAAA,MAEA,QAAA,EAAU,SAAS,QAAW,GAAA;AAC5B,QAAI,IAAA,CAAA,GAAI,IAAK,CAAA,cAAA,CAAe,MAAS,GAAA,CAAA,CAAA;AACrC,QAAA,IAAI,IAAI,CAAG,EAAA;AACT,UAAO,OAAA,IAAA,CAAK,eAAe,GAAI,EAAA,CAAA;AAAA,SAC1B,MAAA;AACL,UAAO,OAAA,IAAA,CAAK,eAAe,CAAC,CAAA,CAAA;AAAA,SAC9B;AAAA,OACF;AAAA;AAAA,MAEA,aAAA,EAAe,SAAS,aAAgB,GAAA;AACtC,QAAI,IAAA,IAAA,CAAK,eAAe,MAAU,IAAA,IAAA,CAAK,eAAe,IAAK,CAAA,cAAA,CAAe,MAAS,GAAA,CAAC,CAAG,EAAA;AACrF,UAAO,OAAA,IAAA,CAAK,WAAW,IAAK,CAAA,cAAA,CAAe,KAAK,cAAe,CAAA,MAAA,GAAS,CAAC,CAAC,CAAE,CAAA,KAAA,CAAA;AAAA,SACvE,MAAA;AACL,UAAO,OAAA,IAAA,CAAK,UAAW,CAAA,SAAS,CAAE,CAAA,KAAA,CAAA;AAAA,SACpC;AAAA,OACF;AAAA;AAAA,MAEA,QAAA,EAAU,SAAS,QAAA,CAAS,CAAG,EAAA;AAC7B,QAAA,CAAA,GAAI,KAAK,cAAe,CAAA,MAAA,GAAS,IAAI,IAAK,CAAA,GAAA,CAAI,KAAK,CAAC,CAAA,CAAA;AACpD,QAAA,IAAI,KAAK,CAAG,EAAA;AACV,UAAO,OAAA,IAAA,CAAK,eAAe,CAAC,CAAA,CAAA;AAAA,SACvB,MAAA;AACL,UAAO,OAAA,SAAA,CAAA;AAAA,SACT;AAAA,OACF;AAAA;AAAA,MAEA,SAAA,EAAW,SAAS,SAAA,CAAU,SAAW,EAAA;AACvC,QAAA,IAAA,CAAK,MAAM,SAAS,CAAA,CAAA;AAAA,OACtB;AAAA;AAAA,MAEA,cAAA,EAAgB,SAAS,cAAiB,GAAA;AACxC,QAAA,OAAO,KAAK,cAAe,CAAA,MAAA,CAAA;AAAA,OAC7B;AAAA,MACA,OAAA,EAAS,EAAE,kBAAA,EAAoB,IAAK,EAAA;AAAA,MACpC,eAAe,SAAS,SAAA,CAAU,EAAI,EAAA,GAAA,EAAK,2BAA2B,QAAU,EAAA;AAC9E,QAAA,QAAQ,yBAA2B;AAAA,UACjC,KAAK,CAAA;AACH,YAAA,MAAA;AAAA,UACF,KAAK,CAAA;AACH,YAAA,MAAA;AAAA,UACF,KAAK,CAAA;AACH,YAAO,OAAA,EAAA,CAAA;AAAA,UACT,KAAK,CAAA;AACH,YAAA,MAAA;AAAA,UACF,KAAK,CAAA;AACH,YAAA,MAAA;AAAA,UACF,KAAK,CAAA;AACH,YAAO,OAAA,CAAA,CAAA;AAAA,UACT,KAAK,CAAA;AACH,YAAO,OAAA,EAAA,CAAA;AAAA,UACT,KAAK,CAAA;AACH,YAAA,IAAA,CAAK,MAAM,WAAW,CAAA,CAAA;AACtB,YAAO,OAAA,EAAA,CAAA;AAAA,UACT,KAAK,CAAA;AACH,YAAA,IAAA,CAAK,QAAS,EAAA,CAAA;AACd,YAAO,OAAA,iBAAA,CAAA;AAAA,UACT,KAAK,CAAA;AACH,YAAA,IAAA,CAAK,MAAM,WAAW,CAAA,CAAA;AACtB,YAAO,OAAA,EAAA,CAAA;AAAA,UACT,KAAK,EAAA;AACH,YAAA,IAAA,CAAK,QAAS,EAAA,CAAA;AACd,YAAO,OAAA,iBAAA,CAAA;AAAA,UACT,KAAK,EAAA;AACH,YAAA,IAAA,CAAK,MAAM,qBAAqB,CAAA,CAAA;AAChC,YAAA,MAAA;AAAA,UACF,KAAK,EAAA;AACH,YAAA,IAAA,CAAK,QAAS,EAAA,CAAA;AACd,YAAA,MAAA;AAAA,UACF,KAAK,EAAA;AACH,YAAO,OAAA,2BAAA,CAAA;AAAA,UACT,KAAK,EAAA;AACH,YAAO,OAAA,EAAA,CAAA;AAAA,UACT,KAAK,EAAA;AACH,YAAO,OAAA,EAAA,CAAA;AAAA,UACT,KAAK,EAAA;AACH,YAAO,OAAA,EAAA,CAAA;AAAA,UACT,KAAK,EAAA;AACH,YAAO,OAAA,GAAA,CAAA;AAAA,UACT,KAAK,EAAA;AACH,YAAO,OAAA,CAAA,CAAA;AAAA,UACT,KAAK,EAAA;AACH,YAAO,OAAA,SAAA,CAAA;AAAA,SACX;AAAA,OACF;AAAA,MACA,KAAA,EAAO,CAAC,qBAAuB,EAAA,qBAAA,EAAuB,eAAe,WAAa,EAAA,eAAA,EAAiB,mBAAmB,uBAAyB,EAAA,uBAAA,EAAyB,yBAAyB,uBAAyB,EAAA,uBAAA,EAAyB,0BAA0B,YAAc,EAAA,cAAA,EAAgB,4BAA4B,iBAAmB,EAAA,iBAAA,EAAmB,SAAW,EAAA,SAAA,EAAW,SAAS,CAAA;AAAA,MAC5Y,UAAA,EAAY,EAAE,qBAAA,EAAuB,EAAE,OAAA,EAAS,CAAC,EAAI,EAAA,EAAE,CAAG,EAAA,WAAA,EAAa,KAAM,EAAA,EAAG,aAAa,EAAE,OAAA,EAAS,CAAC,EAAE,CAAG,EAAA,WAAA,EAAa,OAAS,EAAA,WAAA,EAAa,EAAE,OAAA,EAAS,CAAC,CAAC,GAAG,WAAa,EAAA,KAAA,EAAS,EAAA,SAAA,EAAW,EAAE,OAAA,EAAS,CAAC,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,EAAE,CAAA,EAAG,WAAa,EAAA,IAAA,EAAO,EAAA;AAAA,KAC5R,CAAA;AACA,IAAO,OAAA,MAAA,CAAA;AAAA,GACP,EAAA,CAAA;AACF,EAAA,OAAA,CAAQ,KAAQ,GAAA,KAAA,CAAA;AAChB,EAAA,SAAS,MAAS,GAAA;AAChB,IAAA,IAAA,CAAK,KAAK,EAAC,CAAA;AAAA,GACb;AACA,EAAA,MAAA,CAAO,SAAY,GAAA,OAAA,CAAA;AACnB,EAAA,OAAA,CAAQ,MAAS,GAAA,MAAA,CAAA;AACjB,EAAA,OAAO,IAAI,MAAO,EAAA,CAAA;AACpB,CAAE,EAAA,CAAA;AACF,MAAA,CAAO,MAAS,GAAA,MAAA,CAAA;AAChB,IAAM,QAAW,GAAA,MAAA,CAAA;AACjB,IAAI,cAAiB,GAAA,EAAA,CAAA;AACrB,IAAM,WAAW,EAAC,CAAA;AAClB,IAAM,QAAQ,EAAC,CAAA;AACf,IAAM,WAAW,EAAC,CAAA;AAClB,IAAMA,SAAQ,WAAW;AACvB,EAAA,QAAA,CAAS,MAAS,GAAA,CAAA,CAAA;AAClB,EAAA,KAAA,CAAM,MAAS,GAAA,CAAA,CAAA;AACf,EAAiB,cAAA,GAAA,EAAA,CAAA;AACjB,EAAA,QAAA,CAAS,MAAS,GAAA,CAAA,CAAA;AAClB,EAAQ,KAAA,EAAA,CAAA;AACV,CAAA,CAAA;AACA,IAAM,UAAA,GAAa,SAAS,GAAK,EAAA;AAC/B,EAAiB,cAAA,GAAA,GAAA,CAAA;AACjB,EAAA,QAAA,CAAS,KAAK,GAAG,CAAA,CAAA;AACnB,CAAA,CAAA;AACA,IAAM,cAAc,WAAW;AAC7B,EAAO,OAAA,QAAA,CAAA;AACT,CAAA,CAAA;AACA,IAAM,WAAW,WAAW;AAC1B,EAAA,IAAI,oBAAoB,YAAa,EAAA,CAAA;AACrC,EAAA,MAAM,QAAW,GAAA,GAAA,CAAA;AACjB,EAAA,IAAI,cAAiB,GAAA,CAAA,CAAA;AACrB,EAAO,OAAA,CAAC,iBAAqB,IAAA,cAAA,GAAiB,QAAU,EAAA;AACtD,IAAA,iBAAA,GAAoB,YAAa,EAAA,CAAA;AACjC,IAAA,cAAA,EAAA,CAAA;AAAA,GACF;AACA,EAAM,KAAA,CAAA,IAAA,CAAK,GAAG,QAAQ,CAAA,CAAA;AACtB,EAAO,OAAA,KAAA,CAAA;AACT,CAAA,CAAA;AACA,IAAM,eAAe,WAAW;AAC9B,EAAA,MAAM,aAAa,EAAC,CAAA;AACpB,EAAM,KAAA,CAAA,OAAA,CAAQ,CAAC,IAAS,KAAA;AACtB,IAAA,IAAI,KAAK,MAAQ,EAAA;AACf,MAAW,UAAA,CAAA,IAAA,CAAK,GAAG,IAAA,CAAK,MAAM,CAAA,CAAA;AAAA,KAChC;AAAA,GACD,CAAA,CAAA;AACD,EAAM,MAAA,MAAA,GAAS,IAAI,GAAA,CAAI,UAAU,CAAA,CAAA;AACjC,EAAA,OAAO,CAAC,GAAG,MAAM,CAAA,CAAE,IAAK,EAAA,CAAA;AAC1B,CAAA,CAAA;AACA,IAAM,OAAA,GAAU,SAAS,KAAA,EAAO,QAAU,EAAA;AACxC,EAAA,MAAM,SAAS,QAAS,CAAA,MAAA,CAAO,CAAC,CAAA,CAAE,MAAM,GAAG,CAAA,CAAA;AAC3C,EAAA,IAAI,KAAQ,GAAA,CAAA,CAAA;AACZ,EAAA,IAAI,QAAQ,EAAC,CAAA;AACb,EAAI,IAAA,MAAA,CAAO,WAAW,CAAG,EAAA;AACvB,IAAQ,KAAA,GAAA,MAAA,CAAO,MAAO,CAAA,CAAC,CAAC,CAAA,CAAA;AACxB,IAAA,KAAA,GAAQ,EAAC,CAAA;AAAA,GACJ,MAAA;AACL,IAAQ,KAAA,GAAA,MAAA,CAAO,MAAO,CAAA,CAAC,CAAC,CAAA,CAAA;AACxB,IAAA,KAAA,GAAQ,MAAO,CAAA,CAAC,CAAE,CAAA,KAAA,CAAM,GAAG,CAAA,CAAA;AAAA,GAC7B;AACA,EAAA,MAAM,aAAa,KAAM,CAAA,GAAA,CAAI,CAAC,CAAM,KAAA,CAAA,CAAE,MAAM,CAAA,CAAA;AAC5C,EAAA,MAAM,OAAU,GAAA;AAAA,IACd,OAAS,EAAA,cAAA;AAAA,IACT,IAAM,EAAA,cAAA;AAAA,IACN,MAAQ,EAAA,UAAA;AAAA,IACR,IAAM,EAAA,KAAA;AAAA,IACN,KAAA;AAAA,GACF,CAAA;AACA,EAAA,QAAA,CAAS,KAAK,OAAO,CAAA,CAAA;AACvB,CAAA,CAAA;AACA,IAAM,UAAA,GAAa,SAAS,KAAO,EAAA;AACjC,EAAA,MAAM,OAAU,GAAA;AAAA,IACd,OAAS,EAAA,cAAA;AAAA,IACT,IAAM,EAAA,cAAA;AAAA,IACN,WAAa,EAAA,KAAA;AAAA,IACb,IAAM,EAAA,KAAA;AAAA,IACN,SAAS,EAAC;AAAA,GACZ,CAAA;AACA,EAAA,KAAA,CAAM,KAAK,OAAO,CAAA,CAAA;AACpB,CAAA,CAAA;AACA,IAAM,eAAe,WAAW;AAC9B,EAAM,MAAA,WAAA,GAAc,SAAS,GAAK,EAAA;AAChC,IAAO,OAAA,QAAA,CAAS,GAAG,CAAE,CAAA,SAAA,CAAA;AAAA,GACvB,CAAA;AACA,EAAA,IAAI,YAAe,GAAA,IAAA,CAAA;AACnB,EAAA,KAAA,MAAW,CAAC,CAAG,EAAA,OAAO,CAAK,IAAA,QAAA,CAAS,SAAW,EAAA;AAC7C,IAAA,WAAA,CAAY,CAAC,CAAA,CAAA;AACb,IAAA,YAAA,GAAe,gBAAgB,OAAQ,CAAA,SAAA,CAAA;AAAA,GACzC;AACA,EAAO,OAAA,YAAA,CAAA;AACT,CAAA,CAAA;AACA,IAAM,YAAY,WAAW;AAC3B,EAAA,OAAO,YAAa,EAAA,CAAA;AACtB,CAAA,CAAA;AACA,IAAM,EAAK,GAAA;AAAA,EACT,SAAA,EAAW,MAAM,SAAA,EAAY,CAAA,OAAA;AAAA,EAC7B,KAAAA,EAAAA,MAAAA;AAAA,EACA,eAAA;AAAA,EACA,eAAA;AAAA,EACA,WAAA;AAAA,EACA,WAAA;AAAA,EACA,iBAAA;AAAA,EACA,iBAAA;AAAA,EACA,UAAA;AAAA,EACA,WAAA;AAAA,EACA,QAAA;AAAA,EACA,OAAA;AAAA,EACA,UAAA;AAAA,EACA,SAAA;AACF,CAAA,CAAA;AACA,IAAM,SAAA,GAAY,CAAC,OAAY,KAAA,CAAA;AAAA;AAAA;AAAA,WAAA,EAGlB,QAAQ,SAAS,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAA,EAOhB,QAAQ,SAAS,CAAA;AAAA;AAAA;AAAA;AAAA,UAAA,EAInB,QAAQ,SAAS,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAA,EAOhB,QAAQ,SAAS,CAAA;AAAA;AAAA;AAAA;AAAA,IAAA,EAIxB,QAAQ,SAAY,GAAA,CAAA,MAAA,EAAS,OAAQ,CAAA,SAAS,KAAK,eAAe,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAA,EAS5D,QAAQ,OAAO,CAAA;AAAA,YAAA,EACb,QAAQ,UAAU,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAA,EAYpB,QAAQ,cAAc,CAAA;AAAA;AAAA;AAAA;AAAA,YAAA,EAIpB,QAAQ,SAAS,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAA,EAKjB,QAAQ,SAAS,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAA,EAKP,QAAQ,mBAAmB,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAA,EAWvC,QAAQ,UAAU,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAA,EAWZ,QAAQ,aAAa,CAAA;AAAA,sBAAA,EACf,QAAQ,OAAO,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAA,EAOjC,QAAQ,SAAY,GAAA,CAAA,MAAA,EAAS,OAAQ,CAAA,SAAS,KAAK,EAAE,CAAA;AAAA;AAAA;AAAA,IAAA,EAGrD,QAAQ,SAAY,GAAA,CAAA,MAAA,EAAS,OAAQ,CAAA,SAAS,KAAK,EAAE,CAAA;AAAA;AAAA;AAAA,IAAA,EAGrD,QAAQ,SAAY,GAAA,CAAA,MAAA,EAAS,OAAQ,CAAA,SAAS,KAAK,EAAE,CAAA;AAAA;AAAA;AAAA,IAAA,EAGrD,QAAQ,SAAY,GAAA,CAAA,MAAA,EAAS,OAAQ,CAAA,SAAS,KAAK,EAAE,CAAA;AAAA;AAAA;AAAA,IAAA,EAGrD,QAAQ,SAAY,GAAA,CAAA,MAAA,EAAS,OAAQ,CAAA,SAAS,KAAK,EAAE,CAAA;AAAA;AAAA;AAAA,IAAA,EAGrD,QAAQ,SAAY,GAAA,CAAA,MAAA,EAAS,OAAQ,CAAA,SAAS,KAAK,EAAE,CAAA;AAAA;AAAA;AAAA,IAAA,EAGrD,QAAQ,SAAY,GAAA,CAAA,MAAA,EAAS,OAAQ,CAAA,SAAS,KAAK,EAAE,CAAA;AAAA;AAAA;AAAA,IAAA,EAGrD,QAAQ,SAAY,GAAA,CAAA,MAAA,EAAS,OAAQ,CAAA,SAAS,KAAK,EAAE,CAAA;AAAA;AAAA;AAAA;AAAA,IAAA,EAIrD,QAAQ,MAAS,GAAA,CAAA,MAAA,EAAS,OAAQ,CAAA,MAAM,KAAK,EAAE,CAAA;AAAA;AAAA;AAAA,IAAA,EAG/C,QAAQ,MAAS,GAAA,CAAA,MAAA,EAAS,OAAQ,CAAA,MAAM,KAAK,EAAE,CAAA;AAAA;AAAA;AAAA,IAAA,EAG/C,QAAQ,MAAS,GAAA,CAAA,MAAA,EAAS,OAAQ,CAAA,MAAM,KAAK,EAAE,CAAA;AAAA;AAAA;AAAA,IAAA,EAG/C,QAAQ,MAAS,GAAA,CAAA,MAAA,EAAS,OAAQ,CAAA,MAAM,KAAK,EAAE,CAAA;AAAA;AAAA;AAAA,IAAA,EAG/C,QAAQ,MAAS,GAAA,CAAA,MAAA,EAAS,OAAQ,CAAA,MAAM,KAAK,EAAE,CAAA;AAAA;AAAA;AAAA,IAAA,EAG/C,QAAQ,MAAS,GAAA,CAAA,MAAA,EAAS,OAAQ,CAAA,MAAM,KAAK,EAAE,CAAA;AAAA;AAAA,CAAA,CAAA;AAGrD,IAAM,MAAS,GAAA,SAAA,CAAA;AACf,IAAMC,SAAAA,GAAW,SAAS,IAAA,EAAM,QAAU,EAAA;AACxC,EAAO,OAAA,QAAA,CAAW,MAAM,QAAQ,CAAA,CAAA;AAClC,CAAA,CAAA;AACA,IAAM,QAAA,GAAW,SAAS,OAAA,EAAS,QAAU,EAAA;AAC3C,EAAA,MAAM,MAAS,GAAA,EAAA,CAAA;AACf,EAAA,MAAM,aAAgB,GAAA,OAAA,CAAQ,MAAO,CAAA,QAAQ,CAAE,CAAA,IAAA,CAAK,IAAM,EAAA,QAAA,CAAS,EAAE,CAAA,CAAE,IAAK,CAAA,IAAA,EAAM,QAAS,CAAA,EAAE,CAAE,CAAA,IAAA,CAAK,OAAS,EAAA,MAAM,CAAE,CAAA,IAAA,CAAK,GAAK,EAAA,MAAM,CAAE,CAAA,IAAA,CAAK,cAAgB,EAAA,CAAC,CAAE,CAAA,IAAA,CAAK,YAAY,SAAS,CAAA,CAAA;AACzL,EAAM,MAAA,IAAA,GAAO,OAAQ,CAAA,MAAA,CAAO,GAAG,CAAA,CAAA;AAC/B,EAAA,IAAA,CAAK,MAAO,CAAA,QAAQ,CAAE,CAAA,IAAA,CAAK,IAAM,EAAA,QAAA,CAAS,EAAK,GAAA,MAAA,GAAS,CAAC,CAAA,CAAE,IAAK,CAAA,IAAA,EAAM,SAAS,EAAK,GAAA,MAAA,GAAS,CAAC,CAAA,CAAE,IAAK,CAAA,GAAA,EAAK,GAAG,CAAA,CAAE,KAAK,cAAgB,EAAA,CAAC,CAAE,CAAA,IAAA,CAAK,MAAQ,EAAA,MAAM,CAAE,CAAA,IAAA,CAAK,UAAU,MAAM,CAAA,CAAA;AACjL,EAAA,IAAA,CAAK,MAAO,CAAA,QAAQ,CAAE,CAAA,IAAA,CAAK,IAAM,EAAA,QAAA,CAAS,EAAK,GAAA,MAAA,GAAS,CAAC,CAAA,CAAE,IAAK,CAAA,IAAA,EAAM,SAAS,EAAK,GAAA,MAAA,GAAS,CAAC,CAAA,CAAE,IAAK,CAAA,GAAA,EAAK,GAAG,CAAA,CAAE,KAAK,cAAgB,EAAA,CAAC,CAAE,CAAA,IAAA,CAAK,MAAQ,EAAA,MAAM,CAAE,CAAA,IAAA,CAAK,UAAU,MAAM,CAAA,CAAA;AACjL,EAAA,SAAS,MAAM,KAAO,EAAA;AACpB,IAAM,MAAA,KAAA,GAAQ,aAAM,CAAA,UAAA,CAAW,KAAK,EAAK,GAAA,CAAC,EAAE,QAAS,CAAA,CAAA,IAAK,KAAK,EAAK,GAAA,CAAA,CAAE,EAAE,WAAY,CAAA,MAAA,GAAS,CAAC,CAAE,CAAA,WAAA,CAAY,SAAS,GAAG,CAAA,CAAA;AACxH,IAAM,KAAA,CAAA,MAAA,CAAO,MAAM,CAAE,CAAA,IAAA,CAAK,SAAS,OAAO,CAAA,CAAE,KAAK,GAAK,EAAA,KAAK,EAAE,IAAK,CAAA,WAAA,EAAa,eAAe,QAAS,CAAA,EAAA,GAAK,OAAO,QAAS,CAAA,EAAA,GAAK,KAAK,GAAG,CAAA,CAAA;AAAA,GAC3I;AACA,EAAA,SAAS,IAAI,KAAO,EAAA;AAClB,IAAM,MAAA,KAAA,GAAQ,aAAM,CAAA,UAAA,CAAW,IAAI,IAAK,CAAA,EAAA,GAAK,CAAC,CAAE,CAAA,QAAA,CAAS,KAAK,IAAK,CAAA,EAAA,GAAK,EAAE,CAAE,CAAA,WAAA,CAAY,SAAS,CAAC,CAAA,CAAE,WAAY,CAAA,MAAA,GAAS,GAAG,CAAA,CAAA;AAC5H,IAAM,KAAA,CAAA,MAAA,CAAO,MAAM,CAAE,CAAA,IAAA,CAAK,SAAS,OAAO,CAAA,CAAE,KAAK,GAAK,EAAA,KAAK,EAAE,IAAK,CAAA,WAAA,EAAa,eAAe,QAAS,CAAA,EAAA,GAAK,OAAO,QAAS,CAAA,EAAA,GAAK,KAAK,GAAG,CAAA,CAAA;AAAA,GAC3I;AACA,EAAA,SAAS,WAAW,KAAO,EAAA;AACzB,IAAM,KAAA,CAAA,MAAA,CAAO,MAAM,CAAE,CAAA,IAAA,CAAK,SAAS,OAAO,CAAA,CAAE,KAAK,QAAU,EAAA,CAAC,EAAE,IAAK,CAAA,IAAA,EAAM,SAAS,EAAK,GAAA,CAAC,EAAE,IAAK,CAAA,IAAA,EAAM,SAAS,EAAK,GAAA,CAAC,EAAE,IAAK,CAAA,IAAA,EAAM,SAAS,EAAK,GAAA,CAAC,EAAE,IAAK,CAAA,IAAA,EAAM,SAAS,EAAK,GAAA,CAAC,EAAE,IAAK,CAAA,OAAA,EAAS,OAAO,CAAE,CAAA,IAAA,CAAK,gBAAgB,KAAK,CAAA,CAAE,IAAK,CAAA,QAAA,EAAU,MAAM,CAAA,CAAA;AAAA,GACxP;AACA,EAAI,IAAA,QAAA,CAAS,QAAQ,CAAG,EAAA;AACtB,IAAA,KAAA,CAAM,IAAI,CAAA,CAAA;AAAA,GACZ,MAAA,IAAW,QAAS,CAAA,KAAA,GAAQ,CAAG,EAAA;AAC7B,IAAA,GAAA,CAAI,IAAI,CAAA,CAAA;AAAA,GACH,MAAA;AACL,IAAA,UAAA,CAAW,IAAI,CAAA,CAAA;AAAA,GACjB;AACA,EAAO,OAAA,aAAA,CAAA;AACT,CAAA,CAAA;AACA,IAAM,UAAA,GAAa,SAAS,OAAA,EAAS,UAAY,EAAA;AAC/C,EAAM,MAAA,aAAA,GAAgB,OAAQ,CAAA,MAAA,CAAO,QAAQ,CAAA,CAAA;AAC7C,EAAc,aAAA,CAAA,IAAA,CAAK,IAAM,EAAA,UAAA,CAAW,EAAE,CAAA,CAAA;AACtC,EAAc,aAAA,CAAA,IAAA,CAAK,IAAM,EAAA,UAAA,CAAW,EAAE,CAAA,CAAA;AACtC,EAAA,aAAA,CAAc,IAAK,CAAA,OAAA,EAAS,QAAW,GAAA,UAAA,CAAW,GAAG,CAAA,CAAA;AACrD,EAAc,aAAA,CAAA,IAAA,CAAK,MAAQ,EAAA,UAAA,CAAW,IAAI,CAAA,CAAA;AAC1C,EAAc,aAAA,CAAA,IAAA,CAAK,QAAU,EAAA,UAAA,CAAW,MAAM,CAAA,CAAA;AAC9C,EAAc,aAAA,CAAA,IAAA,CAAK,GAAK,EAAA,UAAA,CAAW,CAAC,CAAA,CAAA;AACpC,EAAI,IAAA,aAAA,CAAc,UAAU,KAAQ,CAAA,EAAA;AAClC,IAAc,aAAA,CAAA,IAAA,CAAK,OAAS,EAAA,aAAA,CAAc,KAAK,CAAA,CAAA;AAAA,GACjD;AACA,EAAI,IAAA,UAAA,CAAW,UAAU,KAAQ,CAAA,EAAA;AAC/B,IAAA,aAAA,CAAc,MAAO,CAAA,OAAO,CAAE,CAAA,IAAA,CAAK,WAAW,KAAK,CAAA,CAAA;AAAA,GACrD;AACA,EAAO,OAAA,aAAA,CAAA;AACT,CAAA,CAAA;AACA,IAAMC,SAAAA,GAAW,SAAS,IAAA,EAAM,QAAU,EAAA;AACxC,EAAO,OAAA,QAAA,CAAW,MAAM,QAAQ,CAAA,CAAA;AAClC,CAAA,CAAA;AACA,IAAM,SAAA,GAAY,SAAS,IAAA,EAAM,SAAW,EAAA;AAC1C,EAAA,SAAS,SAAU,CAAA,CAAA,EAAG,CAAG,EAAA,KAAA,EAAO,QAAQ,GAAK,EAAA;AAC3C,IAAO,OAAA,CAAA,GAAI,GAAM,GAAA,CAAA,GAAI,GAAO,IAAA,CAAA,GAAI,KAAS,CAAA,GAAA,GAAA,GAAM,CAAI,GAAA,GAAA,IAAO,CAAI,GAAA,KAAA,CAAA,GAAS,GAAO,IAAA,CAAA,GAAI,SAAS,GAAO,CAAA,GAAA,GAAA,IAAO,CAAI,GAAA,KAAA,GAAQ,GAAM,GAAA,GAAA,CAAA,GAAO,GAAO,IAAA,CAAA,GAAI,MAAU,CAAA,GAAA,GAAA,GAAM,CAAI,GAAA,GAAA,IAAO,CAAI,GAAA,MAAA,CAAA,CAAA;AAAA,GAC9K;AACA,EAAM,MAAA,OAAA,GAAU,IAAK,CAAA,MAAA,CAAO,SAAS,CAAA,CAAA;AACrC,EAAQ,OAAA,CAAA,IAAA,CAAK,QAAU,EAAA,SAAA,CAAU,SAAU,CAAA,CAAA,EAAG,UAAU,CAAG,EAAA,EAAA,EAAI,EAAI,EAAA,CAAC,CAAC,CAAA,CAAA;AACrE,EAAQ,OAAA,CAAA,IAAA,CAAK,SAAS,UAAU,CAAA,CAAA;AAChC,EAAU,SAAA,CAAA,CAAA,GAAI,SAAU,CAAA,CAAA,GAAI,SAAU,CAAA,WAAA,CAAA;AACtC,EAAA,SAAA,CAAU,CAAI,GAAA,SAAA,CAAU,CAAI,GAAA,GAAA,GAAM,SAAU,CAAA,WAAA,CAAA;AAC5C,EAAAA,SAAAA,CAAS,MAAM,SAAS,CAAA,CAAA;AAC1B,CAAA,CAAA;AACA,IAAM,WAAc,GAAA,SAAS,IAAM,EAAA,OAAA,EAAS,KAAO,EAAA;AACjD,EAAM,MAAA,CAAA,GAAI,IAAK,CAAA,MAAA,CAAO,GAAG,CAAA,CAAA;AACzB,EAAA,MAAM,OAAO,WAAY,EAAA,CAAA;AACzB,EAAA,IAAA,CAAK,IAAI,OAAQ,CAAA,CAAA,CAAA;AACjB,EAAA,IAAA,CAAK,IAAI,OAAQ,CAAA,CAAA,CAAA;AACjB,EAAA,IAAA,CAAK,OAAO,OAAQ,CAAA,IAAA,CAAA;AACpB,EAAK,IAAA,CAAA,KAAA,GAAQ,KAAM,CAAA,KAAA,GAAQ,OAAQ,CAAA,SAAA;AAAA,EACnC,KAAA,CAAM,cAAkB,IAAA,OAAA,CAAQ,SAAY,GAAA,CAAA,CAAA,CAAA;AAC5C,EAAA,IAAA,CAAK,SAAS,KAAM,CAAA,MAAA,CAAA;AACpB,EAAK,IAAA,CAAA,KAAA,GAAQ,kCAAkC,OAAQ,CAAA,GAAA,CAAA;AACvD,EAAA,IAAA,CAAK,EAAK,GAAA,CAAA,CAAA;AACV,EAAA,IAAA,CAAK,EAAK,GAAA,CAAA,CAAA;AACV,EAAAD,SAAAA,CAAS,GAAG,IAAI,CAAA,CAAA;AAChB,EAAA,sBAAA,CAAuB,KAAK,CAAA;AAAA,IAC1B,OAAQ,CAAA,IAAA;AAAA,IACR,CAAA;AAAA,IACA,IAAK,CAAA,CAAA;AAAA,IACL,IAAK,CAAA,CAAA;AAAA,IACL,IAAK,CAAA,KAAA;AAAA,IACL,IAAK,CAAA,MAAA;AAAA,IACL,EAAE,KAAA,EAAO,+BAAkC,GAAA,OAAA,CAAQ,GAAI,EAAA;AAAA,IACvD,KAAA;AAAA,IACA,OAAQ,CAAA,MAAA;AAAA,GACV,CAAA;AACF,CAAA,CAAA;AACA,IAAI,SAAY,GAAA,CAAA,CAAA,CAAA;AAChB,IAAM,QAAW,GAAA,SAAS,IAAM,EAAA,IAAA,EAAM,KAAO,EAAA;AAC3C,EAAA,MAAM,MAAS,GAAA,IAAA,CAAK,CAAI,GAAA,KAAA,CAAM,KAAQ,GAAA,CAAA,CAAA;AACtC,EAAM,MAAA,CAAA,GAAI,IAAK,CAAA,MAAA,CAAO,GAAG,CAAA,CAAA;AACzB,EAAA,SAAA,EAAA,CAAA;AACA,EAAM,MAAA,SAAA,GAAY,MAAM,CAAI,GAAA,EAAA,CAAA;AAC5B,EAAA,CAAA,CAAE,OAAO,MAAM,CAAA,CAAE,IAAK,CAAA,IAAA,EAAM,SAAS,SAAS,CAAA,CAAE,IAAK,CAAA,IAAA,EAAM,MAAM,CAAE,CAAA,IAAA,CAAK,MAAM,IAAK,CAAA,CAAC,EAAE,IAAK,CAAA,IAAA,EAAM,MAAM,CAAA,CAAE,KAAK,IAAM,EAAA,SAAS,EAAE,IAAK,CAAA,OAAA,EAAS,WAAW,CAAE,CAAA,IAAA,CAAK,cAAgB,EAAA,KAAK,EAAE,IAAK,CAAA,kBAAA,EAAoB,KAAK,CAAE,CAAA,IAAA,CAAK,UAAU,MAAM,CAAA,CAAA;AAC3O,EAAA,QAAA,CAAS,CAAG,EAAA;AAAA,IACV,EAAI,EAAA,MAAA;AAAA,IACJ,EAAI,EAAA,GAAA,GAAA,CAAO,CAAI,GAAA,IAAA,CAAK,KAAS,IAAA,EAAA;AAAA,IAC7B,OAAO,IAAK,CAAA,KAAA;AAAA,GACb,CAAA,CAAA;AACD,EAAA,MAAM,OAAO,WAAY,EAAA,CAAA;AACzB,EAAA,IAAA,CAAK,IAAI,IAAK,CAAA,CAAA,CAAA;AACd,EAAA,IAAA,CAAK,IAAI,IAAK,CAAA,CAAA,CAAA;AACd,EAAA,IAAA,CAAK,OAAO,IAAK,CAAA,IAAA,CAAA;AACjB,EAAA,IAAA,CAAK,QAAQ,KAAM,CAAA,KAAA,CAAA;AACnB,EAAA,IAAA,CAAK,SAAS,KAAM,CAAA,MAAA,CAAA;AACpB,EAAK,IAAA,CAAA,KAAA,GAAQ,oBAAoB,IAAK,CAAA,GAAA,CAAA;AACtC,EAAA,IAAA,CAAK,EAAK,GAAA,CAAA,CAAA;AACV,EAAA,IAAA,CAAK,EAAK,GAAA,CAAA,CAAA;AACV,EAAAA,SAAAA,CAAS,GAAG,IAAI,CAAA,CAAA;AAChB,EAAI,IAAA,IAAA,GAAO,KAAK,CAAI,GAAA,EAAA,CAAA;AACpB,EAAK,IAAA,CAAA,MAAA,CAAO,OAAQ,CAAA,CAAC,MAAW,KAAA;AAC9B,IAAA,MAAM,MAAS,GAAA,IAAA,CAAK,MAAO,CAAA,MAAM,CAAE,CAAA,KAAA,CAAA;AACnC,IAAA,MAAM,MAAS,GAAA;AAAA,MACb,EAAI,EAAA,IAAA;AAAA,MACJ,IAAI,IAAK,CAAA,CAAA;AAAA,MACT,CAAG,EAAA,CAAA;AAAA,MACH,IAAM,EAAA,MAAA;AAAA,MACN,MAAQ,EAAA,MAAA;AAAA,MACR,KAAO,EAAA,MAAA;AAAA,MACP,GAAK,EAAA,IAAA,CAAK,MAAO,CAAA,MAAM,CAAE,CAAA,QAAA;AAAA,KAC3B,CAAA;AACA,IAAA,UAAA,CAAW,GAAG,MAAM,CAAA,CAAA;AACpB,IAAQ,IAAA,IAAA,EAAA,CAAA;AAAA,GACT,CAAA,CAAA;AACD,EAAA,sBAAA,CAAuB,KAAK,CAAA;AAAA,IAC1B,IAAK,CAAA,IAAA;AAAA,IACL,CAAA;AAAA,IACA,IAAK,CAAA,CAAA;AAAA,IACL,IAAK,CAAA,CAAA;AAAA,IACL,IAAK,CAAA,KAAA;AAAA,IACL,IAAK,CAAA,MAAA;AAAA,IACL,EAAE,OAAO,MAAO,EAAA;AAAA,IAChB,KAAA;AAAA,IACA,IAAK,CAAA,MAAA;AAAA,GACP,CAAA;AACF,CAAA,CAAA;AACA,IAAME,mBAAAA,GAAqB,SAAS,IAAA,EAAM,OAAS,EAAA;AACjD,EAAA,kBAAA,CAAqB,MAAM,OAAO,CAAA,CAAA;AACpC,CAAA,CAAA;AACA,IAAM,yCAAoC,WAAA;AACxC,EAAS,SAAA,MAAA,CAAO,SAAS,CAAG,EAAA,CAAA,EAAG,GAAG,KAAO,EAAA,MAAA,EAAQ,WAAW,MAAQ,EAAA;AAClE,IAAM,MAAA,IAAA,GAAO,CAAE,CAAA,MAAA,CAAO,MAAM,CAAA,CAAE,IAAK,CAAA,GAAA,EAAK,CAAI,GAAA,KAAA,GAAQ,CAAC,CAAA,CAAE,IAAK,CAAA,GAAA,EAAK,CAAI,GAAA,MAAA,GAAS,CAAI,GAAA,CAAC,CAAE,CAAA,KAAA,CAAM,YAAc,EAAA,MAAM,CAAE,CAAA,KAAA,CAAM,aAAe,EAAA,QAAQ,CAAE,CAAA,IAAA,CAAK,OAAO,CAAA,CAAA;AAC5J,IAAA,aAAA,CAAc,MAAM,SAAS,CAAA,CAAA;AAAA,GAC/B;AACA,EAAS,SAAA,OAAA,CAAQ,SAAS,CAAG,EAAA,CAAA,EAAG,GAAG,KAAO,EAAA,MAAA,EAAQ,SAAW,EAAA,KAAA,EAAO,MAAQ,EAAA;AAC1E,IAAM,MAAA,EAAE,YAAc,EAAA,cAAA,EAAmB,GAAA,KAAA,CAAA;AACzC,IAAM,MAAA,KAAA,GAAQ,OAAQ,CAAA,KAAA,CAAM,cAAc,CAAA,CAAA;AAC1C,IAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,KAAA,CAAM,QAAQ,CAAK,EAAA,EAAA;AACrC,MAAA,MAAM,KAAK,CAAI,GAAA,YAAA,GAAe,YAAgB,IAAA,KAAA,CAAM,SAAS,CAAK,CAAA,GAAA,CAAA,CAAA;AAClE,MAAA,MAAM,IAAO,GAAA,CAAA,CAAE,MAAO,CAAA,MAAM,CAAE,CAAA,IAAA,CAAK,GAAK,EAAA,CAAA,GAAI,KAAQ,GAAA,CAAC,CAAE,CAAA,IAAA,CAAK,GAAK,EAAA,CAAC,CAAE,CAAA,IAAA,CAAK,MAAQ,EAAA,MAAM,CAAE,CAAA,KAAA,CAAM,aAAe,EAAA,QAAQ,CAAE,CAAA,KAAA,CAAM,WAAa,EAAA,YAAY,CAAE,CAAA,KAAA,CAAM,eAAe,cAAc,CAAA,CAAA;AAC5L,MAAA,IAAA,CAAK,OAAO,OAAO,CAAA,CAAE,IAAK,CAAA,GAAA,EAAK,IAAI,KAAQ,GAAA,CAAC,CAAE,CAAA,IAAA,CAAK,MAAM,EAAE,CAAA,CAAE,IAAK,CAAA,KAAA,CAAM,CAAC,CAAC,CAAA,CAAA;AAC1E,MAAA,IAAA,CAAK,IAAK,CAAA,GAAA,EAAK,CAAI,GAAA,MAAA,GAAS,CAAC,CAAA,CAAE,IAAK,CAAA,mBAAA,EAAqB,SAAS,CAAA,CAAE,IAAK,CAAA,oBAAA,EAAsB,SAAS,CAAA,CAAA;AACxG,MAAA,aAAA,CAAc,MAAM,SAAS,CAAA,CAAA;AAAA,KAC/B;AAAA,GACF;AACA,EAAS,SAAA,IAAA,CAAK,SAAS,CAAG,EAAA,CAAA,EAAG,GAAG,KAAO,EAAA,MAAA,EAAQ,WAAW,KAAO,EAAA;AAC/D,IAAM,MAAA,IAAA,GAAO,CAAE,CAAA,MAAA,CAAO,QAAQ,CAAA,CAAA;AAC9B,IAAM,MAAA,CAAA,GAAI,KAAK,MAAO,CAAA,eAAe,EAAE,IAAK,CAAA,GAAA,EAAK,CAAC,CAAA,CAAE,IAAK,CAAA,GAAA,EAAK,CAAC,CAAE,CAAA,IAAA,CAAK,OAAS,EAAA,KAAK,CAAE,CAAA,IAAA,CAAK,UAAU,MAAM,CAAA,CAAE,IAAK,CAAA,UAAA,EAAY,OAAO,CAAA,CAAA;AACrI,IAAA,MAAM,IAAO,GAAA,CAAA,CAAE,MAAO,CAAA,WAAW,EAAE,KAAM,CAAA,SAAA,EAAW,OAAO,CAAA,CAAE,MAAM,QAAU,EAAA,MAAM,CAAE,CAAA,KAAA,CAAM,SAAS,MAAM,CAAA,CAAA;AAC1G,IAAK,IAAA,CAAA,MAAA,CAAO,KAAK,CAAE,CAAA,IAAA,CAAK,SAAS,OAAO,CAAA,CAAE,MAAM,SAAW,EAAA,YAAY,EAAE,KAAM,CAAA,YAAA,EAAc,QAAQ,CAAE,CAAA,KAAA,CAAM,kBAAkB,QAAQ,CAAA,CAAE,KAAK,OAAO,CAAA,CAAA;AACrJ,IAAA,OAAA,CAAQ,SAAS,IAAM,EAAA,CAAA,EAAG,GAAG,KAAO,EAAA,MAAA,EAAQ,WAAW,KAAK,CAAA,CAAA;AAC5D,IAAA,aAAA,CAAc,MAAM,SAAS,CAAA,CAAA;AAAA,GAC/B;AACA,EAAS,SAAA,aAAA,CAAc,QAAQ,iBAAmB,EAAA;AAChD,IAAA,KAAA,MAAW,OAAO,iBAAmB,EAAA;AACnC,MAAA,IAAI,OAAO,iBAAmB,EAAA;AAC5B,QAAA,MAAA,CAAO,IAAK,CAAA,GAAA,EAAK,iBAAkB,CAAA,GAAG,CAAC,CAAA,CAAA;AAAA,OACzC;AAAA,KACF;AAAA,GACF;AACA,EAAA,OAAO,SAAS,KAAO,EAAA;AACrB,IAAA,OAAO,MAAM,aAAkB,KAAA,IAAA,GAAO,OAAO,KAAM,CAAA,aAAA,KAAkB,QAAQ,MAAS,GAAA,OAAA,CAAA;AAAA,GACxF,CAAA;AACF,CAAE,EAAA,CAAA;AACF,IAAM,YAAA,GAAe,SAAS,QAAU,EAAA;AACtC,EAAA,QAAA,CAAS,MAAO,CAAA,MAAM,CAAE,CAAA,MAAA,CAAO,QAAQ,CAAE,CAAA,IAAA,CAAK,IAAM,EAAA,WAAW,EAAE,IAAK,CAAA,MAAA,EAAQ,CAAC,CAAA,CAAE,KAAK,MAAQ,EAAA,CAAC,CAAE,CAAA,IAAA,CAAK,eAAe,CAAC,CAAA,CAAE,IAAK,CAAA,cAAA,EAAgB,CAAC,CAAE,CAAA,IAAA,CAAK,QAAU,EAAA,MAAM,EAAE,MAAO,CAAA,MAAM,CAAE,CAAA,IAAA,CAAK,KAAK,kBAAkB,CAAA,CAAA;AACpN,CAAA,CAAA;AACA,IAAM,OAAU,GAAA;AAAA,EACd,QAAAF,EAAAA,SAAAA;AAAA,EACA,UAAA;AAAA,EACA,WAAA;AAAA,EACA,QAAAC,EAAAA,SAAAA;AAAA,EACA,SAAA;AAAA,EACA,QAAA;AAAA,EACA,kBAAAC,EAAAA,mBAAAA;AAAA,EACA,YAAA;AACF,CAAA,CAAA;AACA,IAAM,OAAA,GAAU,SAAS,GAAK,EAAA;AAC5B,EAAM,MAAA,IAAA,GAAO,MAAO,CAAA,IAAA,CAAK,GAAG,CAAA,CAAA;AAC5B,EAAK,IAAA,CAAA,OAAA,CAAQ,SAAS,GAAK,EAAA;AACzB,IAAK,IAAA,CAAA,GAAG,CAAI,GAAA,GAAA,CAAI,GAAG,CAAA,CAAA;AAAA,GACpB,CAAA,CAAA;AACH,CAAA,CAAA;AACA,IAAM,SAAS,EAAC,CAAA;AAChB,SAAS,gBAAgB,QAAU,EAAA;AACjC,EAAM,MAAA,KAAA,GAAQ,WAAY,CAAA,OAAA,CAAA;AAC1B,EAAA,IAAI,IAAO,GAAA,EAAA,CAAA;AACX,EAAA,MAAA,CAAO,IAAK,CAAA,MAAM,CAAE,CAAA,OAAA,CAAQ,CAAC,MAAW,KAAA;AACtC,IAAM,MAAA,MAAA,GAAS,MAAO,CAAA,MAAM,CAAE,CAAA,KAAA,CAAA;AAC9B,IAAA,MAAM,UAAa,GAAA;AAAA,MACjB,EAAI,EAAA,EAAA;AAAA,MACJ,EAAI,EAAA,IAAA;AAAA,MACJ,CAAG,EAAA,CAAA;AAAA,MACH,IAAM,EAAA,MAAA;AAAA,MACN,MAAQ,EAAA,MAAA;AAAA,MACR,GAAA,EAAK,MAAO,CAAA,MAAM,CAAE,CAAA,QAAA;AAAA,KACtB,CAAA;AACA,IAAQ,OAAA,CAAA,UAAA,CAAW,UAAU,UAAU,CAAA,CAAA;AACvC,IAAA,MAAM,SAAY,GAAA;AAAA,MAChB,CAAG,EAAA,EAAA;AAAA,MACH,GAAG,IAAO,GAAA,CAAA;AAAA,MACV,IAAM,EAAA,MAAA;AAAA,MACN,IAAM,EAAA,MAAA;AAAA,MACN,UAAA,EAAY,MAAM,aAAgB,GAAA,CAAA;AAAA,KACpC,CAAA;AACA,IAAQ,OAAA,CAAA,QAAA,CAAS,UAAU,SAAS,CAAA,CAAA;AACpC,IAAQ,IAAA,IAAA,EAAA,CAAA;AAAA,GACT,CAAA,CAAA;AACH,CAAA;AACA,IAAM,IAAA,GAAO,WAAY,CAAA,OAAA,CAAA;AACzB,IAAM,cAAc,IAAK,CAAA,UAAA,CAAA;AACzB,IAAM,IAAO,GAAA,SAAS,IAAM,EAAA,EAAA,EAAI,SAAS,OAAS,EAAA;AAChD,EAAM,MAAA,KAAA,GAAQ,WAAY,CAAA,OAAA,CAAA;AAC1B,EAAM,MAAA,aAAA,GAAgB,WAAY,CAAA,aAAA,CAAA;AAClC,EAAI,IAAA,cAAA,CAAA;AACJ,EAAA,IAAI,kBAAkB,SAAW,EAAA;AAC/B,IAAiB,cAAA,GAAA,cAAA,CAAO,OAAO,EAAE,CAAA,CAAA;AAAA,GACnC;AACA,EAAA,MAAM,IAAO,GAAA,aAAA,KAAkB,SAAY,GAAA,cAAA,CAAO,cAAe,CAAA,KAAA,EAAQ,CAAA,CAAC,CAAE,CAAA,eAAA,CAAgB,IAAI,CAAA,GAAI,eAAO,MAAM,CAAA,CAAA;AACjH,EAAA,MAAA,CAAO,IAAK,EAAA,CAAA;AACZ,EAAA,MAAM,QAAW,GAAA,IAAA,CAAK,MAAO,CAAA,GAAA,GAAM,EAAE,CAAA,CAAA;AACrC,EAAA,OAAA,CAAQ,aAAa,QAAQ,CAAA,CAAA;AAC7B,EAAM,MAAA,MAAA,GAAS,OAAQ,CAAA,EAAA,CAAG,QAAS,EAAA,CAAA;AACnC,EAAM,MAAA,KAAA,GAAQ,OAAQ,CAAA,EAAA,CAAG,eAAgB,EAAA,CAAA;AACzC,EAAM,MAAA,UAAA,GAAa,OAAQ,CAAA,EAAA,CAAG,SAAU,EAAA,CAAA;AACxC,EAAA,KAAA,MAAW,UAAU,MAAQ,EAAA;AAC3B,IAAA,OAAO,OAAO,MAAM,CAAA,CAAA;AAAA,GACtB;AACA,EAAA,IAAI,QAAW,GAAA,CAAA,CAAA;AACf,EAAW,UAAA,CAAA,OAAA,CAAQ,CAAC,SAAc,KAAA;AAChC,IAAA,MAAA,CAAO,SAAS,CAAI,GAAA;AAAA,MAClB,OAAO,KAAM,CAAA,YAAA,CAAa,QAAW,GAAA,KAAA,CAAM,aAAa,MAAM,CAAA;AAAA,MAC9D,QAAU,EAAA,QAAA;AAAA,KACZ,CAAA;AACA,IAAA,QAAA,EAAA,CAAA;AAAA,GACD,CAAA,CAAA;AACD,EAAA,eAAA,CAAgB,QAAQ,CAAA,CAAA;AACxB,EAAO,MAAA,CAAA,MAAA,CAAO,GAAG,CAAG,EAAA,WAAA,EAAa,OAAO,IAAK,CAAA,MAAM,CAAE,CAAA,MAAA,GAAS,EAAE,CAAA,CAAA;AAChE,EAAU,SAAA,CAAA,QAAA,EAAU,QAAQ,CAAC,CAAA,CAAA;AAC7B,EAAM,MAAA,GAAA,GAAM,OAAO,SAAU,EAAA,CAAA;AAC7B,EAAA,IAAI,KAAO,EAAA;AACT,IAAS,QAAA,CAAA,MAAA,CAAO,MAAM,CAAE,CAAA,IAAA,CAAK,KAAK,CAAE,CAAA,IAAA,CAAK,KAAK,WAAW,CAAA,CAAE,KAAK,WAAa,EAAA,KAAK,EAAE,IAAK,CAAA,aAAA,EAAe,MAAM,CAAE,CAAA,IAAA,CAAK,KAAK,EAAE,CAAA,CAAA;AAAA,GAC9H;AACA,EAAA,MAAM,SAAS,GAAI,CAAA,KAAA,GAAQ,GAAI,CAAA,MAAA,GAAS,IAAI,KAAM,CAAA,cAAA,CAAA;AAClD,EAAA,MAAM,KAAQ,GAAA,WAAA,GAAc,GAAI,CAAA,KAAA,GAAQ,IAAI,KAAM,CAAA,cAAA,CAAA;AAClD,EAAA,gBAAA,CAAiB,QAAU,EAAA,MAAA,EAAQ,KAAO,EAAA,KAAA,CAAM,WAAW,CAAA,CAAA;AAC3D,EAAA,QAAA,CAAS,MAAO,CAAA,MAAM,CAAE,CAAA,IAAA,CAAK,MAAM,WAAW,CAAA,CAAE,IAAK,CAAA,IAAA,EAAM,MAAM,MAAS,GAAA,CAAC,CAAE,CAAA,IAAA,CAAK,MAAM,KAAQ,GAAA,WAAA,GAAc,CAAC,CAAA,CAAE,KAAK,IAAM,EAAA,KAAA,CAAM,MAAS,GAAA,CAAC,EAAE,IAAK,CAAA,cAAA,EAAgB,CAAC,CAAA,CAAE,KAAK,QAAU,EAAA,OAAO,CAAE,CAAA,IAAA,CAAK,cAAc,iBAAiB,CAAA,CAAA;AAClO,EAAM,MAAA,iBAAA,GAAoB,QAAQ,EAAK,GAAA,CAAA,CAAA;AACvC,EAAS,QAAA,CAAA,IAAA,CAAK,SAAW,EAAA,CAAA,EAAG,GAAI,CAAA,MAAM,QAAQ,KAAK,CAAA,CAAA,EAAI,MAAS,GAAA,iBAAiB,CAAE,CAAA,CAAA,CAAA;AACnF,EAAS,QAAA,CAAA,IAAA,CAAK,uBAAuB,eAAe,CAAA,CAAA;AACpD,EAAA,QAAA,CAAS,IAAK,CAAA,QAAA,EAAU,MAAS,GAAA,iBAAA,GAAoB,EAAE,CAAA,CAAA;AACzD,CAAA,CAAA;AACA,IAAM,MAAS,GAAA;AAAA,EACb,IAAM,EAAA;AAAA,IACJ,MAAQ,EAAA,KAAA,CAAA;AAAA,IACR,KAAO,EAAA,KAAA,CAAA;AAAA,IACP,MAAQ,EAAA,KAAA,CAAA;AAAA,IACR,KAAO,EAAA,KAAA,CAAA;AAAA,GACT;AAAA,EACA,WAAa,EAAA,CAAA;AAAA,EACb,eAAe,EAAC;AAAA,EAChB,MAAM,WAAW;AACf,IAAA,IAAA,CAAK,gBAAgB,EAAC,CAAA;AACtB,IAAA,IAAA,CAAK,IAAO,GAAA;AAAA,MACV,MAAQ,EAAA,KAAA,CAAA;AAAA,MACR,KAAO,EAAA,KAAA,CAAA;AAAA,MACP,MAAQ,EAAA,KAAA,CAAA;AAAA,MACR,KAAO,EAAA,KAAA,CAAA;AAAA,KACT,CAAA;AACA,IAAA,IAAA,CAAK,WAAc,GAAA,CAAA,CAAA;AAAA,GACrB;AAAA,EACA,SAAW,EAAA,SAAS,GAAK,EAAA,GAAA,EAAK,KAAK,GAAK,EAAA;AACtC,IAAI,IAAA,GAAA,CAAI,GAAG,CAAA,KAAM,KAAQ,CAAA,EAAA;AACvB,MAAA,GAAA,CAAI,GAAG,CAAI,GAAA,GAAA,CAAA;AAAA,KACN,MAAA;AACL,MAAA,GAAA,CAAI,GAAG,CAAI,GAAA,GAAA,CAAI,GAAK,EAAA,GAAA,CAAI,GAAG,CAAC,CAAA,CAAA;AAAA,KAC9B;AAAA,GACF;AAAA,EACA,YAAc,EAAA,SAAS,MAAQ,EAAA,MAAA,EAAQ,OAAO,KAAO,EAAA;AACnD,IAAM,MAAA,KAAA,GAAQ,WAAY,CAAA,OAAA,CAAA;AAC1B,IAAA,MAAM,KAAQ,GAAA,IAAA,CAAA;AACd,IAAA,IAAI,GAAM,GAAA,CAAA,CAAA;AACV,IAAA,SAAS,SAAS,IAAM,EAAA;AACtB,MAAO,OAAA,SAAS,iBAAiB,IAAM,EAAA;AACrC,QAAA,GAAA,EAAA,CAAA;AACA,QAAA,MAAM,CAAI,GAAA,KAAA,CAAM,aAAc,CAAA,MAAA,GAAS,GAAM,GAAA,CAAA,CAAA;AAC7C,QAAM,KAAA,CAAA,SAAA,CAAU,MAAM,QAAU,EAAA,MAAA,GAAS,IAAI,KAAM,CAAA,SAAA,EAAW,KAAK,GAAG,CAAA,CAAA;AACtE,QAAM,KAAA,CAAA,SAAA,CAAU,MAAM,OAAS,EAAA,KAAA,GAAQ,IAAI,KAAM,CAAA,SAAA,EAAW,KAAK,GAAG,CAAA,CAAA;AACpE,QAAM,KAAA,CAAA,SAAA,CAAU,OAAO,IAAM,EAAA,QAAA,EAAU,SAAS,CAAI,GAAA,KAAA,CAAM,SAAW,EAAA,IAAA,CAAK,GAAG,CAAA,CAAA;AAC7E,QAAM,KAAA,CAAA,SAAA,CAAU,OAAO,IAAM,EAAA,OAAA,EAAS,QAAQ,CAAI,GAAA,KAAA,CAAM,SAAW,EAAA,IAAA,CAAK,GAAG,CAAA,CAAA;AAC3E,QAA8B;AAC5B,UAAM,KAAA,CAAA,SAAA,CAAU,MAAM,QAAU,EAAA,MAAA,GAAS,IAAI,KAAM,CAAA,SAAA,EAAW,KAAK,GAAG,CAAA,CAAA;AACtE,UAAM,KAAA,CAAA,SAAA,CAAU,MAAM,OAAS,EAAA,KAAA,GAAQ,IAAI,KAAM,CAAA,SAAA,EAAW,KAAK,GAAG,CAAA,CAAA;AACpE,UAAM,KAAA,CAAA,SAAA,CAAU,OAAO,IAAM,EAAA,QAAA,EAAU,SAAS,CAAI,GAAA,KAAA,CAAM,SAAW,EAAA,IAAA,CAAK,GAAG,CAAA,CAAA;AAC7E,UAAM,KAAA,CAAA,SAAA,CAAU,OAAO,IAAM,EAAA,OAAA,EAAS,QAAQ,CAAI,GAAA,KAAA,CAAM,SAAW,EAAA,IAAA,CAAK,GAAG,CAAA,CAAA;AAAA,SAC7E;AAAA,OACF,CAAA;AAAA,KACF;AACA,IAAK,IAAA,CAAA,aAAA,CAAc,OAAQ,CAAA,QAAA,EAAU,CAAA,CAAA;AAAA,GACvC;AAAA,EACA,MAAQ,EAAA,SAAS,MAAQ,EAAA,MAAA,EAAQ,OAAO,KAAO,EAAA;AAC7C,IAAA,MAAM,OAAU,GAAA,IAAA,CAAK,GAAI,CAAA,MAAA,EAAQ,KAAK,CAAA,CAAA;AACtC,IAAA,MAAM,MAAS,GAAA,IAAA,CAAK,GAAI,CAAA,MAAA,EAAQ,KAAK,CAAA,CAAA;AACrC,IAAA,MAAM,OAAU,GAAA,IAAA,CAAK,GAAI,CAAA,MAAA,EAAQ,KAAK,CAAA,CAAA;AACtC,IAAA,MAAM,MAAS,GAAA,IAAA,CAAK,GAAI,CAAA,MAAA,EAAQ,KAAK,CAAA,CAAA;AACrC,IAAA,IAAA,CAAK,UAAU,MAAO,CAAA,IAAA,EAAM,QAAU,EAAA,OAAA,EAAS,KAAK,GAAG,CAAA,CAAA;AACvD,IAAA,IAAA,CAAK,UAAU,MAAO,CAAA,IAAA,EAAM,QAAU,EAAA,OAAA,EAAS,KAAK,GAAG,CAAA,CAAA;AACvD,IAAA,IAAA,CAAK,UAAU,MAAO,CAAA,IAAA,EAAM,OAAS,EAAA,MAAA,EAAQ,KAAK,GAAG,CAAA,CAAA;AACrD,IAAA,IAAA,CAAK,UAAU,MAAO,CAAA,IAAA,EAAM,OAAS,EAAA,MAAA,EAAQ,KAAK,GAAG,CAAA,CAAA;AACrD,IAAA,IAAA,CAAK,YAAa,CAAA,OAAA,EAAS,OAAS,EAAA,MAAA,EAAQ,MAAM,CAAA,CAAA;AAAA,GACpD;AAAA,EACA,eAAA,EAAiB,SAAS,IAAM,EAAA;AAC9B,IAAK,IAAA,CAAA,WAAA,GAAc,KAAK,WAAc,GAAA,IAAA,CAAA;AACtC,IAAK,IAAA,CAAA,IAAA,CAAK,QAAQ,IAAK,CAAA,WAAA,CAAA;AAAA,GACzB;AAAA,EACA,gBAAgB,WAAW;AACzB,IAAA,OAAO,IAAK,CAAA,WAAA,CAAA;AAAA,GACd;AAAA,EACA,WAAW,WAAW;AACpB,IAAA,OAAO,IAAK,CAAA,IAAA,CAAA;AAAA,GACd;AACF,CAAA,CAAA;AACA,IAAM,QAAQ,IAAK,CAAA,YAAA,CAAA;AACnB,IAAM,cAAc,IAAK,CAAA,cAAA,CAAA;AACzB,IAAM,SAAY,GAAA,SAAS,QAAU,EAAA,MAAA,EAAQ,WAAa,EAAA;AACxD,EAAM,MAAA,KAAA,GAAQ,WAAY,CAAA,OAAA,CAAA;AAC1B,EAAA,IAAI,WAAc,GAAA,EAAA,CAAA;AAClB,EAAA,MAAM,cAAiB,GAAA,KAAA,CAAM,MAAS,GAAA,CAAA,GAAI,KAAM,CAAA,cAAA,CAAA;AAChD,EAAA,MAAM,UAAU,WAAc,GAAA,cAAA,CAAA;AAC9B,EAAA,IAAI,aAAgB,GAAA,CAAA,CAAA;AACpB,EAAA,IAAI,IAAO,GAAA,MAAA,CAAA;AACX,EAAA,IAAI,MAAS,GAAA,OAAA,CAAA;AACb,EAAA,IAAI,GAAM,GAAA,CAAA,CAAA;AACV,EAAA,KAAA,MAAW,CAAC,CAAG,EAAA,IAAI,CAAK,IAAA,MAAA,CAAO,SAAW,EAAA;AACxC,IAAI,IAAA,WAAA,KAAgB,KAAK,OAAS,EAAA;AAChC,MAAO,IAAA,GAAA,KAAA,CAAM,aAAgB,GAAA,KAAA,CAAM,MAAM,CAAA,CAAA;AACzC,MAAA,GAAA,GAAM,gBAAgB,KAAM,CAAA,MAAA,CAAA;AAC5B,MAAS,MAAA,GAAA,WAAA,CAAY,aAAgB,GAAA,WAAA,CAAY,MAAM,CAAA,CAAA;AACvD,MAAA,IAAI,kBAAqB,GAAA,CAAA,CAAA;AACzB,MAAA,MAAM,kBAAkB,IAAK,CAAA,OAAA,CAAA;AAC7B,MAAA,KAAA,IAAS,SAAY,GAAA,CAAA,EAAG,SAAY,GAAA,MAAA,CAAO,QAAQ,SAAa,EAAA,EAAA;AAC9D,QAAA,IAAI,MAAO,CAAA,SAAS,CAAE,CAAA,OAAA,IAAW,eAAiB,EAAA;AAChD,UAAA,kBAAA,GAAqB,kBAAqB,GAAA,CAAA,CAAA;AAAA,SACrC,MAAA;AACL,UAAA,MAAA;AAAA,SACF;AAAA,OACF;AACA,MAAA,MAAM,OAAU,GAAA;AAAA,QACd,GAAG,CAAI,GAAA,KAAA,CAAM,UAAa,GAAA,CAAA,GAAI,MAAM,KAAQ,GAAA,WAAA;AAAA,QAC5C,CAAG,EAAA,EAAA;AAAA,QACH,MAAM,IAAK,CAAA,OAAA;AAAA,QACX,IAAA;AAAA,QACA,GAAA;AAAA,QACA,MAAA;AAAA,QACA,SAAW,EAAA,kBAAA;AAAA,OACb,CAAA;AACA,MAAQ,OAAA,CAAA,WAAA,CAAY,QAAU,EAAA,OAAA,EAAS,KAAK,CAAA,CAAA;AAC5C,MAAA,WAAA,GAAc,IAAK,CAAA,OAAA,CAAA;AACnB,MAAA,aAAA,EAAA,CAAA;AAAA,KACF;AACA,IAAA,MAAM,aAAa,IAAK,CAAA,MAAA,CAAO,MAAO,CAAA,CAAC,KAAK,SAAc,KAAA;AACxD,MAAI,IAAA,MAAA,CAAO,SAAS,CAAG,EAAA;AACrB,QAAI,GAAA,CAAA,SAAS,CAAI,GAAA,MAAA,CAAO,SAAS,CAAA,CAAA;AAAA,OACnC;AACA,MAAO,OAAA,GAAA,CAAA;AAAA,KACT,EAAG,EAAE,CAAA,CAAA;AACL,IAAA,IAAA,CAAK,IAAI,CAAI,GAAA,KAAA,CAAM,UAAa,GAAA,CAAA,GAAI,MAAM,KAAQ,GAAA,WAAA,CAAA;AAClD,IAAA,IAAA,CAAK,CAAI,GAAA,OAAA,CAAA;AACT,IAAA,IAAA,CAAK,QAAQ,KAAM,CAAA,cAAA,CAAA;AACnB,IAAA,IAAA,CAAK,SAAS,KAAM,CAAA,cAAA,CAAA;AACpB,IAAA,IAAA,CAAK,MAAS,GAAA,MAAA,CAAA;AACd,IAAA,IAAA,CAAK,IAAO,GAAA,IAAA,CAAA;AACZ,IAAA,IAAA,CAAK,GAAM,GAAA,GAAA,CAAA;AACX,IAAA,IAAA,CAAK,MAAS,GAAA,UAAA,CAAA;AACd,IAAQ,OAAA,CAAA,QAAA,CAAS,QAAU,EAAA,IAAA,EAAM,KAAK,CAAA,CAAA;AACtC,IAAA,MAAA,CAAO,MAAO,CAAA,IAAA,CAAK,CAAG,EAAA,IAAA,CAAK,CAAG,EAAA,IAAA,CAAK,CAAI,GAAA,IAAA,CAAK,KAAQ,GAAA,KAAA,CAAM,UAAY,EAAA,GAAA,GAAM,IAAI,EAAE,CAAA,CAAA;AAAA,GACpF;AACF,CAAA,CAAA;AACA,IAAM,QAAW,GAAA;AAAA,EACf,OAAA;AAAA,EACA,IAAA;AACF,CAAA,CAAA;AACA,IAAM,OAAU,GAAA;AAAA,EACd,MAAQ,EAAA,QAAA;AAAA,EACR,EAAA;AAAA,EACA,QAAA;AAAA,EACA,MAAA;AAAA,EACA,IAAA,EAAM,CAAC,GAAQ,KAAA;AACb,IAAS,QAAA,CAAA,OAAA,CAAQ,IAAI,OAAO,CAAA,CAAA;AAC5B,IAAA,EAAA,CAAG,KAAM,EAAA,CAAA;AAAA,GACX;AACF","file":"journeyDiagram-49397b02-Y7VSS5B7.js","sourcesContent":["import { c as getConfig, q as setDiagramTitle, t as getDiagramTitle, s as setAccTitle, g as getAccTitle, b as setAccDescription, a as getAccDescription, v as clear$1, i as configureSvgSize } from \"./mermaid-b5860b54.js\";\nimport { arc, select } from \"d3\";\nimport { d as drawRect$1, f as drawText$1, a as drawBackgroundRect$1, g as getNoteRect } from \"./svgDrawCommon-08f97a94.js\";\nimport \"ts-dedent\";\nimport \"dayjs\";\nimport \"@braintree/sanitize-url\";\nimport \"dompurify\";\nimport \"khroma\";\nimport \"lodash-es/memoize.js\";\nimport \"lodash-es/merge.js\";\nimport \"stylis\";\nimport \"lodash-es/isEmpty.js\";\nvar parser = function() {\n  var o = function(k, v, o2, l) {\n    for (o2 = o2 || {}, l = k.length; l--; o2[k[l]] = v)\n      ;\n    return o2;\n  }, $V0 = [6, 8, 10, 11, 12, 14, 16, 17, 18], $V1 = [1, 9], $V2 = [1, 10], $V3 = [1, 11], $V4 = [1, 12], $V5 = [1, 13], $V6 = [1, 14];\n  var parser2 = {\n    trace: function trace() {\n    },\n    yy: {},\n    symbols_: { \"error\": 2, \"start\": 3, \"journey\": 4, \"document\": 5, \"EOF\": 6, \"line\": 7, \"SPACE\": 8, \"statement\": 9, \"NEWLINE\": 10, \"title\": 11, \"acc_title\": 12, \"acc_title_value\": 13, \"acc_descr\": 14, \"acc_descr_value\": 15, \"acc_descr_multiline_value\": 16, \"section\": 17, \"taskName\": 18, \"taskData\": 19, \"$accept\": 0, \"$end\": 1 },\n    terminals_: { 2: \"error\", 4: \"journey\", 6: \"EOF\", 8: \"SPACE\", 10: \"NEWLINE\", 11: \"title\", 12: \"acc_title\", 13: \"acc_title_value\", 14: \"acc_descr\", 15: \"acc_descr_value\", 16: \"acc_descr_multiline_value\", 17: \"section\", 18: \"taskName\", 19: \"taskData\" },\n    productions_: [0, [3, 3], [5, 0], [5, 2], [7, 2], [7, 1], [7, 1], [7, 1], [9, 1], [9, 2], [9, 2], [9, 1], [9, 1], [9, 2]],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$) {\n      var $0 = $$.length - 1;\n      switch (yystate) {\n        case 1:\n          return $$[$0 - 1];\n        case 2:\n          this.$ = [];\n          break;\n        case 3:\n          $$[$0 - 1].push($$[$0]);\n          this.$ = $$[$0 - 1];\n          break;\n        case 4:\n        case 5:\n          this.$ = $$[$0];\n          break;\n        case 6:\n        case 7:\n          this.$ = [];\n          break;\n        case 8:\n          yy.setDiagramTitle($$[$0].substr(6));\n          this.$ = $$[$0].substr(6);\n          break;\n        case 9:\n          this.$ = $$[$0].trim();\n          yy.setAccTitle(this.$);\n          break;\n        case 10:\n        case 11:\n          this.$ = $$[$0].trim();\n          yy.setAccDescription(this.$);\n          break;\n        case 12:\n          yy.addSection($$[$0].substr(8));\n          this.$ = $$[$0].substr(8);\n          break;\n        case 13:\n          yy.addTask($$[$0 - 1], $$[$0]);\n          this.$ = \"task\";\n          break;\n      }\n    },\n    table: [{ 3: 1, 4: [1, 2] }, { 1: [3] }, o($V0, [2, 2], { 5: 3 }), { 6: [1, 4], 7: 5, 8: [1, 6], 9: 7, 10: [1, 8], 11: $V1, 12: $V2, 14: $V3, 16: $V4, 17: $V5, 18: $V6 }, o($V0, [2, 7], { 1: [2, 1] }), o($V0, [2, 3]), { 9: 15, 11: $V1, 12: $V2, 14: $V3, 16: $V4, 17: $V5, 18: $V6 }, o($V0, [2, 5]), o($V0, [2, 6]), o($V0, [2, 8]), { 13: [1, 16] }, { 15: [1, 17] }, o($V0, [2, 11]), o($V0, [2, 12]), { 19: [1, 18] }, o($V0, [2, 4]), o($V0, [2, 9]), o($V0, [2, 10]), o($V0, [2, 13])],\n    defaultActions: {},\n    parseError: function parseError(str, hash) {\n      if (hash.recoverable) {\n        this.trace(str);\n      } else {\n        var error = new Error(str);\n        error.hash = hash;\n        throw error;\n      }\n    },\n    parse: function parse(input) {\n      var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = \"\", yylineno = 0, yyleng = 0, TERROR = 2, EOF = 1;\n      var args = lstack.slice.call(arguments, 1);\n      var lexer2 = Object.create(this.lexer);\n      var sharedState = { yy: {} };\n      for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n          sharedState.yy[k] = this.yy[k];\n        }\n      }\n      lexer2.setInput(input, sharedState.yy);\n      sharedState.yy.lexer = lexer2;\n      sharedState.yy.parser = this;\n      if (typeof lexer2.yylloc == \"undefined\") {\n        lexer2.yylloc = {};\n      }\n      var yyloc = lexer2.yylloc;\n      lstack.push(yyloc);\n      var ranges = lexer2.options && lexer2.options.ranges;\n      if (typeof sharedState.yy.parseError === \"function\") {\n        this.parseError = sharedState.yy.parseError;\n      } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n      }\n      function lex() {\n        var token;\n        token = tstack.pop() || lexer2.lex() || EOF;\n        if (typeof token !== \"number\") {\n          if (token instanceof Array) {\n            tstack = token;\n            token = tstack.pop();\n          }\n          token = self.symbols_[token] || token;\n        }\n        return token;\n      }\n      var symbol, state, action, r, yyval = {}, p, len, newState, expected;\n      while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n          action = this.defaultActions[state];\n        } else {\n          if (symbol === null || typeof symbol == \"undefined\") {\n            symbol = lex();\n          }\n          action = table[state] && table[state][symbol];\n        }\n        if (typeof action === \"undefined\" || !action.length || !action[0]) {\n          var errStr = \"\";\n          expected = [];\n          for (p in table[state]) {\n            if (this.terminals_[p] && p > TERROR) {\n              expected.push(\"'\" + this.terminals_[p] + \"'\");\n            }\n          }\n          if (lexer2.showPosition) {\n            errStr = \"Parse error on line \" + (yylineno + 1) + \":\\n\" + lexer2.showPosition() + \"\\nExpecting \" + expected.join(\", \") + \", got '\" + (this.terminals_[symbol] || symbol) + \"'\";\n          } else {\n            errStr = \"Parse error on line \" + (yylineno + 1) + \": Unexpected \" + (symbol == EOF ? \"end of input\" : \"'\" + (this.terminals_[symbol] || symbol) + \"'\");\n          }\n          this.parseError(errStr, {\n            text: lexer2.match,\n            token: this.terminals_[symbol] || symbol,\n            line: lexer2.yylineno,\n            loc: yyloc,\n            expected\n          });\n        }\n        if (action[0] instanceof Array && action.length > 1) {\n          throw new Error(\"Parse Error: multiple actions possible at state: \" + state + \", token: \" + symbol);\n        }\n        switch (action[0]) {\n          case 1:\n            stack.push(symbol);\n            vstack.push(lexer2.yytext);\n            lstack.push(lexer2.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            {\n              yyleng = lexer2.yyleng;\n              yytext = lexer2.yytext;\n              yylineno = lexer2.yylineno;\n              yyloc = lexer2.yylloc;\n            }\n            break;\n          case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n              first_line: lstack[lstack.length - (len || 1)].first_line,\n              last_line: lstack[lstack.length - 1].last_line,\n              first_column: lstack[lstack.length - (len || 1)].first_column,\n              last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n              yyval._$.range = [\n                lstack[lstack.length - (len || 1)].range[0],\n                lstack[lstack.length - 1].range[1]\n              ];\n            }\n            r = this.performAction.apply(yyval, [\n              yytext,\n              yyleng,\n              yylineno,\n              sharedState.yy,\n              action[1],\n              vstack,\n              lstack\n            ].concat(args));\n            if (typeof r !== \"undefined\") {\n              return r;\n            }\n            if (len) {\n              stack = stack.slice(0, -1 * len * 2);\n              vstack = vstack.slice(0, -1 * len);\n              lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n          case 3:\n            return true;\n        }\n      }\n      return true;\n    }\n  };\n  var lexer = function() {\n    var lexer2 = {\n      EOF: 1,\n      parseError: function parseError(str, hash) {\n        if (this.yy.parser) {\n          this.yy.parser.parseError(str, hash);\n        } else {\n          throw new Error(str);\n        }\n      },\n      // resets the lexer, sets new input\n      setInput: function(input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = \"\";\n        this.conditionStack = [\"INITIAL\"];\n        this.yylloc = {\n          first_line: 1,\n          first_column: 0,\n          last_line: 1,\n          last_column: 0\n        };\n        if (this.options.ranges) {\n          this.yylloc.range = [0, 0];\n        }\n        this.offset = 0;\n        return this;\n      },\n      // consumes and returns one char from the input\n      input: function() {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n          this.yylineno++;\n          this.yylloc.last_line++;\n        } else {\n          this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n          this.yylloc.range[1]++;\n        }\n        this._input = this._input.slice(1);\n        return ch;\n      },\n      // unshifts one char (or a string) into the input\n      unput: function(ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n        if (lines.length - 1) {\n          this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n        this.yylloc = {\n          first_line: this.yylloc.first_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.first_column,\n          last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len\n        };\n        if (this.options.ranges) {\n          this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n      },\n      // When called from action, caches matched text and appends it on next action\n      more: function() {\n        this._more = true;\n        return this;\n      },\n      // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\n      reject: function() {\n        if (this.options.backtrack_lexer) {\n          this._backtrack = true;\n        } else {\n          return this.parseError(\"Lexical error on line \" + (this.yylineno + 1) + \". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n\" + this.showPosition(), {\n            text: \"\",\n            token: null,\n            line: this.yylineno\n          });\n        }\n        return this;\n      },\n      // retain first n characters of the match\n      less: function(n) {\n        this.unput(this.match.slice(n));\n      },\n      // displays already matched input, i.e. for error messages\n      pastInput: function() {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? \"...\" : \"\") + past.substr(-20).replace(/\\n/g, \"\");\n      },\n      // displays upcoming input, i.e. for error messages\n      upcomingInput: function() {\n        var next = this.match;\n        if (next.length < 20) {\n          next += this._input.substr(0, 20 - next.length);\n        }\n        return (next.substr(0, 20) + (next.length > 20 ? \"...\" : \"\")).replace(/\\n/g, \"\");\n      },\n      // displays the character position where the lexing error occurred, i.e. for error messages\n      showPosition: function() {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n      },\n      // test the lexed token: return FALSE when not a match, otherwise return token\n      test_match: function(match, indexed_rule) {\n        var token, lines, backup;\n        if (this.options.backtrack_lexer) {\n          backup = {\n            yylineno: this.yylineno,\n            yylloc: {\n              first_line: this.yylloc.first_line,\n              last_line: this.last_line,\n              first_column: this.yylloc.first_column,\n              last_column: this.yylloc.last_column\n            },\n            yytext: this.yytext,\n            match: this.match,\n            matches: this.matches,\n            matched: this.matched,\n            yyleng: this.yyleng,\n            offset: this.offset,\n            _more: this._more,\n            _input: this._input,\n            yy: this.yy,\n            conditionStack: this.conditionStack.slice(0),\n            done: this.done\n          };\n          if (this.options.ranges) {\n            backup.yylloc.range = this.yylloc.range.slice(0);\n          }\n        }\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n          this.yylineno += lines.length;\n        }\n        this.yylloc = {\n          first_line: this.yylloc.last_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.last_column,\n          last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length : this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n          this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n          this.done = false;\n        }\n        if (token) {\n          return token;\n        } else if (this._backtrack) {\n          for (var k in backup) {\n            this[k] = backup[k];\n          }\n          return false;\n        }\n        return false;\n      },\n      // return next match in input\n      next: function() {\n        if (this.done) {\n          return this.EOF;\n        }\n        if (!this._input) {\n          this.done = true;\n        }\n        var token, match, tempMatch, index;\n        if (!this._more) {\n          this.yytext = \"\";\n          this.match = \"\";\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n          tempMatch = this._input.match(this.rules[rules[i]]);\n          if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n            match = tempMatch;\n            index = i;\n            if (this.options.backtrack_lexer) {\n              token = this.test_match(tempMatch, rules[i]);\n              if (token !== false) {\n                return token;\n              } else if (this._backtrack) {\n                match = false;\n                continue;\n              } else {\n                return false;\n              }\n            } else if (!this.options.flex) {\n              break;\n            }\n          }\n        }\n        if (match) {\n          token = this.test_match(match, rules[index]);\n          if (token !== false) {\n            return token;\n          }\n          return false;\n        }\n        if (this._input === \"\") {\n          return this.EOF;\n        } else {\n          return this.parseError(\"Lexical error on line \" + (this.yylineno + 1) + \". Unrecognized text.\\n\" + this.showPosition(), {\n            text: \"\",\n            token: null,\n            line: this.yylineno\n          });\n        }\n      },\n      // return next match that has a token\n      lex: function lex() {\n        var r = this.next();\n        if (r) {\n          return r;\n        } else {\n          return this.lex();\n        }\n      },\n      // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\n      begin: function begin(condition) {\n        this.conditionStack.push(condition);\n      },\n      // pop the previously active lexer condition state off the condition stack\n      popState: function popState() {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n          return this.conditionStack.pop();\n        } else {\n          return this.conditionStack[0];\n        }\n      },\n      // produce the lexer rule set which is active for the currently active lexer condition state\n      _currentRules: function _currentRules() {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n          return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n          return this.conditions[\"INITIAL\"].rules;\n        }\n      },\n      // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\n      topState: function topState(n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n          return this.conditionStack[n];\n        } else {\n          return \"INITIAL\";\n        }\n      },\n      // alias for begin(condition)\n      pushState: function pushState(condition) {\n        this.begin(condition);\n      },\n      // return the number of states currently on the stack\n      stateStackSize: function stateStackSize() {\n        return this.conditionStack.length;\n      },\n      options: { \"case-insensitive\": true },\n      performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {\n        switch ($avoiding_name_collisions) {\n          case 0:\n            break;\n          case 1:\n            break;\n          case 2:\n            return 10;\n          case 3:\n            break;\n          case 4:\n            break;\n          case 5:\n            return 4;\n          case 6:\n            return 11;\n          case 7:\n            this.begin(\"acc_title\");\n            return 12;\n          case 8:\n            this.popState();\n            return \"acc_title_value\";\n          case 9:\n            this.begin(\"acc_descr\");\n            return 14;\n          case 10:\n            this.popState();\n            return \"acc_descr_value\";\n          case 11:\n            this.begin(\"acc_descr_multiline\");\n            break;\n          case 12:\n            this.popState();\n            break;\n          case 13:\n            return \"acc_descr_multiline_value\";\n          case 14:\n            return 17;\n          case 15:\n            return 18;\n          case 16:\n            return 19;\n          case 17:\n            return \":\";\n          case 18:\n            return 6;\n          case 19:\n            return \"INVALID\";\n        }\n      },\n      rules: [/^(?:%(?!\\{)[^\\n]*)/i, /^(?:[^\\}]%%[^\\n]*)/i, /^(?:[\\n]+)/i, /^(?:\\s+)/i, /^(?:#[^\\n]*)/i, /^(?:journey\\b)/i, /^(?:title\\s[^#\\n;]+)/i, /^(?:accTitle\\s*:\\s*)/i, /^(?:(?!\\n||)*[^\\n]*)/i, /^(?:accDescr\\s*:\\s*)/i, /^(?:(?!\\n||)*[^\\n]*)/i, /^(?:accDescr\\s*\\{\\s*)/i, /^(?:[\\}])/i, /^(?:[^\\}]*)/i, /^(?:section\\s[^#:\\n;]+)/i, /^(?:[^#:\\n;]+)/i, /^(?::[^#\\n;]+)/i, /^(?::)/i, /^(?:$)/i, /^(?:.)/i],\n      conditions: { \"acc_descr_multiline\": { \"rules\": [12, 13], \"inclusive\": false }, \"acc_descr\": { \"rules\": [10], \"inclusive\": false }, \"acc_title\": { \"rules\": [8], \"inclusive\": false }, \"INITIAL\": { \"rules\": [0, 1, 2, 3, 4, 5, 6, 7, 9, 11, 14, 15, 16, 17, 18, 19], \"inclusive\": true } }\n    };\n    return lexer2;\n  }();\n  parser2.lexer = lexer;\n  function Parser() {\n    this.yy = {};\n  }\n  Parser.prototype = parser2;\n  parser2.Parser = Parser;\n  return new Parser();\n}();\nparser.parser = parser;\nconst parser$1 = parser;\nlet currentSection = \"\";\nconst sections = [];\nconst tasks = [];\nconst rawTasks = [];\nconst clear = function() {\n  sections.length = 0;\n  tasks.length = 0;\n  currentSection = \"\";\n  rawTasks.length = 0;\n  clear$1();\n};\nconst addSection = function(txt) {\n  currentSection = txt;\n  sections.push(txt);\n};\nconst getSections = function() {\n  return sections;\n};\nconst getTasks = function() {\n  let allItemsProcessed = compileTasks();\n  const maxDepth = 100;\n  let iterationCount = 0;\n  while (!allItemsProcessed && iterationCount < maxDepth) {\n    allItemsProcessed = compileTasks();\n    iterationCount++;\n  }\n  tasks.push(...rawTasks);\n  return tasks;\n};\nconst updateActors = function() {\n  const tempActors = [];\n  tasks.forEach((task) => {\n    if (task.people) {\n      tempActors.push(...task.people);\n    }\n  });\n  const unique = new Set(tempActors);\n  return [...unique].sort();\n};\nconst addTask = function(descr, taskData) {\n  const pieces = taskData.substr(1).split(\":\");\n  let score = 0;\n  let peeps = [];\n  if (pieces.length === 1) {\n    score = Number(pieces[0]);\n    peeps = [];\n  } else {\n    score = Number(pieces[0]);\n    peeps = pieces[1].split(\",\");\n  }\n  const peopleList = peeps.map((s) => s.trim());\n  const rawTask = {\n    section: currentSection,\n    type: currentSection,\n    people: peopleList,\n    task: descr,\n    score\n  };\n  rawTasks.push(rawTask);\n};\nconst addTaskOrg = function(descr) {\n  const newTask = {\n    section: currentSection,\n    type: currentSection,\n    description: descr,\n    task: descr,\n    classes: []\n  };\n  tasks.push(newTask);\n};\nconst compileTasks = function() {\n  const compileTask = function(pos) {\n    return rawTasks[pos].processed;\n  };\n  let allProcessed = true;\n  for (const [i, rawTask] of rawTasks.entries()) {\n    compileTask(i);\n    allProcessed = allProcessed && rawTask.processed;\n  }\n  return allProcessed;\n};\nconst getActors = function() {\n  return updateActors();\n};\nconst db = {\n  getConfig: () => getConfig().journey,\n  clear,\n  setDiagramTitle,\n  getDiagramTitle,\n  setAccTitle,\n  getAccTitle,\n  setAccDescription,\n  getAccDescription,\n  addSection,\n  getSections,\n  getTasks,\n  addTask,\n  addTaskOrg,\n  getActors\n};\nconst getStyles = (options) => `.label {\n    font-family: 'trebuchet ms', verdana, arial, sans-serif;\n    font-family: var(--mermaid-font-family);\n    color: ${options.textColor};\n  }\n  .mouth {\n    stroke: #666;\n  }\n\n  line {\n    stroke: ${options.textColor}\n  }\n\n  .legend {\n    fill: ${options.textColor};\n  }\n\n  .label text {\n    fill: #333;\n  }\n  .label {\n    color: ${options.textColor}\n  }\n\n  .face {\n    ${options.faceColor ? `fill: ${options.faceColor}` : \"fill: #FFF8DC\"};\n    stroke: #999;\n  }\n\n  .node rect,\n  .node circle,\n  .node ellipse,\n  .node polygon,\n  .node path {\n    fill: ${options.mainBkg};\n    stroke: ${options.nodeBorder};\n    stroke-width: 1px;\n  }\n\n  .node .label {\n    text-align: center;\n  }\n  .node.clickable {\n    cursor: pointer;\n  }\n\n  .arrowheadPath {\n    fill: ${options.arrowheadColor};\n  }\n\n  .edgePath .path {\n    stroke: ${options.lineColor};\n    stroke-width: 1.5px;\n  }\n\n  .flowchart-link {\n    stroke: ${options.lineColor};\n    fill: none;\n  }\n\n  .edgeLabel {\n    background-color: ${options.edgeLabelBackground};\n    rect {\n      opacity: 0.5;\n    }\n    text-align: center;\n  }\n\n  .cluster rect {\n  }\n\n  .cluster text {\n    fill: ${options.titleColor};\n  }\n\n  div.mermaidTooltip {\n    position: absolute;\n    text-align: center;\n    max-width: 200px;\n    padding: 2px;\n    font-family: 'trebuchet ms', verdana, arial, sans-serif;\n    font-family: var(--mermaid-font-family);\n    font-size: 12px;\n    background: ${options.tertiaryColor};\n    border: 1px solid ${options.border2};\n    border-radius: 2px;\n    pointer-events: none;\n    z-index: 100;\n  }\n\n  .task-type-0, .section-type-0  {\n    ${options.fillType0 ? `fill: ${options.fillType0}` : \"\"};\n  }\n  .task-type-1, .section-type-1  {\n    ${options.fillType0 ? `fill: ${options.fillType1}` : \"\"};\n  }\n  .task-type-2, .section-type-2  {\n    ${options.fillType0 ? `fill: ${options.fillType2}` : \"\"};\n  }\n  .task-type-3, .section-type-3  {\n    ${options.fillType0 ? `fill: ${options.fillType3}` : \"\"};\n  }\n  .task-type-4, .section-type-4  {\n    ${options.fillType0 ? `fill: ${options.fillType4}` : \"\"};\n  }\n  .task-type-5, .section-type-5  {\n    ${options.fillType0 ? `fill: ${options.fillType5}` : \"\"};\n  }\n  .task-type-6, .section-type-6  {\n    ${options.fillType0 ? `fill: ${options.fillType6}` : \"\"};\n  }\n  .task-type-7, .section-type-7  {\n    ${options.fillType0 ? `fill: ${options.fillType7}` : \"\"};\n  }\n\n  .actor-0 {\n    ${options.actor0 ? `fill: ${options.actor0}` : \"\"};\n  }\n  .actor-1 {\n    ${options.actor1 ? `fill: ${options.actor1}` : \"\"};\n  }\n  .actor-2 {\n    ${options.actor2 ? `fill: ${options.actor2}` : \"\"};\n  }\n  .actor-3 {\n    ${options.actor3 ? `fill: ${options.actor3}` : \"\"};\n  }\n  .actor-4 {\n    ${options.actor4 ? `fill: ${options.actor4}` : \"\"};\n  }\n  .actor-5 {\n    ${options.actor5 ? `fill: ${options.actor5}` : \"\"};\n  }\n`;\nconst styles = getStyles;\nconst drawRect = function(elem, rectData) {\n  return drawRect$1(elem, rectData);\n};\nconst drawFace = function(element, faceData) {\n  const radius = 15;\n  const circleElement = element.append(\"circle\").attr(\"cx\", faceData.cx).attr(\"cy\", faceData.cy).attr(\"class\", \"face\").attr(\"r\", radius).attr(\"stroke-width\", 2).attr(\"overflow\", \"visible\");\n  const face = element.append(\"g\");\n  face.append(\"circle\").attr(\"cx\", faceData.cx - radius / 3).attr(\"cy\", faceData.cy - radius / 3).attr(\"r\", 1.5).attr(\"stroke-width\", 2).attr(\"fill\", \"#666\").attr(\"stroke\", \"#666\");\n  face.append(\"circle\").attr(\"cx\", faceData.cx + radius / 3).attr(\"cy\", faceData.cy - radius / 3).attr(\"r\", 1.5).attr(\"stroke-width\", 2).attr(\"fill\", \"#666\").attr(\"stroke\", \"#666\");\n  function smile(face2) {\n    const arc$1 = arc().startAngle(Math.PI / 2).endAngle(3 * (Math.PI / 2)).innerRadius(radius / 2).outerRadius(radius / 2.2);\n    face2.append(\"path\").attr(\"class\", \"mouth\").attr(\"d\", arc$1).attr(\"transform\", \"translate(\" + faceData.cx + \",\" + (faceData.cy + 2) + \")\");\n  }\n  function sad(face2) {\n    const arc$1 = arc().startAngle(3 * Math.PI / 2).endAngle(5 * (Math.PI / 2)).innerRadius(radius / 2).outerRadius(radius / 2.2);\n    face2.append(\"path\").attr(\"class\", \"mouth\").attr(\"d\", arc$1).attr(\"transform\", \"translate(\" + faceData.cx + \",\" + (faceData.cy + 7) + \")\");\n  }\n  function ambivalent(face2) {\n    face2.append(\"line\").attr(\"class\", \"mouth\").attr(\"stroke\", 2).attr(\"x1\", faceData.cx - 5).attr(\"y1\", faceData.cy + 7).attr(\"x2\", faceData.cx + 5).attr(\"y2\", faceData.cy + 7).attr(\"class\", \"mouth\").attr(\"stroke-width\", \"1px\").attr(\"stroke\", \"#666\");\n  }\n  if (faceData.score > 3) {\n    smile(face);\n  } else if (faceData.score < 3) {\n    sad(face);\n  } else {\n    ambivalent(face);\n  }\n  return circleElement;\n};\nconst drawCircle = function(element, circleData) {\n  const circleElement = element.append(\"circle\");\n  circleElement.attr(\"cx\", circleData.cx);\n  circleElement.attr(\"cy\", circleData.cy);\n  circleElement.attr(\"class\", \"actor-\" + circleData.pos);\n  circleElement.attr(\"fill\", circleData.fill);\n  circleElement.attr(\"stroke\", circleData.stroke);\n  circleElement.attr(\"r\", circleData.r);\n  if (circleElement.class !== void 0) {\n    circleElement.attr(\"class\", circleElement.class);\n  }\n  if (circleData.title !== void 0) {\n    circleElement.append(\"title\").text(circleData.title);\n  }\n  return circleElement;\n};\nconst drawText = function(elem, textData) {\n  return drawText$1(elem, textData);\n};\nconst drawLabel = function(elem, txtObject) {\n  function genPoints(x, y, width, height, cut) {\n    return x + \",\" + y + \" \" + (x + width) + \",\" + y + \" \" + (x + width) + \",\" + (y + height - cut) + \" \" + (x + width - cut * 1.2) + \",\" + (y + height) + \" \" + x + \",\" + (y + height);\n  }\n  const polygon = elem.append(\"polygon\");\n  polygon.attr(\"points\", genPoints(txtObject.x, txtObject.y, 50, 20, 7));\n  polygon.attr(\"class\", \"labelBox\");\n  txtObject.y = txtObject.y + txtObject.labelMargin;\n  txtObject.x = txtObject.x + 0.5 * txtObject.labelMargin;\n  drawText(elem, txtObject);\n};\nconst drawSection = function(elem, section, conf2) {\n  const g = elem.append(\"g\");\n  const rect = getNoteRect();\n  rect.x = section.x;\n  rect.y = section.y;\n  rect.fill = section.fill;\n  rect.width = conf2.width * section.taskCount + // width of the tasks\n  conf2.diagramMarginX * (section.taskCount - 1);\n  rect.height = conf2.height;\n  rect.class = \"journey-section section-type-\" + section.num;\n  rect.rx = 3;\n  rect.ry = 3;\n  drawRect(g, rect);\n  _drawTextCandidateFunc(conf2)(\n    section.text,\n    g,\n    rect.x,\n    rect.y,\n    rect.width,\n    rect.height,\n    { class: \"journey-section section-type-\" + section.num },\n    conf2,\n    section.colour\n  );\n};\nlet taskCount = -1;\nconst drawTask = function(elem, task, conf2) {\n  const center = task.x + conf2.width / 2;\n  const g = elem.append(\"g\");\n  taskCount++;\n  const maxHeight = 300 + 5 * 30;\n  g.append(\"line\").attr(\"id\", \"task\" + taskCount).attr(\"x1\", center).attr(\"y1\", task.y).attr(\"x2\", center).attr(\"y2\", maxHeight).attr(\"class\", \"task-line\").attr(\"stroke-width\", \"1px\").attr(\"stroke-dasharray\", \"4 2\").attr(\"stroke\", \"#666\");\n  drawFace(g, {\n    cx: center,\n    cy: 300 + (5 - task.score) * 30,\n    score: task.score\n  });\n  const rect = getNoteRect();\n  rect.x = task.x;\n  rect.y = task.y;\n  rect.fill = task.fill;\n  rect.width = conf2.width;\n  rect.height = conf2.height;\n  rect.class = \"task task-type-\" + task.num;\n  rect.rx = 3;\n  rect.ry = 3;\n  drawRect(g, rect);\n  let xPos = task.x + 14;\n  task.people.forEach((person) => {\n    const colour = task.actors[person].color;\n    const circle = {\n      cx: xPos,\n      cy: task.y,\n      r: 7,\n      fill: colour,\n      stroke: \"#000\",\n      title: person,\n      pos: task.actors[person].position\n    };\n    drawCircle(g, circle);\n    xPos += 10;\n  });\n  _drawTextCandidateFunc(conf2)(\n    task.task,\n    g,\n    rect.x,\n    rect.y,\n    rect.width,\n    rect.height,\n    { class: \"task\" },\n    conf2,\n    task.colour\n  );\n};\nconst drawBackgroundRect = function(elem, bounds2) {\n  drawBackgroundRect$1(elem, bounds2);\n};\nconst _drawTextCandidateFunc = function() {\n  function byText(content, g, x, y, width, height, textAttrs, colour) {\n    const text = g.append(\"text\").attr(\"x\", x + width / 2).attr(\"y\", y + height / 2 + 5).style(\"font-color\", colour).style(\"text-anchor\", \"middle\").text(content);\n    _setTextAttrs(text, textAttrs);\n  }\n  function byTspan(content, g, x, y, width, height, textAttrs, conf2, colour) {\n    const { taskFontSize, taskFontFamily } = conf2;\n    const lines = content.split(/<br\\s*\\/?>/gi);\n    for (let i = 0; i < lines.length; i++) {\n      const dy = i * taskFontSize - taskFontSize * (lines.length - 1) / 2;\n      const text = g.append(\"text\").attr(\"x\", x + width / 2).attr(\"y\", y).attr(\"fill\", colour).style(\"text-anchor\", \"middle\").style(\"font-size\", taskFontSize).style(\"font-family\", taskFontFamily);\n      text.append(\"tspan\").attr(\"x\", x + width / 2).attr(\"dy\", dy).text(lines[i]);\n      text.attr(\"y\", y + height / 2).attr(\"dominant-baseline\", \"central\").attr(\"alignment-baseline\", \"central\");\n      _setTextAttrs(text, textAttrs);\n    }\n  }\n  function byFo(content, g, x, y, width, height, textAttrs, conf2) {\n    const body = g.append(\"switch\");\n    const f = body.append(\"foreignObject\").attr(\"x\", x).attr(\"y\", y).attr(\"width\", width).attr(\"height\", height).attr(\"position\", \"fixed\");\n    const text = f.append(\"xhtml:div\").style(\"display\", \"table\").style(\"height\", \"100%\").style(\"width\", \"100%\");\n    text.append(\"div\").attr(\"class\", \"label\").style(\"display\", \"table-cell\").style(\"text-align\", \"center\").style(\"vertical-align\", \"middle\").text(content);\n    byTspan(content, body, x, y, width, height, textAttrs, conf2);\n    _setTextAttrs(text, textAttrs);\n  }\n  function _setTextAttrs(toText, fromTextAttrsDict) {\n    for (const key in fromTextAttrsDict) {\n      if (key in fromTextAttrsDict) {\n        toText.attr(key, fromTextAttrsDict[key]);\n      }\n    }\n  }\n  return function(conf2) {\n    return conf2.textPlacement === \"fo\" ? byFo : conf2.textPlacement === \"old\" ? byText : byTspan;\n  };\n}();\nconst initGraphics = function(graphics) {\n  graphics.append(\"defs\").append(\"marker\").attr(\"id\", \"arrowhead\").attr(\"refX\", 5).attr(\"refY\", 2).attr(\"markerWidth\", 6).attr(\"markerHeight\", 4).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M 0,0 V 4 L6,2 Z\");\n};\nconst svgDraw = {\n  drawRect,\n  drawCircle,\n  drawSection,\n  drawText,\n  drawLabel,\n  drawTask,\n  drawBackgroundRect,\n  initGraphics\n};\nconst setConf = function(cnf) {\n  const keys = Object.keys(cnf);\n  keys.forEach(function(key) {\n    conf[key] = cnf[key];\n  });\n};\nconst actors = {};\nfunction drawActorLegend(diagram2) {\n  const conf2 = getConfig().journey;\n  let yPos = 60;\n  Object.keys(actors).forEach((person) => {\n    const colour = actors[person].color;\n    const circleData = {\n      cx: 20,\n      cy: yPos,\n      r: 7,\n      fill: colour,\n      stroke: \"#000\",\n      pos: actors[person].position\n    };\n    svgDraw.drawCircle(diagram2, circleData);\n    const labelData = {\n      x: 40,\n      y: yPos + 7,\n      fill: \"#666\",\n      text: person,\n      textMargin: conf2.boxTextMargin | 5\n    };\n    svgDraw.drawText(diagram2, labelData);\n    yPos += 20;\n  });\n}\nconst conf = getConfig().journey;\nconst LEFT_MARGIN = conf.leftMargin;\nconst draw = function(text, id, version, diagObj) {\n  const conf2 = getConfig().journey;\n  const securityLevel = getConfig().securityLevel;\n  let sandboxElement;\n  if (securityLevel === \"sandbox\") {\n    sandboxElement = select(\"#i\" + id);\n  }\n  const root = securityLevel === \"sandbox\" ? select(sandboxElement.nodes()[0].contentDocument.body) : select(\"body\");\n  bounds.init();\n  const diagram2 = root.select(\"#\" + id);\n  svgDraw.initGraphics(diagram2);\n  const tasks2 = diagObj.db.getTasks();\n  const title = diagObj.db.getDiagramTitle();\n  const actorNames = diagObj.db.getActors();\n  for (const member in actors) {\n    delete actors[member];\n  }\n  let actorPos = 0;\n  actorNames.forEach((actorName) => {\n    actors[actorName] = {\n      color: conf2.actorColours[actorPos % conf2.actorColours.length],\n      position: actorPos\n    };\n    actorPos++;\n  });\n  drawActorLegend(diagram2);\n  bounds.insert(0, 0, LEFT_MARGIN, Object.keys(actors).length * 50);\n  drawTasks(diagram2, tasks2, 0);\n  const box = bounds.getBounds();\n  if (title) {\n    diagram2.append(\"text\").text(title).attr(\"x\", LEFT_MARGIN).attr(\"font-size\", \"4ex\").attr(\"font-weight\", \"bold\").attr(\"y\", 25);\n  }\n  const height = box.stopy - box.starty + 2 * conf2.diagramMarginY;\n  const width = LEFT_MARGIN + box.stopx + 2 * conf2.diagramMarginX;\n  configureSvgSize(diagram2, height, width, conf2.useMaxWidth);\n  diagram2.append(\"line\").attr(\"x1\", LEFT_MARGIN).attr(\"y1\", conf2.height * 4).attr(\"x2\", width - LEFT_MARGIN - 4).attr(\"y2\", conf2.height * 4).attr(\"stroke-width\", 4).attr(\"stroke\", \"black\").attr(\"marker-end\", \"url(#arrowhead)\");\n  const extraVertForTitle = title ? 70 : 0;\n  diagram2.attr(\"viewBox\", `${box.startx} -25 ${width} ${height + extraVertForTitle}`);\n  diagram2.attr(\"preserveAspectRatio\", \"xMinYMin meet\");\n  diagram2.attr(\"height\", height + extraVertForTitle + 25);\n};\nconst bounds = {\n  data: {\n    startx: void 0,\n    stopx: void 0,\n    starty: void 0,\n    stopy: void 0\n  },\n  verticalPos: 0,\n  sequenceItems: [],\n  init: function() {\n    this.sequenceItems = [];\n    this.data = {\n      startx: void 0,\n      stopx: void 0,\n      starty: void 0,\n      stopy: void 0\n    };\n    this.verticalPos = 0;\n  },\n  updateVal: function(obj, key, val, fun) {\n    if (obj[key] === void 0) {\n      obj[key] = val;\n    } else {\n      obj[key] = fun(val, obj[key]);\n    }\n  },\n  updateBounds: function(startx, starty, stopx, stopy) {\n    const conf2 = getConfig().journey;\n    const _self = this;\n    let cnt = 0;\n    function updateFn(type) {\n      return function updateItemBounds(item) {\n        cnt++;\n        const n = _self.sequenceItems.length - cnt + 1;\n        _self.updateVal(item, \"starty\", starty - n * conf2.boxMargin, Math.min);\n        _self.updateVal(item, \"stopy\", stopy + n * conf2.boxMargin, Math.max);\n        _self.updateVal(bounds.data, \"startx\", startx - n * conf2.boxMargin, Math.min);\n        _self.updateVal(bounds.data, \"stopx\", stopx + n * conf2.boxMargin, Math.max);\n        if (!(type === \"activation\")) {\n          _self.updateVal(item, \"startx\", startx - n * conf2.boxMargin, Math.min);\n          _self.updateVal(item, \"stopx\", stopx + n * conf2.boxMargin, Math.max);\n          _self.updateVal(bounds.data, \"starty\", starty - n * conf2.boxMargin, Math.min);\n          _self.updateVal(bounds.data, \"stopy\", stopy + n * conf2.boxMargin, Math.max);\n        }\n      };\n    }\n    this.sequenceItems.forEach(updateFn());\n  },\n  insert: function(startx, starty, stopx, stopy) {\n    const _startx = Math.min(startx, stopx);\n    const _stopx = Math.max(startx, stopx);\n    const _starty = Math.min(starty, stopy);\n    const _stopy = Math.max(starty, stopy);\n    this.updateVal(bounds.data, \"startx\", _startx, Math.min);\n    this.updateVal(bounds.data, \"starty\", _starty, Math.min);\n    this.updateVal(bounds.data, \"stopx\", _stopx, Math.max);\n    this.updateVal(bounds.data, \"stopy\", _stopy, Math.max);\n    this.updateBounds(_startx, _starty, _stopx, _stopy);\n  },\n  bumpVerticalPos: function(bump) {\n    this.verticalPos = this.verticalPos + bump;\n    this.data.stopy = this.verticalPos;\n  },\n  getVerticalPos: function() {\n    return this.verticalPos;\n  },\n  getBounds: function() {\n    return this.data;\n  }\n};\nconst fills = conf.sectionFills;\nconst textColours = conf.sectionColours;\nconst drawTasks = function(diagram2, tasks2, verticalPos) {\n  const conf2 = getConfig().journey;\n  let lastSection = \"\";\n  const sectionVHeight = conf2.height * 2 + conf2.diagramMarginY;\n  const taskPos = verticalPos + sectionVHeight;\n  let sectionNumber = 0;\n  let fill = \"#CCC\";\n  let colour = \"black\";\n  let num = 0;\n  for (const [i, task] of tasks2.entries()) {\n    if (lastSection !== task.section) {\n      fill = fills[sectionNumber % fills.length];\n      num = sectionNumber % fills.length;\n      colour = textColours[sectionNumber % textColours.length];\n      let taskInSectionCount = 0;\n      const currentSection2 = task.section;\n      for (let taskIndex = i; taskIndex < tasks2.length; taskIndex++) {\n        if (tasks2[taskIndex].section == currentSection2) {\n          taskInSectionCount = taskInSectionCount + 1;\n        } else {\n          break;\n        }\n      }\n      const section = {\n        x: i * conf2.taskMargin + i * conf2.width + LEFT_MARGIN,\n        y: 50,\n        text: task.section,\n        fill,\n        num,\n        colour,\n        taskCount: taskInSectionCount\n      };\n      svgDraw.drawSection(diagram2, section, conf2);\n      lastSection = task.section;\n      sectionNumber++;\n    }\n    const taskActors = task.people.reduce((acc, actorName) => {\n      if (actors[actorName]) {\n        acc[actorName] = actors[actorName];\n      }\n      return acc;\n    }, {});\n    task.x = i * conf2.taskMargin + i * conf2.width + LEFT_MARGIN;\n    task.y = taskPos;\n    task.width = conf2.diagramMarginX;\n    task.height = conf2.diagramMarginY;\n    task.colour = colour;\n    task.fill = fill;\n    task.num = num;\n    task.actors = taskActors;\n    svgDraw.drawTask(diagram2, task, conf2);\n    bounds.insert(task.x, task.y, task.x + task.width + conf2.taskMargin, 300 + 5 * 30);\n  }\n};\nconst renderer = {\n  setConf,\n  draw\n};\nconst diagram = {\n  parser: parser$1,\n  db,\n  renderer,\n  styles,\n  init: (cnf) => {\n    renderer.setConf(cnf.journey);\n    db.clear();\n  }\n};\nexport {\n  diagram\n};\n"]}