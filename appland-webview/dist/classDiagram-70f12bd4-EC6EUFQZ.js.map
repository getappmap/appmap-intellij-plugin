{"version":3,"sources":["../node_modules/mermaid/dist/classDiagram-70f12bd4.js"],"names":[],"mappings":"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","file":"classDiagram-70f12bd4-EC6EUFQZ.js","sourcesContent":["import { p as parser, d as db, s as styles } from \"./styles-9a916d00.js\";\nimport { line, curveBasis, select } from \"d3\";\nimport { layout } from \"dagre-d3-es/src/dagre/index.js\";\nimport * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\nimport { u as utils, l as log, x as parseGenericTypes, c as getConfig, i as configureSvgSize } from \"./mermaid-b5860b54.js\";\nimport \"ts-dedent\";\nimport \"dayjs\";\nimport \"@braintree/sanitize-url\";\nimport \"dompurify\";\nimport \"khroma\";\nimport \"lodash-es/memoize.js\";\nimport \"lodash-es/merge.js\";\nimport \"stylis\";\nimport \"lodash-es/isEmpty.js\";\nlet edgeCount = 0;\nconst drawEdge = function(elem, path, relation, conf, diagObj) {\n  const getRelationType = function(type) {\n    switch (type) {\n      case diagObj.db.relationType.AGGREGATION:\n        return \"aggregation\";\n      case diagObj.db.relationType.EXTENSION:\n        return \"extension\";\n      case diagObj.db.relationType.COMPOSITION:\n        return \"composition\";\n      case diagObj.db.relationType.DEPENDENCY:\n        return \"dependency\";\n      case diagObj.db.relationType.LOLLIPOP:\n        return \"lollipop\";\n    }\n  };\n  path.points = path.points.filter((p) => !Number.isNaN(p.y));\n  const lineData = path.points;\n  const lineFunction = line().x(function(d) {\n    return d.x;\n  }).y(function(d) {\n    return d.y;\n  }).curve(curveBasis);\n  const svgPath = elem.append(\"path\").attr(\"d\", lineFunction(lineData)).attr(\"id\", \"edge\" + edgeCount).attr(\"class\", \"relation\");\n  let url = \"\";\n  if (conf.arrowMarkerAbsolute) {\n    url = window.location.protocol + \"//\" + window.location.host + window.location.pathname + window.location.search;\n    url = url.replace(/\\(/g, \"\\\\(\");\n    url = url.replace(/\\)/g, \"\\\\)\");\n  }\n  if (relation.relation.lineType == 1) {\n    svgPath.attr(\"class\", \"relation dashed-line\");\n  }\n  if (relation.relation.lineType == 10) {\n    svgPath.attr(\"class\", \"relation dotted-line\");\n  }\n  if (relation.relation.type1 !== \"none\") {\n    svgPath.attr(\n      \"marker-start\",\n      \"url(\" + url + \"#\" + getRelationType(relation.relation.type1) + \"Start)\"\n    );\n  }\n  if (relation.relation.type2 !== \"none\") {\n    svgPath.attr(\n      \"marker-end\",\n      \"url(\" + url + \"#\" + getRelationType(relation.relation.type2) + \"End)\"\n    );\n  }\n  let x, y;\n  const l = path.points.length;\n  let labelPosition = utils.calcLabelPosition(path.points);\n  x = labelPosition.x;\n  y = labelPosition.y;\n  let p1_card_x, p1_card_y;\n  let p2_card_x, p2_card_y;\n  if (l % 2 !== 0 && l > 1) {\n    let cardinality_1_point = utils.calcCardinalityPosition(\n      relation.relation.type1 !== \"none\",\n      path.points,\n      path.points[0]\n    );\n    let cardinality_2_point = utils.calcCardinalityPosition(\n      relation.relation.type2 !== \"none\",\n      path.points,\n      path.points[l - 1]\n    );\n    log.debug(\"cardinality_1_point \" + JSON.stringify(cardinality_1_point));\n    log.debug(\"cardinality_2_point \" + JSON.stringify(cardinality_2_point));\n    p1_card_x = cardinality_1_point.x;\n    p1_card_y = cardinality_1_point.y;\n    p2_card_x = cardinality_2_point.x;\n    p2_card_y = cardinality_2_point.y;\n  }\n  if (relation.title !== void 0) {\n    const g = elem.append(\"g\").attr(\"class\", \"classLabel\");\n    const label = g.append(\"text\").attr(\"class\", \"label\").attr(\"x\", x).attr(\"y\", y).attr(\"fill\", \"red\").attr(\"text-anchor\", \"middle\").text(relation.title);\n    window.label = label;\n    const bounds = label.node().getBBox();\n    g.insert(\"rect\", \":first-child\").attr(\"class\", \"box\").attr(\"x\", bounds.x - conf.padding / 2).attr(\"y\", bounds.y - conf.padding / 2).attr(\"width\", bounds.width + conf.padding).attr(\"height\", bounds.height + conf.padding);\n  }\n  log.info(\"Rendering relation \" + JSON.stringify(relation));\n  if (relation.relationTitle1 !== void 0 && relation.relationTitle1 !== \"none\") {\n    const g = elem.append(\"g\").attr(\"class\", \"cardinality\");\n    g.append(\"text\").attr(\"class\", \"type1\").attr(\"x\", p1_card_x).attr(\"y\", p1_card_y).attr(\"fill\", \"black\").attr(\"font-size\", \"6\").text(relation.relationTitle1);\n  }\n  if (relation.relationTitle2 !== void 0 && relation.relationTitle2 !== \"none\") {\n    const g = elem.append(\"g\").attr(\"class\", \"cardinality\");\n    g.append(\"text\").attr(\"class\", \"type2\").attr(\"x\", p2_card_x).attr(\"y\", p2_card_y).attr(\"fill\", \"black\").attr(\"font-size\", \"6\").text(relation.relationTitle2);\n  }\n  edgeCount++;\n};\nconst drawClass = function(elem, classDef, conf, diagObj) {\n  log.debug(\"Rendering class \", classDef, conf);\n  const id = classDef.id;\n  const classInfo = {\n    id,\n    label: classDef.id,\n    width: 0,\n    height: 0\n  };\n  const g = elem.append(\"g\").attr(\"id\", diagObj.db.lookUpDomId(id)).attr(\"class\", \"classGroup\");\n  let title;\n  if (classDef.link) {\n    title = g.append(\"svg:a\").attr(\"xlink:href\", classDef.link).attr(\"target\", classDef.linkTarget).append(\"text\").attr(\"y\", conf.textHeight + conf.padding).attr(\"x\", 0);\n  } else {\n    title = g.append(\"text\").attr(\"y\", conf.textHeight + conf.padding).attr(\"x\", 0);\n  }\n  let isFirst = true;\n  classDef.annotations.forEach(function(member) {\n    const titleText2 = title.append(\"tspan\").text(\"«\" + member + \"»\");\n    if (!isFirst) {\n      titleText2.attr(\"dy\", conf.textHeight);\n    }\n    isFirst = false;\n  });\n  let classTitleString = getClassTitleString(classDef);\n  const classTitle = title.append(\"tspan\").text(classTitleString).attr(\"class\", \"title\");\n  if (!isFirst) {\n    classTitle.attr(\"dy\", conf.textHeight);\n  }\n  const titleHeight = title.node().getBBox().height;\n  let membersLine;\n  let membersBox;\n  let methodsLine;\n  if (classDef.members.length > 0) {\n    membersLine = g.append(\"line\").attr(\"x1\", 0).attr(\"y1\", conf.padding + titleHeight + conf.dividerMargin / 2).attr(\"y2\", conf.padding + titleHeight + conf.dividerMargin / 2);\n    const members = g.append(\"text\").attr(\"x\", conf.padding).attr(\"y\", titleHeight + conf.dividerMargin + conf.textHeight).attr(\"fill\", \"white\").attr(\"class\", \"classText\");\n    isFirst = true;\n    classDef.members.forEach(function(member) {\n      addTspan(members, member, isFirst, conf);\n      isFirst = false;\n    });\n    membersBox = members.node().getBBox();\n  }\n  if (classDef.methods.length > 0) {\n    methodsLine = g.append(\"line\").attr(\"x1\", 0).attr(\"y1\", conf.padding + titleHeight + conf.dividerMargin + membersBox.height).attr(\"y2\", conf.padding + titleHeight + conf.dividerMargin + membersBox.height);\n    const methods = g.append(\"text\").attr(\"x\", conf.padding).attr(\"y\", titleHeight + 2 * conf.dividerMargin + membersBox.height + conf.textHeight).attr(\"fill\", \"white\").attr(\"class\", \"classText\");\n    isFirst = true;\n    classDef.methods.forEach(function(method) {\n      addTspan(methods, method, isFirst, conf);\n      isFirst = false;\n    });\n  }\n  const classBox = g.node().getBBox();\n  var cssClassStr = \" \";\n  if (classDef.cssClasses.length > 0) {\n    cssClassStr = cssClassStr + classDef.cssClasses.join(\" \");\n  }\n  const rect = g.insert(\"rect\", \":first-child\").attr(\"x\", 0).attr(\"y\", 0).attr(\"width\", classBox.width + 2 * conf.padding).attr(\"height\", classBox.height + conf.padding + 0.5 * conf.dividerMargin).attr(\"class\", cssClassStr);\n  const rectWidth = rect.node().getBBox().width;\n  title.node().childNodes.forEach(function(x) {\n    x.setAttribute(\"x\", (rectWidth - x.getBBox().width) / 2);\n  });\n  if (classDef.tooltip) {\n    title.insert(\"title\").text(classDef.tooltip);\n  }\n  if (membersLine) {\n    membersLine.attr(\"x2\", rectWidth);\n  }\n  if (methodsLine) {\n    methodsLine.attr(\"x2\", rectWidth);\n  }\n  classInfo.width = rectWidth;\n  classInfo.height = classBox.height + conf.padding + 0.5 * conf.dividerMargin;\n  return classInfo;\n};\nconst getClassTitleString = function(classDef) {\n  let classTitleString = classDef.id;\n  if (classDef.type) {\n    classTitleString += \"<\" + parseGenericTypes(classDef.type) + \">\";\n  }\n  return classTitleString;\n};\nconst drawNote = function(elem, note, conf, diagObj) {\n  log.debug(\"Rendering note \", note, conf);\n  const id = note.id;\n  const noteInfo = {\n    id,\n    text: note.text,\n    width: 0,\n    height: 0\n  };\n  const g = elem.append(\"g\").attr(\"id\", id).attr(\"class\", \"classGroup\");\n  let text = g.append(\"text\").attr(\"y\", conf.textHeight + conf.padding).attr(\"x\", 0);\n  const lines = JSON.parse(`\"${note.text}\"`).split(\"\\n\");\n  lines.forEach(function(line2) {\n    log.debug(`Adding line: ${line2}`);\n    text.append(\"tspan\").text(line2).attr(\"class\", \"title\").attr(\"dy\", conf.textHeight);\n  });\n  const noteBox = g.node().getBBox();\n  const rect = g.insert(\"rect\", \":first-child\").attr(\"x\", 0).attr(\"y\", 0).attr(\"width\", noteBox.width + 2 * conf.padding).attr(\n    \"height\",\n    noteBox.height + lines.length * conf.textHeight + conf.padding + 0.5 * conf.dividerMargin\n  );\n  const rectWidth = rect.node().getBBox().width;\n  text.node().childNodes.forEach(function(x) {\n    x.setAttribute(\"x\", (rectWidth - x.getBBox().width) / 2);\n  });\n  noteInfo.width = rectWidth;\n  noteInfo.height = noteBox.height + lines.length * conf.textHeight + conf.padding + 0.5 * conf.dividerMargin;\n  return noteInfo;\n};\nconst addTspan = function(textEl, member, isFirst, conf) {\n  const { displayText, cssStyle } = member.getDisplayDetails();\n  const tSpan = textEl.append(\"tspan\").attr(\"x\", conf.padding).text(displayText);\n  if (cssStyle !== \"\") {\n    tSpan.attr(\"style\", member.cssStyle);\n  }\n  if (!isFirst) {\n    tSpan.attr(\"dy\", conf.textHeight);\n  }\n};\nconst svgDraw = {\n  getClassTitleString,\n  drawClass,\n  drawEdge,\n  drawNote\n};\nlet idCache = {};\nconst padding = 20;\nconst getGraphId = function(label) {\n  const foundEntry = Object.entries(idCache).find((entry) => entry[1].label === label);\n  if (foundEntry) {\n    return foundEntry[0];\n  }\n};\nconst insertMarkers = function(elem) {\n  elem.append(\"defs\").append(\"marker\").attr(\"id\", \"extensionStart\").attr(\"class\", \"extension\").attr(\"refX\", 0).attr(\"refY\", 7).attr(\"markerWidth\", 190).attr(\"markerHeight\", 240).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M 1,7 L18,13 V 1 Z\");\n  elem.append(\"defs\").append(\"marker\").attr(\"id\", \"extensionEnd\").attr(\"refX\", 19).attr(\"refY\", 7).attr(\"markerWidth\", 20).attr(\"markerHeight\", 28).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M 1,1 V 13 L18,7 Z\");\n  elem.append(\"defs\").append(\"marker\").attr(\"id\", \"compositionStart\").attr(\"class\", \"extension\").attr(\"refX\", 0).attr(\"refY\", 7).attr(\"markerWidth\", 190).attr(\"markerHeight\", 240).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M 18,7 L9,13 L1,7 L9,1 Z\");\n  elem.append(\"defs\").append(\"marker\").attr(\"id\", \"compositionEnd\").attr(\"refX\", 19).attr(\"refY\", 7).attr(\"markerWidth\", 20).attr(\"markerHeight\", 28).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M 18,7 L9,13 L1,7 L9,1 Z\");\n  elem.append(\"defs\").append(\"marker\").attr(\"id\", \"aggregationStart\").attr(\"class\", \"extension\").attr(\"refX\", 0).attr(\"refY\", 7).attr(\"markerWidth\", 190).attr(\"markerHeight\", 240).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M 18,7 L9,13 L1,7 L9,1 Z\");\n  elem.append(\"defs\").append(\"marker\").attr(\"id\", \"aggregationEnd\").attr(\"refX\", 19).attr(\"refY\", 7).attr(\"markerWidth\", 20).attr(\"markerHeight\", 28).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M 18,7 L9,13 L1,7 L9,1 Z\");\n  elem.append(\"defs\").append(\"marker\").attr(\"id\", \"dependencyStart\").attr(\"class\", \"extension\").attr(\"refX\", 0).attr(\"refY\", 7).attr(\"markerWidth\", 190).attr(\"markerHeight\", 240).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M 5,7 L9,13 L1,7 L9,1 Z\");\n  elem.append(\"defs\").append(\"marker\").attr(\"id\", \"dependencyEnd\").attr(\"refX\", 19).attr(\"refY\", 7).attr(\"markerWidth\", 20).attr(\"markerHeight\", 28).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M 18,7 L9,13 L14,7 L9,1 Z\");\n};\nconst draw = function(text, id, _version, diagObj) {\n  const conf = getConfig().class;\n  idCache = {};\n  log.info(\"Rendering diagram \" + text);\n  const securityLevel = getConfig().securityLevel;\n  let sandboxElement;\n  if (securityLevel === \"sandbox\") {\n    sandboxElement = select(\"#i\" + id);\n  }\n  const root = securityLevel === \"sandbox\" ? select(sandboxElement.nodes()[0].contentDocument.body) : select(\"body\");\n  const diagram2 = root.select(`[id='${id}']`);\n  insertMarkers(diagram2);\n  const g = new graphlib.Graph({\n    multigraph: true\n  });\n  g.setGraph({\n    isMultiGraph: true\n  });\n  g.setDefaultEdgeLabel(function() {\n    return {};\n  });\n  const classes = diagObj.db.getClasses();\n  const keys = Object.keys(classes);\n  for (const key of keys) {\n    const classDef = classes[key];\n    const node = svgDraw.drawClass(diagram2, classDef, conf, diagObj);\n    idCache[node.id] = node;\n    g.setNode(node.id, node);\n    log.info(\"Org height: \" + node.height);\n  }\n  const relations = diagObj.db.getRelations();\n  relations.forEach(function(relation) {\n    log.info(\n      // cspell:ignore tjoho\n      \"tjoho\" + getGraphId(relation.id1) + getGraphId(relation.id2) + JSON.stringify(relation)\n    );\n    g.setEdge(\n      getGraphId(relation.id1),\n      getGraphId(relation.id2),\n      {\n        relation\n      },\n      relation.title || \"DEFAULT\"\n    );\n  });\n  const notes = diagObj.db.getNotes();\n  notes.forEach(function(note) {\n    log.debug(`Adding note: ${JSON.stringify(note)}`);\n    const node = svgDraw.drawNote(diagram2, note, conf, diagObj);\n    idCache[node.id] = node;\n    g.setNode(node.id, node);\n    if (note.class && note.class in classes) {\n      g.setEdge(\n        note.id,\n        getGraphId(note.class),\n        {\n          relation: {\n            id1: note.id,\n            id2: note.class,\n            relation: {\n              type1: \"none\",\n              type2: \"none\",\n              lineType: 10\n            }\n          }\n        },\n        \"DEFAULT\"\n      );\n    }\n  });\n  layout(g);\n  g.nodes().forEach(function(v) {\n    if (v !== void 0 && g.node(v) !== void 0) {\n      log.debug(\"Node \" + v + \": \" + JSON.stringify(g.node(v)));\n      root.select(\"#\" + (diagObj.db.lookUpDomId(v) || v)).attr(\n        \"transform\",\n        \"translate(\" + (g.node(v).x - g.node(v).width / 2) + \",\" + (g.node(v).y - g.node(v).height / 2) + \" )\"\n      );\n    }\n  });\n  g.edges().forEach(function(e) {\n    if (e !== void 0 && g.edge(e) !== void 0) {\n      log.debug(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(g.edge(e)));\n      svgDraw.drawEdge(diagram2, g.edge(e), g.edge(e).relation, conf, diagObj);\n    }\n  });\n  const svgBounds = diagram2.node().getBBox();\n  const width = svgBounds.width + padding * 2;\n  const height = svgBounds.height + padding * 2;\n  configureSvgSize(diagram2, height, width, conf.useMaxWidth);\n  const vBox = `${svgBounds.x - padding} ${svgBounds.y - padding} ${width} ${height}`;\n  log.debug(`viewBox ${vBox}`);\n  diagram2.attr(\"viewBox\", vBox);\n};\nconst renderer = {\n  draw\n};\nconst diagram = {\n  parser,\n  db,\n  renderer,\n  styles,\n  init: (cnf) => {\n    if (!cnf.class) {\n      cnf.class = {};\n    }\n    cnf.class.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;\n    db.clear();\n  }\n};\nexport {\n  diagram\n};\n"]}