{"version":3,"sources":["../node_modules/mdast-util-from-markdown/index.js","../node_modules/mdast-util-from-markdown/lib/index.js","../node_modules/mdast-util-to-string/index.js","../node_modules/mdast-util-to-string/lib/index.js","../node_modules/micromark/lib/parse.js","../node_modules/micromark-util-combine-extensions/index.js","../node_modules/micromark-util-chunked/index.js","../node_modules/micromark/lib/initialize/content.js","../node_modules/micromark-factory-space/index.js","../node_modules/micromark-util-character/index.js","../node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","../node_modules/micromark/lib/initialize/document.js","../node_modules/micromark/lib/initialize/flow.js","../node_modules/micromark-core-commonmark/index.js","../node_modules/micromark-core-commonmark/lib/attention.js","../node_modules/micromark-util-classify-character/index.js","../node_modules/micromark-util-resolve-all/index.js","../node_modules/micromark-core-commonmark/lib/autolink.js","../node_modules/micromark-core-commonmark/lib/blank-line.js","../node_modules/micromark-core-commonmark/lib/block-quote.js","../node_modules/micromark-core-commonmark/lib/character-escape.js","../node_modules/micromark-core-commonmark/lib/character-reference.js","../node_modules/decode-named-character-reference/index.js","../node_modules/character-entities/index.js","../node_modules/micromark-core-commonmark/lib/code-fenced.js","../node_modules/micromark-core-commonmark/lib/code-indented.js","../node_modules/micromark-core-commonmark/lib/code-text.js","../node_modules/micromark-core-commonmark/lib/content.js","../node_modules/micromark-util-subtokenize/index.js","../node_modules/micromark-core-commonmark/lib/definition.js","../node_modules/micromark-factory-destination/index.js","../node_modules/micromark-factory-label/index.js","../node_modules/micromark-factory-title/index.js","../node_modules/micromark-factory-whitespace/index.js","../node_modules/micromark-util-normalize-identifier/index.js","../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../node_modules/micromark-core-commonmark/lib/heading-atx.js","../node_modules/micromark-core-commonmark/lib/html-flow.js","../node_modules/micromark-util-html-tag-name/index.js","../node_modules/micromark-core-commonmark/lib/html-text.js","../node_modules/micromark-core-commonmark/lib/label-end.js","../node_modules/micromark-core-commonmark/lib/label-start-image.js","../node_modules/micromark-core-commonmark/lib/label-start-link.js","../node_modules/micromark-core-commonmark/lib/line-ending.js","../node_modules/micromark-core-commonmark/lib/list.js","../node_modules/micromark-core-commonmark/lib/thematic-break.js","../node_modules/micromark-core-commonmark/lib/setext-underline.js","../node_modules/micromark/lib/initialize/text.js","../node_modules/micromark/lib/create-tokenizer.js","../node_modules/micromark/lib/constructs.js","../node_modules/micromark/lib/preprocess.js","../node_modules/micromark/lib/postprocess.js","../node_modules/micromark-util-decode-numeric-character-reference/index.js","../node_modules/micromark-util-decode-string/index.js","../node_modules/unist-util-stringify-position/index.js","../node_modules/unist-util-stringify-position/lib/index.js","../node_modules/mermaid/dist/createText-2e5e7dd3.js"],"names":["index","list","all","extension","previous","point","constructs","text","attentionMarkers","effects","ok","nok","start","furtherStart","content","titleBefore","definition","exit","from","document","flow","string","head","own","blockQuote","codeText","thematicBreak","listItem","node","data","htmlText"],"mappings":"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","file":"chunk-ARI3AIVW.js","sourcesContent":["// Note: types exported from `index.d.ts`.\nexport {fromMarkdown} from './lib/index.js'\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Root | Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n *\n * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | undefined | null | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Node | Fragment>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData\n *   Get data from the key/value store.\n * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData\n *   Set data into the key/value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\n// To do: micromark: create a registry of tokens?\n// To do: next major: don’t return given `Node` from `enter`.\n// To do: next major: remove setter/getter.\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * @param value\n *   Markdown to parse.\n * @param encoding\n *   Character encoding for when `value` is `Buffer`.\n * @param options\n *   Configuration.\n * @returns\n *   mdast tree.\n */\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\n   *   ((value: Value, options?: Options | null | undefined) => Root)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding | Options | null | undefined} [encoding]\n   * @param {Options | null | undefined} [options]\n   * @returns {Root}\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n    return compiler(options)(\n      postprocess(\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      if (\n        event[1].type === 'listUnordered' ||\n        event[1].type === 'listOrdered' ||\n        event[1].type === 'blockQuote'\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n        atMarker = undefined\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === 'linePrefix' ||\n        event[1].type === 'listItemValue' ||\n        event[1].type === 'listItemMarker' ||\n        event[1].type === 'listItemPrefix' ||\n        event[1].type === 'listItemPrefixWhitespace'\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          }\n          // @ts-expect-error: `listItem` is most definitely defined, TS...\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Set data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @param {CompileData[Key]} [value]\n   *   New value.\n   * @returns {void}\n   *   Nothing.\n   */\n  function setData(key, value) {\n    data[key] = value\n  }\n\n  /**\n   * Get data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @returns {CompileData[Key]}\n   *   Value.\n   */\n  function getData(key) {\n    return data[key]\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Node} create\n   *   Create a node.\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {void}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @template {Node} Kind\n   *   Node type.\n   * @this {CompileContext}\n   *   Context.\n   * @param {Kind} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {Kind}\n   *   The given node.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    // @ts-expect-error: `end` will be patched later.\n    node.position = {\n      start: point(token.start)\n    }\n    return node\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {Node}\n   *   The closed node.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n    return node\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      setData('expectingFirstListItemValue')\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    setData('flowCodeInside')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    let tail = node.children[node.children.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      // @ts-expect-error: we’ll add `end` later.\n      tail.position = {\n        start: point(token.start)\n      }\n      // @ts-expect-error: Assume `parent` accepts `text`.\n      node.children.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    setData('inReference', true)\n    if (node.type === 'link') {\n      /** @type {Array<StaticPhrasingContent>} */\n      // @ts-expect-error: Assume static phrasing content.\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    setData('inReference')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      setData('characterReferenceType')\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {HTML} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Extension | Array<Extension>>} extensions\n * @returns {void}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {void}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      if (key === 'canContainEols') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'transforms') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'enter' || key === 'exit') {\n        const right = extension[key]\n        if (right) {\n          Object.assign(combined[key], right)\n        }\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('./lib/index.js').Options} Options\n */\n\nexport {toString} from './lib/index.js'\n","/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s.\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML.\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} value\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Node}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {void}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {void}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\n\n/**\n * Regular expression that matches a unicode punctuation character.\n */\nexport const unicodePunctuationRegex =\n  /[!-\\/:-@\\[-`\\{-~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {void}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","export {attention} from './lib/attention.js'\nexport {autolink} from './lib/autolink.js'\nexport {blankLine} from './lib/blank-line.js'\nexport {blockQuote} from './lib/block-quote.js'\nexport {characterEscape} from './lib/character-escape.js'\nexport {characterReference} from './lib/character-reference.js'\nexport {codeFenced} from './lib/code-fenced.js'\nexport {codeIndented} from './lib/code-indented.js'\nexport {codeText} from './lib/code-text.js'\nexport {content} from './lib/content.js'\nexport {definition} from './lib/definition.js'\nexport {hardBreakEscape} from './lib/hard-break-escape.js'\nexport {headingAtx} from './lib/heading-atx.js'\nexport {htmlFlow} from './lib/html-flow.js'\nexport {htmlText} from './lib/html-text.js'\nexport {labelEnd} from './lib/label-end.js'\nexport {labelStartImage} from './lib/label-start-image.js'\nexport {labelStartLink} from './lib/label-start-link.js'\nexport {lineEnding} from './lib/line-ending.js'\nexport {list} from './lib/list.js'\nexport {setextUnderline} from './lib/setext-underline.js'\nexport {thematicBreak} from './lib/thematic-break.js'\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n  let open\n  /** @type {Token} */\n  let group\n  /** @type {Token} */\n  let text\n  /** @type {Token} */\n  let openingSequence\n  /** @type {Token} */\n  let closingSequence\n  /** @type {number} */\n  let use\n  /** @type {Array<Event>} */\n  let nextEvents\n  /** @type {number} */\n  let offset\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open &&\n          // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          }\n\n          // Number of markers to use from the sequence.\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = []\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ])\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          )\n\n          // Closing.\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ])\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code\n    effects.enter('attentionSequence')\n    return inside(code)\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    const token = effects.exit('attentionSequence')\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code)\n\n    // Always populated by defaults.\n\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1\n      return schemeInsideOrEmailAtext(code)\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      size = 0\n      return urlInside\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n    size = 0\n    return emailAtext(code)\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return urlInside\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      return emailAtSignOrDot\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n    return emailValue(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel\n      effects.consume(code)\n      return next\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'linePrefix')(code)\n      : after(code)\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this\n  return contStart\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(\n        effects,\n        contBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return contBefore(code)\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code)\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {asciiPunctuation} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return inside\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n  let max\n  /** @type {(code: Code) => boolean} */\n  let test\n  return start\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit('characterReferenceValue')\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n    return nok(code)\n  }\n}\n","import {characterEntities} from 'character-entities'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Decode a single character reference (without the `&` or `;`).\n * You probably only need this when you’re building parsers yourself that follow\n * different rules compared to HTML.\n * This is optimized to be tiny in browsers.\n *\n * @param {string} value\n *   `notin` (named), `#123` (deci), `#x123` (hexa).\n * @returns {string|false}\n *   Decoded reference.\n */\nexport function decodeNamedCharacterReference(value) {\n  return own.call(characterEntities, value) ? characterEntities[value] : false\n}\n","/**\n * Map of named character references.\n *\n * @type {Record<string, string>}\n */\nexport const characterEntities = {\n  AElig: 'Æ',\n  AMP: '&',\n  Aacute: 'Á',\n  Abreve: 'Ă',\n  Acirc: 'Â',\n  Acy: 'А',\n  Afr: '𝔄',\n  Agrave: 'À',\n  Alpha: 'Α',\n  Amacr: 'Ā',\n  And: '⩓',\n  Aogon: 'Ą',\n  Aopf: '𝔸',\n  ApplyFunction: '⁡',\n  Aring: 'Å',\n  Ascr: '𝒜',\n  Assign: '≔',\n  Atilde: 'Ã',\n  Auml: 'Ä',\n  Backslash: '∖',\n  Barv: '⫧',\n  Barwed: '⌆',\n  Bcy: 'Б',\n  Because: '∵',\n  Bernoullis: 'ℬ',\n  Beta: 'Β',\n  Bfr: '𝔅',\n  Bopf: '𝔹',\n  Breve: '˘',\n  Bscr: 'ℬ',\n  Bumpeq: '≎',\n  CHcy: 'Ч',\n  COPY: '©',\n  Cacute: 'Ć',\n  Cap: '⋒',\n  CapitalDifferentialD: 'ⅅ',\n  Cayleys: 'ℭ',\n  Ccaron: 'Č',\n  Ccedil: 'Ç',\n  Ccirc: 'Ĉ',\n  Cconint: '∰',\n  Cdot: 'Ċ',\n  Cedilla: '¸',\n  CenterDot: '·',\n  Cfr: 'ℭ',\n  Chi: 'Χ',\n  CircleDot: '⊙',\n  CircleMinus: '⊖',\n  CirclePlus: '⊕',\n  CircleTimes: '⊗',\n  ClockwiseContourIntegral: '∲',\n  CloseCurlyDoubleQuote: '”',\n  CloseCurlyQuote: '’',\n  Colon: '∷',\n  Colone: '⩴',\n  Congruent: '≡',\n  Conint: '∯',\n  ContourIntegral: '∮',\n  Copf: 'ℂ',\n  Coproduct: '∐',\n  CounterClockwiseContourIntegral: '∳',\n  Cross: '⨯',\n  Cscr: '𝒞',\n  Cup: '⋓',\n  CupCap: '≍',\n  DD: 'ⅅ',\n  DDotrahd: '⤑',\n  DJcy: 'Ђ',\n  DScy: 'Ѕ',\n  DZcy: 'Џ',\n  Dagger: '‡',\n  Darr: '↡',\n  Dashv: '⫤',\n  Dcaron: 'Ď',\n  Dcy: 'Д',\n  Del: '∇',\n  Delta: 'Δ',\n  Dfr: '𝔇',\n  DiacriticalAcute: '´',\n  DiacriticalDot: '˙',\n  DiacriticalDoubleAcute: '˝',\n  DiacriticalGrave: '`',\n  DiacriticalTilde: '˜',\n  Diamond: '⋄',\n  DifferentialD: 'ⅆ',\n  Dopf: '𝔻',\n  Dot: '¨',\n  DotDot: '⃜',\n  DotEqual: '≐',\n  DoubleContourIntegral: '∯',\n  DoubleDot: '¨',\n  DoubleDownArrow: '⇓',\n  DoubleLeftArrow: '⇐',\n  DoubleLeftRightArrow: '⇔',\n  DoubleLeftTee: '⫤',\n  DoubleLongLeftArrow: '⟸',\n  DoubleLongLeftRightArrow: '⟺',\n  DoubleLongRightArrow: '⟹',\n  DoubleRightArrow: '⇒',\n  DoubleRightTee: '⊨',\n  DoubleUpArrow: '⇑',\n  DoubleUpDownArrow: '⇕',\n  DoubleVerticalBar: '∥',\n  DownArrow: '↓',\n  DownArrowBar: '⤓',\n  DownArrowUpArrow: '⇵',\n  DownBreve: '̑',\n  DownLeftRightVector: '⥐',\n  DownLeftTeeVector: '⥞',\n  DownLeftVector: '↽',\n  DownLeftVectorBar: '⥖',\n  DownRightTeeVector: '⥟',\n  DownRightVector: '⇁',\n  DownRightVectorBar: '⥗',\n  DownTee: '⊤',\n  DownTeeArrow: '↧',\n  Downarrow: '⇓',\n  Dscr: '𝒟',\n  Dstrok: 'Đ',\n  ENG: 'Ŋ',\n  ETH: 'Ð',\n  Eacute: 'É',\n  Ecaron: 'Ě',\n  Ecirc: 'Ê',\n  Ecy: 'Э',\n  Edot: 'Ė',\n  Efr: '𝔈',\n  Egrave: 'È',\n  Element: '∈',\n  Emacr: 'Ē',\n  EmptySmallSquare: '◻',\n  EmptyVerySmallSquare: '▫',\n  Eogon: 'Ę',\n  Eopf: '𝔼',\n  Epsilon: 'Ε',\n  Equal: '⩵',\n  EqualTilde: '≂',\n  Equilibrium: '⇌',\n  Escr: 'ℰ',\n  Esim: '⩳',\n  Eta: 'Η',\n  Euml: 'Ë',\n  Exists: '∃',\n  ExponentialE: 'ⅇ',\n  Fcy: 'Ф',\n  Ffr: '𝔉',\n  FilledSmallSquare: '◼',\n  FilledVerySmallSquare: '▪',\n  Fopf: '𝔽',\n  ForAll: '∀',\n  Fouriertrf: 'ℱ',\n  Fscr: 'ℱ',\n  GJcy: 'Ѓ',\n  GT: '>',\n  Gamma: 'Γ',\n  Gammad: 'Ϝ',\n  Gbreve: 'Ğ',\n  Gcedil: 'Ģ',\n  Gcirc: 'Ĝ',\n  Gcy: 'Г',\n  Gdot: 'Ġ',\n  Gfr: '𝔊',\n  Gg: '⋙',\n  Gopf: '𝔾',\n  GreaterEqual: '≥',\n  GreaterEqualLess: '⋛',\n  GreaterFullEqual: '≧',\n  GreaterGreater: '⪢',\n  GreaterLess: '≷',\n  GreaterSlantEqual: '⩾',\n  GreaterTilde: '≳',\n  Gscr: '𝒢',\n  Gt: '≫',\n  HARDcy: 'Ъ',\n  Hacek: 'ˇ',\n  Hat: '^',\n  Hcirc: 'Ĥ',\n  Hfr: 'ℌ',\n  HilbertSpace: 'ℋ',\n  Hopf: 'ℍ',\n  HorizontalLine: '─',\n  Hscr: 'ℋ',\n  Hstrok: 'Ħ',\n  HumpDownHump: '≎',\n  HumpEqual: '≏',\n  IEcy: 'Е',\n  IJlig: 'Ĳ',\n  IOcy: 'Ё',\n  Iacute: 'Í',\n  Icirc: 'Î',\n  Icy: 'И',\n  Idot: 'İ',\n  Ifr: 'ℑ',\n  Igrave: 'Ì',\n  Im: 'ℑ',\n  Imacr: 'Ī',\n  ImaginaryI: 'ⅈ',\n  Implies: '⇒',\n  Int: '∬',\n  Integral: '∫',\n  Intersection: '⋂',\n  InvisibleComma: '⁣',\n  InvisibleTimes: '⁢',\n  Iogon: 'Į',\n  Iopf: '𝕀',\n  Iota: 'Ι',\n  Iscr: 'ℐ',\n  Itilde: 'Ĩ',\n  Iukcy: 'І',\n  Iuml: 'Ï',\n  Jcirc: 'Ĵ',\n  Jcy: 'Й',\n  Jfr: '𝔍',\n  Jopf: '𝕁',\n  Jscr: '𝒥',\n  Jsercy: 'Ј',\n  Jukcy: 'Є',\n  KHcy: 'Х',\n  KJcy: 'Ќ',\n  Kappa: 'Κ',\n  Kcedil: 'Ķ',\n  Kcy: 'К',\n  Kfr: '𝔎',\n  Kopf: '𝕂',\n  Kscr: '𝒦',\n  LJcy: 'Љ',\n  LT: '<',\n  Lacute: 'Ĺ',\n  Lambda: 'Λ',\n  Lang: '⟪',\n  Laplacetrf: 'ℒ',\n  Larr: '↞',\n  Lcaron: 'Ľ',\n  Lcedil: 'Ļ',\n  Lcy: 'Л',\n  LeftAngleBracket: '⟨',\n  LeftArrow: '←',\n  LeftArrowBar: '⇤',\n  LeftArrowRightArrow: '⇆',\n  LeftCeiling: '⌈',\n  LeftDoubleBracket: '⟦',\n  LeftDownTeeVector: '⥡',\n  LeftDownVector: '⇃',\n  LeftDownVectorBar: '⥙',\n  LeftFloor: '⌊',\n  LeftRightArrow: '↔',\n  LeftRightVector: '⥎',\n  LeftTee: '⊣',\n  LeftTeeArrow: '↤',\n  LeftTeeVector: '⥚',\n  LeftTriangle: '⊲',\n  LeftTriangleBar: '⧏',\n  LeftTriangleEqual: '⊴',\n  LeftUpDownVector: '⥑',\n  LeftUpTeeVector: '⥠',\n  LeftUpVector: '↿',\n  LeftUpVectorBar: '⥘',\n  LeftVector: '↼',\n  LeftVectorBar: '⥒',\n  Leftarrow: '⇐',\n  Leftrightarrow: '⇔',\n  LessEqualGreater: '⋚',\n  LessFullEqual: '≦',\n  LessGreater: '≶',\n  LessLess: '⪡',\n  LessSlantEqual: '⩽',\n  LessTilde: '≲',\n  Lfr: '𝔏',\n  Ll: '⋘',\n  Lleftarrow: '⇚',\n  Lmidot: 'Ŀ',\n  LongLeftArrow: '⟵',\n  LongLeftRightArrow: '⟷',\n  LongRightArrow: '⟶',\n  Longleftarrow: '⟸',\n  Longleftrightarrow: '⟺',\n  Longrightarrow: '⟹',\n  Lopf: '𝕃',\n  LowerLeftArrow: '↙',\n  LowerRightArrow: '↘',\n  Lscr: 'ℒ',\n  Lsh: '↰',\n  Lstrok: 'Ł',\n  Lt: '≪',\n  Map: '⤅',\n  Mcy: 'М',\n  MediumSpace: ' ',\n  Mellintrf: 'ℳ',\n  Mfr: '𝔐',\n  MinusPlus: '∓',\n  Mopf: '𝕄',\n  Mscr: 'ℳ',\n  Mu: 'Μ',\n  NJcy: 'Њ',\n  Nacute: 'Ń',\n  Ncaron: 'Ň',\n  Ncedil: 'Ņ',\n  Ncy: 'Н',\n  NegativeMediumSpace: '​',\n  NegativeThickSpace: '​',\n  NegativeThinSpace: '​',\n  NegativeVeryThinSpace: '​',\n  NestedGreaterGreater: '≫',\n  NestedLessLess: '≪',\n  NewLine: '\\n',\n  Nfr: '𝔑',\n  NoBreak: '⁠',\n  NonBreakingSpace: ' ',\n  Nopf: 'ℕ',\n  Not: '⫬',\n  NotCongruent: '≢',\n  NotCupCap: '≭',\n  NotDoubleVerticalBar: '∦',\n  NotElement: '∉',\n  NotEqual: '≠',\n  NotEqualTilde: '≂̸',\n  NotExists: '∄',\n  NotGreater: '≯',\n  NotGreaterEqual: '≱',\n  NotGreaterFullEqual: '≧̸',\n  NotGreaterGreater: '≫̸',\n  NotGreaterLess: '≹',\n  NotGreaterSlantEqual: '⩾̸',\n  NotGreaterTilde: '≵',\n  NotHumpDownHump: '≎̸',\n  NotHumpEqual: '≏̸',\n  NotLeftTriangle: '⋪',\n  NotLeftTriangleBar: '⧏̸',\n  NotLeftTriangleEqual: '⋬',\n  NotLess: '≮',\n  NotLessEqual: '≰',\n  NotLessGreater: '≸',\n  NotLessLess: '≪̸',\n  NotLessSlantEqual: '⩽̸',\n  NotLessTilde: '≴',\n  NotNestedGreaterGreater: '⪢̸',\n  NotNestedLessLess: '⪡̸',\n  NotPrecedes: '⊀',\n  NotPrecedesEqual: '⪯̸',\n  NotPrecedesSlantEqual: '⋠',\n  NotReverseElement: '∌',\n  NotRightTriangle: '⋫',\n  NotRightTriangleBar: '⧐̸',\n  NotRightTriangleEqual: '⋭',\n  NotSquareSubset: '⊏̸',\n  NotSquareSubsetEqual: '⋢',\n  NotSquareSuperset: '⊐̸',\n  NotSquareSupersetEqual: '⋣',\n  NotSubset: '⊂⃒',\n  NotSubsetEqual: '⊈',\n  NotSucceeds: '⊁',\n  NotSucceedsEqual: '⪰̸',\n  NotSucceedsSlantEqual: '⋡',\n  NotSucceedsTilde: '≿̸',\n  NotSuperset: '⊃⃒',\n  NotSupersetEqual: '⊉',\n  NotTilde: '≁',\n  NotTildeEqual: '≄',\n  NotTildeFullEqual: '≇',\n  NotTildeTilde: '≉',\n  NotVerticalBar: '∤',\n  Nscr: '𝒩',\n  Ntilde: 'Ñ',\n  Nu: 'Ν',\n  OElig: 'Œ',\n  Oacute: 'Ó',\n  Ocirc: 'Ô',\n  Ocy: 'О',\n  Odblac: 'Ő',\n  Ofr: '𝔒',\n  Ograve: 'Ò',\n  Omacr: 'Ō',\n  Omega: 'Ω',\n  Omicron: 'Ο',\n  Oopf: '𝕆',\n  OpenCurlyDoubleQuote: '“',\n  OpenCurlyQuote: '‘',\n  Or: '⩔',\n  Oscr: '𝒪',\n  Oslash: 'Ø',\n  Otilde: 'Õ',\n  Otimes: '⨷',\n  Ouml: 'Ö',\n  OverBar: '‾',\n  OverBrace: '⏞',\n  OverBracket: '⎴',\n  OverParenthesis: '⏜',\n  PartialD: '∂',\n  Pcy: 'П',\n  Pfr: '𝔓',\n  Phi: 'Φ',\n  Pi: 'Π',\n  PlusMinus: '±',\n  Poincareplane: 'ℌ',\n  Popf: 'ℙ',\n  Pr: '⪻',\n  Precedes: '≺',\n  PrecedesEqual: '⪯',\n  PrecedesSlantEqual: '≼',\n  PrecedesTilde: '≾',\n  Prime: '″',\n  Product: '∏',\n  Proportion: '∷',\n  Proportional: '∝',\n  Pscr: '𝒫',\n  Psi: 'Ψ',\n  QUOT: '\"',\n  Qfr: '𝔔',\n  Qopf: 'ℚ',\n  Qscr: '𝒬',\n  RBarr: '⤐',\n  REG: '®',\n  Racute: 'Ŕ',\n  Rang: '⟫',\n  Rarr: '↠',\n  Rarrtl: '⤖',\n  Rcaron: 'Ř',\n  Rcedil: 'Ŗ',\n  Rcy: 'Р',\n  Re: 'ℜ',\n  ReverseElement: '∋',\n  ReverseEquilibrium: '⇋',\n  ReverseUpEquilibrium: '⥯',\n  Rfr: 'ℜ',\n  Rho: 'Ρ',\n  RightAngleBracket: '⟩',\n  RightArrow: '→',\n  RightArrowBar: '⇥',\n  RightArrowLeftArrow: '⇄',\n  RightCeiling: '⌉',\n  RightDoubleBracket: '⟧',\n  RightDownTeeVector: '⥝',\n  RightDownVector: '⇂',\n  RightDownVectorBar: '⥕',\n  RightFloor: '⌋',\n  RightTee: '⊢',\n  RightTeeArrow: '↦',\n  RightTeeVector: '⥛',\n  RightTriangle: '⊳',\n  RightTriangleBar: '⧐',\n  RightTriangleEqual: '⊵',\n  RightUpDownVector: '⥏',\n  RightUpTeeVector: '⥜',\n  RightUpVector: '↾',\n  RightUpVectorBar: '⥔',\n  RightVector: '⇀',\n  RightVectorBar: '⥓',\n  Rightarrow: '⇒',\n  Ropf: 'ℝ',\n  RoundImplies: '⥰',\n  Rrightarrow: '⇛',\n  Rscr: 'ℛ',\n  Rsh: '↱',\n  RuleDelayed: '⧴',\n  SHCHcy: 'Щ',\n  SHcy: 'Ш',\n  SOFTcy: 'Ь',\n  Sacute: 'Ś',\n  Sc: '⪼',\n  Scaron: 'Š',\n  Scedil: 'Ş',\n  Scirc: 'Ŝ',\n  Scy: 'С',\n  Sfr: '𝔖',\n  ShortDownArrow: '↓',\n  ShortLeftArrow: '←',\n  ShortRightArrow: '→',\n  ShortUpArrow: '↑',\n  Sigma: 'Σ',\n  SmallCircle: '∘',\n  Sopf: '𝕊',\n  Sqrt: '√',\n  Square: '□',\n  SquareIntersection: '⊓',\n  SquareSubset: '⊏',\n  SquareSubsetEqual: '⊑',\n  SquareSuperset: '⊐',\n  SquareSupersetEqual: '⊒',\n  SquareUnion: '⊔',\n  Sscr: '𝒮',\n  Star: '⋆',\n  Sub: '⋐',\n  Subset: '⋐',\n  SubsetEqual: '⊆',\n  Succeeds: '≻',\n  SucceedsEqual: '⪰',\n  SucceedsSlantEqual: '≽',\n  SucceedsTilde: '≿',\n  SuchThat: '∋',\n  Sum: '∑',\n  Sup: '⋑',\n  Superset: '⊃',\n  SupersetEqual: '⊇',\n  Supset: '⋑',\n  THORN: 'Þ',\n  TRADE: '™',\n  TSHcy: 'Ћ',\n  TScy: 'Ц',\n  Tab: '\\t',\n  Tau: 'Τ',\n  Tcaron: 'Ť',\n  Tcedil: 'Ţ',\n  Tcy: 'Т',\n  Tfr: '𝔗',\n  Therefore: '∴',\n  Theta: 'Θ',\n  ThickSpace: '  ',\n  ThinSpace: ' ',\n  Tilde: '∼',\n  TildeEqual: '≃',\n  TildeFullEqual: '≅',\n  TildeTilde: '≈',\n  Topf: '𝕋',\n  TripleDot: '⃛',\n  Tscr: '𝒯',\n  Tstrok: 'Ŧ',\n  Uacute: 'Ú',\n  Uarr: '↟',\n  Uarrocir: '⥉',\n  Ubrcy: 'Ў',\n  Ubreve: 'Ŭ',\n  Ucirc: 'Û',\n  Ucy: 'У',\n  Udblac: 'Ű',\n  Ufr: '𝔘',\n  Ugrave: 'Ù',\n  Umacr: 'Ū',\n  UnderBar: '_',\n  UnderBrace: '⏟',\n  UnderBracket: '⎵',\n  UnderParenthesis: '⏝',\n  Union: '⋃',\n  UnionPlus: '⊎',\n  Uogon: 'Ų',\n  Uopf: '𝕌',\n  UpArrow: '↑',\n  UpArrowBar: '⤒',\n  UpArrowDownArrow: '⇅',\n  UpDownArrow: '↕',\n  UpEquilibrium: '⥮',\n  UpTee: '⊥',\n  UpTeeArrow: '↥',\n  Uparrow: '⇑',\n  Updownarrow: '⇕',\n  UpperLeftArrow: '↖',\n  UpperRightArrow: '↗',\n  Upsi: 'ϒ',\n  Upsilon: 'Υ',\n  Uring: 'Ů',\n  Uscr: '𝒰',\n  Utilde: 'Ũ',\n  Uuml: 'Ü',\n  VDash: '⊫',\n  Vbar: '⫫',\n  Vcy: 'В',\n  Vdash: '⊩',\n  Vdashl: '⫦',\n  Vee: '⋁',\n  Verbar: '‖',\n  Vert: '‖',\n  VerticalBar: '∣',\n  VerticalLine: '|',\n  VerticalSeparator: '❘',\n  VerticalTilde: '≀',\n  VeryThinSpace: ' ',\n  Vfr: '𝔙',\n  Vopf: '𝕍',\n  Vscr: '𝒱',\n  Vvdash: '⊪',\n  Wcirc: 'Ŵ',\n  Wedge: '⋀',\n  Wfr: '𝔚',\n  Wopf: '𝕎',\n  Wscr: '𝒲',\n  Xfr: '𝔛',\n  Xi: 'Ξ',\n  Xopf: '𝕏',\n  Xscr: '𝒳',\n  YAcy: 'Я',\n  YIcy: 'Ї',\n  YUcy: 'Ю',\n  Yacute: 'Ý',\n  Ycirc: 'Ŷ',\n  Ycy: 'Ы',\n  Yfr: '𝔜',\n  Yopf: '𝕐',\n  Yscr: '𝒴',\n  Yuml: 'Ÿ',\n  ZHcy: 'Ж',\n  Zacute: 'Ź',\n  Zcaron: 'Ž',\n  Zcy: 'З',\n  Zdot: 'Ż',\n  ZeroWidthSpace: '​',\n  Zeta: 'Ζ',\n  Zfr: 'ℨ',\n  Zopf: 'ℤ',\n  Zscr: '𝒵',\n  aacute: 'á',\n  abreve: 'ă',\n  ac: '∾',\n  acE: '∾̳',\n  acd: '∿',\n  acirc: 'â',\n  acute: '´',\n  acy: 'а',\n  aelig: 'æ',\n  af: '⁡',\n  afr: '𝔞',\n  agrave: 'à',\n  alefsym: 'ℵ',\n  aleph: 'ℵ',\n  alpha: 'α',\n  amacr: 'ā',\n  amalg: '⨿',\n  amp: '&',\n  and: '∧',\n  andand: '⩕',\n  andd: '⩜',\n  andslope: '⩘',\n  andv: '⩚',\n  ang: '∠',\n  ange: '⦤',\n  angle: '∠',\n  angmsd: '∡',\n  angmsdaa: '⦨',\n  angmsdab: '⦩',\n  angmsdac: '⦪',\n  angmsdad: '⦫',\n  angmsdae: '⦬',\n  angmsdaf: '⦭',\n  angmsdag: '⦮',\n  angmsdah: '⦯',\n  angrt: '∟',\n  angrtvb: '⊾',\n  angrtvbd: '⦝',\n  angsph: '∢',\n  angst: 'Å',\n  angzarr: '⍼',\n  aogon: 'ą',\n  aopf: '𝕒',\n  ap: '≈',\n  apE: '⩰',\n  apacir: '⩯',\n  ape: '≊',\n  apid: '≋',\n  apos: \"'\",\n  approx: '≈',\n  approxeq: '≊',\n  aring: 'å',\n  ascr: '𝒶',\n  ast: '*',\n  asymp: '≈',\n  asympeq: '≍',\n  atilde: 'ã',\n  auml: 'ä',\n  awconint: '∳',\n  awint: '⨑',\n  bNot: '⫭',\n  backcong: '≌',\n  backepsilon: '϶',\n  backprime: '‵',\n  backsim: '∽',\n  backsimeq: '⋍',\n  barvee: '⊽',\n  barwed: '⌅',\n  barwedge: '⌅',\n  bbrk: '⎵',\n  bbrktbrk: '⎶',\n  bcong: '≌',\n  bcy: 'б',\n  bdquo: '„',\n  becaus: '∵',\n  because: '∵',\n  bemptyv: '⦰',\n  bepsi: '϶',\n  bernou: 'ℬ',\n  beta: 'β',\n  beth: 'ℶ',\n  between: '≬',\n  bfr: '𝔟',\n  bigcap: '⋂',\n  bigcirc: '◯',\n  bigcup: '⋃',\n  bigodot: '⨀',\n  bigoplus: '⨁',\n  bigotimes: '⨂',\n  bigsqcup: '⨆',\n  bigstar: '★',\n  bigtriangledown: '▽',\n  bigtriangleup: '△',\n  biguplus: '⨄',\n  bigvee: '⋁',\n  bigwedge: '⋀',\n  bkarow: '⤍',\n  blacklozenge: '⧫',\n  blacksquare: '▪',\n  blacktriangle: '▴',\n  blacktriangledown: '▾',\n  blacktriangleleft: '◂',\n  blacktriangleright: '▸',\n  blank: '␣',\n  blk12: '▒',\n  blk14: '░',\n  blk34: '▓',\n  block: '█',\n  bne: '=⃥',\n  bnequiv: '≡⃥',\n  bnot: '⌐',\n  bopf: '𝕓',\n  bot: '⊥',\n  bottom: '⊥',\n  bowtie: '⋈',\n  boxDL: '╗',\n  boxDR: '╔',\n  boxDl: '╖',\n  boxDr: '╓',\n  boxH: '═',\n  boxHD: '╦',\n  boxHU: '╩',\n  boxHd: '╤',\n  boxHu: '╧',\n  boxUL: '╝',\n  boxUR: '╚',\n  boxUl: '╜',\n  boxUr: '╙',\n  boxV: '║',\n  boxVH: '╬',\n  boxVL: '╣',\n  boxVR: '╠',\n  boxVh: '╫',\n  boxVl: '╢',\n  boxVr: '╟',\n  boxbox: '⧉',\n  boxdL: '╕',\n  boxdR: '╒',\n  boxdl: '┐',\n  boxdr: '┌',\n  boxh: '─',\n  boxhD: '╥',\n  boxhU: '╨',\n  boxhd: '┬',\n  boxhu: '┴',\n  boxminus: '⊟',\n  boxplus: '⊞',\n  boxtimes: '⊠',\n  boxuL: '╛',\n  boxuR: '╘',\n  boxul: '┘',\n  boxur: '└',\n  boxv: '│',\n  boxvH: '╪',\n  boxvL: '╡',\n  boxvR: '╞',\n  boxvh: '┼',\n  boxvl: '┤',\n  boxvr: '├',\n  bprime: '‵',\n  breve: '˘',\n  brvbar: '¦',\n  bscr: '𝒷',\n  bsemi: '⁏',\n  bsim: '∽',\n  bsime: '⋍',\n  bsol: '\\\\',\n  bsolb: '⧅',\n  bsolhsub: '⟈',\n  bull: '•',\n  bullet: '•',\n  bump: '≎',\n  bumpE: '⪮',\n  bumpe: '≏',\n  bumpeq: '≏',\n  cacute: 'ć',\n  cap: '∩',\n  capand: '⩄',\n  capbrcup: '⩉',\n  capcap: '⩋',\n  capcup: '⩇',\n  capdot: '⩀',\n  caps: '∩︀',\n  caret: '⁁',\n  caron: 'ˇ',\n  ccaps: '⩍',\n  ccaron: 'č',\n  ccedil: 'ç',\n  ccirc: 'ĉ',\n  ccups: '⩌',\n  ccupssm: '⩐',\n  cdot: 'ċ',\n  cedil: '¸',\n  cemptyv: '⦲',\n  cent: '¢',\n  centerdot: '·',\n  cfr: '𝔠',\n  chcy: 'ч',\n  check: '✓',\n  checkmark: '✓',\n  chi: 'χ',\n  cir: '○',\n  cirE: '⧃',\n  circ: 'ˆ',\n  circeq: '≗',\n  circlearrowleft: '↺',\n  circlearrowright: '↻',\n  circledR: '®',\n  circledS: 'Ⓢ',\n  circledast: '⊛',\n  circledcirc: '⊚',\n  circleddash: '⊝',\n  cire: '≗',\n  cirfnint: '⨐',\n  cirmid: '⫯',\n  cirscir: '⧂',\n  clubs: '♣',\n  clubsuit: '♣',\n  colon: ':',\n  colone: '≔',\n  coloneq: '≔',\n  comma: ',',\n  commat: '@',\n  comp: '∁',\n  compfn: '∘',\n  complement: '∁',\n  complexes: 'ℂ',\n  cong: '≅',\n  congdot: '⩭',\n  conint: '∮',\n  copf: '𝕔',\n  coprod: '∐',\n  copy: '©',\n  copysr: '℗',\n  crarr: '↵',\n  cross: '✗',\n  cscr: '𝒸',\n  csub: '⫏',\n  csube: '⫑',\n  csup: '⫐',\n  csupe: '⫒',\n  ctdot: '⋯',\n  cudarrl: '⤸',\n  cudarrr: '⤵',\n  cuepr: '⋞',\n  cuesc: '⋟',\n  cularr: '↶',\n  cularrp: '⤽',\n  cup: '∪',\n  cupbrcap: '⩈',\n  cupcap: '⩆',\n  cupcup: '⩊',\n  cupdot: '⊍',\n  cupor: '⩅',\n  cups: '∪︀',\n  curarr: '↷',\n  curarrm: '⤼',\n  curlyeqprec: '⋞',\n  curlyeqsucc: '⋟',\n  curlyvee: '⋎',\n  curlywedge: '⋏',\n  curren: '¤',\n  curvearrowleft: '↶',\n  curvearrowright: '↷',\n  cuvee: '⋎',\n  cuwed: '⋏',\n  cwconint: '∲',\n  cwint: '∱',\n  cylcty: '⌭',\n  dArr: '⇓',\n  dHar: '⥥',\n  dagger: '†',\n  daleth: 'ℸ',\n  darr: '↓',\n  dash: '‐',\n  dashv: '⊣',\n  dbkarow: '⤏',\n  dblac: '˝',\n  dcaron: 'ď',\n  dcy: 'д',\n  dd: 'ⅆ',\n  ddagger: '‡',\n  ddarr: '⇊',\n  ddotseq: '⩷',\n  deg: '°',\n  delta: 'δ',\n  demptyv: '⦱',\n  dfisht: '⥿',\n  dfr: '𝔡',\n  dharl: '⇃',\n  dharr: '⇂',\n  diam: '⋄',\n  diamond: '⋄',\n  diamondsuit: '♦',\n  diams: '♦',\n  die: '¨',\n  digamma: 'ϝ',\n  disin: '⋲',\n  div: '÷',\n  divide: '÷',\n  divideontimes: '⋇',\n  divonx: '⋇',\n  djcy: 'ђ',\n  dlcorn: '⌞',\n  dlcrop: '⌍',\n  dollar: '$',\n  dopf: '𝕕',\n  dot: '˙',\n  doteq: '≐',\n  doteqdot: '≑',\n  dotminus: '∸',\n  dotplus: '∔',\n  dotsquare: '⊡',\n  doublebarwedge: '⌆',\n  downarrow: '↓',\n  downdownarrows: '⇊',\n  downharpoonleft: '⇃',\n  downharpoonright: '⇂',\n  drbkarow: '⤐',\n  drcorn: '⌟',\n  drcrop: '⌌',\n  dscr: '𝒹',\n  dscy: 'ѕ',\n  dsol: '⧶',\n  dstrok: 'đ',\n  dtdot: '⋱',\n  dtri: '▿',\n  dtrif: '▾',\n  duarr: '⇵',\n  duhar: '⥯',\n  dwangle: '⦦',\n  dzcy: 'џ',\n  dzigrarr: '⟿',\n  eDDot: '⩷',\n  eDot: '≑',\n  eacute: 'é',\n  easter: '⩮',\n  ecaron: 'ě',\n  ecir: '≖',\n  ecirc: 'ê',\n  ecolon: '≕',\n  ecy: 'э',\n  edot: 'ė',\n  ee: 'ⅇ',\n  efDot: '≒',\n  efr: '𝔢',\n  eg: '⪚',\n  egrave: 'è',\n  egs: '⪖',\n  egsdot: '⪘',\n  el: '⪙',\n  elinters: '⏧',\n  ell: 'ℓ',\n  els: '⪕',\n  elsdot: '⪗',\n  emacr: 'ē',\n  empty: '∅',\n  emptyset: '∅',\n  emptyv: '∅',\n  emsp13: ' ',\n  emsp14: ' ',\n  emsp: ' ',\n  eng: 'ŋ',\n  ensp: ' ',\n  eogon: 'ę',\n  eopf: '𝕖',\n  epar: '⋕',\n  eparsl: '⧣',\n  eplus: '⩱',\n  epsi: 'ε',\n  epsilon: 'ε',\n  epsiv: 'ϵ',\n  eqcirc: '≖',\n  eqcolon: '≕',\n  eqsim: '≂',\n  eqslantgtr: '⪖',\n  eqslantless: '⪕',\n  equals: '=',\n  equest: '≟',\n  equiv: '≡',\n  equivDD: '⩸',\n  eqvparsl: '⧥',\n  erDot: '≓',\n  erarr: '⥱',\n  escr: 'ℯ',\n  esdot: '≐',\n  esim: '≂',\n  eta: 'η',\n  eth: 'ð',\n  euml: 'ë',\n  euro: '€',\n  excl: '!',\n  exist: '∃',\n  expectation: 'ℰ',\n  exponentiale: 'ⅇ',\n  fallingdotseq: '≒',\n  fcy: 'ф',\n  female: '♀',\n  ffilig: 'ﬃ',\n  fflig: 'ﬀ',\n  ffllig: 'ﬄ',\n  ffr: '𝔣',\n  filig: 'ﬁ',\n  fjlig: 'fj',\n  flat: '♭',\n  fllig: 'ﬂ',\n  fltns: '▱',\n  fnof: 'ƒ',\n  fopf: '𝕗',\n  forall: '∀',\n  fork: '⋔',\n  forkv: '⫙',\n  fpartint: '⨍',\n  frac12: '½',\n  frac13: '⅓',\n  frac14: '¼',\n  frac15: '⅕',\n  frac16: '⅙',\n  frac18: '⅛',\n  frac23: '⅔',\n  frac25: '⅖',\n  frac34: '¾',\n  frac35: '⅗',\n  frac38: '⅜',\n  frac45: '⅘',\n  frac56: '⅚',\n  frac58: '⅝',\n  frac78: '⅞',\n  frasl: '⁄',\n  frown: '⌢',\n  fscr: '𝒻',\n  gE: '≧',\n  gEl: '⪌',\n  gacute: 'ǵ',\n  gamma: 'γ',\n  gammad: 'ϝ',\n  gap: '⪆',\n  gbreve: 'ğ',\n  gcirc: 'ĝ',\n  gcy: 'г',\n  gdot: 'ġ',\n  ge: '≥',\n  gel: '⋛',\n  geq: '≥',\n  geqq: '≧',\n  geqslant: '⩾',\n  ges: '⩾',\n  gescc: '⪩',\n  gesdot: '⪀',\n  gesdoto: '⪂',\n  gesdotol: '⪄',\n  gesl: '⋛︀',\n  gesles: '⪔',\n  gfr: '𝔤',\n  gg: '≫',\n  ggg: '⋙',\n  gimel: 'ℷ',\n  gjcy: 'ѓ',\n  gl: '≷',\n  glE: '⪒',\n  gla: '⪥',\n  glj: '⪤',\n  gnE: '≩',\n  gnap: '⪊',\n  gnapprox: '⪊',\n  gne: '⪈',\n  gneq: '⪈',\n  gneqq: '≩',\n  gnsim: '⋧',\n  gopf: '𝕘',\n  grave: '`',\n  gscr: 'ℊ',\n  gsim: '≳',\n  gsime: '⪎',\n  gsiml: '⪐',\n  gt: '>',\n  gtcc: '⪧',\n  gtcir: '⩺',\n  gtdot: '⋗',\n  gtlPar: '⦕',\n  gtquest: '⩼',\n  gtrapprox: '⪆',\n  gtrarr: '⥸',\n  gtrdot: '⋗',\n  gtreqless: '⋛',\n  gtreqqless: '⪌',\n  gtrless: '≷',\n  gtrsim: '≳',\n  gvertneqq: '≩︀',\n  gvnE: '≩︀',\n  hArr: '⇔',\n  hairsp: ' ',\n  half: '½',\n  hamilt: 'ℋ',\n  hardcy: 'ъ',\n  harr: '↔',\n  harrcir: '⥈',\n  harrw: '↭',\n  hbar: 'ℏ',\n  hcirc: 'ĥ',\n  hearts: '♥',\n  heartsuit: '♥',\n  hellip: '…',\n  hercon: '⊹',\n  hfr: '𝔥',\n  hksearow: '⤥',\n  hkswarow: '⤦',\n  hoarr: '⇿',\n  homtht: '∻',\n  hookleftarrow: '↩',\n  hookrightarrow: '↪',\n  hopf: '𝕙',\n  horbar: '―',\n  hscr: '𝒽',\n  hslash: 'ℏ',\n  hstrok: 'ħ',\n  hybull: '⁃',\n  hyphen: '‐',\n  iacute: 'í',\n  ic: '⁣',\n  icirc: 'î',\n  icy: 'и',\n  iecy: 'е',\n  iexcl: '¡',\n  iff: '⇔',\n  ifr: '𝔦',\n  igrave: 'ì',\n  ii: 'ⅈ',\n  iiiint: '⨌',\n  iiint: '∭',\n  iinfin: '⧜',\n  iiota: '℩',\n  ijlig: 'ĳ',\n  imacr: 'ī',\n  image: 'ℑ',\n  imagline: 'ℐ',\n  imagpart: 'ℑ',\n  imath: 'ı',\n  imof: '⊷',\n  imped: 'Ƶ',\n  in: '∈',\n  incare: '℅',\n  infin: '∞',\n  infintie: '⧝',\n  inodot: 'ı',\n  int: '∫',\n  intcal: '⊺',\n  integers: 'ℤ',\n  intercal: '⊺',\n  intlarhk: '⨗',\n  intprod: '⨼',\n  iocy: 'ё',\n  iogon: 'į',\n  iopf: '𝕚',\n  iota: 'ι',\n  iprod: '⨼',\n  iquest: '¿',\n  iscr: '𝒾',\n  isin: '∈',\n  isinE: '⋹',\n  isindot: '⋵',\n  isins: '⋴',\n  isinsv: '⋳',\n  isinv: '∈',\n  it: '⁢',\n  itilde: 'ĩ',\n  iukcy: 'і',\n  iuml: 'ï',\n  jcirc: 'ĵ',\n  jcy: 'й',\n  jfr: '𝔧',\n  jmath: 'ȷ',\n  jopf: '𝕛',\n  jscr: '𝒿',\n  jsercy: 'ј',\n  jukcy: 'є',\n  kappa: 'κ',\n  kappav: 'ϰ',\n  kcedil: 'ķ',\n  kcy: 'к',\n  kfr: '𝔨',\n  kgreen: 'ĸ',\n  khcy: 'х',\n  kjcy: 'ќ',\n  kopf: '𝕜',\n  kscr: '𝓀',\n  lAarr: '⇚',\n  lArr: '⇐',\n  lAtail: '⤛',\n  lBarr: '⤎',\n  lE: '≦',\n  lEg: '⪋',\n  lHar: '⥢',\n  lacute: 'ĺ',\n  laemptyv: '⦴',\n  lagran: 'ℒ',\n  lambda: 'λ',\n  lang: '⟨',\n  langd: '⦑',\n  langle: '⟨',\n  lap: '⪅',\n  laquo: '«',\n  larr: '←',\n  larrb: '⇤',\n  larrbfs: '⤟',\n  larrfs: '⤝',\n  larrhk: '↩',\n  larrlp: '↫',\n  larrpl: '⤹',\n  larrsim: '⥳',\n  larrtl: '↢',\n  lat: '⪫',\n  latail: '⤙',\n  late: '⪭',\n  lates: '⪭︀',\n  lbarr: '⤌',\n  lbbrk: '❲',\n  lbrace: '{',\n  lbrack: '[',\n  lbrke: '⦋',\n  lbrksld: '⦏',\n  lbrkslu: '⦍',\n  lcaron: 'ľ',\n  lcedil: 'ļ',\n  lceil: '⌈',\n  lcub: '{',\n  lcy: 'л',\n  ldca: '⤶',\n  ldquo: '“',\n  ldquor: '„',\n  ldrdhar: '⥧',\n  ldrushar: '⥋',\n  ldsh: '↲',\n  le: '≤',\n  leftarrow: '←',\n  leftarrowtail: '↢',\n  leftharpoondown: '↽',\n  leftharpoonup: '↼',\n  leftleftarrows: '⇇',\n  leftrightarrow: '↔',\n  leftrightarrows: '⇆',\n  leftrightharpoons: '⇋',\n  leftrightsquigarrow: '↭',\n  leftthreetimes: '⋋',\n  leg: '⋚',\n  leq: '≤',\n  leqq: '≦',\n  leqslant: '⩽',\n  les: '⩽',\n  lescc: '⪨',\n  lesdot: '⩿',\n  lesdoto: '⪁',\n  lesdotor: '⪃',\n  lesg: '⋚︀',\n  lesges: '⪓',\n  lessapprox: '⪅',\n  lessdot: '⋖',\n  lesseqgtr: '⋚',\n  lesseqqgtr: '⪋',\n  lessgtr: '≶',\n  lesssim: '≲',\n  lfisht: '⥼',\n  lfloor: '⌊',\n  lfr: '𝔩',\n  lg: '≶',\n  lgE: '⪑',\n  lhard: '↽',\n  lharu: '↼',\n  lharul: '⥪',\n  lhblk: '▄',\n  ljcy: 'љ',\n  ll: '≪',\n  llarr: '⇇',\n  llcorner: '⌞',\n  llhard: '⥫',\n  lltri: '◺',\n  lmidot: 'ŀ',\n  lmoust: '⎰',\n  lmoustache: '⎰',\n  lnE: '≨',\n  lnap: '⪉',\n  lnapprox: '⪉',\n  lne: '⪇',\n  lneq: '⪇',\n  lneqq: '≨',\n  lnsim: '⋦',\n  loang: '⟬',\n  loarr: '⇽',\n  lobrk: '⟦',\n  longleftarrow: '⟵',\n  longleftrightarrow: '⟷',\n  longmapsto: '⟼',\n  longrightarrow: '⟶',\n  looparrowleft: '↫',\n  looparrowright: '↬',\n  lopar: '⦅',\n  lopf: '𝕝',\n  loplus: '⨭',\n  lotimes: '⨴',\n  lowast: '∗',\n  lowbar: '_',\n  loz: '◊',\n  lozenge: '◊',\n  lozf: '⧫',\n  lpar: '(',\n  lparlt: '⦓',\n  lrarr: '⇆',\n  lrcorner: '⌟',\n  lrhar: '⇋',\n  lrhard: '⥭',\n  lrm: '‎',\n  lrtri: '⊿',\n  lsaquo: '‹',\n  lscr: '𝓁',\n  lsh: '↰',\n  lsim: '≲',\n  lsime: '⪍',\n  lsimg: '⪏',\n  lsqb: '[',\n  lsquo: '‘',\n  lsquor: '‚',\n  lstrok: 'ł',\n  lt: '<',\n  ltcc: '⪦',\n  ltcir: '⩹',\n  ltdot: '⋖',\n  lthree: '⋋',\n  ltimes: '⋉',\n  ltlarr: '⥶',\n  ltquest: '⩻',\n  ltrPar: '⦖',\n  ltri: '◃',\n  ltrie: '⊴',\n  ltrif: '◂',\n  lurdshar: '⥊',\n  luruhar: '⥦',\n  lvertneqq: '≨︀',\n  lvnE: '≨︀',\n  mDDot: '∺',\n  macr: '¯',\n  male: '♂',\n  malt: '✠',\n  maltese: '✠',\n  map: '↦',\n  mapsto: '↦',\n  mapstodown: '↧',\n  mapstoleft: '↤',\n  mapstoup: '↥',\n  marker: '▮',\n  mcomma: '⨩',\n  mcy: 'м',\n  mdash: '—',\n  measuredangle: '∡',\n  mfr: '𝔪',\n  mho: '℧',\n  micro: 'µ',\n  mid: '∣',\n  midast: '*',\n  midcir: '⫰',\n  middot: '·',\n  minus: '−',\n  minusb: '⊟',\n  minusd: '∸',\n  minusdu: '⨪',\n  mlcp: '⫛',\n  mldr: '…',\n  mnplus: '∓',\n  models: '⊧',\n  mopf: '𝕞',\n  mp: '∓',\n  mscr: '𝓂',\n  mstpos: '∾',\n  mu: 'μ',\n  multimap: '⊸',\n  mumap: '⊸',\n  nGg: '⋙̸',\n  nGt: '≫⃒',\n  nGtv: '≫̸',\n  nLeftarrow: '⇍',\n  nLeftrightarrow: '⇎',\n  nLl: '⋘̸',\n  nLt: '≪⃒',\n  nLtv: '≪̸',\n  nRightarrow: '⇏',\n  nVDash: '⊯',\n  nVdash: '⊮',\n  nabla: '∇',\n  nacute: 'ń',\n  nang: '∠⃒',\n  nap: '≉',\n  napE: '⩰̸',\n  napid: '≋̸',\n  napos: 'ŉ',\n  napprox: '≉',\n  natur: '♮',\n  natural: '♮',\n  naturals: 'ℕ',\n  nbsp: ' ',\n  nbump: '≎̸',\n  nbumpe: '≏̸',\n  ncap: '⩃',\n  ncaron: 'ň',\n  ncedil: 'ņ',\n  ncong: '≇',\n  ncongdot: '⩭̸',\n  ncup: '⩂',\n  ncy: 'н',\n  ndash: '–',\n  ne: '≠',\n  neArr: '⇗',\n  nearhk: '⤤',\n  nearr: '↗',\n  nearrow: '↗',\n  nedot: '≐̸',\n  nequiv: '≢',\n  nesear: '⤨',\n  nesim: '≂̸',\n  nexist: '∄',\n  nexists: '∄',\n  nfr: '𝔫',\n  ngE: '≧̸',\n  nge: '≱',\n  ngeq: '≱',\n  ngeqq: '≧̸',\n  ngeqslant: '⩾̸',\n  nges: '⩾̸',\n  ngsim: '≵',\n  ngt: '≯',\n  ngtr: '≯',\n  nhArr: '⇎',\n  nharr: '↮',\n  nhpar: '⫲',\n  ni: '∋',\n  nis: '⋼',\n  nisd: '⋺',\n  niv: '∋',\n  njcy: 'њ',\n  nlArr: '⇍',\n  nlE: '≦̸',\n  nlarr: '↚',\n  nldr: '‥',\n  nle: '≰',\n  nleftarrow: '↚',\n  nleftrightarrow: '↮',\n  nleq: '≰',\n  nleqq: '≦̸',\n  nleqslant: '⩽̸',\n  nles: '⩽̸',\n  nless: '≮',\n  nlsim: '≴',\n  nlt: '≮',\n  nltri: '⋪',\n  nltrie: '⋬',\n  nmid: '∤',\n  nopf: '𝕟',\n  not: '¬',\n  notin: '∉',\n  notinE: '⋹̸',\n  notindot: '⋵̸',\n  notinva: '∉',\n  notinvb: '⋷',\n  notinvc: '⋶',\n  notni: '∌',\n  notniva: '∌',\n  notnivb: '⋾',\n  notnivc: '⋽',\n  npar: '∦',\n  nparallel: '∦',\n  nparsl: '⫽⃥',\n  npart: '∂̸',\n  npolint: '⨔',\n  npr: '⊀',\n  nprcue: '⋠',\n  npre: '⪯̸',\n  nprec: '⊀',\n  npreceq: '⪯̸',\n  nrArr: '⇏',\n  nrarr: '↛',\n  nrarrc: '⤳̸',\n  nrarrw: '↝̸',\n  nrightarrow: '↛',\n  nrtri: '⋫',\n  nrtrie: '⋭',\n  nsc: '⊁',\n  nsccue: '⋡',\n  nsce: '⪰̸',\n  nscr: '𝓃',\n  nshortmid: '∤',\n  nshortparallel: '∦',\n  nsim: '≁',\n  nsime: '≄',\n  nsimeq: '≄',\n  nsmid: '∤',\n  nspar: '∦',\n  nsqsube: '⋢',\n  nsqsupe: '⋣',\n  nsub: '⊄',\n  nsubE: '⫅̸',\n  nsube: '⊈',\n  nsubset: '⊂⃒',\n  nsubseteq: '⊈',\n  nsubseteqq: '⫅̸',\n  nsucc: '⊁',\n  nsucceq: '⪰̸',\n  nsup: '⊅',\n  nsupE: '⫆̸',\n  nsupe: '⊉',\n  nsupset: '⊃⃒',\n  nsupseteq: '⊉',\n  nsupseteqq: '⫆̸',\n  ntgl: '≹',\n  ntilde: 'ñ',\n  ntlg: '≸',\n  ntriangleleft: '⋪',\n  ntrianglelefteq: '⋬',\n  ntriangleright: '⋫',\n  ntrianglerighteq: '⋭',\n  nu: 'ν',\n  num: '#',\n  numero: '№',\n  numsp: ' ',\n  nvDash: '⊭',\n  nvHarr: '⤄',\n  nvap: '≍⃒',\n  nvdash: '⊬',\n  nvge: '≥⃒',\n  nvgt: '>⃒',\n  nvinfin: '⧞',\n  nvlArr: '⤂',\n  nvle: '≤⃒',\n  nvlt: '<⃒',\n  nvltrie: '⊴⃒',\n  nvrArr: '⤃',\n  nvrtrie: '⊵⃒',\n  nvsim: '∼⃒',\n  nwArr: '⇖',\n  nwarhk: '⤣',\n  nwarr: '↖',\n  nwarrow: '↖',\n  nwnear: '⤧',\n  oS: 'Ⓢ',\n  oacute: 'ó',\n  oast: '⊛',\n  ocir: '⊚',\n  ocirc: 'ô',\n  ocy: 'о',\n  odash: '⊝',\n  odblac: 'ő',\n  odiv: '⨸',\n  odot: '⊙',\n  odsold: '⦼',\n  oelig: 'œ',\n  ofcir: '⦿',\n  ofr: '𝔬',\n  ogon: '˛',\n  ograve: 'ò',\n  ogt: '⧁',\n  ohbar: '⦵',\n  ohm: 'Ω',\n  oint: '∮',\n  olarr: '↺',\n  olcir: '⦾',\n  olcross: '⦻',\n  oline: '‾',\n  olt: '⧀',\n  omacr: 'ō',\n  omega: 'ω',\n  omicron: 'ο',\n  omid: '⦶',\n  ominus: '⊖',\n  oopf: '𝕠',\n  opar: '⦷',\n  operp: '⦹',\n  oplus: '⊕',\n  or: '∨',\n  orarr: '↻',\n  ord: '⩝',\n  order: 'ℴ',\n  orderof: 'ℴ',\n  ordf: 'ª',\n  ordm: 'º',\n  origof: '⊶',\n  oror: '⩖',\n  orslope: '⩗',\n  orv: '⩛',\n  oscr: 'ℴ',\n  oslash: 'ø',\n  osol: '⊘',\n  otilde: 'õ',\n  otimes: '⊗',\n  otimesas: '⨶',\n  ouml: 'ö',\n  ovbar: '⌽',\n  par: '∥',\n  para: '¶',\n  parallel: '∥',\n  parsim: '⫳',\n  parsl: '⫽',\n  part: '∂',\n  pcy: 'п',\n  percnt: '%',\n  period: '.',\n  permil: '‰',\n  perp: '⊥',\n  pertenk: '‱',\n  pfr: '𝔭',\n  phi: 'φ',\n  phiv: 'ϕ',\n  phmmat: 'ℳ',\n  phone: '☎',\n  pi: 'π',\n  pitchfork: '⋔',\n  piv: 'ϖ',\n  planck: 'ℏ',\n  planckh: 'ℎ',\n  plankv: 'ℏ',\n  plus: '+',\n  plusacir: '⨣',\n  plusb: '⊞',\n  pluscir: '⨢',\n  plusdo: '∔',\n  plusdu: '⨥',\n  pluse: '⩲',\n  plusmn: '±',\n  plussim: '⨦',\n  plustwo: '⨧',\n  pm: '±',\n  pointint: '⨕',\n  popf: '𝕡',\n  pound: '£',\n  pr: '≺',\n  prE: '⪳',\n  prap: '⪷',\n  prcue: '≼',\n  pre: '⪯',\n  prec: '≺',\n  precapprox: '⪷',\n  preccurlyeq: '≼',\n  preceq: '⪯',\n  precnapprox: '⪹',\n  precneqq: '⪵',\n  precnsim: '⋨',\n  precsim: '≾',\n  prime: '′',\n  primes: 'ℙ',\n  prnE: '⪵',\n  prnap: '⪹',\n  prnsim: '⋨',\n  prod: '∏',\n  profalar: '⌮',\n  profline: '⌒',\n  profsurf: '⌓',\n  prop: '∝',\n  propto: '∝',\n  prsim: '≾',\n  prurel: '⊰',\n  pscr: '𝓅',\n  psi: 'ψ',\n  puncsp: ' ',\n  qfr: '𝔮',\n  qint: '⨌',\n  qopf: '𝕢',\n  qprime: '⁗',\n  qscr: '𝓆',\n  quaternions: 'ℍ',\n  quatint: '⨖',\n  quest: '?',\n  questeq: '≟',\n  quot: '\"',\n  rAarr: '⇛',\n  rArr: '⇒',\n  rAtail: '⤜',\n  rBarr: '⤏',\n  rHar: '⥤',\n  race: '∽̱',\n  racute: 'ŕ',\n  radic: '√',\n  raemptyv: '⦳',\n  rang: '⟩',\n  rangd: '⦒',\n  range: '⦥',\n  rangle: '⟩',\n  raquo: '»',\n  rarr: '→',\n  rarrap: '⥵',\n  rarrb: '⇥',\n  rarrbfs: '⤠',\n  rarrc: '⤳',\n  rarrfs: '⤞',\n  rarrhk: '↪',\n  rarrlp: '↬',\n  rarrpl: '⥅',\n  rarrsim: '⥴',\n  rarrtl: '↣',\n  rarrw: '↝',\n  ratail: '⤚',\n  ratio: '∶',\n  rationals: 'ℚ',\n  rbarr: '⤍',\n  rbbrk: '❳',\n  rbrace: '}',\n  rbrack: ']',\n  rbrke: '⦌',\n  rbrksld: '⦎',\n  rbrkslu: '⦐',\n  rcaron: 'ř',\n  rcedil: 'ŗ',\n  rceil: '⌉',\n  rcub: '}',\n  rcy: 'р',\n  rdca: '⤷',\n  rdldhar: '⥩',\n  rdquo: '”',\n  rdquor: '”',\n  rdsh: '↳',\n  real: 'ℜ',\n  realine: 'ℛ',\n  realpart: 'ℜ',\n  reals: 'ℝ',\n  rect: '▭',\n  reg: '®',\n  rfisht: '⥽',\n  rfloor: '⌋',\n  rfr: '𝔯',\n  rhard: '⇁',\n  rharu: '⇀',\n  rharul: '⥬',\n  rho: 'ρ',\n  rhov: 'ϱ',\n  rightarrow: '→',\n  rightarrowtail: '↣',\n  rightharpoondown: '⇁',\n  rightharpoonup: '⇀',\n  rightleftarrows: '⇄',\n  rightleftharpoons: '⇌',\n  rightrightarrows: '⇉',\n  rightsquigarrow: '↝',\n  rightthreetimes: '⋌',\n  ring: '˚',\n  risingdotseq: '≓',\n  rlarr: '⇄',\n  rlhar: '⇌',\n  rlm: '‏',\n  rmoust: '⎱',\n  rmoustache: '⎱',\n  rnmid: '⫮',\n  roang: '⟭',\n  roarr: '⇾',\n  robrk: '⟧',\n  ropar: '⦆',\n  ropf: '𝕣',\n  roplus: '⨮',\n  rotimes: '⨵',\n  rpar: ')',\n  rpargt: '⦔',\n  rppolint: '⨒',\n  rrarr: '⇉',\n  rsaquo: '›',\n  rscr: '𝓇',\n  rsh: '↱',\n  rsqb: ']',\n  rsquo: '’',\n  rsquor: '’',\n  rthree: '⋌',\n  rtimes: '⋊',\n  rtri: '▹',\n  rtrie: '⊵',\n  rtrif: '▸',\n  rtriltri: '⧎',\n  ruluhar: '⥨',\n  rx: '℞',\n  sacute: 'ś',\n  sbquo: '‚',\n  sc: '≻',\n  scE: '⪴',\n  scap: '⪸',\n  scaron: 'š',\n  sccue: '≽',\n  sce: '⪰',\n  scedil: 'ş',\n  scirc: 'ŝ',\n  scnE: '⪶',\n  scnap: '⪺',\n  scnsim: '⋩',\n  scpolint: '⨓',\n  scsim: '≿',\n  scy: 'с',\n  sdot: '⋅',\n  sdotb: '⊡',\n  sdote: '⩦',\n  seArr: '⇘',\n  searhk: '⤥',\n  searr: '↘',\n  searrow: '↘',\n  sect: '§',\n  semi: ';',\n  seswar: '⤩',\n  setminus: '∖',\n  setmn: '∖',\n  sext: '✶',\n  sfr: '𝔰',\n  sfrown: '⌢',\n  sharp: '♯',\n  shchcy: 'щ',\n  shcy: 'ш',\n  shortmid: '∣',\n  shortparallel: '∥',\n  shy: '­',\n  sigma: 'σ',\n  sigmaf: 'ς',\n  sigmav: 'ς',\n  sim: '∼',\n  simdot: '⩪',\n  sime: '≃',\n  simeq: '≃',\n  simg: '⪞',\n  simgE: '⪠',\n  siml: '⪝',\n  simlE: '⪟',\n  simne: '≆',\n  simplus: '⨤',\n  simrarr: '⥲',\n  slarr: '←',\n  smallsetminus: '∖',\n  smashp: '⨳',\n  smeparsl: '⧤',\n  smid: '∣',\n  smile: '⌣',\n  smt: '⪪',\n  smte: '⪬',\n  smtes: '⪬︀',\n  softcy: 'ь',\n  sol: '/',\n  solb: '⧄',\n  solbar: '⌿',\n  sopf: '𝕤',\n  spades: '♠',\n  spadesuit: '♠',\n  spar: '∥',\n  sqcap: '⊓',\n  sqcaps: '⊓︀',\n  sqcup: '⊔',\n  sqcups: '⊔︀',\n  sqsub: '⊏',\n  sqsube: '⊑',\n  sqsubset: '⊏',\n  sqsubseteq: '⊑',\n  sqsup: '⊐',\n  sqsupe: '⊒',\n  sqsupset: '⊐',\n  sqsupseteq: '⊒',\n  squ: '□',\n  square: '□',\n  squarf: '▪',\n  squf: '▪',\n  srarr: '→',\n  sscr: '𝓈',\n  ssetmn: '∖',\n  ssmile: '⌣',\n  sstarf: '⋆',\n  star: '☆',\n  starf: '★',\n  straightepsilon: 'ϵ',\n  straightphi: 'ϕ',\n  strns: '¯',\n  sub: '⊂',\n  subE: '⫅',\n  subdot: '⪽',\n  sube: '⊆',\n  subedot: '⫃',\n  submult: '⫁',\n  subnE: '⫋',\n  subne: '⊊',\n  subplus: '⪿',\n  subrarr: '⥹',\n  subset: '⊂',\n  subseteq: '⊆',\n  subseteqq: '⫅',\n  subsetneq: '⊊',\n  subsetneqq: '⫋',\n  subsim: '⫇',\n  subsub: '⫕',\n  subsup: '⫓',\n  succ: '≻',\n  succapprox: '⪸',\n  succcurlyeq: '≽',\n  succeq: '⪰',\n  succnapprox: '⪺',\n  succneqq: '⪶',\n  succnsim: '⋩',\n  succsim: '≿',\n  sum: '∑',\n  sung: '♪',\n  sup1: '¹',\n  sup2: '²',\n  sup3: '³',\n  sup: '⊃',\n  supE: '⫆',\n  supdot: '⪾',\n  supdsub: '⫘',\n  supe: '⊇',\n  supedot: '⫄',\n  suphsol: '⟉',\n  suphsub: '⫗',\n  suplarr: '⥻',\n  supmult: '⫂',\n  supnE: '⫌',\n  supne: '⊋',\n  supplus: '⫀',\n  supset: '⊃',\n  supseteq: '⊇',\n  supseteqq: '⫆',\n  supsetneq: '⊋',\n  supsetneqq: '⫌',\n  supsim: '⫈',\n  supsub: '⫔',\n  supsup: '⫖',\n  swArr: '⇙',\n  swarhk: '⤦',\n  swarr: '↙',\n  swarrow: '↙',\n  swnwar: '⤪',\n  szlig: 'ß',\n  target: '⌖',\n  tau: 'τ',\n  tbrk: '⎴',\n  tcaron: 'ť',\n  tcedil: 'ţ',\n  tcy: 'т',\n  tdot: '⃛',\n  telrec: '⌕',\n  tfr: '𝔱',\n  there4: '∴',\n  therefore: '∴',\n  theta: 'θ',\n  thetasym: 'ϑ',\n  thetav: 'ϑ',\n  thickapprox: '≈',\n  thicksim: '∼',\n  thinsp: ' ',\n  thkap: '≈',\n  thksim: '∼',\n  thorn: 'þ',\n  tilde: '˜',\n  times: '×',\n  timesb: '⊠',\n  timesbar: '⨱',\n  timesd: '⨰',\n  tint: '∭',\n  toea: '⤨',\n  top: '⊤',\n  topbot: '⌶',\n  topcir: '⫱',\n  topf: '𝕥',\n  topfork: '⫚',\n  tosa: '⤩',\n  tprime: '‴',\n  trade: '™',\n  triangle: '▵',\n  triangledown: '▿',\n  triangleleft: '◃',\n  trianglelefteq: '⊴',\n  triangleq: '≜',\n  triangleright: '▹',\n  trianglerighteq: '⊵',\n  tridot: '◬',\n  trie: '≜',\n  triminus: '⨺',\n  triplus: '⨹',\n  trisb: '⧍',\n  tritime: '⨻',\n  trpezium: '⏢',\n  tscr: '𝓉',\n  tscy: 'ц',\n  tshcy: 'ћ',\n  tstrok: 'ŧ',\n  twixt: '≬',\n  twoheadleftarrow: '↞',\n  twoheadrightarrow: '↠',\n  uArr: '⇑',\n  uHar: '⥣',\n  uacute: 'ú',\n  uarr: '↑',\n  ubrcy: 'ў',\n  ubreve: 'ŭ',\n  ucirc: 'û',\n  ucy: 'у',\n  udarr: '⇅',\n  udblac: 'ű',\n  udhar: '⥮',\n  ufisht: '⥾',\n  ufr: '𝔲',\n  ugrave: 'ù',\n  uharl: '↿',\n  uharr: '↾',\n  uhblk: '▀',\n  ulcorn: '⌜',\n  ulcorner: '⌜',\n  ulcrop: '⌏',\n  ultri: '◸',\n  umacr: 'ū',\n  uml: '¨',\n  uogon: 'ų',\n  uopf: '𝕦',\n  uparrow: '↑',\n  updownarrow: '↕',\n  upharpoonleft: '↿',\n  upharpoonright: '↾',\n  uplus: '⊎',\n  upsi: 'υ',\n  upsih: 'ϒ',\n  upsilon: 'υ',\n  upuparrows: '⇈',\n  urcorn: '⌝',\n  urcorner: '⌝',\n  urcrop: '⌎',\n  uring: 'ů',\n  urtri: '◹',\n  uscr: '𝓊',\n  utdot: '⋰',\n  utilde: 'ũ',\n  utri: '▵',\n  utrif: '▴',\n  uuarr: '⇈',\n  uuml: 'ü',\n  uwangle: '⦧',\n  vArr: '⇕',\n  vBar: '⫨',\n  vBarv: '⫩',\n  vDash: '⊨',\n  vangrt: '⦜',\n  varepsilon: 'ϵ',\n  varkappa: 'ϰ',\n  varnothing: '∅',\n  varphi: 'ϕ',\n  varpi: 'ϖ',\n  varpropto: '∝',\n  varr: '↕',\n  varrho: 'ϱ',\n  varsigma: 'ς',\n  varsubsetneq: '⊊︀',\n  varsubsetneqq: '⫋︀',\n  varsupsetneq: '⊋︀',\n  varsupsetneqq: '⫌︀',\n  vartheta: 'ϑ',\n  vartriangleleft: '⊲',\n  vartriangleright: '⊳',\n  vcy: 'в',\n  vdash: '⊢',\n  vee: '∨',\n  veebar: '⊻',\n  veeeq: '≚',\n  vellip: '⋮',\n  verbar: '|',\n  vert: '|',\n  vfr: '𝔳',\n  vltri: '⊲',\n  vnsub: '⊂⃒',\n  vnsup: '⊃⃒',\n  vopf: '𝕧',\n  vprop: '∝',\n  vrtri: '⊳',\n  vscr: '𝓋',\n  vsubnE: '⫋︀',\n  vsubne: '⊊︀',\n  vsupnE: '⫌︀',\n  vsupne: '⊋︀',\n  vzigzag: '⦚',\n  wcirc: 'ŵ',\n  wedbar: '⩟',\n  wedge: '∧',\n  wedgeq: '≙',\n  weierp: '℘',\n  wfr: '𝔴',\n  wopf: '𝕨',\n  wp: '℘',\n  wr: '≀',\n  wreath: '≀',\n  wscr: '𝓌',\n  xcap: '⋂',\n  xcirc: '◯',\n  xcup: '⋃',\n  xdtri: '▽',\n  xfr: '𝔵',\n  xhArr: '⟺',\n  xharr: '⟷',\n  xi: 'ξ',\n  xlArr: '⟸',\n  xlarr: '⟵',\n  xmap: '⟼',\n  xnis: '⋻',\n  xodot: '⨀',\n  xopf: '𝕩',\n  xoplus: '⨁',\n  xotime: '⨂',\n  xrArr: '⟹',\n  xrarr: '⟶',\n  xscr: '𝓍',\n  xsqcup: '⨆',\n  xuplus: '⨄',\n  xutri: '△',\n  xvee: '⋁',\n  xwedge: '⋀',\n  yacute: 'ý',\n  yacy: 'я',\n  ycirc: 'ŷ',\n  ycy: 'ы',\n  yen: '¥',\n  yfr: '𝔶',\n  yicy: 'ї',\n  yopf: '𝕪',\n  yscr: '𝓎',\n  yucy: 'ю',\n  yuml: 'ÿ',\n  zacute: 'ź',\n  zcaron: 'ž',\n  zcy: 'з',\n  zdot: 'ż',\n  zeetrf: 'ℨ',\n  zeta: 'ζ',\n  zfr: '𝔷',\n  zhcy: 'ж',\n  zigrarr: '⇝',\n  zopf: '𝕫',\n  zscr: '𝓏',\n  zwj: '‍',\n  zwnj: '‌'\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n}\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  }\n  let initialPrefix = 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code)\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1]\n    initialPrefix =\n      tail && tail[1].type === 'linePrefix'\n        ? tail[2].sliceSerialize(tail[1], true).length\n        : 0\n    marker = code\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++\n      effects.consume(code)\n      return sequenceOpen\n    }\n    if (sizeOpen < 3) {\n      return nok(code)\n    }\n    effects.exit('codeFencedFenceSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, infoBefore, 'whitespace')(code)\n      : infoBefore(code)\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFencedFence')\n      return self.interrupt\n        ? ok(code)\n        : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return infoBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, metaBefore, 'whitespace')(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return info\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code)\n    }\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return infoBefore(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return meta\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code)\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return contentStart\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code)\n      ? factorySpace(\n          effects,\n          beforeContentChunk,\n          'linePrefix',\n          initialPrefix + 1\n        )(code)\n      : beforeContentChunk(code)\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return contentChunk(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return beforeContentChunk(code)\n    }\n    effects.consume(code)\n    return contentChunk\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0\n    return startBefore\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter('codeFencedFence')\n      return markdownSpace(code)\n        ? factorySpace(\n            effects,\n            beforeSequenceClose,\n            'linePrefix',\n            self.parser.constructs.disable.null.includes('codeIndented')\n              ? undefined\n              : 4\n          )(code)\n        : beforeSequenceClose(code)\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter('codeFencedFenceSequence')\n        return sequenceClose(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++\n        effects.consume(code)\n        return sequenceClose\n      }\n      if (size >= sizeOpen) {\n        effects.exit('codeFencedFenceSequence')\n        return markdownSpace(code)\n          ? factorySpace(effects, sequenceCloseAfter, 'whitespace')(code)\n          : sequenceCloseAfter(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineStart\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter('codeIndented')\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? atBreak(code)\n      : nok(code)\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code)\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return inside(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return inside\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit('codeIndented')\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this\n  return furtherStart\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return furtherStart\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? furtherStart(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number | undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n      enter = undefined\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n  let size\n  /** @type {Token} */\n  let token\n  return start\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n    effects.exit('codeTextSequence')\n    return between(code)\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return between\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return sequenceClose(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return between\n    }\n\n    // Data.\n    effects.enter('codeTextData')\n    return data(code)\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return between(code)\n    }\n    effects.consume(code)\n    return data\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return sequenceClose\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    }\n\n    // More or less accents: mark as data.\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous\n  return chunkStart\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return chunkInside(code)\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    }\n\n    // Data.\n    effects.consume(code)\n    return chunkInside\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return chunkInside\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1]\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport {splice} from 'micromark-util-chunked'\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} events\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n  let event\n  /** @type {number | undefined} */\n  let lineIndex\n  /** @type {number} */\n  let otherIndex\n  /** @type {Event} */\n  let otherEvent\n  /** @type {Array<Event>} */\n  let parameters\n  /** @type {Array<Event>} */\n  let subevents\n  /** @type {boolean | undefined} */\n  let more\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n    event = events[index]\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start)\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n  return !more\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {Array<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {Array<number>} */\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {Array<[number, number]>} */\n  const jumps = []\n  /** @type {Record<string, number>} */\n  const gaps = {}\n  /** @type {Array<Chunk>} */\n  let stream\n  /** @type {Token | undefined} */\n  let previous\n  let index = -1\n  /** @type {Token | undefined} */\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start]\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition)\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n      if (!current.next) {\n        stream.push(null)\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n      tokenizer.write(stream)\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    }\n\n    // Unravel the next token.\n    previous = current\n    current = current.next\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start)\n      // Help GC.\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = []\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n  index = -1\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n  let identifier\n  return start\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter('definition')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      return markerAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, destinationBefore)(code)\n      : destinationBefore(code)\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionDestination',\n      'definitionDestinationLiteral',\n      'definitionDestinationLiteralMarker',\n      'definitionDestinationRaw',\n      'definitionDestinationString'\n    )(code)\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code)\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, afterWhitespace, 'whitespace')(code)\n      : afterWhitespace(code)\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier)\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, beforeMarker)(code)\n      : nok(code)\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(\n      effects,\n      titleAfter,\n      nok,\n      'definitionTitle',\n      'definitionTitleMarker',\n      'definitionTitleString'\n    )(code)\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, titleAfterOptionalWhitespace, 'whitespace')(code)\n      : titleAfterOptionalWhitespace(code)\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n  let content\n  /** @type {Token} */\n  let text\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter('atxHeading')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('atxHeadingSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return sequenceOpen\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return atBreak(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequenceFurther(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequenceFurther\n    }\n    effects.exit('atxHeadingSequence')\n    return atBreak(code)\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n}\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n}\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start\n    // Remove the line prefix.\n    events.splice(index - 2, 2)\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n  let marker\n  /** @type {boolean} */\n  let closingTag\n  /** @type {string} */\n  let buffer\n  /** @type {number} */\n  let index\n  /** @type {Code} */\n  let markerB\n  return start\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      closingTag = true\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      marker = 3\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      marker = 2\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      marker = 5\n      index = 0\n      return cdataOpenInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      marker = 4\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation\n      }\n      return cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      const slash = code === 47\n      const name = buffer.toLowerCase()\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6\n        if (slash) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      marker = 7\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : closingTag\n        ? completeClosingTagAfter(code)\n        : completeAttributeNameBefore(code)\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    return completeAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n    return completeAttributeNameBefore(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      markerB = code\n      return completeAttributeValueQuoted\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    return completeAttributeValueUnquoted(code)\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code)\n      markerB = null\n      return completeAttributeValueQuotedAfter\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 47 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code)\n      return continuationCdataInside\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit('htmlFlowData')\n      return effects.check(\n        blankLineBefore,\n        continuationAfter,\n        continuationStart\n      )(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationStart(code)\n    }\n    effects.consume(code)\n    return continuation\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(\n      nonLazyContinuationStart,\n      continuationStartNonLazy,\n      continuationAfter\n    )(code)\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return continuationBefore\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code)\n    }\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase()\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code)\n        return continuationClose\n      }\n      return continuation(code)\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationAfter(code)\n    }\n    effects.consume(code)\n    return continuationClose\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit('htmlFlow')\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code> | undefined} */\n  let marker\n  /** @type {number} */\n  let index\n  /** @type {State} */\n  let returnState\n  return start\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      index = 0\n      return cdataOpenInside\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n    return nok(code)\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return nok(code)\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return comment\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return comment(code)\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62\n      ? end(code)\n      : code === 45\n      ? commentClose(code)\n      : comment(code)\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === value.length ? cdata : cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return cdata\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return declaration\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return instruction\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return tagCloseBetween(code)\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    return tagOpenAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n    return tagOpenBetween(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      marker = undefined\n      return tagOpenAttributeValueQuotedAfter\n    }\n    if (code === null) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n    return nok(code)\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineEndingAfter\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code)\n      ? factorySpace(\n          effects,\n          lineEndingAfterPrefix,\n          'linePrefix',\n          self.parser.constructs.disable.null.includes('codeIndented')\n            ? undefined\n            : 4\n        )(code)\n      : lineEndingAfterPrefix(code)\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n}\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n}\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  while (++index < events.length) {\n    const token = events[index][1]\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n  return events\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n  let token\n  /** @type {number | undefined} */\n  let open\n  /** @type {number | undefined} */\n  let close\n  /** @type {Array<Event>} */\n  let media\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1]\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ]\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3))\n\n  // Text open.\n  media = push(media, [['enter', text, context]])\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  )\n\n  // Text close, marker close, label close.\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ])\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1))\n\n  // Media close.\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n  let labelStart\n  /** @type {boolean} */\n  let defined\n\n  // Find an opening.\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n  return start\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code)\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code)\n    }\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return after\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        labelEndOk,\n        defined ? labelEndOk : labelEndNok\n      )(code)\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(\n        referenceFullConstruct,\n        labelEndOk,\n        defined ? referenceNotFull : labelEndNok\n      )(code)\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code)\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(\n      referenceCollapsedConstruct,\n      labelEndOk,\n      labelEndNok\n    )(code)\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code)\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return resourceBefore\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceOpen)(code)\n      : resourceOpen(code)\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code)\n    }\n    return factoryDestination(\n      effects,\n      resourceDestinationAfter,\n      resourceDestinationMissing,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceBetween)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code)\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        resourceTitleAfter,\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n    return resourceEnd(code)\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceEnd)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this\n  return referenceFull\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      referenceFullAfter,\n      referenceFullMissing,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return referenceCollapsedOpen\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine,\n      // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined\n    // Always populated by defaults.\n\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('thematicBreak')\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code\n    return atBreak(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit('thematicBreak')\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n    effects.exit('thematicBreakSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, atBreak, 'whitespace')(code)\n      : atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length\n  /** @type {number | undefined} */\n  let content\n  /** @type {number | undefined} */\n  let text\n  /** @type {number | undefined} */\n  let definition\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = 'setextHeadingText'\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context])\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length\n    /** @type {boolean | undefined} */\n    let paragraph\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (\n        self.events[index][1].type !== 'lineEnding' &&\n        self.events[index][1].type !== 'linePrefix' &&\n        self.events[index][1].type !== 'content'\n      ) {\n        paragraph = self.events[index][1].type === 'paragraph'\n        break\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      marker = code\n      return before(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('setextHeadingLineSequence')\n    return inside(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    effects.exit('setextHeadingLineSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'lineSuffix')(code)\n      : after(code)\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {void}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | void}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n\n    // @ts-expect-error `Buffer` does allow an encoding.\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCharCode(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n  if (\n    // C0 except for HT, LF, FF, CR, space.\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) ||\n    // Control character (DEL) of C0, and C1 controls.\n    (code > 126 && code < 160) ||\n    // Lone high surrogates and low surrogates.\n    (code > 55295 && code < 57344) ||\n    // Noncharacters.\n    (code > 64975 && code < 65008) /* eslint-disable no-bitwise */ ||\n    (code & 65535) === 65535 ||\n    (code & 65535) === 65534 /* eslint-enable no-bitwise */ ||\n    // Out of range\n    code > 1114111\n  ) {\n    return '\\uFFFD'\n  }\n  return String.fromCharCode(code)\n}\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","export {stringifyPosition} from './lib/index.js'\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","import { l as log, M as decodeEntities } from \"./mermaid-b5860b54.js\";\nimport { fromMarkdown } from \"mdast-util-from-markdown\";\nimport { dedent } from \"ts-dedent\";\nfunction preprocessMarkdown(markdown) {\n  const withoutMultipleNewlines = markdown.replace(/\\n{2,}/g, \"\\n\");\n  const withoutExtraSpaces = dedent(withoutMultipleNewlines);\n  return withoutExtraSpaces;\n}\nfunction markdownToLines(markdown) {\n  const preprocessedMarkdown = preprocessMarkdown(markdown);\n  const { children } = fromMarkdown(preprocessedMarkdown);\n  const lines = [[]];\n  let currentLine = 0;\n  function processNode(node, parentType = \"normal\") {\n    if (node.type === \"text\") {\n      const textLines = node.value.split(\"\\n\");\n      textLines.forEach((textLine, index) => {\n        if (index !== 0) {\n          currentLine++;\n          lines.push([]);\n        }\n        textLine.split(\" \").forEach((word) => {\n          if (word) {\n            lines[currentLine].push({ content: word, type: parentType });\n          }\n        });\n      });\n    } else if (node.type === \"strong\" || node.type === \"emphasis\") {\n      node.children.forEach((contentNode) => {\n        processNode(contentNode, node.type);\n      });\n    }\n  }\n  children.forEach((treeNode) => {\n    if (treeNode.type === \"paragraph\") {\n      treeNode.children.forEach((contentNode) => {\n        processNode(contentNode);\n      });\n    }\n  });\n  return lines;\n}\nfunction markdownToHTML(markdown) {\n  const { children } = fromMarkdown(markdown);\n  function output(node) {\n    if (node.type === \"text\") {\n      return node.value.replace(/\\n/g, \"<br/>\");\n    } else if (node.type === \"strong\") {\n      return `<strong>${node.children.map(output).join(\"\")}</strong>`;\n    } else if (node.type === \"emphasis\") {\n      return `<em>${node.children.map(output).join(\"\")}</em>`;\n    } else if (node.type === \"paragraph\") {\n      return `<p>${node.children.map(output).join(\"\")}</p>`;\n    }\n    return `Unsupported markdown: ${node.type}`;\n  }\n  return children.map(output).join(\"\");\n}\nfunction splitTextToChars(text) {\n  if (Intl.Segmenter) {\n    return [...new Intl.Segmenter().segment(text)].map((s) => s.segment);\n  }\n  return [...text];\n}\nfunction splitWordToFitWidth(checkFit, word) {\n  const characters = splitTextToChars(word.content);\n  return splitWordToFitWidthRecursion(checkFit, [], characters, word.type);\n}\nfunction splitWordToFitWidthRecursion(checkFit, usedChars, remainingChars, type) {\n  if (remainingChars.length === 0) {\n    return [\n      { content: usedChars.join(\"\"), type },\n      { content: \"\", type }\n    ];\n  }\n  const [nextChar, ...rest] = remainingChars;\n  const newWord = [...usedChars, nextChar];\n  if (checkFit([{ content: newWord.join(\"\"), type }])) {\n    return splitWordToFitWidthRecursion(checkFit, newWord, rest, type);\n  }\n  if (usedChars.length === 0 && nextChar) {\n    usedChars.push(nextChar);\n    remainingChars.shift();\n  }\n  return [\n    { content: usedChars.join(\"\"), type },\n    { content: remainingChars.join(\"\"), type }\n  ];\n}\nfunction splitLineToFitWidth(line, checkFit) {\n  if (line.some(({ content }) => content.includes(\"\\n\"))) {\n    throw new Error(\"splitLineToFitWidth does not support newlines in the line\");\n  }\n  return splitLineToFitWidthRecursion(line, checkFit);\n}\nfunction splitLineToFitWidthRecursion(words, checkFit, lines = [], newLine = []) {\n  if (words.length === 0) {\n    if (newLine.length > 0) {\n      lines.push(newLine);\n    }\n    return lines.length > 0 ? lines : [];\n  }\n  let joiner = \"\";\n  if (words[0].content === \" \") {\n    joiner = \" \";\n    words.shift();\n  }\n  const nextWord = words.shift() ?? { content: \" \", type: \"normal\" };\n  const lineWithNextWord = [...newLine];\n  if (joiner !== \"\") {\n    lineWithNextWord.push({ content: joiner, type: \"normal\" });\n  }\n  lineWithNextWord.push(nextWord);\n  if (checkFit(lineWithNextWord)) {\n    return splitLineToFitWidthRecursion(words, checkFit, lines, lineWithNextWord);\n  }\n  if (newLine.length > 0) {\n    lines.push(newLine);\n    words.unshift(nextWord);\n  } else if (nextWord.content) {\n    const [line, rest] = splitWordToFitWidth(checkFit, nextWord);\n    lines.push([line]);\n    if (rest.content) {\n      words.unshift(rest);\n    }\n  }\n  return splitLineToFitWidthRecursion(words, checkFit, lines);\n}\nfunction applyStyle(dom, styleFn) {\n  if (styleFn) {\n    dom.attr(\"style\", styleFn);\n  }\n}\nfunction addHtmlSpan(element, node, width, classes, addBackground = false) {\n  const fo = element.append(\"foreignObject\");\n  const div = fo.append(\"xhtml:div\");\n  const label = node.label;\n  const labelClass = node.isNode ? \"nodeLabel\" : \"edgeLabel\";\n  div.html(\n    `\n    <span class=\"${labelClass} ${classes}\" ` + (node.labelStyle ? 'style=\"' + node.labelStyle + '\"' : \"\") + \">\" + label + \"</span>\"\n  );\n  applyStyle(div, node.labelStyle);\n  div.style(\"display\", \"table-cell\");\n  div.style(\"white-space\", \"nowrap\");\n  div.style(\"max-width\", width + \"px\");\n  div.attr(\"xmlns\", \"http://www.w3.org/1999/xhtml\");\n  if (addBackground) {\n    div.attr(\"class\", \"labelBkg\");\n  }\n  let bbox = div.node().getBoundingClientRect();\n  if (bbox.width === width) {\n    div.style(\"display\", \"table\");\n    div.style(\"white-space\", \"break-spaces\");\n    div.style(\"width\", width + \"px\");\n    bbox = div.node().getBoundingClientRect();\n  }\n  fo.style(\"width\", bbox.width);\n  fo.style(\"height\", bbox.height);\n  return fo.node();\n}\nfunction createTspan(textElement, lineIndex, lineHeight) {\n  return textElement.append(\"tspan\").attr(\"class\", \"text-outer-tspan\").attr(\"x\", 0).attr(\"y\", lineIndex * lineHeight - 0.1 + \"em\").attr(\"dy\", lineHeight + \"em\");\n}\nfunction computeWidthOfText(parentNode, lineHeight, line) {\n  const testElement = parentNode.append(\"text\");\n  const testSpan = createTspan(testElement, 1, lineHeight);\n  updateTextContentAndStyles(testSpan, line);\n  const textLength = testSpan.node().getComputedTextLength();\n  testElement.remove();\n  return textLength;\n}\nfunction computeDimensionOfText(parentNode, lineHeight, text) {\n  var _a;\n  const testElement = parentNode.append(\"text\");\n  const testSpan = createTspan(testElement, 1, lineHeight);\n  updateTextContentAndStyles(testSpan, [{ content: text, type: \"normal\" }]);\n  const textDimension = (_a = testSpan.node()) == null ? void 0 : _a.getBoundingClientRect();\n  if (textDimension) {\n    testElement.remove();\n  }\n  return textDimension;\n}\nfunction createFormattedText(width, g, structuredText, addBackground = false) {\n  const lineHeight = 1.1;\n  const labelGroup = g.append(\"g\");\n  const bkg = labelGroup.insert(\"rect\").attr(\"class\", \"background\");\n  const textElement = labelGroup.append(\"text\").attr(\"y\", \"-10.1\");\n  let lineIndex = 0;\n  for (const line of structuredText) {\n    const checkWidth = (line2) => computeWidthOfText(labelGroup, lineHeight, line2) <= width;\n    const linesUnderWidth = checkWidth(line) ? [line] : splitLineToFitWidth(line, checkWidth);\n    for (const preparedLine of linesUnderWidth) {\n      const tspan = createTspan(textElement, lineIndex, lineHeight);\n      updateTextContentAndStyles(tspan, preparedLine);\n      lineIndex++;\n    }\n  }\n  if (addBackground) {\n    const bbox = textElement.node().getBBox();\n    const padding = 2;\n    bkg.attr(\"x\", -padding).attr(\"y\", -padding).attr(\"width\", bbox.width + 2 * padding).attr(\"height\", bbox.height + 2 * padding);\n    return labelGroup.node();\n  } else {\n    return textElement.node();\n  }\n}\nfunction updateTextContentAndStyles(tspan, wrappedLine) {\n  tspan.text(\"\");\n  wrappedLine.forEach((word, index) => {\n    const innerTspan = tspan.append(\"tspan\").attr(\"font-style\", word.type === \"emphasis\" ? \"italic\" : \"normal\").attr(\"class\", \"text-inner-tspan\").attr(\"font-weight\", word.type === \"strong\" ? \"bold\" : \"normal\");\n    if (index === 0) {\n      innerTspan.text(word.content);\n    } else {\n      innerTspan.text(\" \" + word.content);\n    }\n  });\n}\nconst createText = (el, text = \"\", {\n  style = \"\",\n  isTitle = false,\n  classes = \"\",\n  useHtmlLabels = true,\n  isNode = true,\n  width = 200,\n  addSvgBackground = false\n} = {}) => {\n  log.info(\"createText\", text, style, isTitle, classes, useHtmlLabels, isNode, addSvgBackground);\n  if (useHtmlLabels) {\n    const htmlText = markdownToHTML(text);\n    const node = {\n      isNode,\n      label: decodeEntities(htmlText).replace(\n        /fa[blrs]?:fa-[\\w-]+/g,\n        // cspell: disable-line\n        (s) => `<i class='${s.replace(\":\", \" \")}'></i>`\n      ),\n      labelStyle: style.replace(\"fill:\", \"color:\")\n    };\n    const vertexNode = addHtmlSpan(el, node, width, classes, addSvgBackground);\n    return vertexNode;\n  } else {\n    const structuredText = markdownToLines(text);\n    const svgLabel = createFormattedText(width, el, structuredText, addSvgBackground);\n    return svgLabel;\n  }\n};\nexport {\n  createText as a,\n  computeDimensionOfText as c\n};\n"]}