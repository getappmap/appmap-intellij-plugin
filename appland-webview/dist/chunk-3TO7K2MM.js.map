{"version":3,"sources":["../node_modules/dagre-d3-es/src/dagre/layout.js","../node_modules/dagre-d3-es/src/dagre/add-border-segments.js","../node_modules/dagre-d3-es/src/dagre/util.js","../node_modules/dagre-d3-es/src/dagre/coordinate-system.js","../node_modules/dagre-d3-es/src/dagre/acyclic.js","../node_modules/dagre-d3-es/src/dagre/greedy-fas.js","../node_modules/dagre-d3-es/src/dagre/data/list.js","../node_modules/dagre-d3-es/src/dagre/normalize.js","../node_modules/dagre-d3-es/src/dagre/rank/index.js","../node_modules/dagre-d3-es/src/dagre/rank/feasible-tree.js","../node_modules/dagre-d3-es/src/dagre/rank/util.js","../node_modules/dagre-d3-es/src/dagre/rank/network-simplex.js","../node_modules/dagre-d3-es/src/graphlib/alg/index.js","../node_modules/dagre-d3-es/src/graphlib/alg/components.js","../node_modules/dagre-d3-es/src/graphlib/alg/dijkstra.js","../node_modules/dagre-d3-es/src/graphlib/data/priority-queue.js","../node_modules/dagre-d3-es/src/graphlib/alg/dijkstra-all.js","../node_modules/dagre-d3-es/src/graphlib/alg/find-cycles.js","../node_modules/dagre-d3-es/src/graphlib/alg/tarjan.js","../node_modules/dagre-d3-es/src/graphlib/alg/floyd-warshall.js","../node_modules/dagre-d3-es/src/graphlib/alg/is-acyclic.js","../node_modules/dagre-d3-es/src/graphlib/alg/topsort.js","../node_modules/dagre-d3-es/src/graphlib/alg/postorder.js","../node_modules/dagre-d3-es/src/graphlib/alg/dfs.js","../node_modules/dagre-d3-es/src/graphlib/alg/preorder.js","../node_modules/dagre-d3-es/src/graphlib/alg/prim.js","../node_modules/dagre-d3-es/src/dagre/nesting-graph.js","../node_modules/dagre-d3-es/src/dagre/order/index.js","../node_modules/dagre-d3-es/src/dagre/order/add-subgraph-constraints.js","../node_modules/dagre-d3-es/src/dagre/order/build-layer-graph.js","../node_modules/dagre-d3-es/src/dagre/order/cross-count.js","../node_modules/dagre-d3-es/src/dagre/order/init-order.js","../node_modules/dagre-d3-es/src/dagre/order/sort-subgraph.js","../node_modules/dagre-d3-es/src/dagre/order/barycenter.js","../node_modules/dagre-d3-es/src/dagre/order/resolve-conflicts.js","../node_modules/dagre-d3-es/src/dagre/order/sort.js","../node_modules/dagre-d3-es/src/dagre/parent-dummy-chains.js","../node_modules/dagre-d3-es/src/dagre/position/index.js","../node_modules/dagre-d3-es/src/dagre/position/bk.js","../node_modules/dagre-d3-es/src/dagre/index.js"],"names":["rank","order","dfs","maxRank","addBorderNode","g","undo","run","postorder","edge","entry","w","time"],"mappings":"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","file":"chunk-3TO7K2MM.js","sourcesContent":["import * as _ from 'lodash-es';\nimport { Graph } from '../graphlib/index.js';\nimport { addBorderSegments } from './add-border-segments.js';\nimport * as coordinateSystem from './coordinate-system.js';\nimport * as acyclic from './acyclic.js';\nimport * as normalize from './normalize.js';\nimport { rank } from './rank/index.js';\nimport * as nestingGraph from './nesting-graph.js';\nimport { order } from './order/index.js';\nimport { parentDummyChains } from './parent-dummy-chains.js';\nimport { position } from './position/index.js';\nimport * as util from './util.js';\n\nexport { layout };\n\nfunction layout(g, opts) {\n  var time = opts && opts.debugTiming ? util.time : util.notime;\n  time('layout', function () {\n    var layoutGraph = time('  buildLayoutGraph', function () {\n      return buildLayoutGraph(g);\n    });\n    time('  runLayout', function () {\n      runLayout(layoutGraph, time);\n    });\n    time('  updateInputGraph', function () {\n      updateInputGraph(g, layoutGraph);\n    });\n  });\n}\n\nfunction runLayout(g, time) {\n  time('    makeSpaceForEdgeLabels', function () {\n    makeSpaceForEdgeLabels(g);\n  });\n  time('    removeSelfEdges', function () {\n    removeSelfEdges(g);\n  });\n  time('    acyclic', function () {\n    acyclic.run(g);\n  });\n  time('    nestingGraph.run', function () {\n    nestingGraph.run(g);\n  });\n  time('    rank', function () {\n    rank(util.asNonCompoundGraph(g));\n  });\n  time('    injectEdgeLabelProxies', function () {\n    injectEdgeLabelProxies(g);\n  });\n  time('    removeEmptyRanks', function () {\n    util.removeEmptyRanks(g);\n  });\n  time('    nestingGraph.cleanup', function () {\n    nestingGraph.cleanup(g);\n  });\n  time('    normalizeRanks', function () {\n    util.normalizeRanks(g);\n  });\n  time('    assignRankMinMax', function () {\n    assignRankMinMax(g);\n  });\n  time('    removeEdgeLabelProxies', function () {\n    removeEdgeLabelProxies(g);\n  });\n  time('    normalize.run', function () {\n    normalize.run(g);\n  });\n  time('    parentDummyChains', function () {\n    parentDummyChains(g);\n  });\n  time('    addBorderSegments', function () {\n    addBorderSegments(g);\n  });\n  time('    order', function () {\n    order(g);\n  });\n  time('    insertSelfEdges', function () {\n    insertSelfEdges(g);\n  });\n  time('    adjustCoordinateSystem', function () {\n    coordinateSystem.adjust(g);\n  });\n  time('    position', function () {\n    position(g);\n  });\n  time('    positionSelfEdges', function () {\n    positionSelfEdges(g);\n  });\n  time('    removeBorderNodes', function () {\n    removeBorderNodes(g);\n  });\n  time('    normalize.undo', function () {\n    normalize.undo(g);\n  });\n  time('    fixupEdgeLabelCoords', function () {\n    fixupEdgeLabelCoords(g);\n  });\n  time('    undoCoordinateSystem', function () {\n    coordinateSystem.undo(g);\n  });\n  time('    translateGraph', function () {\n    translateGraph(g);\n  });\n  time('    assignNodeIntersects', function () {\n    assignNodeIntersects(g);\n  });\n  time('    reversePoints', function () {\n    reversePointsForReversedEdges(g);\n  });\n  time('    acyclic.undo', function () {\n    acyclic.undo(g);\n  });\n}\n\n/*\n * Copies final layout information from the layout graph back to the input\n * graph. This process only copies whitelisted attributes from the layout graph\n * to the input graph, so it serves as a good place to determine what\n * attributes can influence layout.\n */\nfunction updateInputGraph(inputGraph, layoutGraph) {\n  _.forEach(inputGraph.nodes(), function (v) {\n    var inputLabel = inputGraph.node(v);\n    var layoutLabel = layoutGraph.node(v);\n\n    if (inputLabel) {\n      inputLabel.x = layoutLabel.x;\n      inputLabel.y = layoutLabel.y;\n\n      if (layoutGraph.children(v).length) {\n        inputLabel.width = layoutLabel.width;\n        inputLabel.height = layoutLabel.height;\n      }\n    }\n  });\n\n  _.forEach(inputGraph.edges(), function (e) {\n    var inputLabel = inputGraph.edge(e);\n    var layoutLabel = layoutGraph.edge(e);\n\n    inputLabel.points = layoutLabel.points;\n    if (_.has(layoutLabel, 'x')) {\n      inputLabel.x = layoutLabel.x;\n      inputLabel.y = layoutLabel.y;\n    }\n  });\n\n  inputGraph.graph().width = layoutGraph.graph().width;\n  inputGraph.graph().height = layoutGraph.graph().height;\n}\n\nvar graphNumAttrs = ['nodesep', 'edgesep', 'ranksep', 'marginx', 'marginy'];\nvar graphDefaults = { ranksep: 50, edgesep: 20, nodesep: 50, rankdir: 'tb' };\nvar graphAttrs = ['acyclicer', 'ranker', 'rankdir', 'align'];\nvar nodeNumAttrs = ['width', 'height'];\nvar nodeDefaults = { width: 0, height: 0 };\nvar edgeNumAttrs = ['minlen', 'weight', 'width', 'height', 'labeloffset'];\nvar edgeDefaults = {\n  minlen: 1,\n  weight: 1,\n  width: 0,\n  height: 0,\n  labeloffset: 10,\n  labelpos: 'r',\n};\nvar edgeAttrs = ['labelpos'];\n\n/*\n * Constructs a new graph from the input graph, which can be used for layout.\n * This process copies only whitelisted attributes from the input graph to the\n * layout graph. Thus this function serves as a good place to determine what\n * attributes can influence layout.\n */\nfunction buildLayoutGraph(inputGraph) {\n  var g = new Graph({ multigraph: true, compound: true });\n  var graph = canonicalize(inputGraph.graph());\n\n  g.setGraph(\n    _.merge({}, graphDefaults, selectNumberAttrs(graph, graphNumAttrs), _.pick(graph, graphAttrs))\n  );\n\n  _.forEach(inputGraph.nodes(), function (v) {\n    var node = canonicalize(inputGraph.node(v));\n    g.setNode(v, _.defaults(selectNumberAttrs(node, nodeNumAttrs), nodeDefaults));\n    g.setParent(v, inputGraph.parent(v));\n  });\n\n  _.forEach(inputGraph.edges(), function (e) {\n    var edge = canonicalize(inputGraph.edge(e));\n    g.setEdge(\n      e,\n      _.merge({}, edgeDefaults, selectNumberAttrs(edge, edgeNumAttrs), _.pick(edge, edgeAttrs))\n    );\n  });\n\n  return g;\n}\n\n/*\n * This idea comes from the Gansner paper: to account for edge labels in our\n * layout we split each rank in half by doubling minlen and halving ranksep.\n * Then we can place labels at these mid-points between nodes.\n *\n * We also add some minimal padding to the width to push the label for the edge\n * away from the edge itself a bit.\n */\nfunction makeSpaceForEdgeLabels(g) {\n  var graph = g.graph();\n  graph.ranksep /= 2;\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    edge.minlen *= 2;\n    if (edge.labelpos.toLowerCase() !== 'c') {\n      if (graph.rankdir === 'TB' || graph.rankdir === 'BT') {\n        edge.width += edge.labeloffset;\n      } else {\n        edge.height += edge.labeloffset;\n      }\n    }\n  });\n}\n\n/*\n * Creates temporary dummy nodes that capture the rank in which each edge's\n * label is going to, if it has one of non-zero width and height. We do this\n * so that we can safely remove empty ranks while preserving balance for the\n * label's position.\n */\nfunction injectEdgeLabelProxies(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (edge.width && edge.height) {\n      var v = g.node(e.v);\n      var w = g.node(e.w);\n      var label = { rank: (w.rank - v.rank) / 2 + v.rank, e: e };\n      util.addDummyNode(g, 'edge-proxy', label, '_ep');\n    }\n  });\n}\n\nfunction assignRankMinMax(g) {\n  var maxRank = 0;\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (node.borderTop) {\n      node.minRank = g.node(node.borderTop).rank;\n      node.maxRank = g.node(node.borderBottom).rank;\n      // @ts-expect-error\n      maxRank = _.max(maxRank, node.maxRank);\n    }\n  });\n  g.graph().maxRank = maxRank;\n}\n\nfunction removeEdgeLabelProxies(g) {\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (node.dummy === 'edge-proxy') {\n      g.edge(node.e).labelRank = node.rank;\n      g.removeNode(v);\n    }\n  });\n}\n\nfunction translateGraph(g) {\n  var minX = Number.POSITIVE_INFINITY;\n  var maxX = 0;\n  var minY = Number.POSITIVE_INFINITY;\n  var maxY = 0;\n  var graphLabel = g.graph();\n  var marginX = graphLabel.marginx || 0;\n  var marginY = graphLabel.marginy || 0;\n\n  function getExtremes(attrs) {\n    var x = attrs.x;\n    var y = attrs.y;\n    var w = attrs.width;\n    var h = attrs.height;\n    minX = Math.min(minX, x - w / 2);\n    maxX = Math.max(maxX, x + w / 2);\n    minY = Math.min(minY, y - h / 2);\n    maxY = Math.max(maxY, y + h / 2);\n  }\n\n  _.forEach(g.nodes(), function (v) {\n    getExtremes(g.node(v));\n  });\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (_.has(edge, 'x')) {\n      getExtremes(edge);\n    }\n  });\n\n  minX -= marginX;\n  minY -= marginY;\n\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    node.x -= minX;\n    node.y -= minY;\n  });\n\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    _.forEach(edge.points, function (p) {\n      p.x -= minX;\n      p.y -= minY;\n    });\n    if (_.has(edge, 'x')) {\n      edge.x -= minX;\n    }\n    if (_.has(edge, 'y')) {\n      edge.y -= minY;\n    }\n  });\n\n  graphLabel.width = maxX - minX + marginX;\n  graphLabel.height = maxY - minY + marginY;\n}\n\nfunction assignNodeIntersects(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    var nodeV = g.node(e.v);\n    var nodeW = g.node(e.w);\n    var p1, p2;\n    if (!edge.points) {\n      edge.points = [];\n      p1 = nodeW;\n      p2 = nodeV;\n    } else {\n      p1 = edge.points[0];\n      p2 = edge.points[edge.points.length - 1];\n    }\n    edge.points.unshift(util.intersectRect(nodeV, p1));\n    edge.points.push(util.intersectRect(nodeW, p2));\n  });\n}\n\nfunction fixupEdgeLabelCoords(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (_.has(edge, 'x')) {\n      if (edge.labelpos === 'l' || edge.labelpos === 'r') {\n        edge.width -= edge.labeloffset;\n      }\n      switch (edge.labelpos) {\n        case 'l':\n          edge.x -= edge.width / 2 + edge.labeloffset;\n          break;\n        case 'r':\n          edge.x += edge.width / 2 + edge.labeloffset;\n          break;\n      }\n    }\n  });\n}\n\nfunction reversePointsForReversedEdges(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (edge.reversed) {\n      edge.points.reverse();\n    }\n  });\n}\n\nfunction removeBorderNodes(g) {\n  _.forEach(g.nodes(), function (v) {\n    if (g.children(v).length) {\n      var node = g.node(v);\n      var t = g.node(node.borderTop);\n      var b = g.node(node.borderBottom);\n      var l = g.node(_.last(node.borderLeft));\n      var r = g.node(_.last(node.borderRight));\n\n      node.width = Math.abs(r.x - l.x);\n      node.height = Math.abs(b.y - t.y);\n      node.x = l.x + node.width / 2;\n      node.y = t.y + node.height / 2;\n    }\n  });\n\n  _.forEach(g.nodes(), function (v) {\n    if (g.node(v).dummy === 'border') {\n      g.removeNode(v);\n    }\n  });\n}\n\nfunction removeSelfEdges(g) {\n  _.forEach(g.edges(), function (e) {\n    if (e.v === e.w) {\n      var node = g.node(e.v);\n      if (!node.selfEdges) {\n        node.selfEdges = [];\n      }\n      node.selfEdges.push({ e: e, label: g.edge(e) });\n      g.removeEdge(e);\n    }\n  });\n}\n\nfunction insertSelfEdges(g) {\n  var layers = util.buildLayerMatrix(g);\n  _.forEach(layers, function (layer) {\n    var orderShift = 0;\n    _.forEach(layer, function (v, i) {\n      var node = g.node(v);\n      node.order = i + orderShift;\n      _.forEach(node.selfEdges, function (selfEdge) {\n        util.addDummyNode(\n          g,\n          'selfedge',\n          {\n            width: selfEdge.label.width,\n            height: selfEdge.label.height,\n            rank: node.rank,\n            order: i + ++orderShift,\n            e: selfEdge.e,\n            label: selfEdge.label,\n          },\n          '_se'\n        );\n      });\n      delete node.selfEdges;\n    });\n  });\n}\n\nfunction positionSelfEdges(g) {\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (node.dummy === 'selfedge') {\n      var selfNode = g.node(node.e.v);\n      var x = selfNode.x + selfNode.width / 2;\n      var y = selfNode.y;\n      var dx = node.x - x;\n      var dy = selfNode.height / 2;\n      g.setEdge(node.e, node.label);\n      g.removeNode(v);\n      node.label.points = [\n        { x: x + (2 * dx) / 3, y: y - dy },\n        { x: x + (5 * dx) / 6, y: y - dy },\n        { x: x + dx, y: y },\n        { x: x + (5 * dx) / 6, y: y + dy },\n        { x: x + (2 * dx) / 3, y: y + dy },\n      ];\n      node.label.x = node.x;\n      node.label.y = node.y;\n    }\n  });\n}\n\nfunction selectNumberAttrs(obj, attrs) {\n  return _.mapValues(_.pick(obj, attrs), Number);\n}\n\nfunction canonicalize(attrs) {\n  var newAttrs = {};\n  _.forEach(attrs, function (v, k) {\n    newAttrs[k.toLowerCase()] = v;\n  });\n  return newAttrs;\n}\n","import * as _ from 'lodash-es';\nimport * as util from './util.js';\n\nexport { addBorderSegments };\n\nfunction addBorderSegments(g) {\n  function dfs(v) {\n    var children = g.children(v);\n    var node = g.node(v);\n    if (children.length) {\n      _.forEach(children, dfs);\n    }\n\n    if (_.has(node, 'minRank')) {\n      node.borderLeft = [];\n      node.borderRight = [];\n      for (var rank = node.minRank, maxRank = node.maxRank + 1; rank < maxRank; ++rank) {\n        addBorderNode(g, 'borderLeft', '_bl', v, node, rank);\n        addBorderNode(g, 'borderRight', '_br', v, node, rank);\n      }\n    }\n  }\n\n  _.forEach(g.children(), dfs);\n}\n\nfunction addBorderNode(g, prop, prefix, sg, sgNode, rank) {\n  var label = { width: 0, height: 0, rank: rank, borderType: prop };\n  var prev = sgNode[prop][rank - 1];\n  var curr = util.addDummyNode(g, 'border', label, prefix);\n  sgNode[prop][rank] = curr;\n  g.setParent(curr, sg);\n  if (prev) {\n    g.setEdge(prev, curr, { weight: 1 });\n  }\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../graphlib/index.js';\n\nexport {\n  addDummyNode,\n  simplify,\n  asNonCompoundGraph,\n  successorWeights,\n  predecessorWeights,\n  intersectRect,\n  buildLayerMatrix,\n  normalizeRanks,\n  removeEmptyRanks,\n  addBorderNode,\n  maxRank,\n  partition,\n  time,\n  notime,\n};\n\n/*\n * Adds a dummy node to the graph and return v.\n */\nfunction addDummyNode(g, type, attrs, name) {\n  var v;\n  do {\n    v = _.uniqueId(name);\n  } while (g.hasNode(v));\n\n  attrs.dummy = type;\n  g.setNode(v, attrs);\n  return v;\n}\n\n/*\n * Returns a new graph with only simple edges. Handles aggregation of data\n * associated with multi-edges.\n */\nfunction simplify(g) {\n  var simplified = new Graph().setGraph(g.graph());\n  _.forEach(g.nodes(), function (v) {\n    simplified.setNode(v, g.node(v));\n  });\n  _.forEach(g.edges(), function (e) {\n    var simpleLabel = simplified.edge(e.v, e.w) || { weight: 0, minlen: 1 };\n    var label = g.edge(e);\n    simplified.setEdge(e.v, e.w, {\n      weight: simpleLabel.weight + label.weight,\n      minlen: Math.max(simpleLabel.minlen, label.minlen),\n    });\n  });\n  return simplified;\n}\n\nfunction asNonCompoundGraph(g) {\n  var simplified = new Graph({ multigraph: g.isMultigraph() }).setGraph(g.graph());\n  _.forEach(g.nodes(), function (v) {\n    if (!g.children(v).length) {\n      simplified.setNode(v, g.node(v));\n    }\n  });\n  _.forEach(g.edges(), function (e) {\n    simplified.setEdge(e, g.edge(e));\n  });\n  return simplified;\n}\n\nfunction successorWeights(g) {\n  var weightMap = _.map(g.nodes(), function (v) {\n    var sucs = {};\n    _.forEach(g.outEdges(v), function (e) {\n      sucs[e.w] = (sucs[e.w] || 0) + g.edge(e).weight;\n    });\n    return sucs;\n  });\n  return _.zipObject(g.nodes(), weightMap);\n}\n\nfunction predecessorWeights(g) {\n  var weightMap = _.map(g.nodes(), function (v) {\n    var preds = {};\n    _.forEach(g.inEdges(v), function (e) {\n      preds[e.v] = (preds[e.v] || 0) + g.edge(e).weight;\n    });\n    return preds;\n  });\n  return _.zipObject(g.nodes(), weightMap);\n}\n\n/*\n * Finds where a line starting at point ({x, y}) would intersect a rectangle\n * ({x, y, width, height}) if it were pointing at the rectangle's center.\n */\nfunction intersectRect(rect, point) {\n  var x = rect.x;\n  var y = rect.y;\n\n  // Rectangle intersection algorithm from:\n  // http://math.stackexchange.com/questions/108113/find-edge-between-two-boxes\n  var dx = point.x - x;\n  var dy = point.y - y;\n  var w = rect.width / 2;\n  var h = rect.height / 2;\n\n  if (!dx && !dy) {\n    throw new Error('Not possible to find intersection inside of the rectangle');\n  }\n\n  var sx, sy;\n  if (Math.abs(dy) * w > Math.abs(dx) * h) {\n    // Intersection is top or bottom of rect.\n    if (dy < 0) {\n      h = -h;\n    }\n    sx = (h * dx) / dy;\n    sy = h;\n  } else {\n    // Intersection is left or right of rect.\n    if (dx < 0) {\n      w = -w;\n    }\n    sx = w;\n    sy = (w * dy) / dx;\n  }\n\n  return { x: x + sx, y: y + sy };\n}\n\n/*\n * Given a DAG with each node assigned \"rank\" and \"order\" properties, this\n * function will produce a matrix with the ids of each node.\n */\nfunction buildLayerMatrix(g) {\n  var layering = _.map(_.range(maxRank(g) + 1), function () {\n    return [];\n  });\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    var rank = node.rank;\n    if (!_.isUndefined(rank)) {\n      layering[rank][node.order] = v;\n    }\n  });\n  return layering;\n}\n\n/*\n * Adjusts the ranks for all nodes in the graph such that all nodes v have\n * rank(v) >= 0 and at least one node w has rank(w) = 0.\n */\nfunction normalizeRanks(g) {\n  var min = _.min(\n    _.map(g.nodes(), function (v) {\n      return g.node(v).rank;\n    })\n  );\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (_.has(node, 'rank')) {\n      node.rank -= min;\n    }\n  });\n}\n\nfunction removeEmptyRanks(g) {\n  // Ranks may not start at 0, so we need to offset them\n  var offset = _.min(\n    _.map(g.nodes(), function (v) {\n      return g.node(v).rank;\n    })\n  );\n\n  var layers = [];\n  _.forEach(g.nodes(), function (v) {\n    var rank = g.node(v).rank - offset;\n    if (!layers[rank]) {\n      layers[rank] = [];\n    }\n    layers[rank].push(v);\n  });\n\n  var delta = 0;\n  var nodeRankFactor = g.graph().nodeRankFactor;\n  _.forEach(layers, function (vs, i) {\n    if (_.isUndefined(vs) && i % nodeRankFactor !== 0) {\n      --delta;\n    } else if (delta) {\n      _.forEach(vs, function (v) {\n        g.node(v).rank += delta;\n      });\n    }\n  });\n}\n\nfunction addBorderNode(g, prefix, rank, order) {\n  var node = {\n    width: 0,\n    height: 0,\n  };\n  if (arguments.length >= 4) {\n    node.rank = rank;\n    node.order = order;\n  }\n  return addDummyNode(g, 'border', node, prefix);\n}\n\nfunction maxRank(g) {\n  return _.max(\n    _.map(g.nodes(), function (v) {\n      var rank = g.node(v).rank;\n      if (!_.isUndefined(rank)) {\n        return rank;\n      }\n    })\n  );\n}\n\n/*\n * Partition a collection into two groups: `lhs` and `rhs`. If the supplied\n * function returns true for an entry it goes into `lhs`. Otherwise it goes\n * into `rhs.\n */\nfunction partition(collection, fn) {\n  var result = { lhs: [], rhs: [] };\n  _.forEach(collection, function (value) {\n    if (fn(value)) {\n      result.lhs.push(value);\n    } else {\n      result.rhs.push(value);\n    }\n  });\n  return result;\n}\n\n/*\n * Returns a new function that wraps `fn` with a timer. The wrapper logs the\n * time it takes to execute the function.\n */\nfunction time(name, fn) {\n  var start = _.now();\n  try {\n    return fn();\n  } finally {\n    console.log(name + ' time: ' + (_.now() - start) + 'ms');\n  }\n}\n\nfunction notime(name, fn) {\n  return fn();\n}\n","import * as _ from 'lodash-es';\n\nexport { adjust, undo };\n\nfunction adjust(g) {\n  var rankDir = g.graph().rankdir.toLowerCase();\n  if (rankDir === 'lr' || rankDir === 'rl') {\n    swapWidthHeight(g);\n  }\n}\n\nfunction undo(g) {\n  var rankDir = g.graph().rankdir.toLowerCase();\n  if (rankDir === 'bt' || rankDir === 'rl') {\n    reverseY(g);\n  }\n\n  if (rankDir === 'lr' || rankDir === 'rl') {\n    swapXY(g);\n    swapWidthHeight(g);\n  }\n}\n\nfunction swapWidthHeight(g) {\n  _.forEach(g.nodes(), function (v) {\n    swapWidthHeightOne(g.node(v));\n  });\n  _.forEach(g.edges(), function (e) {\n    swapWidthHeightOne(g.edge(e));\n  });\n}\n\nfunction swapWidthHeightOne(attrs) {\n  var w = attrs.width;\n  attrs.width = attrs.height;\n  attrs.height = w;\n}\n\nfunction reverseY(g) {\n  _.forEach(g.nodes(), function (v) {\n    reverseYOne(g.node(v));\n  });\n\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    _.forEach(edge.points, reverseYOne);\n    if (_.has(edge, 'y')) {\n      reverseYOne(edge);\n    }\n  });\n}\n\nfunction reverseYOne(attrs) {\n  attrs.y = -attrs.y;\n}\n\nfunction swapXY(g) {\n  _.forEach(g.nodes(), function (v) {\n    swapXYOne(g.node(v));\n  });\n\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    _.forEach(edge.points, swapXYOne);\n    if (_.has(edge, 'x')) {\n      swapXYOne(edge);\n    }\n  });\n}\n\nfunction swapXYOne(attrs) {\n  var x = attrs.x;\n  attrs.x = attrs.y;\n  attrs.y = x;\n}\n","import * as _ from 'lodash-es';\nimport { greedyFAS } from './greedy-fas.js';\n\nexport { run, undo };\n\nfunction run(g) {\n  var fas = g.graph().acyclicer === 'greedy' ? greedyFAS(g, weightFn(g)) : dfsFAS(g);\n  _.forEach(fas, function (e) {\n    var label = g.edge(e);\n    g.removeEdge(e);\n    label.forwardName = e.name;\n    label.reversed = true;\n    g.setEdge(e.w, e.v, label, _.uniqueId('rev'));\n  });\n\n  function weightFn(g) {\n    return function (e) {\n      return g.edge(e).weight;\n    };\n  }\n}\n\nfunction dfsFAS(g) {\n  var fas = [];\n  var stack = {};\n  var visited = {};\n\n  function dfs(v) {\n    if (_.has(visited, v)) {\n      return;\n    }\n    visited[v] = true;\n    stack[v] = true;\n    _.forEach(g.outEdges(v), function (e) {\n      if (_.has(stack, e.w)) {\n        fas.push(e);\n      } else {\n        dfs(e.w);\n      }\n    });\n    delete stack[v];\n  }\n\n  _.forEach(g.nodes(), dfs);\n  return fas;\n}\n\nfunction undo(g) {\n  _.forEach(g.edges(), function (e) {\n    var label = g.edge(e);\n    if (label.reversed) {\n      g.removeEdge(e);\n\n      var forwardName = label.forwardName;\n      delete label.reversed;\n      delete label.forwardName;\n      g.setEdge(e.w, e.v, label, forwardName);\n    }\n  });\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../graphlib/index.js';\nimport { List } from './data/list.js';\n\n/*\n * A greedy heuristic for finding a feedback arc set for a graph. A feedback\n * arc set is a set of edges that can be removed to make a graph acyclic.\n * The algorithm comes from: P. Eades, X. Lin, and W. F. Smyth, \"A fast and\n * effective heuristic for the feedback arc set problem.\" This implementation\n * adjusts that from the paper to allow for weighted edges.\n */\nexport { greedyFAS };\n\nvar DEFAULT_WEIGHT_FN = _.constant(1);\n\nfunction greedyFAS(g, weightFn) {\n  if (g.nodeCount() <= 1) {\n    return [];\n  }\n  var state = buildState(g, weightFn || DEFAULT_WEIGHT_FN);\n  var results = doGreedyFAS(state.graph, state.buckets, state.zeroIdx);\n\n  // Expand multi-edges\n  return _.flatten(\n    _.map(results, function (e) {\n      return g.outEdges(e.v, e.w);\n    })\n  );\n}\n\nfunction doGreedyFAS(g, buckets, zeroIdx) {\n  var results = [];\n  var sources = buckets[buckets.length - 1];\n  var sinks = buckets[0];\n\n  var entry;\n  while (g.nodeCount()) {\n    while ((entry = sinks.dequeue())) {\n      removeNode(g, buckets, zeroIdx, entry);\n    }\n    while ((entry = sources.dequeue())) {\n      removeNode(g, buckets, zeroIdx, entry);\n    }\n    if (g.nodeCount()) {\n      for (var i = buckets.length - 2; i > 0; --i) {\n        entry = buckets[i].dequeue();\n        if (entry) {\n          results = results.concat(removeNode(g, buckets, zeroIdx, entry, true));\n          break;\n        }\n      }\n    }\n  }\n\n  return results;\n}\n\nfunction removeNode(g, buckets, zeroIdx, entry, collectPredecessors) {\n  var results = collectPredecessors ? [] : undefined;\n\n  _.forEach(g.inEdges(entry.v), function (edge) {\n    var weight = g.edge(edge);\n    var uEntry = g.node(edge.v);\n\n    if (collectPredecessors) {\n      results.push({ v: edge.v, w: edge.w });\n    }\n\n    uEntry.out -= weight;\n    assignBucket(buckets, zeroIdx, uEntry);\n  });\n\n  _.forEach(g.outEdges(entry.v), function (edge) {\n    var weight = g.edge(edge);\n    var w = edge.w;\n    var wEntry = g.node(w);\n    wEntry['in'] -= weight;\n    assignBucket(buckets, zeroIdx, wEntry);\n  });\n\n  g.removeNode(entry.v);\n\n  return results;\n}\n\nfunction buildState(g, weightFn) {\n  var fasGraph = new Graph();\n  var maxIn = 0;\n  var maxOut = 0;\n\n  _.forEach(g.nodes(), function (v) {\n    fasGraph.setNode(v, { v: v, in: 0, out: 0 });\n  });\n\n  // Aggregate weights on nodes, but also sum the weights across multi-edges\n  // into a single edge for the fasGraph.\n  _.forEach(g.edges(), function (e) {\n    var prevWeight = fasGraph.edge(e.v, e.w) || 0;\n    var weight = weightFn(e);\n    var edgeWeight = prevWeight + weight;\n    fasGraph.setEdge(e.v, e.w, edgeWeight);\n    maxOut = Math.max(maxOut, (fasGraph.node(e.v).out += weight));\n    maxIn = Math.max(maxIn, (fasGraph.node(e.w)['in'] += weight));\n  });\n\n  var buckets = _.range(maxOut + maxIn + 3).map(function () {\n    return new List();\n  });\n  var zeroIdx = maxIn + 1;\n\n  _.forEach(fasGraph.nodes(), function (v) {\n    assignBucket(buckets, zeroIdx, fasGraph.node(v));\n  });\n\n  return { graph: fasGraph, buckets: buckets, zeroIdx: zeroIdx };\n}\n\nfunction assignBucket(buckets, zeroIdx, entry) {\n  if (!entry.out) {\n    buckets[0].enqueue(entry);\n  } else if (!entry['in']) {\n    buckets[buckets.length - 1].enqueue(entry);\n  } else {\n    buckets[entry.out - entry['in'] + zeroIdx].enqueue(entry);\n  }\n}\n","/*\n * Simple doubly linked list implementation derived from Cormen, et al.,\n * \"Introduction to Algorithms\".\n */\n\nexport { List };\n\nclass List {\n  constructor() {\n    var sentinel = {};\n    sentinel._next = sentinel._prev = sentinel;\n    this._sentinel = sentinel;\n  }\n  dequeue() {\n    var sentinel = this._sentinel;\n    var entry = sentinel._prev;\n    if (entry !== sentinel) {\n      unlink(entry);\n      return entry;\n    }\n  }\n  enqueue(entry) {\n    var sentinel = this._sentinel;\n    if (entry._prev && entry._next) {\n      unlink(entry);\n    }\n    entry._next = sentinel._next;\n    sentinel._next._prev = entry;\n    sentinel._next = entry;\n    entry._prev = sentinel;\n  }\n  toString() {\n    var strs = [];\n    var sentinel = this._sentinel;\n    var curr = sentinel._prev;\n    while (curr !== sentinel) {\n      strs.push(JSON.stringify(curr, filterOutLinks));\n      curr = curr._prev;\n    }\n    return '[' + strs.join(', ') + ']';\n  }\n}\n\nfunction unlink(entry) {\n  entry._prev._next = entry._next;\n  entry._next._prev = entry._prev;\n  delete entry._next;\n  delete entry._prev;\n}\n\nfunction filterOutLinks(k, v) {\n  if (k !== '_next' && k !== '_prev') {\n    return v;\n  }\n}\n","import * as _ from 'lodash-es';\nimport * as util from './util.js';\n\nexport { run, undo };\n\n/*\n * Breaks any long edges in the graph into short segments that span 1 layer\n * each. This operation is undoable with the denormalize function.\n *\n * Pre-conditions:\n *\n *    1. The input graph is a DAG.\n *    2. Each node in the graph has a \"rank\" property.\n *\n * Post-condition:\n *\n *    1. All edges in the graph have a length of 1.\n *    2. Dummy nodes are added where edges have been split into segments.\n *    3. The graph is augmented with a \"dummyChains\" attribute which contains\n *       the first dummy in each chain of dummy nodes produced.\n */\nfunction run(g) {\n  g.graph().dummyChains = [];\n  _.forEach(g.edges(), function (edge) {\n    normalizeEdge(g, edge);\n  });\n}\n\nfunction normalizeEdge(g, e) {\n  var v = e.v;\n  var vRank = g.node(v).rank;\n  var w = e.w;\n  var wRank = g.node(w).rank;\n  var name = e.name;\n  var edgeLabel = g.edge(e);\n  var labelRank = edgeLabel.labelRank;\n\n  if (wRank === vRank + 1) return;\n\n  g.removeEdge(e);\n\n  var dummy, attrs, i;\n  for (i = 0, ++vRank; vRank < wRank; ++i, ++vRank) {\n    edgeLabel.points = [];\n    attrs = {\n      width: 0,\n      height: 0,\n      edgeLabel: edgeLabel,\n      edgeObj: e,\n      rank: vRank,\n    };\n    dummy = util.addDummyNode(g, 'edge', attrs, '_d');\n    if (vRank === labelRank) {\n      attrs.width = edgeLabel.width;\n      attrs.height = edgeLabel.height;\n      // @ts-expect-error\n      attrs.dummy = 'edge-label';\n      // @ts-expect-error\n      attrs.labelpos = edgeLabel.labelpos;\n    }\n    g.setEdge(v, dummy, { weight: edgeLabel.weight }, name);\n    if (i === 0) {\n      g.graph().dummyChains.push(dummy);\n    }\n    v = dummy;\n  }\n\n  g.setEdge(v, w, { weight: edgeLabel.weight }, name);\n}\n\nfunction undo(g) {\n  _.forEach(g.graph().dummyChains, function (v) {\n    var node = g.node(v);\n    var origLabel = node.edgeLabel;\n    var w;\n    g.setEdge(node.edgeObj, origLabel);\n    while (node.dummy) {\n      w = g.successors(v)[0];\n      g.removeNode(v);\n      origLabel.points.push({ x: node.x, y: node.y });\n      if (node.dummy === 'edge-label') {\n        origLabel.x = node.x;\n        origLabel.y = node.y;\n        origLabel.width = node.width;\n        origLabel.height = node.height;\n      }\n      v = w;\n      node = g.node(v);\n    }\n  });\n}\n","import { feasibleTree } from './feasible-tree.js';\nimport { networkSimplex } from './network-simplex.js';\nimport { longestPath } from './util.js';\n\nexport { rank };\n\n/*\n * Assigns a rank to each node in the input graph that respects the \"minlen\"\n * constraint specified on edges between nodes.\n *\n * This basic structure is derived from Gansner, et al., \"A Technique for\n * Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a connected DAG\n *    2. Graph nodes must be objects\n *    3. Graph edges must have \"weight\" and \"minlen\" attributes\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have a \"rank\" attribute based on the results of the\n *       algorithm. Ranks can start at any index (including negative), we'll\n *       fix them up later.\n */\nfunction rank(g) {\n  switch (g.graph().ranker) {\n    case 'network-simplex':\n      networkSimplexRanker(g);\n      break;\n    case 'tight-tree':\n      tightTreeRanker(g);\n      break;\n    case 'longest-path':\n      longestPathRanker(g);\n      break;\n    default:\n      networkSimplexRanker(g);\n  }\n}\n\n// A fast and simple ranker, but results are far from optimal.\nvar longestPathRanker = longestPath;\n\nfunction tightTreeRanker(g) {\n  longestPath(g);\n  feasibleTree(g);\n}\n\nfunction networkSimplexRanker(g) {\n  networkSimplex(g);\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\nimport { slack } from './util.js';\n\nexport { feasibleTree };\n\n/*\n * Constructs a spanning tree with tight edges and adjusted the input node's\n * ranks to achieve this. A tight edge is one that is has a length that matches\n * its \"minlen\" attribute.\n *\n * The basic structure for this function is derived from Gansner, et al., \"A\n * Technique for Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a DAG.\n *    2. Graph must be connected.\n *    3. Graph must have at least one node.\n *    5. Graph nodes must have been previously assigned a \"rank\" property that\n *       respects the \"minlen\" property of incident edges.\n *    6. Graph edges must have a \"minlen\" property.\n *\n * Post-conditions:\n *\n *    - Graph nodes will have their rank adjusted to ensure that all edges are\n *      tight.\n *\n * Returns a tree (undirected graph) that is constructed using only \"tight\"\n * edges.\n */\nfunction feasibleTree(g) {\n  var t = new Graph({ directed: false });\n\n  // Choose arbitrary node from which to start our tree\n  var start = g.nodes()[0];\n  var size = g.nodeCount();\n  t.setNode(start, {});\n\n  var edge, delta;\n  while (tightTree(t, g) < size) {\n    edge = findMinSlackEdge(t, g);\n    delta = t.hasNode(edge.v) ? slack(g, edge) : -slack(g, edge);\n    shiftRanks(t, g, delta);\n  }\n\n  return t;\n}\n\n/*\n * Finds a maximal tree of tight edges and returns the number of nodes in the\n * tree.\n */\nfunction tightTree(t, g) {\n  function dfs(v) {\n    _.forEach(g.nodeEdges(v), function (e) {\n      var edgeV = e.v,\n        w = v === edgeV ? e.w : edgeV;\n      if (!t.hasNode(w) && !slack(g, e)) {\n        t.setNode(w, {});\n        t.setEdge(v, w, {});\n        dfs(w);\n      }\n    });\n  }\n\n  _.forEach(t.nodes(), dfs);\n  return t.nodeCount();\n}\n\n/*\n * Finds the edge with the smallest slack that is incident on tree and returns\n * it.\n */\nfunction findMinSlackEdge(t, g) {\n  return _.minBy(g.edges(), function (e) {\n    if (t.hasNode(e.v) !== t.hasNode(e.w)) {\n      return slack(g, e);\n    }\n  });\n}\n\nfunction shiftRanks(t, g, delta) {\n  _.forEach(t.nodes(), function (v) {\n    g.node(v).rank += delta;\n  });\n}\n","import * as _ from 'lodash-es';\n\nexport { longestPath, slack };\n\n/*\n * Initializes ranks for the input graph using the longest path algorithm. This\n * algorithm scales well and is fast in practice, it yields rather poor\n * solutions. Nodes are pushed to the lowest layer possible, leaving the bottom\n * ranks wide and leaving edges longer than necessary. However, due to its\n * speed, this algorithm is good for getting an initial ranking that can be fed\n * into other algorithms.\n *\n * This algorithm does not normalize layers because it will be used by other\n * algorithms in most cases. If using this algorithm directly, be sure to\n * run normalize at the end.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG.\n *    2. Input graph node labels can be assigned properties.\n *\n * Post-conditions:\n *\n *    1. Each node will be assign an (unnormalized) \"rank\" property.\n */\nfunction longestPath(g) {\n  var visited = {};\n\n  function dfs(v) {\n    var label = g.node(v);\n    if (_.has(visited, v)) {\n      return label.rank;\n    }\n    visited[v] = true;\n\n    var rank = _.min(\n      _.map(g.outEdges(v), function (e) {\n        return dfs(e.w) - g.edge(e).minlen;\n      })\n    );\n\n    if (\n      rank === Number.POSITIVE_INFINITY || // return value of _.map([]) for Lodash 3\n      rank === undefined || // return value of _.map([]) for Lodash 4\n      rank === null\n    ) {\n      // return value of _.map([null])\n      rank = 0;\n    }\n\n    return (label.rank = rank);\n  }\n\n  _.forEach(g.sources(), dfs);\n}\n\n/*\n * Returns the amount of slack for the given edge. The slack is defined as the\n * difference between the length of the edge and its minimum length.\n */\nfunction slack(g, e) {\n  return g.node(e.w).rank - g.node(e.v).rank - g.edge(e).minlen;\n}\n","import * as _ from 'lodash-es';\nimport * as alg from '../../graphlib/alg/index.js';\nimport { simplify } from '../util.js';\nimport { feasibleTree } from './feasible-tree.js';\nimport { longestPath, slack } from './util.js';\n\nexport { networkSimplex };\n\n// Expose some internals for testing purposes\nnetworkSimplex.initLowLimValues = initLowLimValues;\nnetworkSimplex.initCutValues = initCutValues;\nnetworkSimplex.calcCutValue = calcCutValue;\nnetworkSimplex.leaveEdge = leaveEdge;\nnetworkSimplex.enterEdge = enterEdge;\nnetworkSimplex.exchangeEdges = exchangeEdges;\n\n/*\n * The network simplex algorithm assigns ranks to each node in the input graph\n * and iteratively improves the ranking to reduce the length of edges.\n *\n * Preconditions:\n *\n *    1. The input graph must be a DAG.\n *    2. All nodes in the graph must have an object value.\n *    3. All edges in the graph must have \"minlen\" and \"weight\" attributes.\n *\n * Postconditions:\n *\n *    1. All nodes in the graph will have an assigned \"rank\" attribute that has\n *       been optimized by the network simplex algorithm. Ranks start at 0.\n *\n *\n * A rough sketch of the algorithm is as follows:\n *\n *    1. Assign initial ranks to each node. We use the longest path algorithm,\n *       which assigns ranks to the lowest position possible. In general this\n *       leads to very wide bottom ranks and unnecessarily long edges.\n *    2. Construct a feasible tight tree. A tight tree is one such that all\n *       edges in the tree have no slack (difference between length of edge\n *       and minlen for the edge). This by itself greatly improves the assigned\n *       rankings by shorting edges.\n *    3. Iteratively find edges that have negative cut values. Generally a\n *       negative cut value indicates that the edge could be removed and a new\n *       tree edge could be added to produce a more compact graph.\n *\n * Much of the algorithms here are derived from Gansner, et al., \"A Technique\n * for Drawing Directed Graphs.\" The structure of the file roughly follows the\n * structure of the overall algorithm.\n */\nfunction networkSimplex(g) {\n  g = simplify(g);\n  longestPath(g);\n  var t = feasibleTree(g);\n  initLowLimValues(t);\n  initCutValues(t, g);\n\n  var e, f;\n  while ((e = leaveEdge(t))) {\n    f = enterEdge(t, g, e);\n    exchangeEdges(t, g, e, f);\n  }\n}\n\n/*\n * Initializes cut values for all edges in the tree.\n */\nfunction initCutValues(t, g) {\n  var vs = alg.postorder(t, t.nodes());\n  vs = vs.slice(0, vs.length - 1);\n  _.forEach(vs, function (v) {\n    assignCutValue(t, g, v);\n  });\n}\n\nfunction assignCutValue(t, g, child) {\n  var childLab = t.node(child);\n  var parent = childLab.parent;\n  t.edge(child, parent).cutvalue = calcCutValue(t, g, child);\n}\n\n/*\n * Given the tight tree, its graph, and a child in the graph calculate and\n * return the cut value for the edge between the child and its parent.\n */\nfunction calcCutValue(t, g, child) {\n  var childLab = t.node(child);\n  var parent = childLab.parent;\n  // True if the child is on the tail end of the edge in the directed graph\n  var childIsTail = true;\n  // The graph's view of the tree edge we're inspecting\n  var graphEdge = g.edge(child, parent);\n  // The accumulated cut value for the edge between this node and its parent\n  var cutValue = 0;\n\n  if (!graphEdge) {\n    childIsTail = false;\n    graphEdge = g.edge(parent, child);\n  }\n\n  cutValue = graphEdge.weight;\n\n  _.forEach(g.nodeEdges(child), function (e) {\n    var isOutEdge = e.v === child,\n      other = isOutEdge ? e.w : e.v;\n\n    if (other !== parent) {\n      var pointsToHead = isOutEdge === childIsTail,\n        otherWeight = g.edge(e).weight;\n\n      cutValue += pointsToHead ? otherWeight : -otherWeight;\n      if (isTreeEdge(t, child, other)) {\n        var otherCutValue = t.edge(child, other).cutvalue;\n        cutValue += pointsToHead ? -otherCutValue : otherCutValue;\n      }\n    }\n  });\n\n  return cutValue;\n}\n\nfunction initLowLimValues(tree, root) {\n  if (arguments.length < 2) {\n    root = tree.nodes()[0];\n  }\n  dfsAssignLowLim(tree, {}, 1, root);\n}\n\nfunction dfsAssignLowLim(tree, visited, nextLim, v, parent) {\n  var low = nextLim;\n  var label = tree.node(v);\n\n  visited[v] = true;\n  _.forEach(tree.neighbors(v), function (w) {\n    if (!_.has(visited, w)) {\n      nextLim = dfsAssignLowLim(tree, visited, nextLim, w, v);\n    }\n  });\n\n  label.low = low;\n  label.lim = nextLim++;\n  if (parent) {\n    label.parent = parent;\n  } else {\n    // TODO should be able to remove this when we incrementally update low lim\n    delete label.parent;\n  }\n\n  return nextLim;\n}\n\nfunction leaveEdge(tree) {\n  return _.find(tree.edges(), function (e) {\n    return tree.edge(e).cutvalue < 0;\n  });\n}\n\nfunction enterEdge(t, g, edge) {\n  var v = edge.v;\n  var w = edge.w;\n\n  // For the rest of this function we assume that v is the tail and w is the\n  // head, so if we don't have this edge in the graph we should flip it to\n  // match the correct orientation.\n  if (!g.hasEdge(v, w)) {\n    v = edge.w;\n    w = edge.v;\n  }\n\n  var vLabel = t.node(v);\n  var wLabel = t.node(w);\n  var tailLabel = vLabel;\n  var flip = false;\n\n  // If the root is in the tail of the edge then we need to flip the logic that\n  // checks for the head and tail nodes in the candidates function below.\n  if (vLabel.lim > wLabel.lim) {\n    tailLabel = wLabel;\n    flip = true;\n  }\n\n  var candidates = _.filter(g.edges(), function (edge) {\n    return (\n      flip === isDescendant(t, t.node(edge.v), tailLabel) &&\n      flip !== isDescendant(t, t.node(edge.w), tailLabel)\n    );\n  });\n\n  return _.minBy(candidates, function (edge) {\n    return slack(g, edge);\n  });\n}\n\nfunction exchangeEdges(t, g, e, f) {\n  var v = e.v;\n  var w = e.w;\n  t.removeEdge(v, w);\n  t.setEdge(f.v, f.w, {});\n  initLowLimValues(t);\n  initCutValues(t, g);\n  updateRanks(t, g);\n}\n\nfunction updateRanks(t, g) {\n  var root = _.find(t.nodes(), function (v) {\n    return !g.node(v).parent;\n  });\n  var vs = alg.preorder(t, root);\n  vs = vs.slice(1);\n  _.forEach(vs, function (v) {\n    var parent = t.node(v).parent,\n      edge = g.edge(v, parent),\n      flipped = false;\n\n    if (!edge) {\n      edge = g.edge(parent, v);\n      flipped = true;\n    }\n\n    g.node(v).rank = g.node(parent).rank + (flipped ? edge.minlen : -edge.minlen);\n  });\n}\n\n/*\n * Returns true if the edge is in the tree.\n */\nfunction isTreeEdge(tree, u, v) {\n  return tree.hasEdge(u, v);\n}\n\n/*\n * Returns true if the specified node is descendant of the root node per the\n * assigned low and lim attributes in the tree.\n */\nfunction isDescendant(tree, vLabel, rootLabel) {\n  return rootLabel.low <= vLabel.lim && vLabel.lim <= rootLabel.lim;\n}\n","import { components } from './components.js';\nimport { dijkstra } from './dijkstra.js';\nimport { dijkstraAll } from './dijkstra-all.js';\nimport { findCycles } from './find-cycles.js';\nimport { floydWarshall } from './floyd-warshall.js';\nimport { isAcyclic } from './is-acyclic.js';\nimport { postorder } from './postorder.js';\nimport { preorder } from './preorder.js';\nimport { prim } from './prim.js';\nimport { tarjan } from './tarjan.js';\nimport { topsort } from './topsort.js';\n\nexport {\n  components,\n  dijkstra,\n  dijkstraAll,\n  findCycles,\n  floydWarshall,\n  isAcyclic,\n  postorder,\n  preorder,\n  prim,\n  tarjan,\n  topsort,\n};\n","import * as _ from 'lodash-es';\n\nexport { components };\n\nfunction components(g) {\n  var visited = {};\n  var cmpts = [];\n  var cmpt;\n\n  function dfs(v) {\n    if (_.has(visited, v)) return;\n    visited[v] = true;\n    cmpt.push(v);\n    _.each(g.successors(v), dfs);\n    _.each(g.predecessors(v), dfs);\n  }\n\n  _.each(g.nodes(), function (v) {\n    cmpt = [];\n    dfs(v);\n    if (cmpt.length) {\n      cmpts.push(cmpt);\n    }\n  });\n\n  return cmpts;\n}\n","import * as _ from 'lodash-es';\nimport { PriorityQueue } from '../data/priority-queue.js';\n\nexport { dijkstra };\n\nvar DEFAULT_WEIGHT_FUNC = _.constant(1);\n\nfunction dijkstra(g, source, weightFn, edgeFn) {\n  return runDijkstra(\n    g,\n    String(source),\n    weightFn || DEFAULT_WEIGHT_FUNC,\n    edgeFn ||\n      function (v) {\n        return g.outEdges(v);\n      }\n  );\n}\n\nfunction runDijkstra(g, source, weightFn, edgeFn) {\n  var results = {};\n  var pq = new PriorityQueue();\n  var v, vEntry;\n\n  var updateNeighbors = function (edge) {\n    var w = edge.v !== v ? edge.v : edge.w;\n    var wEntry = results[w];\n    var weight = weightFn(edge);\n    var distance = vEntry.distance + weight;\n\n    if (weight < 0) {\n      throw new Error(\n        'dijkstra does not allow negative edge weights. ' +\n          'Bad edge: ' +\n          edge +\n          ' Weight: ' +\n          weight\n      );\n    }\n\n    if (distance < wEntry.distance) {\n      wEntry.distance = distance;\n      wEntry.predecessor = v;\n      pq.decrease(w, distance);\n    }\n  };\n\n  g.nodes().forEach(function (v) {\n    var distance = v === source ? 0 : Number.POSITIVE_INFINITY;\n    results[v] = { distance: distance };\n    pq.add(v, distance);\n  });\n\n  while (pq.size() > 0) {\n    v = pq.removeMin();\n    vEntry = results[v];\n    if (vEntry.distance === Number.POSITIVE_INFINITY) {\n      break;\n    }\n\n    edgeFn(v).forEach(updateNeighbors);\n  }\n\n  return results;\n}\n","import * as _ from 'lodash-es';\n\nexport { PriorityQueue };\n\n/**\n * A min-priority queue data structure. This algorithm is derived from Cormen,\n * et al., \"Introduction to Algorithms\". The basic idea of a min-priority\n * queue is that you can efficiently (in O(1) time) get the smallest key in\n * the queue. Adding and removing elements takes O(log n) time. A key can\n * have its priority decreased in O(log n) time.\n */\nclass PriorityQueue {\n  constructor() {\n    this._arr = [];\n    this._keyIndices = {};\n  }\n  /**\n   * Returns the number of elements in the queue. Takes `O(1)` time.\n   */\n  size() {\n    return this._arr.length;\n  }\n  /**\n   * Returns the keys that are in the queue. Takes `O(n)` time.\n   */\n  keys() {\n    return this._arr.map(function (x) {\n      return x.key;\n    });\n  }\n  /**\n   * Returns `true` if **key** is in the queue and `false` if not.\n   */\n  has(key) {\n    return _.has(this._keyIndices, key);\n  }\n  /**\n   * Returns the priority for **key**. If **key** is not present in the queue\n   * then this function returns `undefined`. Takes `O(1)` time.\n   *\n   * @param {Object} key\n   */\n  priority(key) {\n    var index = this._keyIndices[key];\n    if (index !== undefined) {\n      return this._arr[index].priority;\n    }\n  }\n  /**\n   * Returns the key for the minimum element in this queue. If the queue is\n   * empty this function throws an Error. Takes `O(1)` time.\n   */\n  min() {\n    if (this.size() === 0) {\n      throw new Error('Queue underflow');\n    }\n    return this._arr[0].key;\n  }\n  /**\n   * Inserts a new key into the priority queue. If the key already exists in\n   * the queue this function returns `false`; otherwise it will return `true`.\n   * Takes `O(n)` time.\n   *\n   * @param {Object} key the key to add\n   * @param {Number} priority the initial priority for the key\n   */\n  add(key, priority) {\n    var keyIndices = this._keyIndices;\n    key = String(key);\n    if (!_.has(keyIndices, key)) {\n      var arr = this._arr;\n      var index = arr.length;\n      keyIndices[key] = index;\n      arr.push({ key: key, priority: priority });\n      this._decrease(index);\n      return true;\n    }\n    return false;\n  }\n  /**\n   * Removes and returns the smallest key in the queue. Takes `O(log n)` time.\n   */\n  removeMin() {\n    this._swap(0, this._arr.length - 1);\n    var min = this._arr.pop();\n    delete this._keyIndices[min.key];\n    this._heapify(0);\n    return min.key;\n  }\n  /**\n   * Decreases the priority for **key** to **priority**. If the new priority is\n   * greater than the previous priority, this function will throw an Error.\n   *\n   * @param {Object} key the key for which to raise priority\n   * @param {Number} priority the new priority for the key\n   */\n  decrease(key, priority) {\n    var index = this._keyIndices[key];\n    if (priority > this._arr[index].priority) {\n      throw new Error(\n        'New priority is greater than current priority. ' +\n          'Key: ' +\n          key +\n          ' Old: ' +\n          this._arr[index].priority +\n          ' New: ' +\n          priority\n      );\n    }\n    this._arr[index].priority = priority;\n    this._decrease(index);\n  }\n  _heapify(i) {\n    var arr = this._arr;\n    var l = 2 * i;\n    var r = l + 1;\n    var largest = i;\n    if (l < arr.length) {\n      largest = arr[l].priority < arr[largest].priority ? l : largest;\n      if (r < arr.length) {\n        largest = arr[r].priority < arr[largest].priority ? r : largest;\n      }\n      if (largest !== i) {\n        this._swap(i, largest);\n        this._heapify(largest);\n      }\n    }\n  }\n  _decrease(index) {\n    var arr = this._arr;\n    var priority = arr[index].priority;\n    var parent;\n    while (index !== 0) {\n      parent = index >> 1;\n      if (arr[parent].priority < priority) {\n        break;\n      }\n      this._swap(index, parent);\n      index = parent;\n    }\n  }\n  _swap(i, j) {\n    var arr = this._arr;\n    var keyIndices = this._keyIndices;\n    var origArrI = arr[i];\n    var origArrJ = arr[j];\n    arr[i] = origArrJ;\n    arr[j] = origArrI;\n    keyIndices[origArrJ.key] = i;\n    keyIndices[origArrI.key] = j;\n  }\n}\n","import * as _ from 'lodash-es';\nimport { dijkstra } from './dijkstra.js';\n\nexport { dijkstraAll };\n\nfunction dijkstraAll(g, weightFunc, edgeFunc) {\n  return _.transform(\n    g.nodes(),\n    function (acc, v) {\n      acc[v] = dijkstra(g, v, weightFunc, edgeFunc);\n    },\n    {}\n  );\n}\n","import * as _ from 'lodash-es';\nimport { tarjan } from './tarjan.js';\n\nexport { findCycles };\n\nfunction findCycles(g) {\n  return _.filter(tarjan(g), function (cmpt) {\n    return cmpt.length > 1 || (cmpt.length === 1 && g.hasEdge(cmpt[0], cmpt[0]));\n  });\n}\n","import * as _ from 'lodash-es';\n\nexport { tarjan };\n\nfunction tarjan(g) {\n  var index = 0;\n  var stack = [];\n  var visited = {}; // node id -> { onStack, lowlink, index }\n  var results = [];\n\n  function dfs(v) {\n    var entry = (visited[v] = {\n      onStack: true,\n      lowlink: index,\n      index: index++,\n    });\n    stack.push(v);\n\n    g.successors(v).forEach(function (w) {\n      if (!_.has(visited, w)) {\n        dfs(w);\n        entry.lowlink = Math.min(entry.lowlink, visited[w].lowlink);\n      } else if (visited[w].onStack) {\n        entry.lowlink = Math.min(entry.lowlink, visited[w].index);\n      }\n    });\n\n    if (entry.lowlink === entry.index) {\n      var cmpt = [];\n      var w;\n      do {\n        w = stack.pop();\n        visited[w].onStack = false;\n        cmpt.push(w);\n      } while (v !== w);\n      results.push(cmpt);\n    }\n  }\n\n  g.nodes().forEach(function (v) {\n    if (!_.has(visited, v)) {\n      dfs(v);\n    }\n  });\n\n  return results;\n}\n","import * as _ from 'lodash-es';\n\nexport { floydWarshall };\n\nvar DEFAULT_WEIGHT_FUNC = _.constant(1);\n\nfunction floydWarshall(g, weightFn, edgeFn) {\n  return runFloydWarshall(\n    g,\n    weightFn || DEFAULT_WEIGHT_FUNC,\n    edgeFn ||\n      function (v) {\n        return g.outEdges(v);\n      }\n  );\n}\n\nfunction runFloydWarshall(g, weightFn, edgeFn) {\n  var results = {};\n  var nodes = g.nodes();\n\n  nodes.forEach(function (v) {\n    results[v] = {};\n    results[v][v] = { distance: 0 };\n    nodes.forEach(function (w) {\n      if (v !== w) {\n        results[v][w] = { distance: Number.POSITIVE_INFINITY };\n      }\n    });\n    edgeFn(v).forEach(function (edge) {\n      var w = edge.v === v ? edge.w : edge.v;\n      var d = weightFn(edge);\n      results[v][w] = { distance: d, predecessor: v };\n    });\n  });\n\n  nodes.forEach(function (k) {\n    var rowK = results[k];\n    nodes.forEach(function (i) {\n      var rowI = results[i];\n      nodes.forEach(function (j) {\n        var ik = rowI[k];\n        var kj = rowK[j];\n        var ij = rowI[j];\n        var altDistance = ik.distance + kj.distance;\n        if (altDistance < ij.distance) {\n          ij.distance = altDistance;\n          ij.predecessor = kj.predecessor;\n        }\n      });\n    });\n  });\n\n  return results;\n}\n","import { topsort, CycleException } from './topsort.js';\n\nexport { isAcyclic };\n\nfunction isAcyclic(g) {\n  try {\n    topsort(g);\n  } catch (e) {\n    if (e instanceof CycleException) {\n      return false;\n    }\n    throw e;\n  }\n  return true;\n}\n","import * as _ from 'lodash-es';\n\nexport { topsort, CycleException };\n\ntopsort.CycleException = CycleException;\n\nfunction topsort(g) {\n  var visited = {};\n  var stack = {};\n  var results = [];\n\n  function visit(node) {\n    if (_.has(stack, node)) {\n      throw new CycleException();\n    }\n\n    if (!_.has(visited, node)) {\n      stack[node] = true;\n      visited[node] = true;\n      _.each(g.predecessors(node), visit);\n      delete stack[node];\n      results.push(node);\n    }\n  }\n\n  _.each(g.sinks(), visit);\n\n  if (_.size(visited) !== g.nodeCount()) {\n    throw new CycleException();\n  }\n\n  return results;\n}\n\nfunction CycleException() {}\nCycleException.prototype = new Error(); // must be an instance of Error to pass testing\n","import { dfs } from './dfs.js';\n\nexport { postorder };\n\nfunction postorder(g, vs) {\n  return dfs(g, vs, 'post');\n}\n","import * as _ from 'lodash-es';\n\nexport { dfs };\n\n/*\n * A helper that preforms a pre- or post-order traversal on the input graph\n * and returns the nodes in the order they were visited. If the graph is\n * undirected then this algorithm will navigate using neighbors. If the graph\n * is directed then this algorithm will navigate using successors.\n *\n * Order must be one of \"pre\" or \"post\".\n */\nfunction dfs(g, vs, order) {\n  if (!_.isArray(vs)) {\n    vs = [vs];\n  }\n\n  var navigation = (g.isDirected() ? g.successors : g.neighbors).bind(g);\n\n  var acc = [];\n  var visited = {};\n  _.each(vs, function (v) {\n    if (!g.hasNode(v)) {\n      throw new Error('Graph does not have node: ' + v);\n    }\n\n    doDfs(g, v, order === 'post', visited, navigation, acc);\n  });\n  return acc;\n}\n\nfunction doDfs(g, v, postorder, visited, navigation, acc) {\n  if (!_.has(visited, v)) {\n    visited[v] = true;\n\n    if (!postorder) {\n      acc.push(v);\n    }\n    _.each(navigation(v), function (w) {\n      doDfs(g, w, postorder, visited, navigation, acc);\n    });\n    if (postorder) {\n      acc.push(v);\n    }\n  }\n}\n","import { dfs } from './dfs.js';\n\nexport { preorder };\n\nfunction preorder(g, vs) {\n  return dfs(g, vs, 'pre');\n}\n","import * as _ from 'lodash-es';\nimport { PriorityQueue } from '../data/priority-queue.js';\nimport { Graph } from '../graph.js';\n\nexport { prim };\n\nfunction prim(g, weightFunc) {\n  var result = new Graph();\n  var parents = {};\n  var pq = new PriorityQueue();\n  var v;\n\n  function updateNeighbors(edge) {\n    var w = edge.v === v ? edge.w : edge.v;\n    var pri = pq.priority(w);\n    if (pri !== undefined) {\n      var edgeWeight = weightFunc(edge);\n      if (edgeWeight < pri) {\n        parents[w] = v;\n        pq.decrease(w, edgeWeight);\n      }\n    }\n  }\n\n  if (g.nodeCount() === 0) {\n    return result;\n  }\n\n  _.each(g.nodes(), function (v) {\n    pq.add(v, Number.POSITIVE_INFINITY);\n    result.setNode(v);\n  });\n\n  // Start from an arbitrary node\n  pq.decrease(g.nodes()[0], 0);\n\n  var init = false;\n  while (pq.size() > 0) {\n    v = pq.removeMin();\n    if (_.has(parents, v)) {\n      result.setEdge(v, parents[v]);\n    } else if (init) {\n      throw new Error('Input graph is not connected: ' + g);\n    } else {\n      init = true;\n    }\n\n    g.nodeEdges(v).forEach(updateNeighbors);\n  }\n\n  return result;\n}\n","import * as _ from 'lodash-es';\nimport * as util from './util.js';\n\nexport { run, cleanup };\n\n/*\n * A nesting graph creates dummy nodes for the tops and bottoms of subgraphs,\n * adds appropriate edges to ensure that all cluster nodes are placed between\n * these boundries, and ensures that the graph is connected.\n *\n * In addition we ensure, through the use of the minlen property, that nodes\n * and subgraph border nodes to not end up on the same rank.\n *\n * Preconditions:\n *\n *    1. Input graph is a DAG\n *    2. Nodes in the input graph has a minlen attribute\n *\n * Postconditions:\n *\n *    1. Input graph is connected.\n *    2. Dummy nodes are added for the tops and bottoms of subgraphs.\n *    3. The minlen attribute for nodes is adjusted to ensure nodes do not\n *       get placed on the same rank as subgraph border nodes.\n *\n * The nesting graph idea comes from Sander, \"Layout of Compound Directed\n * Graphs.\"\n */\nfunction run(g) {\n  var root = util.addDummyNode(g, 'root', {}, '_root');\n  var depths = treeDepths(g);\n  var height = _.max(_.values(depths)) - 1; // Note: depths is an Object not an array\n  var nodeSep = 2 * height + 1;\n\n  g.graph().nestingRoot = root;\n\n  // Multiply minlen by nodeSep to align nodes on non-border ranks.\n  _.forEach(g.edges(), function (e) {\n    g.edge(e).minlen *= nodeSep;\n  });\n\n  // Calculate a weight that is sufficient to keep subgraphs vertically compact\n  var weight = sumWeights(g) + 1;\n\n  // Create border nodes and link them up\n  _.forEach(g.children(), function (child) {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n  });\n\n  // Save the multiplier for node layers for later removal of empty border\n  // layers.\n  g.graph().nodeRankFactor = nodeSep;\n}\n\nfunction dfs(g, root, nodeSep, weight, height, depths, v) {\n  var children = g.children(v);\n  if (!children.length) {\n    if (v !== root) {\n      g.setEdge(root, v, { weight: 0, minlen: nodeSep });\n    }\n    return;\n  }\n\n  var top = util.addBorderNode(g, '_bt');\n  var bottom = util.addBorderNode(g, '_bb');\n  var label = g.node(v);\n\n  g.setParent(top, v);\n  label.borderTop = top;\n  g.setParent(bottom, v);\n  label.borderBottom = bottom;\n\n  _.forEach(children, function (child) {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n\n    var childNode = g.node(child);\n    var childTop = childNode.borderTop ? childNode.borderTop : child;\n    var childBottom = childNode.borderBottom ? childNode.borderBottom : child;\n    var thisWeight = childNode.borderTop ? weight : 2 * weight;\n    var minlen = childTop !== childBottom ? 1 : height - depths[v] + 1;\n\n    g.setEdge(top, childTop, {\n      weight: thisWeight,\n      minlen: minlen,\n      nestingEdge: true,\n    });\n\n    g.setEdge(childBottom, bottom, {\n      weight: thisWeight,\n      minlen: minlen,\n      nestingEdge: true,\n    });\n  });\n\n  if (!g.parent(v)) {\n    g.setEdge(root, top, { weight: 0, minlen: height + depths[v] });\n  }\n}\n\nfunction treeDepths(g) {\n  var depths = {};\n  function dfs(v, depth) {\n    var children = g.children(v);\n    if (children && children.length) {\n      _.forEach(children, function (child) {\n        dfs(child, depth + 1);\n      });\n    }\n    depths[v] = depth;\n  }\n  _.forEach(g.children(), function (v) {\n    dfs(v, 1);\n  });\n  return depths;\n}\n\nfunction sumWeights(g) {\n  return _.reduce(\n    g.edges(),\n    function (acc, e) {\n      return acc + g.edge(e).weight;\n    },\n    0\n  );\n}\n\nfunction cleanup(g) {\n  var graphLabel = g.graph();\n  g.removeNode(graphLabel.nestingRoot);\n  delete graphLabel.nestingRoot;\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (edge.nestingEdge) {\n      g.removeEdge(e);\n    }\n  });\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\nimport * as util from '../util.js';\nimport { addSubgraphConstraints } from './add-subgraph-constraints.js';\nimport { buildLayerGraph } from './build-layer-graph.js';\nimport { crossCount } from './cross-count.js';\nimport { initOrder } from './init-order.js';\nimport { sortSubgraph } from './sort-subgraph.js';\n\nexport { order };\n\n/*\n * Applies heuristics to minimize edge crossings in the graph and sets the best\n * order solution as an order attribute on each node.\n *\n * Pre-conditions:\n *\n *    1. Graph must be DAG\n *    2. Graph nodes must be objects with a \"rank\" attribute\n *    3. Graph edges must have the \"weight\" attribute\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have an \"order\" attribute based on the results of the\n *       algorithm.\n */\nfunction order(g) {\n  var maxRank = util.maxRank(g),\n    downLayerGraphs = buildLayerGraphs(g, _.range(1, maxRank + 1), 'inEdges'),\n    upLayerGraphs = buildLayerGraphs(g, _.range(maxRank - 1, -1, -1), 'outEdges');\n\n  var layering = initOrder(g);\n  assignOrder(g, layering);\n\n  var bestCC = Number.POSITIVE_INFINITY,\n    best;\n\n  for (var i = 0, lastBest = 0; lastBest < 4; ++i, ++lastBest) {\n    sweepLayerGraphs(i % 2 ? downLayerGraphs : upLayerGraphs, i % 4 >= 2);\n\n    layering = util.buildLayerMatrix(g);\n    var cc = crossCount(g, layering);\n    if (cc < bestCC) {\n      lastBest = 0;\n      best = _.cloneDeep(layering);\n      bestCC = cc;\n    }\n  }\n\n  assignOrder(g, best);\n}\n\nfunction buildLayerGraphs(g, ranks, relationship) {\n  return _.map(ranks, function (rank) {\n    return buildLayerGraph(g, rank, relationship);\n  });\n}\n\nfunction sweepLayerGraphs(layerGraphs, biasRight) {\n  var cg = new Graph();\n  _.forEach(layerGraphs, function (lg) {\n    var root = lg.graph().root;\n    var sorted = sortSubgraph(lg, root, cg, biasRight);\n    _.forEach(sorted.vs, function (v, i) {\n      lg.node(v).order = i;\n    });\n    addSubgraphConstraints(lg, cg, sorted.vs);\n  });\n}\n\nfunction assignOrder(g, layering) {\n  _.forEach(layering, function (layer) {\n    _.forEach(layer, function (v, i) {\n      g.node(v).order = i;\n    });\n  });\n}\n","import * as _ from 'lodash-es';\n\nexport { addSubgraphConstraints };\n\nfunction addSubgraphConstraints(g, cg, vs) {\n  var prev = {},\n    rootPrev;\n\n  _.forEach(vs, function (v) {\n    var child = g.parent(v),\n      parent,\n      prevChild;\n    while (child) {\n      parent = g.parent(child);\n      if (parent) {\n        prevChild = prev[parent];\n        prev[parent] = child;\n      } else {\n        prevChild = rootPrev;\n        rootPrev = child;\n      }\n      if (prevChild && prevChild !== child) {\n        cg.setEdge(prevChild, child);\n        return;\n      }\n      child = parent;\n    }\n  });\n\n  /*\n  function dfs(v) {\n    var children = v ? g.children(v) : g.children();\n    if (children.length) {\n      var min = Number.POSITIVE_INFINITY,\n          subgraphs = [];\n      _.each(children, function(child) {\n        var childMin = dfs(child);\n        if (g.children(child).length) {\n          subgraphs.push({ v: child, order: childMin });\n        }\n        min = Math.min(min, childMin);\n      });\n      _.reduce(_.sortBy(subgraphs, \"order\"), function(prev, curr) {\n        cg.setEdge(prev.v, curr.v);\n        return curr;\n      });\n      return min;\n    }\n    return g.node(v).order;\n  }\n  dfs(undefined);\n  */\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\n\nexport { buildLayerGraph };\n\n/*\n * Constructs a graph that can be used to sort a layer of nodes. The graph will\n * contain all base and subgraph nodes from the request layer in their original\n * hierarchy and any edges that are incident on these nodes and are of the type\n * requested by the \"relationship\" parameter.\n *\n * Nodes from the requested rank that do not have parents are assigned a root\n * node in the output graph, which is set in the root graph attribute. This\n * makes it easy to walk the hierarchy of movable nodes during ordering.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG\n *    2. Base nodes in the input graph have a rank attribute\n *    3. Subgraph nodes in the input graph has minRank and maxRank attributes\n *    4. Edges have an assigned weight\n *\n * Post-conditions:\n *\n *    1. Output graph has all nodes in the movable rank with preserved\n *       hierarchy.\n *    2. Root nodes in the movable layer are made children of the node\n *       indicated by the root attribute of the graph.\n *    3. Non-movable nodes incident on movable nodes, selected by the\n *       relationship parameter, are included in the graph (without hierarchy).\n *    4. Edges incident on movable nodes, selected by the relationship\n *       parameter, are added to the output graph.\n *    5. The weights for copied edges are aggregated as need, since the output\n *       graph is not a multi-graph.\n */\nfunction buildLayerGraph(g, rank, relationship) {\n  var root = createRootNode(g),\n    result = new Graph({ compound: true })\n      .setGraph({ root: root })\n      .setDefaultNodeLabel(function (v) {\n        return g.node(v);\n      });\n\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v),\n      parent = g.parent(v);\n\n    if (node.rank === rank || (node.minRank <= rank && rank <= node.maxRank)) {\n      result.setNode(v);\n      result.setParent(v, parent || root);\n\n      // This assumes we have only short edges!\n      _.forEach(g[relationship](v), function (e) {\n        var u = e.v === v ? e.w : e.v,\n          edge = result.edge(u, v),\n          weight = !_.isUndefined(edge) ? edge.weight : 0;\n        result.setEdge(u, v, { weight: g.edge(e).weight + weight });\n      });\n\n      if (_.has(node, 'minRank')) {\n        result.setNode(v, {\n          borderLeft: node.borderLeft[rank],\n          borderRight: node.borderRight[rank],\n        });\n      }\n    }\n  });\n\n  return result;\n}\n\nfunction createRootNode(g) {\n  var v;\n  while (g.hasNode((v = _.uniqueId('_root'))));\n  return v;\n}\n","import * as _ from 'lodash-es';\n\nexport { crossCount };\n\n/*\n * A function that takes a layering (an array of layers, each with an array of\n * ordererd nodes) and a graph and returns a weighted crossing count.\n *\n * Pre-conditions:\n *\n *    1. Input graph must be simple (not a multigraph), directed, and include\n *       only simple edges.\n *    2. Edges in the input graph must have assigned weights.\n *\n * Post-conditions:\n *\n *    1. The graph and layering matrix are left unchanged.\n *\n * This algorithm is derived from Barth, et al., \"Bilayer Cross Counting.\"\n */\nfunction crossCount(g, layering) {\n  var cc = 0;\n  for (var i = 1; i < layering.length; ++i) {\n    cc += twoLayerCrossCount(g, layering[i - 1], layering[i]);\n  }\n  return cc;\n}\n\nfunction twoLayerCrossCount(g, northLayer, southLayer) {\n  // Sort all of the edges between the north and south layers by their position\n  // in the north layer and then the south. Map these edges to the position of\n  // their head in the south layer.\n  var southPos = _.zipObject(\n    southLayer,\n    _.map(southLayer, function (v, i) {\n      return i;\n    })\n  );\n  var southEntries = _.flatten(\n    _.map(northLayer, function (v) {\n      return _.sortBy(\n        _.map(g.outEdges(v), function (e) {\n          return { pos: southPos[e.w], weight: g.edge(e).weight };\n        }),\n        'pos'\n      );\n    })\n  );\n\n  // Build the accumulator tree\n  var firstIndex = 1;\n  while (firstIndex < southLayer.length) firstIndex <<= 1;\n  var treeSize = 2 * firstIndex - 1;\n  firstIndex -= 1;\n  var tree = _.map(new Array(treeSize), function () {\n    return 0;\n  });\n\n  // Calculate the weighted crossings\n  var cc = 0;\n  _.forEach(\n    // @ts-expect-error\n    southEntries.forEach(function (entry) {\n      var index = entry.pos + firstIndex;\n      tree[index] += entry.weight;\n      var weightSum = 0;\n      // @ts-expect-error\n      while (index > 0) {\n        // @ts-expect-error\n        if (index % 2) {\n          weightSum += tree[index + 1];\n        }\n        // @ts-expect-error\n        index = (index - 1) >> 1;\n        tree[index] += entry.weight;\n      }\n      cc += entry.weight * weightSum;\n    })\n  );\n\n  return cc;\n}\n","import * as _ from 'lodash-es';\n\nexport { initOrder };\n\n/*\n * Assigns an initial order value for each node by performing a DFS search\n * starting from nodes in the first rank. Nodes are assigned an order in their\n * rank as they are first visited.\n *\n * This approach comes from Gansner, et al., \"A Technique for Drawing Directed\n * Graphs.\"\n *\n * Returns a layering matrix with an array per layer and each layer sorted by\n * the order of its nodes.\n */\nfunction initOrder(g) {\n  var visited = {};\n  var simpleNodes = _.filter(g.nodes(), function (v) {\n    return !g.children(v).length;\n  });\n  var maxRank = _.max(\n    _.map(simpleNodes, function (v) {\n      return g.node(v).rank;\n    })\n  );\n  var layers = _.map(_.range(maxRank + 1), function () {\n    return [];\n  });\n\n  function dfs(v) {\n    if (_.has(visited, v)) return;\n    visited[v] = true;\n    var node = g.node(v);\n    layers[node.rank].push(v);\n    _.forEach(g.successors(v), dfs);\n  }\n\n  var orderedVs = _.sortBy(simpleNodes, function (v) {\n    return g.node(v).rank;\n  });\n  _.forEach(orderedVs, dfs);\n\n  return layers;\n}\n","import * as _ from 'lodash-es';\nimport { barycenter } from './barycenter.js';\nimport { resolveConflicts } from './resolve-conflicts.js';\nimport { sort } from './sort.js';\n\nexport { sortSubgraph };\n\nfunction sortSubgraph(g, v, cg, biasRight) {\n  var movable = g.children(v);\n  var node = g.node(v);\n  var bl = node ? node.borderLeft : undefined;\n  var br = node ? node.borderRight : undefined;\n  var subgraphs = {};\n\n  if (bl) {\n    movable = _.filter(movable, function (w) {\n      return w !== bl && w !== br;\n    });\n  }\n\n  var barycenters = barycenter(g, movable);\n  _.forEach(barycenters, function (entry) {\n    if (g.children(entry.v).length) {\n      var subgraphResult = sortSubgraph(g, entry.v, cg, biasRight);\n      subgraphs[entry.v] = subgraphResult;\n      if (_.has(subgraphResult, 'barycenter')) {\n        mergeBarycenters(entry, subgraphResult);\n      }\n    }\n  });\n\n  var entries = resolveConflicts(barycenters, cg);\n  expandSubgraphs(entries, subgraphs);\n\n  var result = sort(entries, biasRight);\n\n  if (bl) {\n    result.vs = _.flatten([bl, result.vs, br]);\n    if (g.predecessors(bl).length) {\n      var blPred = g.node(g.predecessors(bl)[0]),\n        brPred = g.node(g.predecessors(br)[0]);\n      if (!_.has(result, 'barycenter')) {\n        result.barycenter = 0;\n        result.weight = 0;\n      }\n      result.barycenter =\n        (result.barycenter * result.weight + blPred.order + brPred.order) / (result.weight + 2);\n      result.weight += 2;\n    }\n  }\n\n  return result;\n}\n\nfunction expandSubgraphs(entries, subgraphs) {\n  _.forEach(entries, function (entry) {\n    entry.vs = _.flatten(\n      entry.vs.map(function (v) {\n        if (subgraphs[v]) {\n          return subgraphs[v].vs;\n        }\n        return v;\n      })\n    );\n  });\n}\n\nfunction mergeBarycenters(target, other) {\n  if (!_.isUndefined(target.barycenter)) {\n    target.barycenter =\n      (target.barycenter * target.weight + other.barycenter * other.weight) /\n      (target.weight + other.weight);\n    target.weight += other.weight;\n  } else {\n    target.barycenter = other.barycenter;\n    target.weight = other.weight;\n  }\n}\n","import * as _ from 'lodash-es';\n\nexport { barycenter };\n\nfunction barycenter(g, movable) {\n  return _.map(movable, function (v) {\n    var inV = g.inEdges(v);\n    if (!inV.length) {\n      return { v: v };\n    } else {\n      var result = _.reduce(\n        inV,\n        function (acc, e) {\n          var edge = g.edge(e),\n            nodeU = g.node(e.v);\n          return {\n            sum: acc.sum + edge.weight * nodeU.order,\n            weight: acc.weight + edge.weight,\n          };\n        },\n        { sum: 0, weight: 0 }\n      );\n\n      return {\n        v: v,\n        barycenter: result.sum / result.weight,\n        weight: result.weight,\n      };\n    }\n  });\n}\n","import * as _ from 'lodash-es';\n\nexport { resolveConflicts };\n\n/*\n * Given a list of entries of the form {v, barycenter, weight} and a\n * constraint graph this function will resolve any conflicts between the\n * constraint graph and the barycenters for the entries. If the barycenters for\n * an entry would violate a constraint in the constraint graph then we coalesce\n * the nodes in the conflict into a new node that respects the contraint and\n * aggregates barycenter and weight information.\n *\n * This implementation is based on the description in Forster, \"A Fast and\n * Simple Hueristic for Constrained Two-Level Crossing Reduction,\" thought it\n * differs in some specific details.\n *\n * Pre-conditions:\n *\n *    1. Each entry has the form {v, barycenter, weight}, or if the node has\n *       no barycenter, then {v}.\n *\n * Returns:\n *\n *    A new list of entries of the form {vs, i, barycenter, weight}. The list\n *    `vs` may either be a singleton or it may be an aggregation of nodes\n *    ordered such that they do not violate constraints from the constraint\n *    graph. The property `i` is the lowest original index of any of the\n *    elements in `vs`.\n */\nfunction resolveConflicts(entries, cg) {\n  var mappedEntries = {};\n  _.forEach(entries, function (entry, i) {\n    var tmp = (mappedEntries[entry.v] = {\n      indegree: 0,\n      in: [],\n      out: [],\n      vs: [entry.v],\n      i: i,\n    });\n    if (!_.isUndefined(entry.barycenter)) {\n      // @ts-expect-error\n      tmp.barycenter = entry.barycenter;\n      // @ts-expect-error\n      tmp.weight = entry.weight;\n    }\n  });\n\n  _.forEach(cg.edges(), function (e) {\n    var entryV = mappedEntries[e.v];\n    var entryW = mappedEntries[e.w];\n    if (!_.isUndefined(entryV) && !_.isUndefined(entryW)) {\n      entryW.indegree++;\n      entryV.out.push(mappedEntries[e.w]);\n    }\n  });\n\n  var sourceSet = _.filter(mappedEntries, function (entry) {\n    // @ts-expect-error\n    return !entry.indegree;\n  });\n\n  return doResolveConflicts(sourceSet);\n}\n\nfunction doResolveConflicts(sourceSet) {\n  var entries = [];\n\n  function handleIn(vEntry) {\n    return function (uEntry) {\n      if (uEntry.merged) {\n        return;\n      }\n      if (\n        _.isUndefined(uEntry.barycenter) ||\n        _.isUndefined(vEntry.barycenter) ||\n        uEntry.barycenter >= vEntry.barycenter\n      ) {\n        mergeEntries(vEntry, uEntry);\n      }\n    };\n  }\n\n  function handleOut(vEntry) {\n    return function (wEntry) {\n      wEntry['in'].push(vEntry);\n      if (--wEntry.indegree === 0) {\n        sourceSet.push(wEntry);\n      }\n    };\n  }\n\n  while (sourceSet.length) {\n    var entry = sourceSet.pop();\n    entries.push(entry);\n    _.forEach(entry['in'].reverse(), handleIn(entry));\n    _.forEach(entry.out, handleOut(entry));\n  }\n\n  return _.map(\n    _.filter(entries, function (entry) {\n      return !entry.merged;\n    }),\n    function (entry) {\n      return _.pick(entry, ['vs', 'i', 'barycenter', 'weight']);\n    }\n  );\n}\n\nfunction mergeEntries(target, source) {\n  var sum = 0;\n  var weight = 0;\n\n  if (target.weight) {\n    sum += target.barycenter * target.weight;\n    weight += target.weight;\n  }\n\n  if (source.weight) {\n    sum += source.barycenter * source.weight;\n    weight += source.weight;\n  }\n\n  target.vs = source.vs.concat(target.vs);\n  target.barycenter = sum / weight;\n  target.weight = weight;\n  target.i = Math.min(source.i, target.i);\n  source.merged = true;\n}\n","import * as _ from 'lodash-es';\nimport * as util from '../util.js';\n\nexport { sort };\n\nfunction sort(entries, biasRight) {\n  var parts = util.partition(entries, function (entry) {\n    return _.has(entry, 'barycenter');\n  });\n  var sortable = parts.lhs,\n    unsortable = _.sortBy(parts.rhs, function (entry) {\n      return -entry.i;\n    }),\n    vs = [],\n    sum = 0,\n    weight = 0,\n    vsIndex = 0;\n\n  sortable.sort(compareWithBias(!!biasRight));\n\n  vsIndex = consumeUnsortable(vs, unsortable, vsIndex);\n\n  _.forEach(sortable, function (entry) {\n    vsIndex += entry.vs.length;\n    vs.push(entry.vs);\n    sum += entry.barycenter * entry.weight;\n    weight += entry.weight;\n    vsIndex = consumeUnsortable(vs, unsortable, vsIndex);\n  });\n\n  var result = { vs: _.flatten(vs) };\n  if (weight) {\n    result.barycenter = sum / weight;\n    result.weight = weight;\n  }\n  return result;\n}\n\nfunction consumeUnsortable(vs, unsortable, index) {\n  var last;\n  while (unsortable.length && (last = _.last(unsortable)).i <= index) {\n    unsortable.pop();\n    vs.push(last.vs);\n    index++;\n  }\n  return index;\n}\n\nfunction compareWithBias(bias) {\n  return function (entryV, entryW) {\n    if (entryV.barycenter < entryW.barycenter) {\n      return -1;\n    } else if (entryV.barycenter > entryW.barycenter) {\n      return 1;\n    }\n\n    return !bias ? entryV.i - entryW.i : entryW.i - entryV.i;\n  };\n}\n","import * as _ from 'lodash-es';\n\nexport { parentDummyChains };\n\nfunction parentDummyChains(g) {\n  var postorderNums = postorder(g);\n\n  _.forEach(g.graph().dummyChains, function (v) {\n    var node = g.node(v);\n    var edgeObj = node.edgeObj;\n    var pathData = findPath(g, postorderNums, edgeObj.v, edgeObj.w);\n    var path = pathData.path;\n    var lca = pathData.lca;\n    var pathIdx = 0;\n    var pathV = path[pathIdx];\n    var ascending = true;\n\n    while (v !== edgeObj.w) {\n      node = g.node(v);\n\n      if (ascending) {\n        while ((pathV = path[pathIdx]) !== lca && g.node(pathV).maxRank < node.rank) {\n          pathIdx++;\n        }\n\n        if (pathV === lca) {\n          ascending = false;\n        }\n      }\n\n      if (!ascending) {\n        while (\n          pathIdx < path.length - 1 &&\n          g.node((pathV = path[pathIdx + 1])).minRank <= node.rank\n        ) {\n          pathIdx++;\n        }\n        pathV = path[pathIdx];\n      }\n\n      g.setParent(v, pathV);\n      v = g.successors(v)[0];\n    }\n  });\n}\n\n// Find a path from v to w through the lowest common ancestor (LCA). Return the\n// full path and the LCA.\nfunction findPath(g, postorderNums, v, w) {\n  var vPath = [];\n  var wPath = [];\n  var low = Math.min(postorderNums[v].low, postorderNums[w].low);\n  var lim = Math.max(postorderNums[v].lim, postorderNums[w].lim);\n  var parent;\n  var lca;\n\n  // Traverse up from v to find the LCA\n  parent = v;\n  do {\n    parent = g.parent(parent);\n    vPath.push(parent);\n  } while (parent && (postorderNums[parent].low > low || lim > postorderNums[parent].lim));\n  lca = parent;\n\n  // Traverse from w to LCA\n  parent = w;\n  while ((parent = g.parent(parent)) !== lca) {\n    wPath.push(parent);\n  }\n\n  return { path: vPath.concat(wPath.reverse()), lca: lca };\n}\n\nfunction postorder(g) {\n  var result = {};\n  var lim = 0;\n\n  function dfs(v) {\n    var low = lim;\n    _.forEach(g.children(v), dfs);\n    result[v] = { low: low, lim: lim++ };\n  }\n  _.forEach(g.children(), dfs);\n\n  return result;\n}\n","import * as _ from 'lodash-es';\nimport * as util from '../util.js';\nimport { positionX } from './bk.js';\n\nexport { position };\n\nfunction position(g) {\n  g = util.asNonCompoundGraph(g);\n\n  positionY(g);\n  _.forOwn(positionX(g), function (x, v) {\n    g.node(v).x = x;\n  });\n}\n\nfunction positionY(g) {\n  var layering = util.buildLayerMatrix(g);\n  var rankSep = g.graph().ranksep;\n  var prevY = 0;\n  _.forEach(layering, function (layer) {\n    var maxHeight = _.max(\n      _.map(layer, function (v) {\n        return g.node(v).height;\n      })\n    );\n    _.forEach(layer, function (v) {\n      g.node(v).y = prevY + maxHeight / 2;\n    });\n    prevY += maxHeight + rankSep;\n  });\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\nimport * as util from '../util.js';\n\n/*\n * This module provides coordinate assignment based on Brandes and Köpf, \"Fast\n * and Simple Horizontal Coordinate Assignment.\"\n */\n\nexport {\n  positionX,\n  findType1Conflicts,\n  findType2Conflicts,\n  addConflict,\n  hasConflict,\n  verticalAlignment,\n  horizontalCompaction,\n  alignCoordinates,\n  findSmallestWidthAlignment,\n  balance,\n};\n\n/*\n * Marks all edges in the graph with a type-1 conflict with the \"type1Conflict\"\n * property. A type-1 conflict is one where a non-inner segment crosses an\n * inner segment. An inner segment is an edge with both incident nodes marked\n * with the \"dummy\" property.\n *\n * This algorithm scans layer by layer, starting with the second, for type-1\n * conflicts between the current layer and the previous layer. For each layer\n * it scans the nodes from left to right until it reaches one that is incident\n * on an inner segment. It then scans predecessors to determine if they have\n * edges that cross that inner segment. At the end a final scan is done for all\n * nodes on the current rank to see if they cross the last visited inner\n * segment.\n *\n * This algorithm (safely) assumes that a dummy node will only be incident on a\n * single node in the layers being scanned.\n */\nfunction findType1Conflicts(g, layering) {\n  var conflicts = {};\n\n  function visitLayer(prevLayer, layer) {\n    var // last visited node in the previous layer that is incident on an inner\n      // segment.\n      k0 = 0,\n      // Tracks the last node in this layer scanned for crossings with a type-1\n      // segment.\n      scanPos = 0,\n      prevLayerLength = prevLayer.length,\n      lastNode = _.last(layer);\n\n    _.forEach(layer, function (v, i) {\n      var w = findOtherInnerSegmentNode(g, v),\n        k1 = w ? g.node(w).order : prevLayerLength;\n\n      if (w || v === lastNode) {\n        _.forEach(layer.slice(scanPos, i + 1), function (scanNode) {\n          _.forEach(g.predecessors(scanNode), function (u) {\n            var uLabel = g.node(u),\n              uPos = uLabel.order;\n            if ((uPos < k0 || k1 < uPos) && !(uLabel.dummy && g.node(scanNode).dummy)) {\n              addConflict(conflicts, u, scanNode);\n            }\n          });\n        });\n        // @ts-expect-error\n        scanPos = i + 1;\n        k0 = k1;\n      }\n    });\n\n    return layer;\n  }\n\n  _.reduce(layering, visitLayer);\n  return conflicts;\n}\n\nfunction findType2Conflicts(g, layering) {\n  var conflicts = {};\n\n  function scan(south, southPos, southEnd, prevNorthBorder, nextNorthBorder) {\n    var v;\n    _.forEach(_.range(southPos, southEnd), function (i) {\n      v = south[i];\n      if (g.node(v).dummy) {\n        _.forEach(g.predecessors(v), function (u) {\n          var uNode = g.node(u);\n          if (uNode.dummy && (uNode.order < prevNorthBorder || uNode.order > nextNorthBorder)) {\n            addConflict(conflicts, u, v);\n          }\n        });\n      }\n    });\n  }\n\n  function visitLayer(north, south) {\n    var prevNorthPos = -1,\n      nextNorthPos,\n      southPos = 0;\n\n    _.forEach(south, function (v, southLookahead) {\n      if (g.node(v).dummy === 'border') {\n        var predecessors = g.predecessors(v);\n        if (predecessors.length) {\n          nextNorthPos = g.node(predecessors[0]).order;\n          scan(south, southPos, southLookahead, prevNorthPos, nextNorthPos);\n          // @ts-expect-error\n          southPos = southLookahead;\n          prevNorthPos = nextNorthPos;\n        }\n      }\n      scan(south, southPos, south.length, nextNorthPos, north.length);\n    });\n\n    return south;\n  }\n\n  _.reduce(layering, visitLayer);\n  return conflicts;\n}\n\nfunction findOtherInnerSegmentNode(g, v) {\n  if (g.node(v).dummy) {\n    return _.find(g.predecessors(v), function (u) {\n      return g.node(u).dummy;\n    });\n  }\n}\n\nfunction addConflict(conflicts, v, w) {\n  if (v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n\n  var conflictsV = conflicts[v];\n  if (!conflictsV) {\n    conflicts[v] = conflictsV = {};\n  }\n  conflictsV[w] = true;\n}\n\nfunction hasConflict(conflicts, v, w) {\n  if (v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n  return _.has(conflicts[v], w);\n}\n\n/*\n * Try to align nodes into vertical \"blocks\" where possible. This algorithm\n * attempts to align a node with one of its median neighbors. If the edge\n * connecting a neighbor is a type-1 conflict then we ignore that possibility.\n * If a previous node has already formed a block with a node after the node\n * we're trying to form a block with, we also ignore that possibility - our\n * blocks would be split in that scenario.\n */\nfunction verticalAlignment(g, layering, conflicts, neighborFn) {\n  var root = {},\n    align = {},\n    pos = {};\n\n  // We cache the position here based on the layering because the graph and\n  // layering may be out of sync. The layering matrix is manipulated to\n  // generate different extreme alignments.\n  _.forEach(layering, function (layer) {\n    _.forEach(layer, function (v, order) {\n      root[v] = v;\n      align[v] = v;\n      pos[v] = order;\n    });\n  });\n\n  _.forEach(layering, function (layer) {\n    var prevIdx = -1;\n    _.forEach(layer, function (v) {\n      var ws = neighborFn(v);\n      if (ws.length) {\n        ws = _.sortBy(ws, function (w) {\n          return pos[w];\n        });\n        var mp = (ws.length - 1) / 2;\n        for (var i = Math.floor(mp), il = Math.ceil(mp); i <= il; ++i) {\n          var w = ws[i];\n          if (align[v] === v && prevIdx < pos[w] && !hasConflict(conflicts, v, w)) {\n            align[w] = v;\n            align[v] = root[v] = root[w];\n            prevIdx = pos[w];\n          }\n        }\n      }\n    });\n  });\n\n  return { root: root, align: align };\n}\n\nfunction horizontalCompaction(g, layering, root, align, reverseSep) {\n  // This portion of the algorithm differs from BK due to a number of problems.\n  // Instead of their algorithm we construct a new block graph and do two\n  // sweeps. The first sweep places blocks with the smallest possible\n  // coordinates. The second sweep removes unused space by moving blocks to the\n  // greatest coordinates without violating separation.\n  var xs = {},\n    blockG = buildBlockGraph(g, layering, root, reverseSep),\n    borderType = reverseSep ? 'borderLeft' : 'borderRight';\n\n  function iterate(setXsFunc, nextNodesFunc) {\n    var stack = blockG.nodes();\n    var elem = stack.pop();\n    var visited = {};\n    while (elem) {\n      if (visited[elem]) {\n        setXsFunc(elem);\n      } else {\n        visited[elem] = true;\n        stack.push(elem);\n        stack = stack.concat(nextNodesFunc(elem));\n      }\n\n      elem = stack.pop();\n    }\n  }\n\n  // First pass, assign smallest coordinates\n  function pass1(elem) {\n    xs[elem] = blockG.inEdges(elem).reduce(function (acc, e) {\n      return Math.max(acc, xs[e.v] + blockG.edge(e));\n    }, 0);\n  }\n\n  // Second pass, assign greatest coordinates\n  function pass2(elem) {\n    var min = blockG.outEdges(elem).reduce(function (acc, e) {\n      return Math.min(acc, xs[e.w] - blockG.edge(e));\n    }, Number.POSITIVE_INFINITY);\n\n    var node = g.node(elem);\n    if (min !== Number.POSITIVE_INFINITY && node.borderType !== borderType) {\n      xs[elem] = Math.max(xs[elem], min);\n    }\n  }\n\n  iterate(pass1, blockG.predecessors.bind(blockG));\n  iterate(pass2, blockG.successors.bind(blockG));\n\n  // Assign x coordinates to all nodes\n  _.forEach(align, function (v) {\n    xs[v] = xs[root[v]];\n  });\n\n  return xs;\n}\n\nfunction buildBlockGraph(g, layering, root, reverseSep) {\n  var blockGraph = new Graph(),\n    graphLabel = g.graph(),\n    sepFn = sep(graphLabel.nodesep, graphLabel.edgesep, reverseSep);\n\n  _.forEach(layering, function (layer) {\n    var u;\n    _.forEach(layer, function (v) {\n      var vRoot = root[v];\n      blockGraph.setNode(vRoot);\n      if (u) {\n        var uRoot = root[u],\n          prevMax = blockGraph.edge(uRoot, vRoot);\n        blockGraph.setEdge(uRoot, vRoot, Math.max(sepFn(g, v, u), prevMax || 0));\n      }\n      u = v;\n    });\n  });\n\n  return blockGraph;\n}\n\n/*\n * Returns the alignment that has the smallest width of the given alignments.\n */\nfunction findSmallestWidthAlignment(g, xss) {\n  return _.minBy(_.values(xss), function (xs) {\n    var max = Number.NEGATIVE_INFINITY;\n    var min = Number.POSITIVE_INFINITY;\n\n    _.forIn(xs, function (x, v) {\n      var halfWidth = width(g, v) / 2;\n\n      max = Math.max(x + halfWidth, max);\n      min = Math.min(x - halfWidth, min);\n    });\n\n    return max - min;\n  });\n}\n\n/*\n * Align the coordinates of each of the layout alignments such that\n * left-biased alignments have their minimum coordinate at the same point as\n * the minimum coordinate of the smallest width alignment and right-biased\n * alignments have their maximum coordinate at the same point as the maximum\n * coordinate of the smallest width alignment.\n */\nfunction alignCoordinates(xss, alignTo) {\n  var alignToVals = _.values(alignTo),\n    alignToMin = _.min(alignToVals),\n    alignToMax = _.max(alignToVals);\n\n  _.forEach(['u', 'd'], function (vert) {\n    _.forEach(['l', 'r'], function (horiz) {\n      var alignment = vert + horiz,\n        xs = xss[alignment],\n        delta;\n      if (xs === alignTo) return;\n\n      var xsVals = _.values(xs);\n      delta = horiz === 'l' ? alignToMin - _.min(xsVals) : alignToMax - _.max(xsVals);\n\n      if (delta) {\n        xss[alignment] = _.mapValues(xs, function (x) {\n          return x + delta;\n        });\n      }\n    });\n  });\n}\n\nfunction balance(xss, align) {\n  return _.mapValues(xss.ul, function (ignore, v) {\n    if (align) {\n      return xss[align.toLowerCase()][v];\n    } else {\n      var xs = _.sortBy(_.map(xss, v));\n      return (xs[1] + xs[2]) / 2;\n    }\n  });\n}\n\nfunction positionX(g) {\n  var layering = util.buildLayerMatrix(g);\n  var conflicts = _.merge(findType1Conflicts(g, layering), findType2Conflicts(g, layering));\n\n  var xss = {};\n  var adjustedLayering;\n  _.forEach(['u', 'd'], function (vert) {\n    adjustedLayering = vert === 'u' ? layering : _.values(layering).reverse();\n    _.forEach(['l', 'r'], function (horiz) {\n      if (horiz === 'r') {\n        adjustedLayering = _.map(adjustedLayering, function (inner) {\n          return _.values(inner).reverse();\n        });\n      }\n\n      var neighborFn = (vert === 'u' ? g.predecessors : g.successors).bind(g);\n      var align = verticalAlignment(g, adjustedLayering, conflicts, neighborFn);\n      var xs = horizontalCompaction(g, adjustedLayering, align.root, align.align, horiz === 'r');\n      if (horiz === 'r') {\n        xs = _.mapValues(xs, function (x) {\n          return -x;\n        });\n      }\n      xss[vert + horiz] = xs;\n    });\n  });\n\n  var smallestWidth = findSmallestWidthAlignment(g, xss);\n  alignCoordinates(xss, smallestWidth);\n  return balance(xss, g.graph().align);\n}\n\nfunction sep(nodeSep, edgeSep, reverseSep) {\n  return function (g, v, w) {\n    var vLabel = g.node(v);\n    var wLabel = g.node(w);\n    var sum = 0;\n    var delta;\n\n    sum += vLabel.width / 2;\n    if (_.has(vLabel, 'labelpos')) {\n      switch (vLabel.labelpos.toLowerCase()) {\n        case 'l':\n          delta = -vLabel.width / 2;\n          break;\n        case 'r':\n          delta = vLabel.width / 2;\n          break;\n      }\n    }\n    if (delta) {\n      sum += reverseSep ? delta : -delta;\n    }\n    delta = 0;\n\n    sum += (vLabel.dummy ? edgeSep : nodeSep) / 2;\n    sum += (wLabel.dummy ? edgeSep : nodeSep) / 2;\n\n    sum += wLabel.width / 2;\n    if (_.has(wLabel, 'labelpos')) {\n      switch (wLabel.labelpos.toLowerCase()) {\n        case 'l':\n          delta = wLabel.width / 2;\n          break;\n        case 'r':\n          delta = -wLabel.width / 2;\n          break;\n      }\n    }\n    if (delta) {\n      sum += reverseSep ? delta : -delta;\n    }\n    delta = 0;\n\n    return sum;\n  };\n}\n\nfunction width(g, v) {\n  return g.node(v).width;\n}\n","import * as acyclic from './acyclic.js';\nimport { layout } from './layout.js';\nimport * as normalize from './normalize.js';\nimport { rank } from './rank/index.js';\n\nexport { acyclic, normalize, rank, layout };\n"]}