{"version":3,"sources":["../navie.js"],"names":[],"mappings":"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","file":"navie.js","sourcesContent":["import Vue from \"vue\";\nimport MessagePublisher from \"messagePublisher\";\nimport vscode from \"vsCodeBridge\";\nimport handleAppMapMessages from \"handleAppMapMessages\";\nimport { default as plugin, VChatSearch } from \"@appland/components\";\n\nimport \"@appland/diagrams/dist/style.css\";\nimport \"highlight.js/styles/base16/snazzy.css\";\n\nexport function mountWebview() {\n  const messages = new MessagePublisher(vscode);\n\n  messages.on(\"init\", (initialData) => {\n    const app = new Vue({\n      el: \"#app\",\n      render(h) {\n        // follows https://github.com/getappmap/vscode-appland/blob/develop/web/src/chatSearchView.js\n        return h(VChatSearch, {\n          ref: \"ui\",\n          props: {\n            appmapRpcPort: initialData.appmapRpcPort,\n            savedFilters: initialData.savedFilters,\n            apiKey: initialData.apiKey,\n            mostRecentAppMaps: this.mostRecentAppMaps,\n            appmapYmlPresent: this.appmapYmlPresent,\n            targetAppmapData: initialData.targetAppmapData,\n            targetAppmapFsPath: initialData.targetAppmapFsPath,\n            editorType: \"intellij\",\n            useAnimation: initialData.useAnimation,\n            preselectedModelId: initialData.preselectedModelId,\n            threadId: initialData.threadId,\n            openNewChat() {\n              vscode.postMessage({ command: \"open-new-chat\" });\n            },\n          },\n        });\n      },\n      data: {\n        mostRecentAppMaps: initialData.mostRecentAppMaps || [],\n        appmapYmlPresent: initialData.appmapYmlPresent,\n      },\n      methods: {\n        getAppMapState() {\n          return this.$refs.ui.getAppMapState();\n        },\n        setAppMapState(state) {\n          this.$refs.ui.setAppMapState(state);\n        },\n        updateFilters(updatedSavedFilters) {\n          this.$refs.ui.updateFilters(updatedSavedFilters);\n        },\n      },\n      mounted() {\n        this.$root.$once('on-thread-subscription', () => {\n          if (initialData.codeSelection)\n            this.$refs.ui.includeCodeSelection(initialData.codeSelection);\n          if (initialData.suggestion) this.$refs.ui.sendMessage(initialData.suggestion.prompt);\n        });\n      },\n    });\n\n    handleAppMapMessages(app, vscode, messages);\n\n    messages.on(\"pin-files\", (props) => {\n      const { requests } = props;\n      app.$root.$emit(\"pin-files\", requests);\n    });\n\n    messages.on(\"update\", (props) => {\n      Object.entries(props)\n        .filter(([key]) => key !== \"type\")\n        .forEach(([key, value]) => {\n          if (key in app.$data && app[key] !== value) {\n            app[key] = value;\n          }\n        });\n    });\n\n    messages\n      .on(\"navie-restarting\", () => {\n        app.$refs.ui.onNavieRestarting();\n      })\n      .on(\"navie-restarted\", async () => {\n        /* eslint-disable no-console */\n        app.$refs.ui.loadNavieConfig().catch((e) => console.error(e));\n        app.$refs.ui.loadModelConfig().catch((e) => console.error(e));\n\n        // Request the model list a few times to make sure it has time to fully load\n        for (let i = 0; i < 5; i += 1) {\n          app.$refs.ui.initializeModels().catch((e) => console.error(e));\n\n          // eslint-disable-next-line no-await-in-loop\n          await new Promise((resolve) => setTimeout(resolve, (i + 1) * 2000));\n        }\n        /* eslint-enable no-console */\n      });\n\n    app.$on(\"choose-files-to-pin\", () => vscode.postMessage({ command: \"choose-files-to-pin\" }));\n    app.$on(\"click-link\", (link) => vscode.postMessage({ command: \"click-link\", link }));\n    app.$on(\"open-install-instructions\", () => vscode.postMessage({ command: \"open-install-instructions\" }));\n    app.$on(\"open-record-instructions\", () => vscode.postMessage({ command: \"open-record-instructions\" }));\n    app.$on(\"open-appmap\", (path) => vscode.postMessage({ command: \"open-appmap\", path }));\n    app.$on(\"open-location\", (path, directory) => vscode.postMessage({ command: \"open-location\", path, directory }));\n    app.$on(\"save-message\", (message) => vscode.postMessage({ command: \"save-message\", ...message }));\n    app.$on(\"select-llm-option\", (choice) => vscode.postMessage({ command: \"select-llm-option\", choice }));\n    app.$on(\"show-appmap-tree\", () => vscode.postMessage({ command: \"show-appmap-tree\" }));\n    app.$on(\"change-model-config\", ({ key, value, secret }) =>\n      vscode.postMessage({ command: \"change-model-config\", key, value, secret })\n    );\n    app.$on(\"select-model\", ({ provider, id }) =>\n      vscode.postMessage({ command: \"select-model\", id: `${provider}:${id}` })\n    );\n  });\n\n  vscode.postMessage({ command: \"ready\" });\n}\n\nVue.use(plugin);\nmountWebview();"]}