{"version":3,"sources":["../node_modules/mermaid/dist/svgDrawCommon-08f97a94.js"],"names":["require_dist"],"mappings":"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","file":"chunk-JOGDEIJ2.js","sourcesContent":["import { sanitizeUrl } from \"@braintree/sanitize-url\";\nimport { J as lineBreakRegex } from \"./mermaid-b5860b54.js\";\nconst drawRect = (element, rectData) => {\n  const rectElement = element.append(\"rect\");\n  rectElement.attr(\"x\", rectData.x);\n  rectElement.attr(\"y\", rectData.y);\n  rectElement.attr(\"fill\", rectData.fill);\n  rectElement.attr(\"stroke\", rectData.stroke);\n  rectElement.attr(\"width\", rectData.width);\n  rectElement.attr(\"height\", rectData.height);\n  if (rectData.name) {\n    rectElement.attr(\"name\", rectData.name);\n  }\n  rectData.rx !== void 0 && rectElement.attr(\"rx\", rectData.rx);\n  rectData.ry !== void 0 && rectElement.attr(\"ry\", rectData.ry);\n  if (rectData.attrs !== void 0) {\n    for (const attrKey in rectData.attrs) {\n      rectElement.attr(attrKey, rectData.attrs[attrKey]);\n    }\n  }\n  rectData.class !== void 0 && rectElement.attr(\"class\", rectData.class);\n  return rectElement;\n};\nconst drawBackgroundRect = (element, bounds) => {\n  const rectData = {\n    x: bounds.startx,\n    y: bounds.starty,\n    width: bounds.stopx - bounds.startx,\n    height: bounds.stopy - bounds.starty,\n    fill: bounds.fill,\n    stroke: bounds.stroke,\n    class: \"rect\"\n  };\n  const rectElement = drawRect(element, rectData);\n  rectElement.lower();\n};\nconst drawText = (element, textData) => {\n  const nText = textData.text.replace(lineBreakRegex, \" \");\n  const textElem = element.append(\"text\");\n  textElem.attr(\"x\", textData.x);\n  textElem.attr(\"y\", textData.y);\n  textElem.attr(\"class\", \"legend\");\n  textElem.style(\"text-anchor\", textData.anchor);\n  textData.class !== void 0 && textElem.attr(\"class\", textData.class);\n  const tspan = textElem.append(\"tspan\");\n  tspan.attr(\"x\", textData.x + textData.textMargin * 2);\n  tspan.text(nText);\n  return textElem;\n};\nconst drawImage = (elem, x, y, link) => {\n  const imageElement = elem.append(\"image\");\n  imageElement.attr(\"x\", x);\n  imageElement.attr(\"y\", y);\n  const sanitizedLink = sanitizeUrl(link);\n  imageElement.attr(\"xlink:href\", sanitizedLink);\n};\nconst drawEmbeddedImage = (element, x, y, link) => {\n  const imageElement = element.append(\"use\");\n  imageElement.attr(\"x\", x);\n  imageElement.attr(\"y\", y);\n  const sanitizedLink = sanitizeUrl(link);\n  imageElement.attr(\"xlink:href\", `#${sanitizedLink}`);\n};\nconst getNoteRect = () => {\n  const noteRectData = {\n    x: 0,\n    y: 0,\n    width: 100,\n    height: 100,\n    fill: \"#EDF2AE\",\n    stroke: \"#666\",\n    anchor: \"start\",\n    rx: 0,\n    ry: 0\n  };\n  return noteRectData;\n};\nconst getTextObj = () => {\n  const testObject = {\n    x: 0,\n    y: 0,\n    width: 100,\n    height: 100,\n    \"text-anchor\": \"start\",\n    style: \"#666\",\n    textMargin: 0,\n    rx: 0,\n    ry: 0,\n    tspan: true\n  };\n  return testObject;\n};\nexport {\n  drawBackgroundRect as a,\n  drawEmbeddedImage as b,\n  drawImage as c,\n  drawRect as d,\n  getTextObj as e,\n  drawText as f,\n  getNoteRect as g\n};\n"]}