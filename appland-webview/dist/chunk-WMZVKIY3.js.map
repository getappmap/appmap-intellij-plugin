{"version":3,"sources":["../node_modules/dagre-d3-es/src/dagre-js/util.js","../node_modules/dagre-d3-es/src/dagre-js/label/add-html-label.js","../node_modules/mermaid/dist/styles-c10674c1.js"],"names":[],"mappings":";;;;;;AAAA,iBAAA,EAAA,CAAA;AASA,SAAS,UAAA,CAAW,GAAG,CAAG,EAAA;AACxB,EAAA,OAAO,CAAC,CAAC,CAAE,CAAA,QAAA,CAAS,CAAC,CAAE,CAAA,MAAA,CAAA;AACzB,CAAA;AAEA,SAAS,SAAS,CAAG,EAAA;AACnB,EAAA,OAAO,QAAS,CAAA,CAAA,CAAE,CAAC,CAAA,GAAI,GAAM,GAAA,QAAA,CAAS,CAAE,CAAA,CAAC,CAAI,GAAA,GAAA,GAAM,QAAS,CAAA,CAAA,CAAE,IAAI,CAAA,CAAA;AACpE,CAAA;AAEA,IAAI,QAAW,GAAA,IAAA,CAAA;AACf,SAAS,SAAS,GAAK,EAAA;AACrB,EAAA,OAAO,MAAM,MAAO,CAAA,GAAG,EAAE,OAAQ,CAAA,QAAA,EAAU,KAAK,CAAI,GAAA,EAAA,CAAA;AACtD,CAAA;AAEA,SAAS,UAAA,CAAW,KAAK,OAAS,EAAA;AAChC,EAAA,IAAI,OAAS,EAAA;AACX,IAAI,GAAA,CAAA,IAAA,CAAK,SAAS,OAAO,CAAA,CAAA;AAAA,GAC3B;AACF,CAAA;AAEA,SAAS,UAAA,CAAW,GAAK,EAAA,OAAA,EAAS,YAAc,EAAA;AAC9C,EAAA,IAAI,OAAS,EAAA;AACX,IAAI,GAAA,CAAA,IAAA,CAAK,OAAS,EAAA,OAAO,CAAE,CAAA,IAAA,CAAK,OAAS,EAAA,YAAA,GAAe,GAAM,GAAA,GAAA,CAAI,IAAK,CAAA,OAAO,CAAC,CAAA,CAAA;AAAA,GACjF;AACF,CAAA;AAEA,SAAS,eAAA,CAAgB,WAAW,CAAG,EAAA;AACrC,EAAI,IAAA,KAAA,GAAQ,EAAE,KAAM,EAAA,CAAA;AAEpB,EAAM,IAAA,qBAAA,CAAc,KAAK,CAAG,EAAA;AAC1B,IAAA,IAAI,aAAa,KAAM,CAAA,UAAA,CAAA;AACvB,IAAM,IAAA,kBAAA,CAAW,UAAU,CAAG,EAAA;AAC5B,MAAA,OAAO,WAAW,SAAS,CAAA,CAAA;AAAA,KAC7B;AAAA,GACF;AAEA,EAAO,OAAA,SAAA,CAAA;AACT,CAAA;;;AC7CA,iBAAA,EAAA,CAAA;AAIA,SAAS,YAAA,CAAa,MAAM,IAAM,EAAA;AAChC,EAAA,IAAI,KAAK,IAAK,CAAA,MAAA,CAAO,eAAe,CAAE,CAAA,IAAA,CAAK,SAAS,QAAQ,CAAA,CAAA;AAE5D,EAAI,IAAA,GAAA,GAAM,EAAG,CAAA,MAAA,CAAO,WAAW,CAAA,CAAA;AAC/B,EAAI,GAAA,CAAA,IAAA,CAAK,SAAS,8BAA8B,CAAA,CAAA;AAEhD,EAAA,IAAI,QAAQ,IAAK,CAAA,KAAA,CAAA;AACjB,EAAA,QAAQ,OAAO,KAAO;AAAA,IACpB,KAAK,UAAA;AACH,MAAA,GAAA,CAAI,OAAO,KAAK,CAAA,CAAA;AAChB,MAAA,MAAA;AAAA,IACF,KAAK,QAAA;AAEH,MAAA,GAAA,CAAI,OAAO,WAAY;AACrB,QAAO,OAAA,KAAA,CAAA;AAAA,OACR,CAAA,CAAA;AACD,MAAA,MAAA;AAAA,IACF;AACE,MAAA,GAAA,CAAI,KAAK,KAAK,CAAA,CAAA;AAAA,GAClB;AAEA,EAAK,UAAA,CAAW,GAAK,EAAA,IAAA,CAAK,UAAU,CAAA,CAAA;AACpC,EAAI,GAAA,CAAA,KAAA,CAAM,WAAW,cAAc,CAAA,CAAA;AAEnC,EAAI,GAAA,CAAA,KAAA,CAAM,eAAe,QAAQ,CAAA,CAAA;AAEjC,EAAA,IAAI,MAAS,GAAA,GAAA,CAAI,IAAK,EAAA,CAAE,qBAAsB,EAAA,CAAA;AAC9C,EAAG,EAAA,CAAA,IAAA,CAAK,SAAS,MAAO,CAAA,KAAK,EAAE,IAAK,CAAA,QAAA,EAAU,OAAO,MAAM,CAAA,CAAA;AAE3D,EAAO,OAAA,EAAA,CAAA;AACT,CAAA;;;AClCA,iBAAA,EAAA,CAAA;AAMA,IAAM,OAAO,EAAC,CAAA;AACd,IAAM,OAAA,GAAU,SAAS,GAAK,EAAA;AAC5B,EAAM,MAAA,IAAA,GAAO,MAAO,CAAA,IAAA,CAAK,GAAG,CAAA,CAAA;AAC5B,EAAA,KAAA,MAAW,OAAO,IAAM,EAAA;AACtB,IAAK,IAAA,CAAA,GAAG,CAAI,GAAA,GAAA,CAAI,GAAG,CAAA,CAAA;AAAA,GACrB;AACF,CAAA,CAAA;AACA,IAAM,cAAc,eAAe,IAAA,EAAM,GAAG,KAAO,EAAA,IAAA,EAAM,KAAK,OAAS,EAAA;AACrE,EAAA,MAAM,GAAM,GAAA,IAAA,CAAK,MAAO,CAAA,CAAA,KAAA,EAAQ,KAAK,CAAI,EAAA,CAAA,CAAA,CAAA;AACzC,EAAM,MAAA,IAAA,GAAO,MAAO,CAAA,IAAA,CAAK,IAAI,CAAA,CAAA;AAC7B,EAAA,KAAA,MAAW,MAAM,IAAM,EAAA;AACrB,IAAM,MAAA,MAAA,GAAS,KAAK,EAAE,CAAA,CAAA;AACtB,IAAA,IAAI,QAAW,GAAA,SAAA,CAAA;AACf,IAAI,IAAA,MAAA,CAAO,OAAQ,CAAA,MAAA,GAAS,CAAG,EAAA;AAC7B,MAAW,QAAA,GAAA,MAAA,CAAO,OAAQ,CAAA,IAAA,CAAK,GAAG,CAAA,CAAA;AAAA,KACpC;AACA,IAAA,QAAA,GAAW,QAAW,GAAA,kBAAA,CAAA;AACtB,IAAM,MAAA,MAAA,GAAS,kBAAmB,CAAA,MAAA,CAAO,MAAM,CAAA,CAAA;AAC/C,IAAA,IAAI,aAAa,MAAO,CAAA,IAAA,KAAS,KAAS,CAAA,GAAA,MAAA,CAAO,OAAO,MAAO,CAAA,EAAA,CAAA;AAC/D,IAAI,IAAA,UAAA,CAAA;AACJ,IAAA,KAAA,CAAI,IAAK,CAAA,QAAA,EAAU,MAAQ,EAAA,MAAA,CAAO,SAAS,CAAA,CAAA;AAC3C,IAAI,IAAA,MAAA,CAAO,cAAc,UAAY,EAAA;AACnC,MAAA,KAAA,CAAI,IAAK,CAAA,QAAA,EAAU,MAAQ,EAAA,MAAA,CAAO,SAAS,CAAA,CAAA;AAAA,KACtC,MAAA;AACL,MAAA,IAAI,QAAS,CAAA,SAAA,EAAY,CAAA,SAAA,CAAU,UAAU,CAAG,EAAA;AAC9C,QAAA,MAAM,IAAO,GAAA;AAAA,UACX,KAAO,EAAA,UAAA;AAAA,SACT,CAAA;AACA,QAAA,UAAA,GAAa,YAAa,CAAA,GAAA,EAAK,IAAI,CAAA,CAAE,IAAK,EAAA,CAAA;AAC1C,QAAW,UAAA,CAAA,UAAA,CAAW,YAAY,UAAU,CAAA,CAAA;AAAA,OACvC,MAAA;AACL,QAAA,MAAM,QAAW,GAAA,GAAA,CAAI,eAAgB,CAAA,4BAAA,EAA8B,MAAM,CAAA,CAAA;AACzE,QAAA,QAAA,CAAS,aAAa,OAAS,EAAA,MAAA,CAAO,WAAW,OAAQ,CAAA,QAAA,EAAU,OAAO,CAAC,CAAA,CAAA;AAC3E,QAAA,MAAM,IAAO,GAAA,UAAA,CAAW,KAAM,CAAA,QAAA,CAAO,cAAc,CAAA,CAAA;AACnD,QAAA,KAAA,MAAW,OAAO,IAAM,EAAA;AACtB,UAAA,MAAM,KAAQ,GAAA,GAAA,CAAI,eAAgB,CAAA,4BAAA,EAA8B,OAAO,CAAA,CAAA;AACvE,UAAM,KAAA,CAAA,cAAA,CAAe,sCAAwC,EAAA,WAAA,EAAa,UAAU,CAAA,CAAA;AACpF,UAAM,KAAA,CAAA,YAAA,CAAa,MAAM,KAAK,CAAA,CAAA;AAC9B,UAAM,KAAA,CAAA,YAAA,CAAa,KAAK,GAAG,CAAA,CAAA;AAC3B,UAAA,KAAA,CAAM,WAAc,GAAA,GAAA,CAAA;AACpB,UAAA,QAAA,CAAS,YAAY,KAAK,CAAA,CAAA;AAAA,SAC5B;AACA,QAAa,UAAA,GAAA,QAAA,CAAA;AAAA,OACf;AAAA,KACF;AACA,IAAA,IAAI,MAAS,GAAA,CAAA,CAAA;AACb,IAAA,IAAI,MAAS,GAAA,EAAA,CAAA;AACb,IAAA,QAAQ,OAAO,IAAM;AAAA,MACnB,KAAK,OAAA;AACH,QAAS,MAAA,GAAA,CAAA,CAAA;AACT,QAAS,MAAA,GAAA,MAAA,CAAA;AACT,QAAA,MAAA;AAAA,MACF,KAAK,QAAA;AACH,QAAS,MAAA,GAAA,MAAA,CAAA;AACT,QAAA,MAAA;AAAA,MACF,KAAK,SAAA;AACH,QAAS,MAAA,GAAA,UAAA,CAAA;AACT,QAAA,MAAA;AAAA,MACF,KAAK,SAAA;AACH,QAAS,MAAA,GAAA,SAAA,CAAA;AACT,QAAA,MAAA;AAAA,MACF,KAAK,KAAA;AACH,QAAS,MAAA,GAAA,qBAAA,CAAA;AACT,QAAA,MAAA;AAAA,MACF,KAAK,YAAA;AACH,QAAS,MAAA,GAAA,YAAA,CAAA;AACT,QAAA,MAAA;AAAA,MACF,KAAK,WAAA;AACH,QAAS,MAAA,GAAA,WAAA,CAAA;AACT,QAAA,MAAA;AAAA,MACF,KAAK,WAAA;AACH,QAAS,MAAA,GAAA,WAAA,CAAA;AACT,QAAA,MAAA;AAAA,MACF,KAAK,eAAA;AACH,QAAS,MAAA,GAAA,eAAA,CAAA;AACT,QAAA,MAAA;AAAA,MACF,KAAK,WAAA;AACH,QAAS,MAAA,GAAA,qBAAA,CAAA;AACT,QAAA,MAAA;AAAA,MACF,KAAK,QAAA;AACH,QAAS,MAAA,GAAA,QAAA,CAAA;AACT,QAAA,MAAA;AAAA,MACF,KAAK,SAAA;AACH,QAAS,MAAA,GAAA,SAAA,CAAA;AACT,QAAA,MAAA;AAAA,MACF,KAAK,SAAA;AACH,QAAS,MAAA,GAAA,SAAA,CAAA;AACT,QAAA,MAAA;AAAA,MACF,KAAK,YAAA;AACH,QAAS,MAAA,GAAA,YAAA,CAAA;AACT,QAAA,MAAA;AAAA,MACF,KAAK,UAAA;AACH,QAAS,MAAA,GAAA,UAAA,CAAA;AACT,QAAA,MAAA;AAAA,MACF,KAAK,OAAA;AACH,QAAS,MAAA,GAAA,MAAA,CAAA;AACT,QAAA,MAAA;AAAA,MACF,KAAK,cAAA;AACH,QAAS,MAAA,GAAA,cAAA,CAAA;AACT,QAAA,MAAA;AAAA,MACF;AACE,QAAS,MAAA,GAAA,MAAA,CAAA;AAAA,KACb;AACA,IAAA,MAAM,SAAY,GAAA,MAAM,WAAY,CAAA,UAAA,EAAY,WAAW,CAAA,CAAA;AAC3D,IAAE,CAAA,CAAA,OAAA,CAAQ,OAAO,EAAI,EAAA;AAAA,MACnB,YAAY,MAAO,CAAA,UAAA;AAAA,MACnB,KAAO,EAAA,MAAA;AAAA,MACP,SAAA;AAAA,MACA,WAAW,MAAO,CAAA,SAAA;AAAA,MAClB,EAAI,EAAA,MAAA;AAAA,MACJ,EAAI,EAAA,MAAA;AAAA,MACJ,KAAO,EAAA,QAAA;AAAA,MACP,OAAO,MAAO,CAAA,KAAA;AAAA,MACd,IAAI,MAAO,CAAA,EAAA;AAAA,MACX,MAAM,MAAO,CAAA,IAAA;AAAA,MACb,YAAY,MAAO,CAAA,UAAA;AAAA,MACnB,SAAS,OAAQ,CAAA,EAAA,CAAG,UAAW,CAAA,MAAA,CAAO,EAAE,CAAK,IAAA,EAAA;AAAA,MAC7C,KAAO,EAAA,OAAA,CAAQ,EAAG,CAAA,WAAA,CAAY,OAAO,EAAE,CAAA;AAAA,MACvC,cAAc,MAAO,CAAA,YAAA;AAAA,MACrB,KAAO,EAAA,MAAA,CAAO,IAAS,KAAA,OAAA,GAAU,GAAM,GAAA,KAAA,CAAA;AAAA,MACvC,KAAK,MAAO,CAAA,GAAA;AAAA,MACZ,MAAM,MAAO,CAAA,IAAA;AAAA,MACb,OAAO,MAAO,CAAA,KAAA;AAAA,MACd,OAAA,EAAS,SAAU,EAAA,CAAE,SAAU,CAAA,OAAA;AAAA,KAChC,CAAA,CAAA;AACD,IAAA,KAAA,CAAI,KAAK,SAAW,EAAA;AAAA,MAClB,YAAY,MAAO,CAAA,UAAA;AAAA,MACnB,WAAW,MAAO,CAAA,SAAA;AAAA,MAClB,KAAO,EAAA,MAAA;AAAA,MACP,SAAA;AAAA,MACA,EAAI,EAAA,MAAA;AAAA,MACJ,EAAI,EAAA,MAAA;AAAA,MACJ,KAAO,EAAA,QAAA;AAAA,MACP,OAAO,MAAO,CAAA,KAAA;AAAA,MACd,IAAI,MAAO,CAAA,EAAA;AAAA,MACX,KAAO,EAAA,OAAA,CAAQ,EAAG,CAAA,WAAA,CAAY,OAAO,EAAE,CAAA;AAAA,MACvC,KAAO,EAAA,MAAA,CAAO,IAAS,KAAA,OAAA,GAAU,GAAM,GAAA,KAAA,CAAA;AAAA,MACvC,MAAM,MAAO,CAAA,IAAA;AAAA,MACb,KAAK,MAAO,CAAA,GAAA;AAAA,MACZ,OAAO,MAAO,CAAA,KAAA;AAAA,MACd,OAAA,EAAS,SAAU,EAAA,CAAE,SAAU,CAAA,OAAA;AAAA,KAChC,CAAA,CAAA;AAAA,GACH;AACF,CAAA,CAAA;AACA,IAAM,QAAW,GAAA,eAAe,KAAO,EAAA,CAAA,EAAG,OAAS,EAAA;AACjD,EAAI,KAAA,CAAA,IAAA,CAAK,kBAAkB,KAAK,CAAA,CAAA;AAChC,EAAA,IAAI,GAAM,GAAA,CAAA,CAAA;AACV,EAAA,IAAI,YAAY,EAAC,CAAA;AACjB,EAAI,IAAA,YAAA,CAAA;AACJ,EAAI,IAAA,iBAAA,CAAA;AACJ,EAAI,IAAA,KAAA,CAAM,iBAAiB,KAAQ,CAAA,EAAA;AACjC,IAAM,MAAA,aAAA,GAAgB,kBAAmB,CAAA,KAAA,CAAM,YAAY,CAAA,CAAA;AAC3D,IAAA,YAAA,GAAe,aAAc,CAAA,KAAA,CAAA;AAC7B,IAAA,iBAAA,GAAoB,aAAc,CAAA,UAAA,CAAA;AAAA,GACpC;AACA,EAAA,KAAA,MAAW,QAAQ,KAAO,EAAA;AACxB,IAAA,GAAA,EAAA,CAAA;AACA,IAAA,MAAM,UAAa,GAAA,IAAA,GAAO,IAAK,CAAA,KAAA,GAAQ,MAAM,IAAK,CAAA,GAAA,CAAA;AAClD,IAAI,IAAA,SAAA,CAAU,UAAU,CAAA,KAAM,KAAQ,CAAA,EAAA;AACpC,MAAA,SAAA,CAAU,UAAU,CAAI,GAAA,CAAA,CAAA;AACxB,MAAA,KAAA,CAAI,IAAK,CAAA,iBAAA,EAAmB,UAAY,EAAA,SAAA,CAAU,UAAU,CAAC,CAAA,CAAA;AAAA,KACxD,MAAA;AACL,MAAA,SAAA,CAAU,UAAU,CAAA,EAAA,CAAA;AACpB,MAAA,KAAA,CAAI,IAAK,CAAA,iBAAA,EAAmB,UAAY,EAAA,SAAA,CAAU,UAAU,CAAC,CAAA,CAAA;AAAA,KAC/D;AACA,IAAA,IAAI,MAAS,GAAA,UAAA,GAAa,GAAM,GAAA,SAAA,CAAU,UAAU,CAAA,CAAA;AACpD,IAAA,KAAA,CAAI,KAAK,iCAAmC,EAAA,UAAA,EAAY,MAAQ,EAAA,SAAA,CAAU,UAAU,CAAC,CAAA,CAAA;AACrF,IAAM,MAAA,aAAA,GAAgB,QAAQ,IAAK,CAAA,KAAA,CAAA;AACnC,IAAM,MAAA,WAAA,GAAc,QAAQ,IAAK,CAAA,GAAA,CAAA;AACjC,IAAA,MAAM,QAAW,GAAA,EAAE,KAAO,EAAA,EAAA,EAAI,YAAY,EAAG,EAAA,CAAA;AAC7C,IAAS,QAAA,CAAA,MAAA,GAAS,KAAK,MAAU,IAAA,CAAA,CAAA;AACjC,IAAI,IAAA,IAAA,CAAK,SAAS,YAAc,EAAA;AAC9B,MAAA,QAAA,CAAS,SAAY,GAAA,MAAA,CAAA;AAAA,KAChB,MAAA;AACL,MAAA,QAAA,CAAS,SAAY,GAAA,QAAA,CAAA;AAAA,KACvB;AACA,IAAA,QAAA,CAAS,cAAiB,GAAA,YAAA,CAAA;AAC1B,IAAA,QAAA,CAAS,YAAe,GAAA,YAAA,CAAA;AACxB,IAAA,QAAQ,KAAK,IAAM;AAAA,MACjB,KAAK,oBAAA;AACH,QAAA,QAAA,CAAS,cAAiB,GAAA,aAAA,CAAA;AAAA,MAC5B,KAAK,aAAA;AACH,QAAA,QAAA,CAAS,YAAe,GAAA,aAAA,CAAA;AACxB,QAAA,MAAA;AAAA,MACF,KAAK,oBAAA;AACH,QAAA,QAAA,CAAS,cAAiB,GAAA,aAAA,CAAA;AAAA,MAC5B,KAAK,aAAA;AACH,QAAA,QAAA,CAAS,YAAe,GAAA,aAAA,CAAA;AACxB,QAAA,MAAA;AAAA,MACF,KAAK,qBAAA;AACH,QAAA,QAAA,CAAS,cAAiB,GAAA,cAAA,CAAA;AAAA,MAC5B,KAAK,cAAA;AACH,QAAA,QAAA,CAAS,YAAe,GAAA,cAAA,CAAA;AACxB,QAAA,MAAA;AAAA,KACJ;AACA,IAAA,IAAI,KAAQ,GAAA,EAAA,CAAA;AACZ,IAAA,IAAI,UAAa,GAAA,EAAA,CAAA;AACjB,IAAA,QAAQ,KAAK,MAAQ;AAAA,MACnB,KAAK,QAAA;AACH,QAAQ,KAAA,GAAA,YAAA,CAAA;AACR,QAAA,IAAI,iBAAiB,KAAQ,CAAA,EAAA;AAC3B,UAAQ,KAAA,GAAA,YAAA,CAAA;AAAA,SACV;AACA,QAAA,IAAI,sBAAsB,KAAQ,CAAA,EAAA;AAChC,UAAa,UAAA,GAAA,iBAAA,CAAA;AAAA,SACf;AACA,QAAA,QAAA,CAAS,SAAY,GAAA,QAAA,CAAA;AACrB,QAAA,QAAA,CAAS,OAAU,GAAA,OAAA,CAAA;AACnB,QAAA,MAAA;AAAA,MACF,KAAK,QAAA;AACH,QAAA,QAAA,CAAS,SAAY,GAAA,QAAA,CAAA;AACrB,QAAA,QAAA,CAAS,OAAU,GAAA,QAAA,CAAA;AACnB,QAAA,QAAA,CAAS,KAAQ,GAAA,gDAAA,CAAA;AACjB,QAAA,MAAA;AAAA,MACF,KAAK,OAAA;AACH,QAAA,QAAA,CAAS,SAAY,GAAA,OAAA,CAAA;AACrB,QAAA,QAAA,CAAS,OAAU,GAAA,OAAA,CAAA;AACnB,QAAA,QAAA,CAAS,KAAQ,GAAA,gCAAA,CAAA;AACjB,QAAA,MAAA;AAAA,MACF,KAAK,WAAA;AACH,QAAA,QAAA,CAAS,SAAY,GAAA,WAAA,CAAA;AACrB,QAAA,QAAA,CAAS,OAAU,GAAA,OAAA,CAAA;AACnB,QAAA,QAAA,CAAS,KAAQ,GAAA,4BAAA,CAAA;AACjB,QAAA,MAAA;AAAA,KACJ;AACA,IAAI,IAAA,IAAA,CAAK,UAAU,KAAQ,CAAA,EAAA;AACzB,MAAM,MAAA,MAAA,GAAS,kBAAmB,CAAA,IAAA,CAAK,KAAK,CAAA,CAAA;AAC5C,MAAA,KAAA,GAAQ,MAAO,CAAA,KAAA,CAAA;AACf,MAAA,UAAA,GAAa,MAAO,CAAA,UAAA,CAAA;AAAA,KACtB;AACA,IAAS,QAAA,CAAA,KAAA,GAAQ,SAAS,KAAS,IAAA,KAAA,CAAA;AACnC,IAAS,QAAA,CAAA,UAAA,GAAa,SAAS,UAAc,IAAA,UAAA,CAAA;AAC7C,IAAI,IAAA,IAAA,CAAK,gBAAgB,KAAQ,CAAA,EAAA;AAC/B,MAAA,QAAA,CAAS,KAAQ,GAAA,kBAAA,CAAmB,IAAK,CAAA,WAAA,EAAa,cAAW,CAAA,CAAA;AAAA,KACnE,MAAA,IAAW,KAAM,CAAA,kBAAA,KAAuB,KAAQ,CAAA,EAAA;AAC9C,MAAA,QAAA,CAAS,KAAQ,GAAA,kBAAA,CAAmB,KAAM,CAAA,kBAAA,EAAoB,cAAW,CAAA,CAAA;AAAA,KACpE,MAAA;AACL,MAAA,QAAA,CAAS,KAAQ,GAAA,kBAAA,CAAmB,IAAK,CAAA,KAAA,EAAO,cAAW,CAAA,CAAA;AAAA,KAC7D;AACA,IAAI,IAAA,IAAA,CAAK,SAAS,KAAQ,CAAA,EAAA;AACxB,MAAI,IAAA,IAAA,CAAK,UAAU,KAAQ,CAAA,EAAA;AACzB,QAAA,QAAA,CAAS,cAAiB,GAAA,YAAA,CAAA;AAAA,OAC5B;AAAA,KACK,MAAA;AACL,MAAA,QAAA,CAAS,cAAiB,GAAA,YAAA,CAAA;AAC1B,MAAA,QAAA,CAAS,QAAW,GAAA,GAAA,CAAA;AAAA,KACtB;AACA,IAAA,QAAA,CAAS,YAAY,IAAK,CAAA,SAAA,CAAA;AAC1B,IAAS,QAAA,CAAA,KAAA,GAAQ,MAAM,WAAA,CAAY,IAAK,CAAA,IAAA,CAAK,OAAQ,CAAA,QAAA,CAAO,cAAgB,EAAA,IAAI,CAAG,EAAA,SAAA,EAAW,CAAA,CAAA;AAC9F,IAAI,IAAA,IAAA,CAAK,UAAU,KAAQ,CAAA,EAAA;AACzB,MAAS,QAAA,CAAA,KAAA,GAAQ,SAAS,KAAS,IAAA,8CAAA,CAAA;AAAA,KACrC;AACA,IAAA,QAAA,CAAS,UAAa,GAAA,QAAA,CAAS,UAAW,CAAA,OAAA,CAAQ,UAAU,OAAO,CAAA,CAAA;AACnE,IAAA,QAAA,CAAS,EAAK,GAAA,MAAA,CAAA;AACd,IAAS,QAAA,CAAA,OAAA,GAAU,iBAAoB,GAAA,aAAA,GAAgB,GAAM,GAAA,WAAA,CAAA;AAC7D,IAAA,CAAA,CAAE,QAAQ,IAAK,CAAA,KAAA,EAAO,IAAK,CAAA,GAAA,EAAK,UAAU,GAAG,CAAA,CAAA;AAAA,GAC/C;AACF,CAAA,CAAA;AACA,IAAM,UAAA,GAAa,SAAS,IAAA,EAAM,OAAS,EAAA;AACzC,EAAO,OAAA,OAAA,CAAQ,GAAG,UAAW,EAAA,CAAA;AAC/B,CAAA,CAAA;AACA,IAAM,IAAO,GAAA,eAAe,IAAM,EAAA,EAAA,EAAI,UAAU,OAAS,EAAA;AACvD,EAAA,KAAA,CAAI,KAAK,mBAAmB,CAAA,CAAA;AAC5B,EAAI,IAAA,GAAA,GAAM,OAAQ,CAAA,EAAA,CAAG,YAAa,EAAA,CAAA;AAClC,EAAA,IAAI,QAAQ,KAAQ,CAAA,EAAA;AAClB,IAAM,GAAA,GAAA,IAAA,CAAA;AAAA,GACR;AACA,EAAA,MAAM,EAAE,aAAA,EAAe,SAAW,EAAA,KAAA,KAAU,SAAU,EAAA,CAAA;AACtD,EAAM,MAAA,WAAA,GAAc,MAAM,WAAe,IAAA,EAAA,CAAA;AACzC,EAAM,MAAA,WAAA,GAAc,MAAM,WAAe,IAAA,EAAA,CAAA;AACzC,EAAI,IAAA,cAAA,CAAA;AACJ,EAAA,IAAI,kBAAkB,SAAW,EAAA;AAC/B,IAAiB,cAAA,GAAA,cAAA,CAAO,OAAO,EAAE,CAAA,CAAA;AAAA,GACnC;AACA,EAAA,MAAM,IAAO,GAAA,aAAA,KAAkB,SAAY,GAAA,cAAA,CAAO,cAAe,CAAA,KAAA,EAAQ,CAAA,CAAC,CAAE,CAAA,eAAA,CAAgB,IAAI,CAAA,GAAI,eAAO,MAAM,CAAA,CAAA;AACjH,EAAM,MAAA,GAAA,GAAM,kBAAkB,SAAY,GAAA,cAAA,CAAe,OAAQ,CAAA,CAAC,EAAE,eAAkB,GAAA,QAAA,CAAA;AACtF,EAAM,MAAA,CAAA,GAAI,IAAa,KAAM,CAAA;AAAA,IAC3B,UAAY,EAAA,IAAA;AAAA,IACZ,QAAU,EAAA,IAAA;AAAA,GACX,EAAE,QAAS,CAAA;AAAA,IACV,OAAS,EAAA,GAAA;AAAA,IACT,OAAS,EAAA,WAAA;AAAA,IACT,OAAS,EAAA,WAAA;AAAA,IACT,OAAS,EAAA,CAAA;AAAA,IACT,OAAS,EAAA,CAAA;AAAA,GACV,CAAE,CAAA,mBAAA,CAAoB,WAAW;AAChC,IAAA,OAAO,EAAC,CAAA;AAAA,GACT,CAAA,CAAA;AACD,EAAI,IAAA,IAAA,CAAA;AACJ,EAAM,MAAA,SAAA,GAAY,OAAQ,CAAA,EAAA,CAAG,YAAa,EAAA,CAAA;AAC1C,EAAI,KAAA,CAAA,IAAA,CAAK,gBAAgB,SAAS,CAAA,CAAA;AAClC,EAAA,KAAA,IAAS,KAAK,SAAU,CAAA,MAAA,GAAS,CAAG,EAAA,EAAA,IAAM,GAAG,EAAM,EAAA,EAAA;AACjD,IAAA,IAAA,GAAO,UAAU,EAAE,CAAA,CAAA;AACnB,IAAI,KAAA,CAAA,IAAA,CAAK,eAAe,IAAI,CAAA,CAAA;AAC5B,IAAA,OAAA,CAAQ,EAAG,CAAA,SAAA;AAAA,MACT,IAAK,CAAA,EAAA;AAAA,MACL,EAAE,IAAM,EAAA,IAAA,CAAK,KAAO,EAAA,IAAA,EAAM,KAAK,SAAU,EAAA;AAAA,MACzC,OAAA;AAAA,MACA,KAAA,CAAA;AAAA,MACA,IAAK,CAAA,OAAA;AAAA,MACL,IAAK,CAAA,GAAA;AAAA,KACP,CAAA;AAAA,GACF;AACA,EAAM,MAAA,IAAA,GAAO,OAAQ,CAAA,EAAA,CAAG,WAAY,EAAA,CAAA;AACpC,EAAM,MAAA,KAAA,GAAQ,OAAQ,CAAA,EAAA,CAAG,QAAS,EAAA,CAAA;AAClC,EAAI,KAAA,CAAA,IAAA,CAAK,SAAS,KAAK,CAAA,CAAA;AACvB,EAAA,IAAI,CAAI,GAAA,CAAA,CAAA;AACR,EAAA,KAAK,IAAI,SAAU,CAAA,MAAA,GAAS,CAAG,EAAA,CAAA,IAAK,GAAG,CAAK,EAAA,EAAA;AAC1C,IAAA,IAAA,GAAO,UAAU,CAAC,CAAA,CAAA;AAClB,IAAU,iBAAA,CAAA,SAAS,CAAE,CAAA,MAAA,CAAO,MAAM,CAAA,CAAA;AAClC,IAAA,KAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,IAAK,CAAA,KAAA,CAAM,QAAQ,CAAK,EAAA,EAAA;AAC1C,MAAA,KAAA,CAAI,KAAK,sBAAwB,EAAA,IAAA,CAAK,MAAM,CAAC,CAAA,EAAG,KAAK,EAAE,CAAA,CAAA;AACvD,MAAA,CAAA,CAAE,UAAU,IAAK,CAAA,KAAA,CAAM,CAAC,CAAA,EAAG,KAAK,EAAE,CAAA,CAAA;AAAA,KACpC;AAAA,GACF;AACA,EAAA,MAAM,YAAY,IAAM,EAAA,CAAA,EAAG,EAAI,EAAA,IAAA,EAAM,KAAK,OAAO,CAAA,CAAA;AACjD,EAAM,MAAA,QAAA,CAAS,OAAO,CAAC,CAAA,CAAA;AACvB,EAAA,MAAM,GAAM,GAAA,IAAA,CAAK,MAAO,CAAA,CAAA,KAAA,EAAQ,EAAE,CAAI,EAAA,CAAA,CAAA,CAAA;AACtC,EAAA,MAAM,OAAU,GAAA,IAAA,CAAK,MAAO,CAAA,GAAA,GAAM,KAAK,IAAI,CAAA,CAAA;AAC3C,EAAM,MAAA,MAAA,CAAO,SAAS,CAAG,EAAA,CAAC,SAAS,QAAU,EAAA,OAAO,CAAG,EAAA,WAAA,EAAa,EAAE,CAAA,CAAA;AACtE,EAAM,KAAA,CAAA,WAAA,CAAY,KAAK,oBAAsB,EAAA,KAAA,CAAM,gBAAgB,OAAQ,CAAA,EAAA,CAAG,iBAAiB,CAAA,CAAA;AAC/F,EAAA,mBAAA,CAAkB,CAAG,EAAA,GAAA,EAAK,KAAM,CAAA,cAAA,EAAgB,MAAM,WAAW,CAAA,CAAA;AACjE,EAAQ,OAAA,CAAA,EAAA,CAAG,UAAW,CAAA,UAAA,GAAa,CAAC,CAAA,CAAA;AACpC,EAAI,IAAA,CAAC,MAAM,UAAY,EAAA;AACrB,IAAA,MAAM,MAAS,GAAA,GAAA,CAAI,gBAAiB,CAAA,OAAA,GAAU,KAAK,sBAAsB,CAAA,CAAA;AACzE,IAAA,KAAA,MAAW,SAAS,MAAQ,EAAA;AAC1B,MAAM,MAAA,GAAA,GAAM,MAAM,OAAQ,EAAA,CAAA;AAC1B,MAAA,MAAM,IAAO,GAAA,GAAA,CAAI,eAAgB,CAAA,4BAAA,EAA8B,MAAM,CAAA,CAAA;AACrE,MAAK,IAAA,CAAA,YAAA,CAAa,MAAM,CAAC,CAAA,CAAA;AACzB,MAAK,IAAA,CAAA,YAAA,CAAa,MAAM,CAAC,CAAA,CAAA;AACzB,MAAK,IAAA,CAAA,YAAA,CAAa,OAAS,EAAA,GAAA,CAAI,KAAK,CAAA,CAAA;AACpC,MAAK,IAAA,CAAA,YAAA,CAAa,QAAU,EAAA,GAAA,CAAI,MAAM,CAAA,CAAA;AACtC,MAAM,KAAA,CAAA,YAAA,CAAa,IAAM,EAAA,KAAA,CAAM,UAAU,CAAA,CAAA;AAAA,KAC3C;AAAA,GACF;AACA,EAAM,MAAA,IAAA,GAAO,MAAO,CAAA,IAAA,CAAK,IAAI,CAAA,CAAA;AAC7B,EAAK,IAAA,CAAA,OAAA,CAAQ,SAAS,GAAK,EAAA;AACzB,IAAM,MAAA,MAAA,GAAS,KAAK,GAAG,CAAA,CAAA;AACvB,IAAA,IAAI,OAAO,IAAM,EAAA;AACf,MAAA,MAAM,OAAO,cAAO,CAAA,GAAA,GAAM,EAAK,GAAA,QAAA,GAAW,MAAM,IAAI,CAAA,CAAA;AACpD,MAAA,IAAI,IAAM,EAAA;AACR,QAAA,MAAM,IAAO,GAAA,GAAA,CAAI,eAAgB,CAAA,4BAAA,EAA8B,GAAG,CAAA,CAAA;AAClE,QAAA,IAAA,CAAK,eAAe,4BAA8B,EAAA,OAAA,EAAS,OAAO,OAAQ,CAAA,IAAA,CAAK,GAAG,CAAC,CAAA,CAAA;AACnF,QAAA,IAAA,CAAK,cAAe,CAAA,4BAAA,EAA8B,MAAQ,EAAA,MAAA,CAAO,IAAI,CAAA,CAAA;AACrE,QAAK,IAAA,CAAA,cAAA,CAAe,4BAA8B,EAAA,KAAA,EAAO,UAAU,CAAA,CAAA;AACnE,QAAA,IAAI,kBAAkB,SAAW,EAAA;AAC/B,UAAK,IAAA,CAAA,cAAA,CAAe,4BAA8B,EAAA,QAAA,EAAU,MAAM,CAAA,CAAA;AAAA,SACpE,MAAA,IAAW,OAAO,UAAY,EAAA;AAC5B,UAAA,IAAA,CAAK,cAAe,CAAA,4BAAA,EAA8B,QAAU,EAAA,MAAA,CAAO,UAAU,CAAA,CAAA;AAAA,SAC/E;AACA,QAAM,MAAA,QAAA,GAAW,IAAK,CAAA,MAAA,CAAO,WAAW;AACtC,UAAO,OAAA,IAAA,CAAA;AAAA,WACN,cAAc,CAAA,CAAA;AACjB,QAAM,MAAA,KAAA,GAAQ,IAAK,CAAA,MAAA,CAAO,kBAAkB,CAAA,CAAA;AAC5C,QAAA,IAAI,KAAO,EAAA;AACT,UAAA,QAAA,CAAS,OAAO,WAAW;AACzB,YAAA,OAAO,MAAM,IAAK,EAAA,CAAA;AAAA,WACnB,CAAA,CAAA;AAAA,SACH;AACA,QAAM,MAAA,KAAA,GAAQ,IAAK,CAAA,MAAA,CAAO,QAAQ,CAAA,CAAA;AAClC,QAAA,IAAI,KAAO,EAAA;AACT,UAAA,QAAA,CAAS,OAAO,WAAW;AACzB,YAAA,OAAO,MAAM,IAAK,EAAA,CAAA;AAAA,WACnB,CAAA,CAAA;AAAA,SACH;AAAA,OACF;AAAA,KACF;AAAA,GACD,CAAA,CAAA;AACH,CAAA,CAAA;AACA,IAAM,cAAiB,GAAA;AAAA,EACrB,OAAA;AAAA,EACA,WAAA;AAAA,EACA,QAAA;AAAA,EACA,UAAA;AAAA,EACA,IAAA;AACF,EAAA;AACA,IAAM,IAAA,GAAO,CAAC,KAAA,EAAO,OAAY,KAAA;AAC/B,EAAA,MAAM,OAAiB,GAAA,eAAA,CAAA;AACvB,EAAM,MAAA,CAAA,GAAI,OAAQ,CAAA,KAAA,EAAO,GAAG,CAAA,CAAA;AAC5B,EAAM,MAAA,CAAA,GAAI,OAAQ,CAAA,KAAA,EAAO,GAAG,CAAA,CAAA;AAC5B,EAAM,MAAA,CAAA,GAAI,OAAQ,CAAA,KAAA,EAAO,GAAG,CAAA,CAAA;AAC5B,EAAA,OAAc,YAAK,CAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,OAAO,CAAA,CAAA;AACrC,CAAA,CAAA;AACA,IAAM,SAAA,GAAY,CAAC,OAAY,KAAA,CAAA;AAAA,iBAAA,EACZ,QAAQ,UAAU,CAAA;AAAA,WACxB,EAAA,OAAA,CAAQ,aAAiB,IAAA,OAAA,CAAQ,SAAS,CAAA;AAAA;AAAA;AAAA,UAAA,EAG3C,QAAQ,UAAU,CAAA;AAAA;AAAA;AAAA,WAAA,EAGjB,QAAQ,UAAU,CAAA;AAAA;AAAA;AAAA;AAAA,UAInB,EAAA,OAAA,CAAQ,aAAiB,IAAA,OAAA,CAAQ,SAAS,CAAA;AAAA,WACzC,EAAA,OAAA,CAAQ,aAAiB,IAAA,OAAA,CAAQ,SAAS,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAA,EAQ3C,QAAQ,OAAO,CAAA;AAAA,YAAA,EACb,QAAQ,UAAU,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAA,EA2BpB,QAAQ,cAAc,CAAA;AAAA;AAAA;AAAA;AAAA,YAAA,EAIpB,QAAQ,SAAS,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAA,EAKjB,QAAQ,SAAS,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAA,EAKP,QAAQ,mBAAmB,CAAA;AAAA;AAAA;AAAA,wBAAA,EAGzB,QAAQ,mBAAmB,CAAA;AAAA,YAAA,EACvC,QAAQ,mBAAmB,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAA,EAOjB,IAAK,CAAA,OAAA,CAAQ,mBAAqB,EAAA,GAAG,CAAC,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAA,EAKlD,QAAQ,UAAU,CAAA;AAAA,YAAA,EAChB,QAAQ,aAAa,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAA,EAKvB,QAAQ,UAAU,CAAA;AAAA;AAAA;AAAA;AAAA,WAAA,EAIjB,QAAQ,UAAU,CAAA;AAAA;AAAA;AAAA,WAAA,EAGlB,QAAQ,UAAU,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAA,EAQZ,QAAQ,UAAU,CAAA;AAAA;AAAA,gBAAA,EAEnB,QAAQ,aAAa,CAAA;AAAA,sBAAA,EACf,QAAQ,OAAO,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAA,EAS3B,QAAQ,SAAS,CAAA;AAAA;AAAA,CAAA,CAAA;AAG7B,IAAM,UAAa,GAAA","file":"chunk-WMZVKIY3.js","sourcesContent":["import * as _ from 'lodash-es';\n\n// Public utility functions\nexport { isSubgraph, edgeToId, applyStyle, applyClass, applyTransition };\n\n/*\n * Returns true if the specified node in the graph is a subgraph node. A\n * subgraph node is one that contains other nodes.\n */\nfunction isSubgraph(g, v) {\n  return !!g.children(v).length;\n}\n\nfunction edgeToId(e) {\n  return escapeId(e.v) + ':' + escapeId(e.w) + ':' + escapeId(e.name);\n}\n\nvar ID_DELIM = /:/g;\nfunction escapeId(str) {\n  return str ? String(str).replace(ID_DELIM, '\\\\:') : '';\n}\n\nfunction applyStyle(dom, styleFn) {\n  if (styleFn) {\n    dom.attr('style', styleFn);\n  }\n}\n\nfunction applyClass(dom, classFn, otherClasses) {\n  if (classFn) {\n    dom.attr('class', classFn).attr('class', otherClasses + ' ' + dom.attr('class'));\n  }\n}\n\nfunction applyTransition(selection, g) {\n  var graph = g.graph();\n\n  if (_.isPlainObject(graph)) {\n    var transition = graph.transition;\n    if (_.isFunction(transition)) {\n      return transition(selection);\n    }\n  }\n\n  return selection;\n}\n","import * as util from '../util.js';\n\nexport { addHtmlLabel };\n\nfunction addHtmlLabel(root, node) {\n  var fo = root.append('foreignObject').attr('width', '100000');\n\n  var div = fo.append('xhtml:div');\n  div.attr('xmlns', 'http://www.w3.org/1999/xhtml');\n\n  var label = node.label;\n  switch (typeof label) {\n    case 'function':\n      div.insert(label);\n      break;\n    case 'object':\n      // Currently we assume this is a DOM object.\n      div.insert(function () {\n        return label;\n      });\n      break;\n    default:\n      div.html(label);\n  }\n\n  util.applyStyle(div, node.labelStyle);\n  div.style('display', 'inline-block');\n  // Fix for firefox\n  div.style('white-space', 'nowrap');\n\n  var client = div.node().getBoundingClientRect();\n  fo.attr('width', client.width).attr('height', client.height);\n\n  return fo;\n}\n","import * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\nimport { curveLinear, select, selectAll } from \"d3\";\nimport { k as getStylesFromArray, l as log, m as evaluate, c as getConfig, e as common, r as renderKatex, n as interpolateToCurve, u as utils, o as setupGraphViewbox } from \"./mermaid-b5860b54.js\";\nimport { r as render } from \"./index-3862675e.js\";\nimport { addHtmlLabel } from \"dagre-d3-es/src/dagre-js/label/add-html-label.js\";\nimport * as khroma from \"khroma\";\nconst conf = {};\nconst setConf = function(cnf) {\n  const keys = Object.keys(cnf);\n  for (const key of keys) {\n    conf[key] = cnf[key];\n  }\n};\nconst addVertices = async function(vert, g, svgId, root, doc, diagObj) {\n  const svg = root.select(`[id=\"${svgId}\"]`);\n  const keys = Object.keys(vert);\n  for (const id of keys) {\n    const vertex = vert[id];\n    let classStr = \"default\";\n    if (vertex.classes.length > 0) {\n      classStr = vertex.classes.join(\" \");\n    }\n    classStr = classStr + \" flowchart-label\";\n    const styles = getStylesFromArray(vertex.styles);\n    let vertexText = vertex.text !== void 0 ? vertex.text : vertex.id;\n    let vertexNode;\n    log.info(\"vertex\", vertex, vertex.labelType);\n    if (vertex.labelType === \"markdown\") {\n      log.info(\"vertex\", vertex, vertex.labelType);\n    } else {\n      if (evaluate(getConfig().flowchart.htmlLabels)) {\n        const node = {\n          label: vertexText\n        };\n        vertexNode = addHtmlLabel(svg, node).node();\n        vertexNode.parentNode.removeChild(vertexNode);\n      } else {\n        const svgLabel = doc.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n        svgLabel.setAttribute(\"style\", styles.labelStyle.replace(\"color:\", \"fill:\"));\n        const rows = vertexText.split(common.lineBreakRegex);\n        for (const row of rows) {\n          const tspan = doc.createElementNS(\"http://www.w3.org/2000/svg\", \"tspan\");\n          tspan.setAttributeNS(\"http://www.w3.org/XML/1998/namespace\", \"xml:space\", \"preserve\");\n          tspan.setAttribute(\"dy\", \"1em\");\n          tspan.setAttribute(\"x\", \"1\");\n          tspan.textContent = row;\n          svgLabel.appendChild(tspan);\n        }\n        vertexNode = svgLabel;\n      }\n    }\n    let radius = 0;\n    let _shape = \"\";\n    switch (vertex.type) {\n      case \"round\":\n        radius = 5;\n        _shape = \"rect\";\n        break;\n      case \"square\":\n        _shape = \"rect\";\n        break;\n      case \"diamond\":\n        _shape = \"question\";\n        break;\n      case \"hexagon\":\n        _shape = \"hexagon\";\n        break;\n      case \"odd\":\n        _shape = \"rect_left_inv_arrow\";\n        break;\n      case \"lean_right\":\n        _shape = \"lean_right\";\n        break;\n      case \"lean_left\":\n        _shape = \"lean_left\";\n        break;\n      case \"trapezoid\":\n        _shape = \"trapezoid\";\n        break;\n      case \"inv_trapezoid\":\n        _shape = \"inv_trapezoid\";\n        break;\n      case \"odd_right\":\n        _shape = \"rect_left_inv_arrow\";\n        break;\n      case \"circle\":\n        _shape = \"circle\";\n        break;\n      case \"ellipse\":\n        _shape = \"ellipse\";\n        break;\n      case \"stadium\":\n        _shape = \"stadium\";\n        break;\n      case \"subroutine\":\n        _shape = \"subroutine\";\n        break;\n      case \"cylinder\":\n        _shape = \"cylinder\";\n        break;\n      case \"group\":\n        _shape = \"rect\";\n        break;\n      case \"doublecircle\":\n        _shape = \"doublecircle\";\n        break;\n      default:\n        _shape = \"rect\";\n    }\n    const labelText = await renderKatex(vertexText, getConfig());\n    g.setNode(vertex.id, {\n      labelStyle: styles.labelStyle,\n      shape: _shape,\n      labelText,\n      labelType: vertex.labelType,\n      rx: radius,\n      ry: radius,\n      class: classStr,\n      style: styles.style,\n      id: vertex.id,\n      link: vertex.link,\n      linkTarget: vertex.linkTarget,\n      tooltip: diagObj.db.getTooltip(vertex.id) || \"\",\n      domId: diagObj.db.lookUpDomId(vertex.id),\n      haveCallback: vertex.haveCallback,\n      width: vertex.type === \"group\" ? 500 : void 0,\n      dir: vertex.dir,\n      type: vertex.type,\n      props: vertex.props,\n      padding: getConfig().flowchart.padding\n    });\n    log.info(\"setNode\", {\n      labelStyle: styles.labelStyle,\n      labelType: vertex.labelType,\n      shape: _shape,\n      labelText,\n      rx: radius,\n      ry: radius,\n      class: classStr,\n      style: styles.style,\n      id: vertex.id,\n      domId: diagObj.db.lookUpDomId(vertex.id),\n      width: vertex.type === \"group\" ? 500 : void 0,\n      type: vertex.type,\n      dir: vertex.dir,\n      props: vertex.props,\n      padding: getConfig().flowchart.padding\n    });\n  }\n};\nconst addEdges = async function(edges, g, diagObj) {\n  log.info(\"abc78 edges = \", edges);\n  let cnt = 0;\n  let linkIdCnt = {};\n  let defaultStyle;\n  let defaultLabelStyle;\n  if (edges.defaultStyle !== void 0) {\n    const defaultStyles = getStylesFromArray(edges.defaultStyle);\n    defaultStyle = defaultStyles.style;\n    defaultLabelStyle = defaultStyles.labelStyle;\n  }\n  for (const edge of edges) {\n    cnt++;\n    const linkIdBase = \"L-\" + edge.start + \"-\" + edge.end;\n    if (linkIdCnt[linkIdBase] === void 0) {\n      linkIdCnt[linkIdBase] = 0;\n      log.info(\"abc78 new entry\", linkIdBase, linkIdCnt[linkIdBase]);\n    } else {\n      linkIdCnt[linkIdBase]++;\n      log.info(\"abc78 new entry\", linkIdBase, linkIdCnt[linkIdBase]);\n    }\n    let linkId = linkIdBase + \"-\" + linkIdCnt[linkIdBase];\n    log.info(\"abc78 new link id to be used is\", linkIdBase, linkId, linkIdCnt[linkIdBase]);\n    const linkNameStart = \"LS-\" + edge.start;\n    const linkNameEnd = \"LE-\" + edge.end;\n    const edgeData = { style: \"\", labelStyle: \"\" };\n    edgeData.minlen = edge.length || 1;\n    if (edge.type === \"arrow_open\") {\n      edgeData.arrowhead = \"none\";\n    } else {\n      edgeData.arrowhead = \"normal\";\n    }\n    edgeData.arrowTypeStart = \"arrow_open\";\n    edgeData.arrowTypeEnd = \"arrow_open\";\n    switch (edge.type) {\n      case \"double_arrow_cross\":\n        edgeData.arrowTypeStart = \"arrow_cross\";\n      case \"arrow_cross\":\n        edgeData.arrowTypeEnd = \"arrow_cross\";\n        break;\n      case \"double_arrow_point\":\n        edgeData.arrowTypeStart = \"arrow_point\";\n      case \"arrow_point\":\n        edgeData.arrowTypeEnd = \"arrow_point\";\n        break;\n      case \"double_arrow_circle\":\n        edgeData.arrowTypeStart = \"arrow_circle\";\n      case \"arrow_circle\":\n        edgeData.arrowTypeEnd = \"arrow_circle\";\n        break;\n    }\n    let style = \"\";\n    let labelStyle = \"\";\n    switch (edge.stroke) {\n      case \"normal\":\n        style = \"fill:none;\";\n        if (defaultStyle !== void 0) {\n          style = defaultStyle;\n        }\n        if (defaultLabelStyle !== void 0) {\n          labelStyle = defaultLabelStyle;\n        }\n        edgeData.thickness = \"normal\";\n        edgeData.pattern = \"solid\";\n        break;\n      case \"dotted\":\n        edgeData.thickness = \"normal\";\n        edgeData.pattern = \"dotted\";\n        edgeData.style = \"fill:none;stroke-width:2px;stroke-dasharray:3;\";\n        break;\n      case \"thick\":\n        edgeData.thickness = \"thick\";\n        edgeData.pattern = \"solid\";\n        edgeData.style = \"stroke-width: 3.5px;fill:none;\";\n        break;\n      case \"invisible\":\n        edgeData.thickness = \"invisible\";\n        edgeData.pattern = \"solid\";\n        edgeData.style = \"stroke-width: 0;fill:none;\";\n        break;\n    }\n    if (edge.style !== void 0) {\n      const styles = getStylesFromArray(edge.style);\n      style = styles.style;\n      labelStyle = styles.labelStyle;\n    }\n    edgeData.style = edgeData.style += style;\n    edgeData.labelStyle = edgeData.labelStyle += labelStyle;\n    if (edge.interpolate !== void 0) {\n      edgeData.curve = interpolateToCurve(edge.interpolate, curveLinear);\n    } else if (edges.defaultInterpolate !== void 0) {\n      edgeData.curve = interpolateToCurve(edges.defaultInterpolate, curveLinear);\n    } else {\n      edgeData.curve = interpolateToCurve(conf.curve, curveLinear);\n    }\n    if (edge.text === void 0) {\n      if (edge.style !== void 0) {\n        edgeData.arrowheadStyle = \"fill: #333\";\n      }\n    } else {\n      edgeData.arrowheadStyle = \"fill: #333\";\n      edgeData.labelpos = \"c\";\n    }\n    edgeData.labelType = edge.labelType;\n    edgeData.label = await renderKatex(edge.text.replace(common.lineBreakRegex, \"\\n\"), getConfig());\n    if (edge.style === void 0) {\n      edgeData.style = edgeData.style || \"stroke: #333; stroke-width: 1.5px;fill:none;\";\n    }\n    edgeData.labelStyle = edgeData.labelStyle.replace(\"color:\", \"fill:\");\n    edgeData.id = linkId;\n    edgeData.classes = \"flowchart-link \" + linkNameStart + \" \" + linkNameEnd;\n    g.setEdge(edge.start, edge.end, edgeData, cnt);\n  }\n};\nconst getClasses = function(text, diagObj) {\n  return diagObj.db.getClasses();\n};\nconst draw = async function(text, id, _version, diagObj) {\n  log.info(\"Drawing flowchart\");\n  let dir = diagObj.db.getDirection();\n  if (dir === void 0) {\n    dir = \"TD\";\n  }\n  const { securityLevel, flowchart: conf2 } = getConfig();\n  const nodeSpacing = conf2.nodeSpacing || 50;\n  const rankSpacing = conf2.rankSpacing || 50;\n  let sandboxElement;\n  if (securityLevel === \"sandbox\") {\n    sandboxElement = select(\"#i\" + id);\n  }\n  const root = securityLevel === \"sandbox\" ? select(sandboxElement.nodes()[0].contentDocument.body) : select(\"body\");\n  const doc = securityLevel === \"sandbox\" ? sandboxElement.nodes()[0].contentDocument : document;\n  const g = new graphlib.Graph({\n    multigraph: true,\n    compound: true\n  }).setGraph({\n    rankdir: dir,\n    nodesep: nodeSpacing,\n    ranksep: rankSpacing,\n    marginx: 0,\n    marginy: 0\n  }).setDefaultEdgeLabel(function() {\n    return {};\n  });\n  let subG;\n  const subGraphs = diagObj.db.getSubGraphs();\n  log.info(\"Subgraphs - \", subGraphs);\n  for (let i2 = subGraphs.length - 1; i2 >= 0; i2--) {\n    subG = subGraphs[i2];\n    log.info(\"Subgraph - \", subG);\n    diagObj.db.addVertex(\n      subG.id,\n      { text: subG.title, type: subG.labelType },\n      \"group\",\n      void 0,\n      subG.classes,\n      subG.dir\n    );\n  }\n  const vert = diagObj.db.getVertices();\n  const edges = diagObj.db.getEdges();\n  log.info(\"Edges\", edges);\n  let i = 0;\n  for (i = subGraphs.length - 1; i >= 0; i--) {\n    subG = subGraphs[i];\n    selectAll(\"cluster\").append(\"text\");\n    for (let j = 0; j < subG.nodes.length; j++) {\n      log.info(\"Setting up subgraphs\", subG.nodes[j], subG.id);\n      g.setParent(subG.nodes[j], subG.id);\n    }\n  }\n  await addVertices(vert, g, id, root, doc, diagObj);\n  await addEdges(edges, g);\n  const svg = root.select(`[id=\"${id}\"]`);\n  const element = root.select(\"#\" + id + \" g\");\n  await render(element, g, [\"point\", \"circle\", \"cross\"], \"flowchart\", id);\n  utils.insertTitle(svg, \"flowchartTitleText\", conf2.titleTopMargin, diagObj.db.getDiagramTitle());\n  setupGraphViewbox(g, svg, conf2.diagramPadding, conf2.useMaxWidth);\n  diagObj.db.indexNodes(\"subGraph\" + i);\n  if (!conf2.htmlLabels) {\n    const labels = doc.querySelectorAll('[id=\"' + id + '\"] .edgeLabel .label');\n    for (const label of labels) {\n      const dim = label.getBBox();\n      const rect = doc.createElementNS(\"http://www.w3.org/2000/svg\", \"rect\");\n      rect.setAttribute(\"rx\", 0);\n      rect.setAttribute(\"ry\", 0);\n      rect.setAttribute(\"width\", dim.width);\n      rect.setAttribute(\"height\", dim.height);\n      label.insertBefore(rect, label.firstChild);\n    }\n  }\n  const keys = Object.keys(vert);\n  keys.forEach(function(key) {\n    const vertex = vert[key];\n    if (vertex.link) {\n      const node = select(\"#\" + id + ' [id=\"' + key + '\"]');\n      if (node) {\n        const link = doc.createElementNS(\"http://www.w3.org/2000/svg\", \"a\");\n        link.setAttributeNS(\"http://www.w3.org/2000/svg\", \"class\", vertex.classes.join(\" \"));\n        link.setAttributeNS(\"http://www.w3.org/2000/svg\", \"href\", vertex.link);\n        link.setAttributeNS(\"http://www.w3.org/2000/svg\", \"rel\", \"noopener\");\n        if (securityLevel === \"sandbox\") {\n          link.setAttributeNS(\"http://www.w3.org/2000/svg\", \"target\", \"_top\");\n        } else if (vertex.linkTarget) {\n          link.setAttributeNS(\"http://www.w3.org/2000/svg\", \"target\", vertex.linkTarget);\n        }\n        const linkNode = node.insert(function() {\n          return link;\n        }, \":first-child\");\n        const shape = node.select(\".label-container\");\n        if (shape) {\n          linkNode.append(function() {\n            return shape.node();\n          });\n        }\n        const label = node.select(\".label\");\n        if (label) {\n          linkNode.append(function() {\n            return label.node();\n          });\n        }\n      }\n    }\n  });\n};\nconst flowRendererV2 = {\n  setConf,\n  addVertices,\n  addEdges,\n  getClasses,\n  draw\n};\nconst fade = (color, opacity) => {\n  const channel = khroma.channel;\n  const r = channel(color, \"r\");\n  const g = channel(color, \"g\");\n  const b = channel(color, \"b\");\n  return khroma.rgba(r, g, b, opacity);\n};\nconst getStyles = (options) => `.label {\n    font-family: ${options.fontFamily};\n    color: ${options.nodeTextColor || options.textColor};\n  }\n  .cluster-label text {\n    fill: ${options.titleColor};\n  }\n  .cluster-label span,p {\n    color: ${options.titleColor};\n  }\n\n  .label text,span,p {\n    fill: ${options.nodeTextColor || options.textColor};\n    color: ${options.nodeTextColor || options.textColor};\n  }\n\n  .node rect,\n  .node circle,\n  .node ellipse,\n  .node polygon,\n  .node path {\n    fill: ${options.mainBkg};\n    stroke: ${options.nodeBorder};\n    stroke-width: 1px;\n  }\n  .flowchart-label text {\n    text-anchor: middle;\n  }\n  // .flowchart-label .text-outer-tspan {\n  //   text-anchor: middle;\n  // }\n  // .flowchart-label .text-inner-tspan {\n  //   text-anchor: start;\n  // }\n\n  .node .katex path {\n    fill: #000;\n    stroke: #000;\n    stroke-width: 1px;\n  }\n\n  .node .label {\n    text-align: center;\n  }\n  .node.clickable {\n    cursor: pointer;\n  }\n\n  .arrowheadPath {\n    fill: ${options.arrowheadColor};\n  }\n\n  .edgePath .path {\n    stroke: ${options.lineColor};\n    stroke-width: 2.0px;\n  }\n\n  .flowchart-link {\n    stroke: ${options.lineColor};\n    fill: none;\n  }\n\n  .edgeLabel {\n    background-color: ${options.edgeLabelBackground};\n    rect {\n      opacity: 0.5;\n      background-color: ${options.edgeLabelBackground};\n      fill: ${options.edgeLabelBackground};\n    }\n    text-align: center;\n  }\n\n  /* For html labels only */\n  .labelBkg {\n    background-color: ${fade(options.edgeLabelBackground, 0.5)};\n    // background-color: \n  }\n\n  .cluster rect {\n    fill: ${options.clusterBkg};\n    stroke: ${options.clusterBorder};\n    stroke-width: 1px;\n  }\n\n  .cluster text {\n    fill: ${options.titleColor};\n  }\n\n  .cluster span,p {\n    color: ${options.titleColor};\n  }\n  /* .cluster div {\n    color: ${options.titleColor};\n  } */\n\n  div.mermaidTooltip {\n    position: absolute;\n    text-align: center;\n    max-width: 200px;\n    padding: 2px;\n    font-family: ${options.fontFamily};\n    font-size: 12px;\n    background: ${options.tertiaryColor};\n    border: 1px solid ${options.border2};\n    border-radius: 2px;\n    pointer-events: none;\n    z-index: 100;\n  }\n\n  .flowchartTitleText {\n    text-anchor: middle;\n    font-size: 18px;\n    fill: ${options.textColor};\n  }\n`;\nconst flowStyles = getStyles;\nexport {\n  flowStyles as a,\n  flowRendererV2 as f\n};\n"]}