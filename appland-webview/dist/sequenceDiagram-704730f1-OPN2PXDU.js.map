{"version":3,"sources":["../node_modules/mermaid/dist/sequenceDiagram-704730f1.js"],"names":["clear","drawRect","drawBackgroundRect","getTextObj","getNoteRect"],"mappings":"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EAAA,CAAC,GAAG,CAAC,CAAA,EAAG,CAAC,CAAA,EAAG,CAAC,CAAG,EAAA,CAAC,CAAG,EAAA,CAAC,GAAG,CAAC,CAAA,EAAG,CAAC,CAAA,EAAG,CAAC,CAAG,EAAA,CAAC,CAAG,EAAA,CAAC,GAAG,CAAC,EAAA,EAAI,CAAC,CAAA,EAAG,CAAC,EAAA,EAAI,CAAC,CAAA,EAAG,CAAC,EAAI,EAAA,CAAC,CAAG,EAAA,CAAC,IAAI,CAAC,CAAA,EAAG,CAAC,EAAA,EAAI,CAAC,CAAG,EAAA,CAAC,CAAG,EAAA,CAAC,GAAG,CAAC,CAAA,EAAG,CAAC,CAAA,EAAG,CAAC,CAAG,EAAA,CAAC,CAAG,EAAA,CAAC,GAAG,CAAC,CAAA,EAAG,CAAC,CAAA,EAAG,CAAC,CAAG,EAAA,CAAC,CAAG,EAAA,CAAC,CAAG,EAAA,CAAC,CAAG,EAAA,CAAC,GAAG,CAAC,CAAA,EAAG,CAAC,CAAA,EAAG,CAAC,CAAG,EAAA,CAAC,CAAG,EAAA,CAAC,GAAG,CAAC,CAAA,EAAG,CAAC,CAAA,EAAG,CAAC,CAAG,EAAA,CAAC,CAAG,EAAA,CAAC,GAAG,CAAC,CAAA,EAAG,CAAC,CAAA,EAAG,CAAC,CAAG,EAAA,CAAC,CAAG,EAAA,CAAC,GAAG,CAAC,CAAA,EAAG,CAAC,CAAA,EAAG,CAAC,CAAG,EAAA,CAAC,CAAG,EAAA,CAAC,GAAG,CAAC,CAAA,EAAG,CAAC,CAAA,EAAG,CAAC,CAAG,EAAA,CAAC,CAAG,EAAA,CAAC,GAAG,CAAC,CAAA,EAAG,CAAC,CAAA,EAAG,CAAC,CAAG,EAAA,CAAC,CAAG,EAAA,CAAC,GAAG,CAAC,CAAA,EAAG,CAAC,CAAA,EAAG,CAAC,CAAG,EAAA,CAAC,CAAG,EAAA,CAAC,GAAG,CAAC,CAAA,EAAG,CAAC,CAAA,EAAG,CAAC,CAAA,EAAG,CAAC,CAAA,EAAG,CAAC,CAAG,EAAA,CAAC,CAAG,EAAA,CAAC,GAAG,CAAC,EAAA,EAAI,CAAC,CAAA,EAAG,CAAC,EAAI,EAAA,CAAC,CAAG,EAAA,CAAC,IAAI,CAAC,CAAA,EAAG,CAAC,EAAA,EAAI,CAAC,CAAG,EAAA,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","file":"sequenceDiagram-704730f1-OPN2PXDU.js","sourcesContent":["import { g as getAccTitle, t as getDiagramTitle, q as setDiagramTitle, c as getConfig, s as setAccTitle, b as setAccDescription, a as getAccDescription, v as clear$1, l as log, d as sanitizeText, e as common, D as parseFontSize, G as hasKatex, r as renderKatex, F as getConfig$1, Z as ZERO_WIDTH_SPACE, H as calculateMathMLDimensions, f as assignWithDepth, i as configureSvgSize, u as utils } from \"./mermaid-b5860b54.js\";\nimport { select } from \"d3\";\nimport { d as drawRect$1, a as drawBackgroundRect$1, b as drawEmbeddedImage, c as drawImage, e as getTextObj$1, g as getNoteRect$1 } from \"./svgDrawCommon-08f97a94.js\";\nimport { sanitizeUrl } from \"@braintree/sanitize-url\";\nimport \"ts-dedent\";\nimport \"dayjs\";\nimport \"dompurify\";\nimport \"khroma\";\nimport \"lodash-es/memoize.js\";\nimport \"lodash-es/merge.js\";\nimport \"stylis\";\nimport \"lodash-es/isEmpty.js\";\nvar parser = function() {\n  var o = function(k, v, o2, l) {\n    for (o2 = o2 || {}, l = k.length; l--; o2[k[l]] = v)\n      ;\n    return o2;\n  }, $V0 = [1, 2], $V1 = [1, 3], $V2 = [1, 4], $V3 = [2, 4], $V4 = [1, 9], $V5 = [1, 11], $V6 = [1, 13], $V7 = [1, 14], $V8 = [1, 16], $V9 = [1, 17], $Va = [1, 18], $Vb = [1, 24], $Vc = [1, 25], $Vd = [1, 26], $Ve = [1, 27], $Vf = [1, 28], $Vg = [1, 29], $Vh = [1, 30], $Vi = [1, 31], $Vj = [1, 32], $Vk = [1, 33], $Vl = [1, 34], $Vm = [1, 35], $Vn = [1, 36], $Vo = [1, 37], $Vp = [1, 38], $Vq = [1, 39], $Vr = [1, 41], $Vs = [1, 42], $Vt = [1, 43], $Vu = [1, 44], $Vv = [1, 45], $Vw = [1, 46], $Vx = [1, 4, 5, 13, 14, 16, 18, 21, 23, 29, 30, 31, 33, 35, 36, 37, 38, 39, 41, 43, 44, 46, 47, 48, 49, 50, 52, 53, 54, 59, 60, 61, 62, 70], $Vy = [4, 5, 16, 50, 52, 53], $Vz = [4, 5, 13, 14, 16, 18, 21, 23, 29, 30, 31, 33, 35, 36, 37, 38, 39, 41, 43, 44, 46, 50, 52, 53, 54, 59, 60, 61, 62, 70], $VA = [4, 5, 13, 14, 16, 18, 21, 23, 29, 30, 31, 33, 35, 36, 37, 38, 39, 41, 43, 44, 46, 49, 50, 52, 53, 54, 59, 60, 61, 62, 70], $VB = [4, 5, 13, 14, 16, 18, 21, 23, 29, 30, 31, 33, 35, 36, 37, 38, 39, 41, 43, 44, 46, 48, 50, 52, 53, 54, 59, 60, 61, 62, 70], $VC = [4, 5, 13, 14, 16, 18, 21, 23, 29, 30, 31, 33, 35, 36, 37, 38, 39, 41, 43, 44, 46, 47, 50, 52, 53, 54, 59, 60, 61, 62, 70], $VD = [68, 69, 70], $VE = [1, 120];\n  var parser2 = {\n    trace: function trace() {\n    },\n    yy: {},\n    symbols_: { \"error\": 2, \"start\": 3, \"SPACE\": 4, \"NEWLINE\": 5, \"SD\": 6, \"document\": 7, \"line\": 8, \"statement\": 9, \"box_section\": 10, \"box_line\": 11, \"participant_statement\": 12, \"create\": 13, \"box\": 14, \"restOfLine\": 15, \"end\": 16, \"signal\": 17, \"autonumber\": 18, \"NUM\": 19, \"off\": 20, \"activate\": 21, \"actor\": 22, \"deactivate\": 23, \"note_statement\": 24, \"links_statement\": 25, \"link_statement\": 26, \"properties_statement\": 27, \"details_statement\": 28, \"title\": 29, \"legacy_title\": 30, \"acc_title\": 31, \"acc_title_value\": 32, \"acc_descr\": 33, \"acc_descr_value\": 34, \"acc_descr_multiline_value\": 35, \"loop\": 36, \"rect\": 37, \"opt\": 38, \"alt\": 39, \"else_sections\": 40, \"par\": 41, \"par_sections\": 42, \"par_over\": 43, \"critical\": 44, \"option_sections\": 45, \"break\": 46, \"option\": 47, \"and\": 48, \"else\": 49, \"participant\": 50, \"AS\": 51, \"participant_actor\": 52, \"destroy\": 53, \"note\": 54, \"placement\": 55, \"text2\": 56, \"over\": 57, \"actor_pair\": 58, \"links\": 59, \"link\": 60, \"properties\": 61, \"details\": 62, \"spaceList\": 63, \",\": 64, \"left_of\": 65, \"right_of\": 66, \"signaltype\": 67, \"+\": 68, \"-\": 69, \"ACTOR\": 70, \"SOLID_OPEN_ARROW\": 71, \"DOTTED_OPEN_ARROW\": 72, \"SOLID_ARROW\": 73, \"DOTTED_ARROW\": 74, \"SOLID_CROSS\": 75, \"DOTTED_CROSS\": 76, \"SOLID_POINT\": 77, \"DOTTED_POINT\": 78, \"TXT\": 79, \"$accept\": 0, \"$end\": 1 },\n    terminals_: { 2: \"error\", 4: \"SPACE\", 5: \"NEWLINE\", 6: \"SD\", 13: \"create\", 14: \"box\", 15: \"restOfLine\", 16: \"end\", 18: \"autonumber\", 19: \"NUM\", 20: \"off\", 21: \"activate\", 23: \"deactivate\", 29: \"title\", 30: \"legacy_title\", 31: \"acc_title\", 32: \"acc_title_value\", 33: \"acc_descr\", 34: \"acc_descr_value\", 35: \"acc_descr_multiline_value\", 36: \"loop\", 37: \"rect\", 38: \"opt\", 39: \"alt\", 41: \"par\", 43: \"par_over\", 44: \"critical\", 46: \"break\", 47: \"option\", 48: \"and\", 49: \"else\", 50: \"participant\", 51: \"AS\", 52: \"participant_actor\", 53: \"destroy\", 54: \"note\", 57: \"over\", 59: \"links\", 60: \"link\", 61: \"properties\", 62: \"details\", 64: \",\", 65: \"left_of\", 66: \"right_of\", 68: \"+\", 69: \"-\", 70: \"ACTOR\", 71: \"SOLID_OPEN_ARROW\", 72: \"DOTTED_OPEN_ARROW\", 73: \"SOLID_ARROW\", 74: \"DOTTED_ARROW\", 75: \"SOLID_CROSS\", 76: \"DOTTED_CROSS\", 77: \"SOLID_POINT\", 78: \"DOTTED_POINT\", 79: \"TXT\" },\n    productions_: [0, [3, 2], [3, 2], [3, 2], [7, 0], [7, 2], [8, 2], [8, 1], [8, 1], [10, 0], [10, 2], [11, 2], [11, 1], [11, 1], [9, 1], [9, 2], [9, 4], [9, 2], [9, 4], [9, 3], [9, 3], [9, 2], [9, 3], [9, 3], [9, 2], [9, 2], [9, 2], [9, 2], [9, 2], [9, 1], [9, 1], [9, 2], [9, 2], [9, 1], [9, 4], [9, 4], [9, 4], [9, 4], [9, 4], [9, 4], [9, 4], [9, 4], [45, 1], [45, 4], [42, 1], [42, 4], [40, 1], [40, 4], [12, 5], [12, 3], [12, 5], [12, 3], [12, 3], [24, 4], [24, 4], [25, 3], [26, 3], [27, 3], [28, 3], [63, 2], [63, 1], [58, 3], [58, 1], [55, 1], [55, 1], [17, 5], [17, 5], [17, 4], [22, 1], [67, 1], [67, 1], [67, 1], [67, 1], [67, 1], [67, 1], [67, 1], [67, 1], [56, 1]],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$) {\n      var $0 = $$.length - 1;\n      switch (yystate) {\n        case 3:\n          yy.apply($$[$0]);\n          return $$[$0];\n        case 4:\n        case 9:\n          this.$ = [];\n          break;\n        case 5:\n        case 10:\n          $$[$0 - 1].push($$[$0]);\n          this.$ = $$[$0 - 1];\n          break;\n        case 6:\n        case 7:\n        case 11:\n        case 12:\n          this.$ = $$[$0];\n          break;\n        case 8:\n        case 13:\n          this.$ = [];\n          break;\n        case 15:\n          $$[$0].type = \"createParticipant\";\n          this.$ = $$[$0];\n          break;\n        case 16:\n          $$[$0 - 1].unshift({ type: \"boxStart\", boxData: yy.parseBoxData($$[$0 - 2]) });\n          $$[$0 - 1].push({ type: \"boxEnd\", boxText: $$[$0 - 2] });\n          this.$ = $$[$0 - 1];\n          break;\n        case 18:\n          this.$ = { type: \"sequenceIndex\", sequenceIndex: Number($$[$0 - 2]), sequenceIndexStep: Number($$[$0 - 1]), sequenceVisible: true, signalType: yy.LINETYPE.AUTONUMBER };\n          break;\n        case 19:\n          this.$ = { type: \"sequenceIndex\", sequenceIndex: Number($$[$0 - 1]), sequenceIndexStep: 1, sequenceVisible: true, signalType: yy.LINETYPE.AUTONUMBER };\n          break;\n        case 20:\n          this.$ = { type: \"sequenceIndex\", sequenceVisible: false, signalType: yy.LINETYPE.AUTONUMBER };\n          break;\n        case 21:\n          this.$ = { type: \"sequenceIndex\", sequenceVisible: true, signalType: yy.LINETYPE.AUTONUMBER };\n          break;\n        case 22:\n          this.$ = { type: \"activeStart\", signalType: yy.LINETYPE.ACTIVE_START, actor: $$[$0 - 1] };\n          break;\n        case 23:\n          this.$ = { type: \"activeEnd\", signalType: yy.LINETYPE.ACTIVE_END, actor: $$[$0 - 1] };\n          break;\n        case 29:\n          yy.setDiagramTitle($$[$0].substring(6));\n          this.$ = $$[$0].substring(6);\n          break;\n        case 30:\n          yy.setDiagramTitle($$[$0].substring(7));\n          this.$ = $$[$0].substring(7);\n          break;\n        case 31:\n          this.$ = $$[$0].trim();\n          yy.setAccTitle(this.$);\n          break;\n        case 32:\n        case 33:\n          this.$ = $$[$0].trim();\n          yy.setAccDescription(this.$);\n          break;\n        case 34:\n          $$[$0 - 1].unshift({ type: \"loopStart\", loopText: yy.parseMessage($$[$0 - 2]), signalType: yy.LINETYPE.LOOP_START });\n          $$[$0 - 1].push({ type: \"loopEnd\", loopText: $$[$0 - 2], signalType: yy.LINETYPE.LOOP_END });\n          this.$ = $$[$0 - 1];\n          break;\n        case 35:\n          $$[$0 - 1].unshift({ type: \"rectStart\", color: yy.parseMessage($$[$0 - 2]), signalType: yy.LINETYPE.RECT_START });\n          $$[$0 - 1].push({ type: \"rectEnd\", color: yy.parseMessage($$[$0 - 2]), signalType: yy.LINETYPE.RECT_END });\n          this.$ = $$[$0 - 1];\n          break;\n        case 36:\n          $$[$0 - 1].unshift({ type: \"optStart\", optText: yy.parseMessage($$[$0 - 2]), signalType: yy.LINETYPE.OPT_START });\n          $$[$0 - 1].push({ type: \"optEnd\", optText: yy.parseMessage($$[$0 - 2]), signalType: yy.LINETYPE.OPT_END });\n          this.$ = $$[$0 - 1];\n          break;\n        case 37:\n          $$[$0 - 1].unshift({ type: \"altStart\", altText: yy.parseMessage($$[$0 - 2]), signalType: yy.LINETYPE.ALT_START });\n          $$[$0 - 1].push({ type: \"altEnd\", signalType: yy.LINETYPE.ALT_END });\n          this.$ = $$[$0 - 1];\n          break;\n        case 38:\n          $$[$0 - 1].unshift({ type: \"parStart\", parText: yy.parseMessage($$[$0 - 2]), signalType: yy.LINETYPE.PAR_START });\n          $$[$0 - 1].push({ type: \"parEnd\", signalType: yy.LINETYPE.PAR_END });\n          this.$ = $$[$0 - 1];\n          break;\n        case 39:\n          $$[$0 - 1].unshift({ type: \"parStart\", parText: yy.parseMessage($$[$0 - 2]), signalType: yy.LINETYPE.PAR_OVER_START });\n          $$[$0 - 1].push({ type: \"parEnd\", signalType: yy.LINETYPE.PAR_END });\n          this.$ = $$[$0 - 1];\n          break;\n        case 40:\n          $$[$0 - 1].unshift({ type: \"criticalStart\", criticalText: yy.parseMessage($$[$0 - 2]), signalType: yy.LINETYPE.CRITICAL_START });\n          $$[$0 - 1].push({ type: \"criticalEnd\", signalType: yy.LINETYPE.CRITICAL_END });\n          this.$ = $$[$0 - 1];\n          break;\n        case 41:\n          $$[$0 - 1].unshift({ type: \"breakStart\", breakText: yy.parseMessage($$[$0 - 2]), signalType: yy.LINETYPE.BREAK_START });\n          $$[$0 - 1].push({ type: \"breakEnd\", optText: yy.parseMessage($$[$0 - 2]), signalType: yy.LINETYPE.BREAK_END });\n          this.$ = $$[$0 - 1];\n          break;\n        case 43:\n          this.$ = $$[$0 - 3].concat([{ type: \"option\", optionText: yy.parseMessage($$[$0 - 1]), signalType: yy.LINETYPE.CRITICAL_OPTION }, $$[$0]]);\n          break;\n        case 45:\n          this.$ = $$[$0 - 3].concat([{ type: \"and\", parText: yy.parseMessage($$[$0 - 1]), signalType: yy.LINETYPE.PAR_AND }, $$[$0]]);\n          break;\n        case 47:\n          this.$ = $$[$0 - 3].concat([{ type: \"else\", altText: yy.parseMessage($$[$0 - 1]), signalType: yy.LINETYPE.ALT_ELSE }, $$[$0]]);\n          break;\n        case 48:\n          $$[$0 - 3].draw = \"participant\";\n          $$[$0 - 3].type = \"addParticipant\";\n          $$[$0 - 3].description = yy.parseMessage($$[$0 - 1]);\n          this.$ = $$[$0 - 3];\n          break;\n        case 49:\n          $$[$0 - 1].draw = \"participant\";\n          $$[$0 - 1].type = \"addParticipant\";\n          this.$ = $$[$0 - 1];\n          break;\n        case 50:\n          $$[$0 - 3].draw = \"actor\";\n          $$[$0 - 3].type = \"addParticipant\";\n          $$[$0 - 3].description = yy.parseMessage($$[$0 - 1]);\n          this.$ = $$[$0 - 3];\n          break;\n        case 51:\n          $$[$0 - 1].draw = \"actor\";\n          $$[$0 - 1].type = \"addParticipant\";\n          this.$ = $$[$0 - 1];\n          break;\n        case 52:\n          $$[$0 - 1].type = \"destroyParticipant\";\n          this.$ = $$[$0 - 1];\n          break;\n        case 53:\n          this.$ = [$$[$0 - 1], { type: \"addNote\", placement: $$[$0 - 2], actor: $$[$0 - 1].actor, text: $$[$0] }];\n          break;\n        case 54:\n          $$[$0 - 2] = [].concat($$[$0 - 1], $$[$0 - 1]).slice(0, 2);\n          $$[$0 - 2][0] = $$[$0 - 2][0].actor;\n          $$[$0 - 2][1] = $$[$0 - 2][1].actor;\n          this.$ = [$$[$0 - 1], { type: \"addNote\", placement: yy.PLACEMENT.OVER, actor: $$[$0 - 2].slice(0, 2), text: $$[$0] }];\n          break;\n        case 55:\n          this.$ = [$$[$0 - 1], { type: \"addLinks\", actor: $$[$0 - 1].actor, text: $$[$0] }];\n          break;\n        case 56:\n          this.$ = [$$[$0 - 1], { type: \"addALink\", actor: $$[$0 - 1].actor, text: $$[$0] }];\n          break;\n        case 57:\n          this.$ = [$$[$0 - 1], { type: \"addProperties\", actor: $$[$0 - 1].actor, text: $$[$0] }];\n          break;\n        case 58:\n          this.$ = [$$[$0 - 1], { type: \"addDetails\", actor: $$[$0 - 1].actor, text: $$[$0] }];\n          break;\n        case 61:\n          this.$ = [$$[$0 - 2], $$[$0]];\n          break;\n        case 62:\n          this.$ = $$[$0];\n          break;\n        case 63:\n          this.$ = yy.PLACEMENT.LEFTOF;\n          break;\n        case 64:\n          this.$ = yy.PLACEMENT.RIGHTOF;\n          break;\n        case 65:\n          this.$ = [\n            $$[$0 - 4],\n            $$[$0 - 1],\n            { type: \"addMessage\", from: $$[$0 - 4].actor, to: $$[$0 - 1].actor, signalType: $$[$0 - 3], msg: $$[$0], activate: true },\n            { type: \"activeStart\", signalType: yy.LINETYPE.ACTIVE_START, actor: $$[$0 - 1] }\n          ];\n          break;\n        case 66:\n          this.$ = [\n            $$[$0 - 4],\n            $$[$0 - 1],\n            { type: \"addMessage\", from: $$[$0 - 4].actor, to: $$[$0 - 1].actor, signalType: $$[$0 - 3], msg: $$[$0] },\n            { type: \"activeEnd\", signalType: yy.LINETYPE.ACTIVE_END, actor: $$[$0 - 4] }\n          ];\n          break;\n        case 67:\n          this.$ = [$$[$0 - 3], $$[$0 - 1], { type: \"addMessage\", from: $$[$0 - 3].actor, to: $$[$0 - 1].actor, signalType: $$[$0 - 2], msg: $$[$0] }];\n          break;\n        case 68:\n          this.$ = { type: \"addParticipant\", actor: $$[$0] };\n          break;\n        case 69:\n          this.$ = yy.LINETYPE.SOLID_OPEN;\n          break;\n        case 70:\n          this.$ = yy.LINETYPE.DOTTED_OPEN;\n          break;\n        case 71:\n          this.$ = yy.LINETYPE.SOLID;\n          break;\n        case 72:\n          this.$ = yy.LINETYPE.DOTTED;\n          break;\n        case 73:\n          this.$ = yy.LINETYPE.SOLID_CROSS;\n          break;\n        case 74:\n          this.$ = yy.LINETYPE.DOTTED_CROSS;\n          break;\n        case 75:\n          this.$ = yy.LINETYPE.SOLID_POINT;\n          break;\n        case 76:\n          this.$ = yy.LINETYPE.DOTTED_POINT;\n          break;\n        case 77:\n          this.$ = yy.parseMessage($$[$0].trim().substring(1));\n          break;\n      }\n    },\n    table: [{ 3: 1, 4: $V0, 5: $V1, 6: $V2 }, { 1: [3] }, { 3: 5, 4: $V0, 5: $V1, 6: $V2 }, { 3: 6, 4: $V0, 5: $V1, 6: $V2 }, o([1, 4, 5, 13, 14, 18, 21, 23, 29, 30, 31, 33, 35, 36, 37, 38, 39, 41, 43, 44, 46, 50, 52, 53, 54, 59, 60, 61, 62, 70], $V3, { 7: 7 }), { 1: [2, 1] }, { 1: [2, 2] }, { 1: [2, 3], 4: $V4, 5: $V5, 8: 8, 9: 10, 12: 12, 13: $V6, 14: $V7, 17: 15, 18: $V8, 21: $V9, 22: 40, 23: $Va, 24: 19, 25: 20, 26: 21, 27: 22, 28: 23, 29: $Vb, 30: $Vc, 31: $Vd, 33: $Ve, 35: $Vf, 36: $Vg, 37: $Vh, 38: $Vi, 39: $Vj, 41: $Vk, 43: $Vl, 44: $Vm, 46: $Vn, 50: $Vo, 52: $Vp, 53: $Vq, 54: $Vr, 59: $Vs, 60: $Vt, 61: $Vu, 62: $Vv, 70: $Vw }, o($Vx, [2, 5]), { 9: 47, 12: 12, 13: $V6, 14: $V7, 17: 15, 18: $V8, 21: $V9, 22: 40, 23: $Va, 24: 19, 25: 20, 26: 21, 27: 22, 28: 23, 29: $Vb, 30: $Vc, 31: $Vd, 33: $Ve, 35: $Vf, 36: $Vg, 37: $Vh, 38: $Vi, 39: $Vj, 41: $Vk, 43: $Vl, 44: $Vm, 46: $Vn, 50: $Vo, 52: $Vp, 53: $Vq, 54: $Vr, 59: $Vs, 60: $Vt, 61: $Vu, 62: $Vv, 70: $Vw }, o($Vx, [2, 7]), o($Vx, [2, 8]), o($Vx, [2, 14]), { 12: 48, 50: $Vo, 52: $Vp, 53: $Vq }, { 15: [1, 49] }, { 5: [1, 50] }, { 5: [1, 53], 19: [1, 51], 20: [1, 52] }, { 22: 54, 70: $Vw }, { 22: 55, 70: $Vw }, { 5: [1, 56] }, { 5: [1, 57] }, { 5: [1, 58] }, { 5: [1, 59] }, { 5: [1, 60] }, o($Vx, [2, 29]), o($Vx, [2, 30]), { 32: [1, 61] }, { 34: [1, 62] }, o($Vx, [2, 33]), { 15: [1, 63] }, { 15: [1, 64] }, { 15: [1, 65] }, { 15: [1, 66] }, { 15: [1, 67] }, { 15: [1, 68] }, { 15: [1, 69] }, { 15: [1, 70] }, { 22: 71, 70: $Vw }, { 22: 72, 70: $Vw }, { 22: 73, 70: $Vw }, { 67: 74, 71: [1, 75], 72: [1, 76], 73: [1, 77], 74: [1, 78], 75: [1, 79], 76: [1, 80], 77: [1, 81], 78: [1, 82] }, { 55: 83, 57: [1, 84], 65: [1, 85], 66: [1, 86] }, { 22: 87, 70: $Vw }, { 22: 88, 70: $Vw }, { 22: 89, 70: $Vw }, { 22: 90, 70: $Vw }, o([5, 51, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79], [2, 68]), o($Vx, [2, 6]), o($Vx, [2, 15]), o($Vy, [2, 9], { 10: 91 }), o($Vx, [2, 17]), { 5: [1, 93], 19: [1, 92] }, { 5: [1, 94] }, o($Vx, [2, 21]), { 5: [1, 95] }, { 5: [1, 96] }, o($Vx, [2, 24]), o($Vx, [2, 25]), o($Vx, [2, 26]), o($Vx, [2, 27]), o($Vx, [2, 28]), o($Vx, [2, 31]), o($Vx, [2, 32]), o($Vz, $V3, { 7: 97 }), o($Vz, $V3, { 7: 98 }), o($Vz, $V3, { 7: 99 }), o($VA, $V3, { 40: 100, 7: 101 }), o($VB, $V3, { 42: 102, 7: 103 }), o($VB, $V3, { 7: 103, 42: 104 }), o($VC, $V3, { 45: 105, 7: 106 }), o($Vz, $V3, { 7: 107 }), { 5: [1, 109], 51: [1, 108] }, { 5: [1, 111], 51: [1, 110] }, { 5: [1, 112] }, { 22: 115, 68: [1, 113], 69: [1, 114], 70: $Vw }, o($VD, [2, 69]), o($VD, [2, 70]), o($VD, [2, 71]), o($VD, [2, 72]), o($VD, [2, 73]), o($VD, [2, 74]), o($VD, [2, 75]), o($VD, [2, 76]), { 22: 116, 70: $Vw }, { 22: 118, 58: 117, 70: $Vw }, { 70: [2, 63] }, { 70: [2, 64] }, { 56: 119, 79: $VE }, { 56: 121, 79: $VE }, { 56: 122, 79: $VE }, { 56: 123, 79: $VE }, { 4: [1, 126], 5: [1, 128], 11: 125, 12: 127, 16: [1, 124], 50: $Vo, 52: $Vp, 53: $Vq }, { 5: [1, 129] }, o($Vx, [2, 19]), o($Vx, [2, 20]), o($Vx, [2, 22]), o($Vx, [2, 23]), { 4: $V4, 5: $V5, 8: 8, 9: 10, 12: 12, 13: $V6, 14: $V7, 16: [1, 130], 17: 15, 18: $V8, 21: $V9, 22: 40, 23: $Va, 24: 19, 25: 20, 26: 21, 27: 22, 28: 23, 29: $Vb, 30: $Vc, 31: $Vd, 33: $Ve, 35: $Vf, 36: $Vg, 37: $Vh, 38: $Vi, 39: $Vj, 41: $Vk, 43: $Vl, 44: $Vm, 46: $Vn, 50: $Vo, 52: $Vp, 53: $Vq, 54: $Vr, 59: $Vs, 60: $Vt, 61: $Vu, 62: $Vv, 70: $Vw }, { 4: $V4, 5: $V5, 8: 8, 9: 10, 12: 12, 13: $V6, 14: $V7, 16: [1, 131], 17: 15, 18: $V8, 21: $V9, 22: 40, 23: $Va, 24: 19, 25: 20, 26: 21, 27: 22, 28: 23, 29: $Vb, 30: $Vc, 31: $Vd, 33: $Ve, 35: $Vf, 36: $Vg, 37: $Vh, 38: $Vi, 39: $Vj, 41: $Vk, 43: $Vl, 44: $Vm, 46: $Vn, 50: $Vo, 52: $Vp, 53: $Vq, 54: $Vr, 59: $Vs, 60: $Vt, 61: $Vu, 62: $Vv, 70: $Vw }, { 4: $V4, 5: $V5, 8: 8, 9: 10, 12: 12, 13: $V6, 14: $V7, 16: [1, 132], 17: 15, 18: $V8, 21: $V9, 22: 40, 23: $Va, 24: 19, 25: 20, 26: 21, 27: 22, 28: 23, 29: $Vb, 30: $Vc, 31: $Vd, 33: $Ve, 35: $Vf, 36: $Vg, 37: $Vh, 38: $Vi, 39: $Vj, 41: $Vk, 43: $Vl, 44: $Vm, 46: $Vn, 50: $Vo, 52: $Vp, 53: $Vq, 54: $Vr, 59: $Vs, 60: $Vt, 61: $Vu, 62: $Vv, 70: $Vw }, { 16: [1, 133] }, { 4: $V4, 5: $V5, 8: 8, 9: 10, 12: 12, 13: $V6, 14: $V7, 16: [2, 46], 17: 15, 18: $V8, 21: $V9, 22: 40, 23: $Va, 24: 19, 25: 20, 26: 21, 27: 22, 28: 23, 29: $Vb, 30: $Vc, 31: $Vd, 33: $Ve, 35: $Vf, 36: $Vg, 37: $Vh, 38: $Vi, 39: $Vj, 41: $Vk, 43: $Vl, 44: $Vm, 46: $Vn, 49: [1, 134], 50: $Vo, 52: $Vp, 53: $Vq, 54: $Vr, 59: $Vs, 60: $Vt, 61: $Vu, 62: $Vv, 70: $Vw }, { 16: [1, 135] }, { 4: $V4, 5: $V5, 8: 8, 9: 10, 12: 12, 13: $V6, 14: $V7, 16: [2, 44], 17: 15, 18: $V8, 21: $V9, 22: 40, 23: $Va, 24: 19, 25: 20, 26: 21, 27: 22, 28: 23, 29: $Vb, 30: $Vc, 31: $Vd, 33: $Ve, 35: $Vf, 36: $Vg, 37: $Vh, 38: $Vi, 39: $Vj, 41: $Vk, 43: $Vl, 44: $Vm, 46: $Vn, 48: [1, 136], 50: $Vo, 52: $Vp, 53: $Vq, 54: $Vr, 59: $Vs, 60: $Vt, 61: $Vu, 62: $Vv, 70: $Vw }, { 16: [1, 137] }, { 16: [1, 138] }, { 4: $V4, 5: $V5, 8: 8, 9: 10, 12: 12, 13: $V6, 14: $V7, 16: [2, 42], 17: 15, 18: $V8, 21: $V9, 22: 40, 23: $Va, 24: 19, 25: 20, 26: 21, 27: 22, 28: 23, 29: $Vb, 30: $Vc, 31: $Vd, 33: $Ve, 35: $Vf, 36: $Vg, 37: $Vh, 38: $Vi, 39: $Vj, 41: $Vk, 43: $Vl, 44: $Vm, 46: $Vn, 47: [1, 139], 50: $Vo, 52: $Vp, 53: $Vq, 54: $Vr, 59: $Vs, 60: $Vt, 61: $Vu, 62: $Vv, 70: $Vw }, { 4: $V4, 5: $V5, 8: 8, 9: 10, 12: 12, 13: $V6, 14: $V7, 16: [1, 140], 17: 15, 18: $V8, 21: $V9, 22: 40, 23: $Va, 24: 19, 25: 20, 26: 21, 27: 22, 28: 23, 29: $Vb, 30: $Vc, 31: $Vd, 33: $Ve, 35: $Vf, 36: $Vg, 37: $Vh, 38: $Vi, 39: $Vj, 41: $Vk, 43: $Vl, 44: $Vm, 46: $Vn, 50: $Vo, 52: $Vp, 53: $Vq, 54: $Vr, 59: $Vs, 60: $Vt, 61: $Vu, 62: $Vv, 70: $Vw }, { 15: [1, 141] }, o($Vx, [2, 49]), { 15: [1, 142] }, o($Vx, [2, 51]), o($Vx, [2, 52]), { 22: 143, 70: $Vw }, { 22: 144, 70: $Vw }, { 56: 145, 79: $VE }, { 56: 146, 79: $VE }, { 56: 147, 79: $VE }, { 64: [1, 148], 79: [2, 62] }, { 5: [2, 55] }, { 5: [2, 77] }, { 5: [2, 56] }, { 5: [2, 57] }, { 5: [2, 58] }, o($Vx, [2, 16]), o($Vy, [2, 10]), { 12: 149, 50: $Vo, 52: $Vp, 53: $Vq }, o($Vy, [2, 12]), o($Vy, [2, 13]), o($Vx, [2, 18]), o($Vx, [2, 34]), o($Vx, [2, 35]), o($Vx, [2, 36]), o($Vx, [2, 37]), { 15: [1, 150] }, o($Vx, [2, 38]), { 15: [1, 151] }, o($Vx, [2, 39]), o($Vx, [2, 40]), { 15: [1, 152] }, o($Vx, [2, 41]), { 5: [1, 153] }, { 5: [1, 154] }, { 56: 155, 79: $VE }, { 56: 156, 79: $VE }, { 5: [2, 67] }, { 5: [2, 53] }, { 5: [2, 54] }, { 22: 157, 70: $Vw }, o($Vy, [2, 11]), o($VA, $V3, { 7: 101, 40: 158 }), o($VB, $V3, { 7: 103, 42: 159 }), o($VC, $V3, { 7: 106, 45: 160 }), o($Vx, [2, 48]), o($Vx, [2, 50]), { 5: [2, 65] }, { 5: [2, 66] }, { 79: [2, 61] }, { 16: [2, 47] }, { 16: [2, 45] }, { 16: [2, 43] }],\n    defaultActions: { 5: [2, 1], 6: [2, 2], 85: [2, 63], 86: [2, 64], 119: [2, 55], 120: [2, 77], 121: [2, 56], 122: [2, 57], 123: [2, 58], 145: [2, 67], 146: [2, 53], 147: [2, 54], 155: [2, 65], 156: [2, 66], 157: [2, 61], 158: [2, 47], 159: [2, 45], 160: [2, 43] },\n    parseError: function parseError(str, hash) {\n      if (hash.recoverable) {\n        this.trace(str);\n      } else {\n        var error = new Error(str);\n        error.hash = hash;\n        throw error;\n      }\n    },\n    parse: function parse(input) {\n      var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = \"\", yylineno = 0, yyleng = 0, TERROR = 2, EOF = 1;\n      var args = lstack.slice.call(arguments, 1);\n      var lexer2 = Object.create(this.lexer);\n      var sharedState = { yy: {} };\n      for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n          sharedState.yy[k] = this.yy[k];\n        }\n      }\n      lexer2.setInput(input, sharedState.yy);\n      sharedState.yy.lexer = lexer2;\n      sharedState.yy.parser = this;\n      if (typeof lexer2.yylloc == \"undefined\") {\n        lexer2.yylloc = {};\n      }\n      var yyloc = lexer2.yylloc;\n      lstack.push(yyloc);\n      var ranges = lexer2.options && lexer2.options.ranges;\n      if (typeof sharedState.yy.parseError === \"function\") {\n        this.parseError = sharedState.yy.parseError;\n      } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n      }\n      function lex() {\n        var token;\n        token = tstack.pop() || lexer2.lex() || EOF;\n        if (typeof token !== \"number\") {\n          if (token instanceof Array) {\n            tstack = token;\n            token = tstack.pop();\n          }\n          token = self.symbols_[token] || token;\n        }\n        return token;\n      }\n      var symbol, state2, action, r, yyval = {}, p, len, newState, expected;\n      while (true) {\n        state2 = stack[stack.length - 1];\n        if (this.defaultActions[state2]) {\n          action = this.defaultActions[state2];\n        } else {\n          if (symbol === null || typeof symbol == \"undefined\") {\n            symbol = lex();\n          }\n          action = table[state2] && table[state2][symbol];\n        }\n        if (typeof action === \"undefined\" || !action.length || !action[0]) {\n          var errStr = \"\";\n          expected = [];\n          for (p in table[state2]) {\n            if (this.terminals_[p] && p > TERROR) {\n              expected.push(\"'\" + this.terminals_[p] + \"'\");\n            }\n          }\n          if (lexer2.showPosition) {\n            errStr = \"Parse error on line \" + (yylineno + 1) + \":\\n\" + lexer2.showPosition() + \"\\nExpecting \" + expected.join(\", \") + \", got '\" + (this.terminals_[symbol] || symbol) + \"'\";\n          } else {\n            errStr = \"Parse error on line \" + (yylineno + 1) + \": Unexpected \" + (symbol == EOF ? \"end of input\" : \"'\" + (this.terminals_[symbol] || symbol) + \"'\");\n          }\n          this.parseError(errStr, {\n            text: lexer2.match,\n            token: this.terminals_[symbol] || symbol,\n            line: lexer2.yylineno,\n            loc: yyloc,\n            expected\n          });\n        }\n        if (action[0] instanceof Array && action.length > 1) {\n          throw new Error(\"Parse Error: multiple actions possible at state: \" + state2 + \", token: \" + symbol);\n        }\n        switch (action[0]) {\n          case 1:\n            stack.push(symbol);\n            vstack.push(lexer2.yytext);\n            lstack.push(lexer2.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            {\n              yyleng = lexer2.yyleng;\n              yytext = lexer2.yytext;\n              yylineno = lexer2.yylineno;\n              yyloc = lexer2.yylloc;\n            }\n            break;\n          case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n              first_line: lstack[lstack.length - (len || 1)].first_line,\n              last_line: lstack[lstack.length - 1].last_line,\n              first_column: lstack[lstack.length - (len || 1)].first_column,\n              last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n              yyval._$.range = [\n                lstack[lstack.length - (len || 1)].range[0],\n                lstack[lstack.length - 1].range[1]\n              ];\n            }\n            r = this.performAction.apply(yyval, [\n              yytext,\n              yyleng,\n              yylineno,\n              sharedState.yy,\n              action[1],\n              vstack,\n              lstack\n            ].concat(args));\n            if (typeof r !== \"undefined\") {\n              return r;\n            }\n            if (len) {\n              stack = stack.slice(0, -1 * len * 2);\n              vstack = vstack.slice(0, -1 * len);\n              lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n          case 3:\n            return true;\n        }\n      }\n      return true;\n    }\n  };\n  var lexer = function() {\n    var lexer2 = {\n      EOF: 1,\n      parseError: function parseError(str, hash) {\n        if (this.yy.parser) {\n          this.yy.parser.parseError(str, hash);\n        } else {\n          throw new Error(str);\n        }\n      },\n      // resets the lexer, sets new input\n      setInput: function(input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = \"\";\n        this.conditionStack = [\"INITIAL\"];\n        this.yylloc = {\n          first_line: 1,\n          first_column: 0,\n          last_line: 1,\n          last_column: 0\n        };\n        if (this.options.ranges) {\n          this.yylloc.range = [0, 0];\n        }\n        this.offset = 0;\n        return this;\n      },\n      // consumes and returns one char from the input\n      input: function() {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n          this.yylineno++;\n          this.yylloc.last_line++;\n        } else {\n          this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n          this.yylloc.range[1]++;\n        }\n        this._input = this._input.slice(1);\n        return ch;\n      },\n      // unshifts one char (or a string) into the input\n      unput: function(ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n        if (lines.length - 1) {\n          this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n        this.yylloc = {\n          first_line: this.yylloc.first_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.first_column,\n          last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len\n        };\n        if (this.options.ranges) {\n          this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n      },\n      // When called from action, caches matched text and appends it on next action\n      more: function() {\n        this._more = true;\n        return this;\n      },\n      // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\n      reject: function() {\n        if (this.options.backtrack_lexer) {\n          this._backtrack = true;\n        } else {\n          return this.parseError(\"Lexical error on line \" + (this.yylineno + 1) + \". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n\" + this.showPosition(), {\n            text: \"\",\n            token: null,\n            line: this.yylineno\n          });\n        }\n        return this;\n      },\n      // retain first n characters of the match\n      less: function(n) {\n        this.unput(this.match.slice(n));\n      },\n      // displays already matched input, i.e. for error messages\n      pastInput: function() {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? \"...\" : \"\") + past.substr(-20).replace(/\\n/g, \"\");\n      },\n      // displays upcoming input, i.e. for error messages\n      upcomingInput: function() {\n        var next = this.match;\n        if (next.length < 20) {\n          next += this._input.substr(0, 20 - next.length);\n        }\n        return (next.substr(0, 20) + (next.length > 20 ? \"...\" : \"\")).replace(/\\n/g, \"\");\n      },\n      // displays the character position where the lexing error occurred, i.e. for error messages\n      showPosition: function() {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n      },\n      // test the lexed token: return FALSE when not a match, otherwise return token\n      test_match: function(match, indexed_rule) {\n        var token, lines, backup;\n        if (this.options.backtrack_lexer) {\n          backup = {\n            yylineno: this.yylineno,\n            yylloc: {\n              first_line: this.yylloc.first_line,\n              last_line: this.last_line,\n              first_column: this.yylloc.first_column,\n              last_column: this.yylloc.last_column\n            },\n            yytext: this.yytext,\n            match: this.match,\n            matches: this.matches,\n            matched: this.matched,\n            yyleng: this.yyleng,\n            offset: this.offset,\n            _more: this._more,\n            _input: this._input,\n            yy: this.yy,\n            conditionStack: this.conditionStack.slice(0),\n            done: this.done\n          };\n          if (this.options.ranges) {\n            backup.yylloc.range = this.yylloc.range.slice(0);\n          }\n        }\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n          this.yylineno += lines.length;\n        }\n        this.yylloc = {\n          first_line: this.yylloc.last_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.last_column,\n          last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length : this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n          this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n          this.done = false;\n        }\n        if (token) {\n          return token;\n        } else if (this._backtrack) {\n          for (var k in backup) {\n            this[k] = backup[k];\n          }\n          return false;\n        }\n        return false;\n      },\n      // return next match in input\n      next: function() {\n        if (this.done) {\n          return this.EOF;\n        }\n        if (!this._input) {\n          this.done = true;\n        }\n        var token, match, tempMatch, index;\n        if (!this._more) {\n          this.yytext = \"\";\n          this.match = \"\";\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n          tempMatch = this._input.match(this.rules[rules[i]]);\n          if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n            match = tempMatch;\n            index = i;\n            if (this.options.backtrack_lexer) {\n              token = this.test_match(tempMatch, rules[i]);\n              if (token !== false) {\n                return token;\n              } else if (this._backtrack) {\n                match = false;\n                continue;\n              } else {\n                return false;\n              }\n            } else if (!this.options.flex) {\n              break;\n            }\n          }\n        }\n        if (match) {\n          token = this.test_match(match, rules[index]);\n          if (token !== false) {\n            return token;\n          }\n          return false;\n        }\n        if (this._input === \"\") {\n          return this.EOF;\n        } else {\n          return this.parseError(\"Lexical error on line \" + (this.yylineno + 1) + \". Unrecognized text.\\n\" + this.showPosition(), {\n            text: \"\",\n            token: null,\n            line: this.yylineno\n          });\n        }\n      },\n      // return next match that has a token\n      lex: function lex() {\n        var r = this.next();\n        if (r) {\n          return r;\n        } else {\n          return this.lex();\n        }\n      },\n      // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\n      begin: function begin(condition) {\n        this.conditionStack.push(condition);\n      },\n      // pop the previously active lexer condition state off the condition stack\n      popState: function popState() {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n          return this.conditionStack.pop();\n        } else {\n          return this.conditionStack[0];\n        }\n      },\n      // produce the lexer rule set which is active for the currently active lexer condition state\n      _currentRules: function _currentRules() {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n          return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n          return this.conditions[\"INITIAL\"].rules;\n        }\n      },\n      // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\n      topState: function topState(n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n          return this.conditionStack[n];\n        } else {\n          return \"INITIAL\";\n        }\n      },\n      // alias for begin(condition)\n      pushState: function pushState(condition) {\n        this.begin(condition);\n      },\n      // return the number of states currently on the stack\n      stateStackSize: function stateStackSize() {\n        return this.conditionStack.length;\n      },\n      options: { \"case-insensitive\": true },\n      performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {\n        switch ($avoiding_name_collisions) {\n          case 0:\n            return 5;\n          case 1:\n            break;\n          case 2:\n            break;\n          case 3:\n            break;\n          case 4:\n            break;\n          case 5:\n            break;\n          case 6:\n            return 19;\n          case 7:\n            this.begin(\"LINE\");\n            return 14;\n          case 8:\n            this.begin(\"ID\");\n            return 50;\n          case 9:\n            this.begin(\"ID\");\n            return 52;\n          case 10:\n            return 13;\n          case 11:\n            this.begin(\"ID\");\n            return 53;\n          case 12:\n            yy_.yytext = yy_.yytext.trim();\n            this.begin(\"ALIAS\");\n            return 70;\n          case 13:\n            this.popState();\n            this.popState();\n            this.begin(\"LINE\");\n            return 51;\n          case 14:\n            this.popState();\n            this.popState();\n            return 5;\n          case 15:\n            this.begin(\"LINE\");\n            return 36;\n          case 16:\n            this.begin(\"LINE\");\n            return 37;\n          case 17:\n            this.begin(\"LINE\");\n            return 38;\n          case 18:\n            this.begin(\"LINE\");\n            return 39;\n          case 19:\n            this.begin(\"LINE\");\n            return 49;\n          case 20:\n            this.begin(\"LINE\");\n            return 41;\n          case 21:\n            this.begin(\"LINE\");\n            return 43;\n          case 22:\n            this.begin(\"LINE\");\n            return 48;\n          case 23:\n            this.begin(\"LINE\");\n            return 44;\n          case 24:\n            this.begin(\"LINE\");\n            return 47;\n          case 25:\n            this.begin(\"LINE\");\n            return 46;\n          case 26:\n            this.popState();\n            return 15;\n          case 27:\n            return 16;\n          case 28:\n            return 65;\n          case 29:\n            return 66;\n          case 30:\n            return 59;\n          case 31:\n            return 60;\n          case 32:\n            return 61;\n          case 33:\n            return 62;\n          case 34:\n            return 57;\n          case 35:\n            return 54;\n          case 36:\n            this.begin(\"ID\");\n            return 21;\n          case 37:\n            this.begin(\"ID\");\n            return 23;\n          case 38:\n            return 29;\n          case 39:\n            return 30;\n          case 40:\n            this.begin(\"acc_title\");\n            return 31;\n          case 41:\n            this.popState();\n            return \"acc_title_value\";\n          case 42:\n            this.begin(\"acc_descr\");\n            return 33;\n          case 43:\n            this.popState();\n            return \"acc_descr_value\";\n          case 44:\n            this.begin(\"acc_descr_multiline\");\n            break;\n          case 45:\n            this.popState();\n            break;\n          case 46:\n            return \"acc_descr_multiline_value\";\n          case 47:\n            return 6;\n          case 48:\n            return 18;\n          case 49:\n            return 20;\n          case 50:\n            return 64;\n          case 51:\n            return 5;\n          case 52:\n            yy_.yytext = yy_.yytext.trim();\n            return 70;\n          case 53:\n            return 73;\n          case 54:\n            return 74;\n          case 55:\n            return 71;\n          case 56:\n            return 72;\n          case 57:\n            return 75;\n          case 58:\n            return 76;\n          case 59:\n            return 77;\n          case 60:\n            return 78;\n          case 61:\n            return 79;\n          case 62:\n            return 68;\n          case 63:\n            return 69;\n          case 64:\n            return 5;\n          case 65:\n            return \"INVALID\";\n        }\n      },\n      rules: [/^(?:[\\n]+)/i, /^(?:\\s+)/i, /^(?:((?!\\n)\\s)+)/i, /^(?:#[^\\n]*)/i, /^(?:%(?!\\{)[^\\n]*)/i, /^(?:[^\\}]%%[^\\n]*)/i, /^(?:[0-9]+(?=[ \\n]+))/i, /^(?:box\\b)/i, /^(?:participant\\b)/i, /^(?:actor\\b)/i, /^(?:create\\b)/i, /^(?:destroy\\b)/i, /^(?:[^\\->:\\n,;]+?([\\-]*[^\\->:\\n,;]+?)*?(?=((?!\\n)\\s)+as(?!\\n)\\s|[#\\n;]|$))/i, /^(?:as\\b)/i, /^(?:(?:))/i, /^(?:loop\\b)/i, /^(?:rect\\b)/i, /^(?:opt\\b)/i, /^(?:alt\\b)/i, /^(?:else\\b)/i, /^(?:par\\b)/i, /^(?:par_over\\b)/i, /^(?:and\\b)/i, /^(?:critical\\b)/i, /^(?:option\\b)/i, /^(?:break\\b)/i, /^(?:(?:[:]?(?:no)?wrap)?[^#\\n;]*)/i, /^(?:end\\b)/i, /^(?:left of\\b)/i, /^(?:right of\\b)/i, /^(?:links\\b)/i, /^(?:link\\b)/i, /^(?:properties\\b)/i, /^(?:details\\b)/i, /^(?:over\\b)/i, /^(?:note\\b)/i, /^(?:activate\\b)/i, /^(?:deactivate\\b)/i, /^(?:title\\s[^#\\n;]+)/i, /^(?:title:\\s[^#\\n;]+)/i, /^(?:accTitle\\s*:\\s*)/i, /^(?:(?!\\n||)*[^\\n]*)/i, /^(?:accDescr\\s*:\\s*)/i, /^(?:(?!\\n||)*[^\\n]*)/i, /^(?:accDescr\\s*\\{\\s*)/i, /^(?:[\\}])/i, /^(?:[^\\}]*)/i, /^(?:sequenceDiagram\\b)/i, /^(?:autonumber\\b)/i, /^(?:off\\b)/i, /^(?:,)/i, /^(?:;)/i, /^(?:[^\\+\\->:\\n,;]+((?!(-x|--x|-\\)|--\\)))[\\-]*[^\\+\\->:\\n,;]+)*)/i, /^(?:->>)/i, /^(?:-->>)/i, /^(?:->)/i, /^(?:-->)/i, /^(?:-[x])/i, /^(?:--[x])/i, /^(?:-[\\)])/i, /^(?:--[\\)])/i, /^(?::(?:(?:no)?wrap)?[^#\\n;]+)/i, /^(?:\\+)/i, /^(?:-)/i, /^(?:$)/i, /^(?:.)/i],\n      conditions: { \"acc_descr_multiline\": { \"rules\": [45, 46], \"inclusive\": false }, \"acc_descr\": { \"rules\": [43], \"inclusive\": false }, \"acc_title\": { \"rules\": [41], \"inclusive\": false }, \"ID\": { \"rules\": [2, 3, 12], \"inclusive\": false }, \"ALIAS\": { \"rules\": [2, 3, 13, 14], \"inclusive\": false }, \"LINE\": { \"rules\": [2, 3, 26], \"inclusive\": false }, \"INITIAL\": { \"rules\": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65], \"inclusive\": true } }\n    };\n    return lexer2;\n  }();\n  parser2.lexer = lexer;\n  function Parser() {\n    this.yy = {};\n  }\n  Parser.prototype = parser2;\n  parser2.Parser = Parser;\n  return new Parser();\n}();\nparser.parser = parser;\nconst parser$1 = parser;\nclass ImperativeState {\n  /**\n   * @param init - Function that creates the default state.\n   */\n  constructor(init) {\n    this.init = init;\n    this.records = this.init();\n  }\n  reset() {\n    this.records = this.init();\n  }\n}\nconst state = new ImperativeState(() => ({\n  prevActor: void 0,\n  actors: {},\n  createdActors: {},\n  destroyedActors: {},\n  boxes: [],\n  messages: [],\n  notes: [],\n  sequenceNumbersEnabled: false,\n  wrapEnabled: void 0,\n  currentBox: void 0,\n  lastCreated: void 0,\n  lastDestroyed: void 0\n}));\nconst addBox = function(data) {\n  state.records.boxes.push({\n    name: data.text,\n    wrap: data.wrap === void 0 && autoWrap() || !!data.wrap,\n    fill: data.color,\n    actorKeys: []\n  });\n  state.records.currentBox = state.records.boxes.slice(-1)[0];\n};\nconst addActor = function(id, name, description, type) {\n  let assignedBox = state.records.currentBox;\n  const old = state.records.actors[id];\n  if (old) {\n    if (state.records.currentBox && old.box && state.records.currentBox !== old.box) {\n      throw new Error(\n        \"A same participant should only be defined in one Box: \" + old.name + \" can't be in '\" + old.box.name + \"' and in '\" + state.records.currentBox.name + \"' at the same time.\"\n      );\n    }\n    assignedBox = old.box ? old.box : state.records.currentBox;\n    old.box = assignedBox;\n    if (old && name === old.name && description == null) {\n      return;\n    }\n  }\n  if (description == null || description.text == null) {\n    description = { text: name, wrap: null, type };\n  }\n  if (type == null || description.text == null) {\n    description = { text: name, wrap: null, type };\n  }\n  state.records.actors[id] = {\n    box: assignedBox,\n    name,\n    description: description.text,\n    wrap: description.wrap === void 0 && autoWrap() || !!description.wrap,\n    prevActor: state.records.prevActor,\n    links: {},\n    properties: {},\n    actorCnt: null,\n    rectData: null,\n    type: type || \"participant\"\n  };\n  if (state.records.prevActor && state.records.actors[state.records.prevActor]) {\n    state.records.actors[state.records.prevActor].nextActor = id;\n  }\n  if (state.records.currentBox) {\n    state.records.currentBox.actorKeys.push(id);\n  }\n  state.records.prevActor = id;\n};\nconst activationCount = (part) => {\n  let i;\n  let count = 0;\n  for (i = 0; i < state.records.messages.length; i++) {\n    if (state.records.messages[i].type === LINETYPE.ACTIVE_START && state.records.messages[i].from.actor === part) {\n      count++;\n    }\n    if (state.records.messages[i].type === LINETYPE.ACTIVE_END && state.records.messages[i].from.actor === part) {\n      count--;\n    }\n  }\n  return count;\n};\nconst addMessage = function(idFrom, idTo, message, answer) {\n  state.records.messages.push({\n    from: idFrom,\n    to: idTo,\n    message: message.text,\n    wrap: message.wrap === void 0 && autoWrap() || !!message.wrap,\n    answer\n  });\n};\nconst addSignal = function(idFrom, idTo, message = { text: void 0, wrap: void 0 }, messageType, activate = false) {\n  if (messageType === LINETYPE.ACTIVE_END) {\n    const cnt = activationCount(idFrom.actor);\n    if (cnt < 1) {\n      let error = new Error(\"Trying to inactivate an inactive participant (\" + idFrom.actor + \")\");\n      error.hash = {\n        text: \"->>-\",\n        token: \"->>-\",\n        line: \"1\",\n        loc: { first_line: 1, last_line: 1, first_column: 1, last_column: 1 },\n        expected: [\"'ACTIVE_PARTICIPANT'\"]\n      };\n      throw error;\n    }\n  }\n  state.records.messages.push({\n    from: idFrom,\n    to: idTo,\n    message: message.text,\n    wrap: message.wrap === void 0 && autoWrap() || !!message.wrap,\n    type: messageType,\n    activate\n  });\n  return true;\n};\nconst hasAtLeastOneBox = function() {\n  return state.records.boxes.length > 0;\n};\nconst hasAtLeastOneBoxWithTitle = function() {\n  return state.records.boxes.some((b) => b.name);\n};\nconst getMessages = function() {\n  return state.records.messages;\n};\nconst getBoxes = function() {\n  return state.records.boxes;\n};\nconst getActors = function() {\n  return state.records.actors;\n};\nconst getCreatedActors = function() {\n  return state.records.createdActors;\n};\nconst getDestroyedActors = function() {\n  return state.records.destroyedActors;\n};\nconst getActor = function(id) {\n  return state.records.actors[id];\n};\nconst getActorKeys = function() {\n  return Object.keys(state.records.actors);\n};\nconst enableSequenceNumbers = function() {\n  state.records.sequenceNumbersEnabled = true;\n};\nconst disableSequenceNumbers = function() {\n  state.records.sequenceNumbersEnabled = false;\n};\nconst showSequenceNumbers = () => state.records.sequenceNumbersEnabled;\nconst setWrap = function(wrapSetting) {\n  state.records.wrapEnabled = wrapSetting;\n};\nconst autoWrap = () => {\n  if (state.records.wrapEnabled !== void 0) {\n    return state.records.wrapEnabled;\n  }\n  return getConfig().sequence.wrap;\n};\nconst clear = function() {\n  state.reset();\n  clear$1();\n};\nconst parseMessage = function(str) {\n  const _str = str.trim();\n  const message = {\n    text: _str.replace(/^:?(?:no)?wrap:/, \"\").trim(),\n    wrap: _str.match(/^:?wrap:/) !== null ? true : _str.match(/^:?nowrap:/) !== null ? false : void 0\n  };\n  log.debug(\"parseMessage:\", message);\n  return message;\n};\nconst parseBoxData = function(str) {\n  const match = str.match(/^((?:rgba?|hsla?)\\s*\\(.*\\)|\\w*)(.*)$/);\n  let color = match != null && match[1] ? match[1].trim() : \"transparent\";\n  let title = match != null && match[2] ? match[2].trim() : void 0;\n  if (window && window.CSS) {\n    if (!window.CSS.supports(\"color\", color)) {\n      color = \"transparent\";\n      title = str.trim();\n    }\n  } else {\n    const style = new Option().style;\n    style.color = color;\n    if (style.color !== color) {\n      color = \"transparent\";\n      title = str.trim();\n    }\n  }\n  return {\n    color,\n    text: title !== void 0 ? sanitizeText(title.replace(/^:?(?:no)?wrap:/, \"\"), getConfig()) : void 0,\n    wrap: title !== void 0 ? title.match(/^:?wrap:/) !== null ? true : title.match(/^:?nowrap:/) !== null ? false : void 0 : void 0\n  };\n};\nconst LINETYPE = {\n  SOLID: 0,\n  DOTTED: 1,\n  NOTE: 2,\n  SOLID_CROSS: 3,\n  DOTTED_CROSS: 4,\n  SOLID_OPEN: 5,\n  DOTTED_OPEN: 6,\n  LOOP_START: 10,\n  LOOP_END: 11,\n  ALT_START: 12,\n  ALT_ELSE: 13,\n  ALT_END: 14,\n  OPT_START: 15,\n  OPT_END: 16,\n  ACTIVE_START: 17,\n  ACTIVE_END: 18,\n  PAR_START: 19,\n  PAR_AND: 20,\n  PAR_END: 21,\n  RECT_START: 22,\n  RECT_END: 23,\n  SOLID_POINT: 24,\n  DOTTED_POINT: 25,\n  AUTONUMBER: 26,\n  CRITICAL_START: 27,\n  CRITICAL_OPTION: 28,\n  CRITICAL_END: 29,\n  BREAK_START: 30,\n  BREAK_END: 31,\n  PAR_OVER_START: 32\n};\nconst ARROWTYPE = {\n  FILLED: 0,\n  OPEN: 1\n};\nconst PLACEMENT = {\n  LEFTOF: 0,\n  RIGHTOF: 1,\n  OVER: 2\n};\nconst addNote = function(actor, placement, message) {\n  const note = {\n    actor,\n    placement,\n    message: message.text,\n    wrap: message.wrap === void 0 && autoWrap() || !!message.wrap\n  };\n  const actors = [].concat(actor, actor);\n  state.records.notes.push(note);\n  state.records.messages.push({\n    from: actors[0],\n    to: actors[1],\n    message: message.text,\n    wrap: message.wrap === void 0 && autoWrap() || !!message.wrap,\n    type: LINETYPE.NOTE,\n    placement\n  });\n};\nconst addLinks = function(actorId, text) {\n  const actor = getActor(actorId);\n  try {\n    let sanitizedText = sanitizeText(text.text, getConfig());\n    sanitizedText = sanitizedText.replace(/&amp;/g, \"&\");\n    sanitizedText = sanitizedText.replace(/&equals;/g, \"=\");\n    const links = JSON.parse(sanitizedText);\n    insertLinks(actor, links);\n  } catch (e) {\n    log.error(\"error while parsing actor link text\", e);\n  }\n};\nconst addALink = function(actorId, text) {\n  const actor = getActor(actorId);\n  try {\n    const links = {};\n    let sanitizedText = sanitizeText(text.text, getConfig());\n    var sep = sanitizedText.indexOf(\"@\");\n    sanitizedText = sanitizedText.replace(/&amp;/g, \"&\");\n    sanitizedText = sanitizedText.replace(/&equals;/g, \"=\");\n    var label = sanitizedText.slice(0, sep - 1).trim();\n    var link = sanitizedText.slice(sep + 1).trim();\n    links[label] = link;\n    insertLinks(actor, links);\n  } catch (e) {\n    log.error(\"error while parsing actor link text\", e);\n  }\n};\nfunction insertLinks(actor, links) {\n  if (actor.links == null) {\n    actor.links = links;\n  } else {\n    for (let key in links) {\n      actor.links[key] = links[key];\n    }\n  }\n}\nconst addProperties = function(actorId, text) {\n  const actor = getActor(actorId);\n  try {\n    let sanitizedText = sanitizeText(text.text, getConfig());\n    const properties = JSON.parse(sanitizedText);\n    insertProperties(actor, properties);\n  } catch (e) {\n    log.error(\"error while parsing actor properties text\", e);\n  }\n};\nfunction insertProperties(actor, properties) {\n  if (actor.properties == null) {\n    actor.properties = properties;\n  } else {\n    for (let key in properties) {\n      actor.properties[key] = properties[key];\n    }\n  }\n}\nfunction boxEnd() {\n  state.records.currentBox = void 0;\n}\nconst addDetails = function(actorId, text) {\n  const actor = getActor(actorId);\n  const elem = document.getElementById(text.text);\n  try {\n    const text2 = elem.innerHTML;\n    const details = JSON.parse(text2);\n    if (details[\"properties\"]) {\n      insertProperties(actor, details[\"properties\"]);\n    }\n    if (details[\"links\"]) {\n      insertLinks(actor, details[\"links\"]);\n    }\n  } catch (e) {\n    log.error(\"error while parsing actor details text\", e);\n  }\n};\nconst getActorProperty = function(actor, key) {\n  if (actor !== void 0 && actor.properties !== void 0) {\n    return actor.properties[key];\n  }\n  return void 0;\n};\nconst apply = function(param) {\n  if (Array.isArray(param)) {\n    param.forEach(function(item) {\n      apply(item);\n    });\n  } else {\n    switch (param.type) {\n      case \"sequenceIndex\":\n        state.records.messages.push({\n          from: void 0,\n          to: void 0,\n          message: {\n            start: param.sequenceIndex,\n            step: param.sequenceIndexStep,\n            visible: param.sequenceVisible\n          },\n          wrap: false,\n          type: param.signalType\n        });\n        break;\n      case \"addParticipant\":\n        addActor(param.actor, param.actor, param.description, param.draw);\n        break;\n      case \"createParticipant\":\n        if (state.records.actors[param.actor]) {\n          throw new Error(\n            \"It is not possible to have actors with the same id, even if one is destroyed before the next is created. Use 'AS' aliases to simulate the behavior\"\n          );\n        }\n        state.records.lastCreated = param.actor;\n        addActor(param.actor, param.actor, param.description, param.draw);\n        state.records.createdActors[param.actor] = state.records.messages.length;\n        break;\n      case \"destroyParticipant\":\n        state.records.lastDestroyed = param.actor;\n        state.records.destroyedActors[param.actor] = state.records.messages.length;\n        break;\n      case \"activeStart\":\n        addSignal(param.actor, void 0, void 0, param.signalType);\n        break;\n      case \"activeEnd\":\n        addSignal(param.actor, void 0, void 0, param.signalType);\n        break;\n      case \"addNote\":\n        addNote(param.actor, param.placement, param.text);\n        break;\n      case \"addLinks\":\n        addLinks(param.actor, param.text);\n        break;\n      case \"addALink\":\n        addALink(param.actor, param.text);\n        break;\n      case \"addProperties\":\n        addProperties(param.actor, param.text);\n        break;\n      case \"addDetails\":\n        addDetails(param.actor, param.text);\n        break;\n      case \"addMessage\":\n        if (state.records.lastCreated) {\n          if (param.to !== state.records.lastCreated) {\n            throw new Error(\n              \"The created participant \" + state.records.lastCreated + \" does not have an associated creating message after its declaration. Please check the sequence diagram.\"\n            );\n          } else {\n            state.records.lastCreated = void 0;\n          }\n        } else if (state.records.lastDestroyed) {\n          if (param.to !== state.records.lastDestroyed && param.from !== state.records.lastDestroyed) {\n            throw new Error(\n              \"The destroyed participant \" + state.records.lastDestroyed + \" does not have an associated destroying message after its declaration. Please check the sequence diagram.\"\n            );\n          } else {\n            state.records.lastDestroyed = void 0;\n          }\n        }\n        addSignal(param.from, param.to, param.msg, param.signalType, param.activate);\n        break;\n      case \"boxStart\":\n        addBox(param.boxData);\n        break;\n      case \"boxEnd\":\n        boxEnd();\n        break;\n      case \"loopStart\":\n        addSignal(void 0, void 0, param.loopText, param.signalType);\n        break;\n      case \"loopEnd\":\n        addSignal(void 0, void 0, void 0, param.signalType);\n        break;\n      case \"rectStart\":\n        addSignal(void 0, void 0, param.color, param.signalType);\n        break;\n      case \"rectEnd\":\n        addSignal(void 0, void 0, void 0, param.signalType);\n        break;\n      case \"optStart\":\n        addSignal(void 0, void 0, param.optText, param.signalType);\n        break;\n      case \"optEnd\":\n        addSignal(void 0, void 0, void 0, param.signalType);\n        break;\n      case \"altStart\":\n        addSignal(void 0, void 0, param.altText, param.signalType);\n        break;\n      case \"else\":\n        addSignal(void 0, void 0, param.altText, param.signalType);\n        break;\n      case \"altEnd\":\n        addSignal(void 0, void 0, void 0, param.signalType);\n        break;\n      case \"setAccTitle\":\n        setAccTitle(param.text);\n        break;\n      case \"parStart\":\n        addSignal(void 0, void 0, param.parText, param.signalType);\n        break;\n      case \"and\":\n        addSignal(void 0, void 0, param.parText, param.signalType);\n        break;\n      case \"parEnd\":\n        addSignal(void 0, void 0, void 0, param.signalType);\n        break;\n      case \"criticalStart\":\n        addSignal(void 0, void 0, param.criticalText, param.signalType);\n        break;\n      case \"option\":\n        addSignal(void 0, void 0, param.optionText, param.signalType);\n        break;\n      case \"criticalEnd\":\n        addSignal(void 0, void 0, void 0, param.signalType);\n        break;\n      case \"breakStart\":\n        addSignal(void 0, void 0, param.breakText, param.signalType);\n        break;\n      case \"breakEnd\":\n        addSignal(void 0, void 0, void 0, param.signalType);\n        break;\n    }\n  }\n};\nconst db = {\n  addActor,\n  addMessage,\n  addSignal,\n  addLinks,\n  addDetails,\n  addProperties,\n  autoWrap,\n  setWrap,\n  enableSequenceNumbers,\n  disableSequenceNumbers,\n  showSequenceNumbers,\n  getMessages,\n  getActors,\n  getCreatedActors,\n  getDestroyedActors,\n  getActor,\n  getActorKeys,\n  getActorProperty,\n  getAccTitle,\n  getBoxes,\n  getDiagramTitle,\n  setDiagramTitle,\n  getConfig: () => getConfig().sequence,\n  clear,\n  parseMessage,\n  parseBoxData,\n  LINETYPE,\n  ARROWTYPE,\n  PLACEMENT,\n  addNote,\n  setAccTitle,\n  apply,\n  setAccDescription,\n  getAccDescription,\n  hasAtLeastOneBox,\n  hasAtLeastOneBoxWithTitle\n};\nconst getStyles = (options) => `.actor {\n    stroke: ${options.actorBorder};\n    fill: ${options.actorBkg};\n  }\n\n  text.actor > tspan {\n    fill: ${options.actorTextColor};\n    stroke: none;\n  }\n\n  .actor-line {\n    stroke: ${options.actorLineColor};\n  }\n\n  .messageLine0 {\n    stroke-width: 1.5;\n    stroke-dasharray: none;\n    stroke: ${options.signalColor};\n  }\n\n  .messageLine1 {\n    stroke-width: 1.5;\n    stroke-dasharray: 2, 2;\n    stroke: ${options.signalColor};\n  }\n\n  #arrowhead path {\n    fill: ${options.signalColor};\n    stroke: ${options.signalColor};\n  }\n\n  .sequenceNumber {\n    fill: ${options.sequenceNumberColor};\n  }\n\n  #sequencenumber {\n    fill: ${options.signalColor};\n  }\n\n  #crosshead path {\n    fill: ${options.signalColor};\n    stroke: ${options.signalColor};\n  }\n\n  .messageText {\n    fill: ${options.signalTextColor};\n    stroke: none;\n  }\n\n  .labelBox {\n    stroke: ${options.labelBoxBorderColor};\n    fill: ${options.labelBoxBkgColor};\n  }\n\n  .labelText, .labelText > tspan {\n    fill: ${options.labelTextColor};\n    stroke: none;\n  }\n\n  .loopText, .loopText > tspan {\n    fill: ${options.loopTextColor};\n    stroke: none;\n  }\n\n  .loopLine {\n    stroke-width: 2px;\n    stroke-dasharray: 2, 2;\n    stroke: ${options.labelBoxBorderColor};\n    fill: ${options.labelBoxBorderColor};\n  }\n\n  .note {\n    //stroke: #decc93;\n    stroke: ${options.noteBorderColor};\n    fill: ${options.noteBkgColor};\n  }\n\n  .noteText, .noteText > tspan {\n    fill: ${options.noteTextColor};\n    stroke: none;\n  }\n\n  .activation0 {\n    fill: ${options.activationBkgColor};\n    stroke: ${options.activationBorderColor};\n  }\n\n  .activation1 {\n    fill: ${options.activationBkgColor};\n    stroke: ${options.activationBorderColor};\n  }\n\n  .activation2 {\n    fill: ${options.activationBkgColor};\n    stroke: ${options.activationBorderColor};\n  }\n\n  .actorPopupMenu {\n    position: absolute;\n  }\n\n  .actorPopupMenuPanel {\n    position: absolute;\n    fill: ${options.actorBkg};\n    box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);\n    filter: drop-shadow(3px 5px 2px rgb(0 0 0 / 0.4));\n}\n  .actor-man line {\n    stroke: ${options.actorBorder};\n    fill: ${options.actorBkg};\n  }\n  .actor-man circle, line {\n    stroke: ${options.actorBorder};\n    fill: ${options.actorBkg};\n    stroke-width: 2px;\n  }\n`;\nconst styles = getStyles;\nconst ACTOR_TYPE_WIDTH = 18 * 2;\nconst TOP_ACTOR_CLASS = \"actor-top\";\nconst BOTTOM_ACTOR_CLASS = \"actor-bottom\";\nconst drawRect = function(elem, rectData) {\n  return drawRect$1(elem, rectData);\n};\nconst drawPopup = function(elem, actor, minMenuWidth, textAttrs, forceMenus) {\n  if (actor.links === void 0 || actor.links === null || Object.keys(actor.links).length === 0) {\n    return { height: 0, width: 0 };\n  }\n  const links = actor.links;\n  const actorCnt2 = actor.actorCnt;\n  const rectData = actor.rectData;\n  var displayValue = \"none\";\n  if (forceMenus) {\n    displayValue = \"block !important\";\n  }\n  const g = elem.append(\"g\");\n  g.attr(\"id\", \"actor\" + actorCnt2 + \"_popup\");\n  g.attr(\"class\", \"actorPopupMenu\");\n  g.attr(\"display\", displayValue);\n  var actorClass = \"\";\n  if (rectData.class !== void 0) {\n    actorClass = \" \" + rectData.class;\n  }\n  let menuWidth = rectData.width > minMenuWidth ? rectData.width : minMenuWidth;\n  const rectElem = g.append(\"rect\");\n  rectElem.attr(\"class\", \"actorPopupMenuPanel\" + actorClass);\n  rectElem.attr(\"x\", rectData.x);\n  rectElem.attr(\"y\", rectData.height);\n  rectElem.attr(\"fill\", rectData.fill);\n  rectElem.attr(\"stroke\", rectData.stroke);\n  rectElem.attr(\"width\", menuWidth);\n  rectElem.attr(\"height\", rectData.height);\n  rectElem.attr(\"rx\", rectData.rx);\n  rectElem.attr(\"ry\", rectData.ry);\n  if (links != null) {\n    var linkY = 20;\n    for (let key in links) {\n      var linkElem = g.append(\"a\");\n      var sanitizedLink = sanitizeUrl(links[key]);\n      linkElem.attr(\"xlink:href\", sanitizedLink);\n      linkElem.attr(\"target\", \"_blank\");\n      _drawMenuItemTextCandidateFunc(textAttrs)(\n        key,\n        linkElem,\n        rectData.x + 10,\n        rectData.height + linkY,\n        menuWidth,\n        20,\n        { class: \"actor\" },\n        textAttrs\n      );\n      linkY += 30;\n    }\n  }\n  rectElem.attr(\"height\", linkY);\n  return { height: rectData.height + linkY, width: menuWidth };\n};\nconst popupMenuToggle = function(popId) {\n  return \"var pu = document.getElementById('\" + popId + \"'); if (pu != null) { pu.style.display = pu.style.display == 'block' ? 'none' : 'block'; }\";\n};\nconst drawKatex = async function(elem, textData, msgModel = null) {\n  let textElem = elem.append(\"foreignObject\");\n  const lines = await renderKatex(textData.text, getConfig$1());\n  const divElem = textElem.append(\"xhtml:div\").attr(\"style\", \"width: fit-content;\").attr(\"xmlns\", \"http://www.w3.org/1999/xhtml\").html(lines);\n  const dim = divElem.node().getBoundingClientRect();\n  textElem.attr(\"height\", Math.round(dim.height)).attr(\"width\", Math.round(dim.width));\n  if (textData.class === \"noteText\") {\n    const rectElem = elem.node().firstChild;\n    rectElem.setAttribute(\"height\", dim.height + 2 * textData.textMargin);\n    const rectDim = rectElem.getBBox();\n    textElem.attr(\"x\", Math.round(rectDim.x + rectDim.width / 2 - dim.width / 2)).attr(\"y\", Math.round(rectDim.y + rectDim.height / 2 - dim.height / 2));\n  } else if (msgModel) {\n    let { startx, stopx, starty } = msgModel;\n    if (startx > stopx) {\n      const temp = startx;\n      startx = stopx;\n      stopx = temp;\n    }\n    textElem.attr(\"x\", Math.round(startx + Math.abs(startx - stopx) / 2 - dim.width / 2));\n    if (textData.class === \"loopText\") {\n      textElem.attr(\"y\", Math.round(starty));\n    } else {\n      textElem.attr(\"y\", Math.round(starty - dim.height));\n    }\n  }\n  return [textElem];\n};\nconst drawText = function(elem, textData) {\n  let prevTextHeight = 0;\n  let textHeight = 0;\n  const lines = textData.text.split(common.lineBreakRegex);\n  const [_textFontSize, _textFontSizePx] = parseFontSize(textData.fontSize);\n  let textElems = [];\n  let dy = 0;\n  let yfunc = () => textData.y;\n  if (textData.valign !== void 0 && textData.textMargin !== void 0 && textData.textMargin > 0) {\n    switch (textData.valign) {\n      case \"top\":\n      case \"start\":\n        yfunc = () => Math.round(textData.y + textData.textMargin);\n        break;\n      case \"middle\":\n      case \"center\":\n        yfunc = () => Math.round(textData.y + (prevTextHeight + textHeight + textData.textMargin) / 2);\n        break;\n      case \"bottom\":\n      case \"end\":\n        yfunc = () => Math.round(\n          textData.y + (prevTextHeight + textHeight + 2 * textData.textMargin) - textData.textMargin\n        );\n        break;\n    }\n  }\n  if (textData.anchor !== void 0 && textData.textMargin !== void 0 && textData.width !== void 0) {\n    switch (textData.anchor) {\n      case \"left\":\n      case \"start\":\n        textData.x = Math.round(textData.x + textData.textMargin);\n        textData.anchor = \"start\";\n        textData.dominantBaseline = \"middle\";\n        textData.alignmentBaseline = \"middle\";\n        break;\n      case \"middle\":\n      case \"center\":\n        textData.x = Math.round(textData.x + textData.width / 2);\n        textData.anchor = \"middle\";\n        textData.dominantBaseline = \"middle\";\n        textData.alignmentBaseline = \"middle\";\n        break;\n      case \"right\":\n      case \"end\":\n        textData.x = Math.round(textData.x + textData.width - textData.textMargin);\n        textData.anchor = \"end\";\n        textData.dominantBaseline = \"middle\";\n        textData.alignmentBaseline = \"middle\";\n        break;\n    }\n  }\n  for (let [i, line] of lines.entries()) {\n    if (textData.textMargin !== void 0 && textData.textMargin === 0 && _textFontSize !== void 0) {\n      dy = i * _textFontSize;\n    }\n    const textElem = elem.append(\"text\");\n    textElem.attr(\"x\", textData.x);\n    textElem.attr(\"y\", yfunc());\n    if (textData.anchor !== void 0) {\n      textElem.attr(\"text-anchor\", textData.anchor).attr(\"dominant-baseline\", textData.dominantBaseline).attr(\"alignment-baseline\", textData.alignmentBaseline);\n    }\n    if (textData.fontFamily !== void 0) {\n      textElem.style(\"font-family\", textData.fontFamily);\n    }\n    if (_textFontSizePx !== void 0) {\n      textElem.style(\"font-size\", _textFontSizePx);\n    }\n    if (textData.fontWeight !== void 0) {\n      textElem.style(\"font-weight\", textData.fontWeight);\n    }\n    if (textData.fill !== void 0) {\n      textElem.attr(\"fill\", textData.fill);\n    }\n    if (textData.class !== void 0) {\n      textElem.attr(\"class\", textData.class);\n    }\n    if (textData.dy !== void 0) {\n      textElem.attr(\"dy\", textData.dy);\n    } else if (dy !== 0) {\n      textElem.attr(\"dy\", dy);\n    }\n    const text = line || ZERO_WIDTH_SPACE;\n    if (textData.tspan) {\n      const span = textElem.append(\"tspan\");\n      span.attr(\"x\", textData.x);\n      if (textData.fill !== void 0) {\n        span.attr(\"fill\", textData.fill);\n      }\n      span.text(text);\n    } else {\n      textElem.text(text);\n    }\n    if (textData.valign !== void 0 && textData.textMargin !== void 0 && textData.textMargin > 0) {\n      textHeight += (textElem._groups || textElem)[0][0].getBBox().height;\n      prevTextHeight = textHeight;\n    }\n    textElems.push(textElem);\n  }\n  return textElems;\n};\nconst drawLabel = function(elem, txtObject) {\n  function genPoints(x, y, width, height, cut) {\n    return x + \",\" + y + \" \" + (x + width) + \",\" + y + \" \" + (x + width) + \",\" + (y + height - cut) + \" \" + (x + width - cut * 1.2) + \",\" + (y + height) + \" \" + x + \",\" + (y + height);\n  }\n  const polygon = elem.append(\"polygon\");\n  polygon.attr(\"points\", genPoints(txtObject.x, txtObject.y, txtObject.width, txtObject.height, 7));\n  polygon.attr(\"class\", \"labelBox\");\n  txtObject.y = txtObject.y + txtObject.height / 2;\n  drawText(elem, txtObject);\n  return polygon;\n};\nlet actorCnt = -1;\nconst fixLifeLineHeights = (diagram2, actors, actorKeys, conf2) => {\n  if (!diagram2.select) {\n    return;\n  }\n  actorKeys.forEach((actorKey) => {\n    const actor = actors[actorKey];\n    const actorDOM = diagram2.select(\"#actor\" + actor.actorCnt);\n    if (!conf2.mirrorActors && actor.stopy) {\n      actorDOM.attr(\"y2\", actor.stopy + actor.height / 2);\n    } else if (conf2.mirrorActors) {\n      actorDOM.attr(\"y2\", actor.stopy);\n    }\n  });\n};\nconst drawActorTypeParticipant = async function(elem, actor, conf2, isFooter) {\n  const actorY = isFooter ? actor.stopy : actor.starty;\n  const center = actor.x + actor.width / 2;\n  const centerY = actorY + 5;\n  const boxplusLineGroup = elem.append(\"g\").lower();\n  var g = boxplusLineGroup;\n  if (!isFooter) {\n    actorCnt++;\n    if (Object.keys(actor.links || {}).length && !conf2.forceMenus) {\n      g.attr(\"onclick\", popupMenuToggle(`actor${actorCnt}_popup`)).attr(\"cursor\", \"pointer\");\n    }\n    g.append(\"line\").attr(\"id\", \"actor\" + actorCnt).attr(\"x1\", center).attr(\"y1\", centerY).attr(\"x2\", center).attr(\"y2\", 2e3).attr(\"class\", \"actor-line\").attr(\"class\", \"200\").attr(\"stroke-width\", \"0.5px\").attr(\"stroke\", \"#999\");\n    g = boxplusLineGroup.append(\"g\");\n    actor.actorCnt = actorCnt;\n    if (actor.links != null) {\n      g.attr(\"id\", \"root-\" + actorCnt);\n    }\n  }\n  const rect = getNoteRect$1();\n  var cssclass = \"actor\";\n  if (actor.properties != null && actor.properties[\"class\"]) {\n    cssclass = actor.properties[\"class\"];\n  } else {\n    rect.fill = \"#eaeaea\";\n  }\n  if (isFooter) {\n    cssclass += ` ${BOTTOM_ACTOR_CLASS}`;\n  } else {\n    cssclass += ` ${TOP_ACTOR_CLASS}`;\n  }\n  rect.x = actor.x;\n  rect.y = actorY;\n  rect.width = actor.width;\n  rect.height = actor.height;\n  rect.class = cssclass;\n  rect.rx = 3;\n  rect.ry = 3;\n  rect.name = actor.name;\n  const rectElem = drawRect(g, rect);\n  actor.rectData = rect;\n  if (actor.properties != null && actor.properties[\"icon\"]) {\n    const iconSrc = actor.properties[\"icon\"].trim();\n    if (iconSrc.charAt(0) === \"@\") {\n      drawEmbeddedImage(g, rect.x + rect.width - 20, rect.y + 10, iconSrc.substr(1));\n    } else {\n      drawImage(g, rect.x + rect.width - 20, rect.y + 10, iconSrc);\n    }\n  }\n  await _drawTextCandidateFunc(conf2, hasKatex(actor.description))(\n    actor.description,\n    g,\n    rect.x,\n    rect.y,\n    rect.width,\n    rect.height,\n    { class: \"actor\" },\n    conf2\n  );\n  let height = actor.height;\n  if (rectElem.node) {\n    const bounds2 = rectElem.node().getBBox();\n    actor.height = bounds2.height;\n    height = bounds2.height;\n  }\n  return height;\n};\nconst drawActorTypeActor = async function(elem, actor, conf2, isFooter) {\n  const actorY = isFooter ? actor.stopy : actor.starty;\n  const center = actor.x + actor.width / 2;\n  const centerY = actorY + 80;\n  elem.lower();\n  if (!isFooter) {\n    actorCnt++;\n    elem.append(\"line\").attr(\"id\", \"actor\" + actorCnt).attr(\"x1\", center).attr(\"y1\", centerY).attr(\"x2\", center).attr(\"y2\", 2e3).attr(\"class\", \"actor-line\").attr(\"class\", \"200\").attr(\"stroke-width\", \"0.5px\").attr(\"stroke\", \"#999\");\n    actor.actorCnt = actorCnt;\n  }\n  const actElem = elem.append(\"g\");\n  let cssClass = \"actor-man\";\n  if (isFooter) {\n    cssClass += ` ${BOTTOM_ACTOR_CLASS}`;\n  } else {\n    cssClass += ` ${TOP_ACTOR_CLASS}`;\n  }\n  actElem.attr(\"class\", cssClass);\n  actElem.attr(\"name\", actor.name);\n  const rect = getNoteRect$1();\n  rect.x = actor.x;\n  rect.y = actorY;\n  rect.fill = \"#eaeaea\";\n  rect.width = actor.width;\n  rect.height = actor.height;\n  rect.class = \"actor\";\n  rect.rx = 3;\n  rect.ry = 3;\n  actElem.append(\"line\").attr(\"id\", \"actor-man-torso\" + actorCnt).attr(\"x1\", center).attr(\"y1\", actorY + 25).attr(\"x2\", center).attr(\"y2\", actorY + 45);\n  actElem.append(\"line\").attr(\"id\", \"actor-man-arms\" + actorCnt).attr(\"x1\", center - ACTOR_TYPE_WIDTH / 2).attr(\"y1\", actorY + 33).attr(\"x2\", center + ACTOR_TYPE_WIDTH / 2).attr(\"y2\", actorY + 33);\n  actElem.append(\"line\").attr(\"x1\", center - ACTOR_TYPE_WIDTH / 2).attr(\"y1\", actorY + 60).attr(\"x2\", center).attr(\"y2\", actorY + 45);\n  actElem.append(\"line\").attr(\"x1\", center).attr(\"y1\", actorY + 45).attr(\"x2\", center + ACTOR_TYPE_WIDTH / 2 - 2).attr(\"y2\", actorY + 60);\n  const circle = actElem.append(\"circle\");\n  circle.attr(\"cx\", actor.x + actor.width / 2);\n  circle.attr(\"cy\", actorY + 10);\n  circle.attr(\"r\", 15);\n  circle.attr(\"width\", actor.width);\n  circle.attr(\"height\", actor.height);\n  const bounds2 = actElem.node().getBBox();\n  actor.height = bounds2.height;\n  await _drawTextCandidateFunc(conf2, hasKatex(actor.description))(\n    actor.description,\n    actElem,\n    rect.x,\n    rect.y + 35,\n    rect.width,\n    rect.height,\n    { class: \"actor\" },\n    conf2\n  );\n  return actor.height;\n};\nconst drawActor = async function(elem, actor, conf2, isFooter) {\n  switch (actor.type) {\n    case \"actor\":\n      return await drawActorTypeActor(elem, actor, conf2, isFooter);\n    case \"participant\":\n      return await drawActorTypeParticipant(elem, actor, conf2, isFooter);\n  }\n};\nconst drawBox = async function(elem, box, conf2) {\n  const boxplusTextGroup = elem.append(\"g\");\n  const g = boxplusTextGroup;\n  drawBackgroundRect(g, box);\n  if (box.name) {\n    await _drawTextCandidateFunc(conf2)(\n      box.name,\n      g,\n      box.x,\n      box.y + (box.textMaxHeight || 0) / 2,\n      box.width,\n      0,\n      { class: \"text\" },\n      conf2\n    );\n  }\n  g.lower();\n};\nconst anchorElement = function(elem) {\n  return elem.append(\"g\");\n};\nconst drawActivation = function(elem, bounds2, verticalPos, conf2, actorActivations2) {\n  const rect = getNoteRect$1();\n  const g = bounds2.anchored;\n  rect.x = bounds2.startx;\n  rect.y = bounds2.starty;\n  rect.class = \"activation\" + actorActivations2 % 3;\n  rect.width = bounds2.stopx - bounds2.startx;\n  rect.height = verticalPos - bounds2.starty;\n  drawRect(g, rect);\n};\nconst drawLoop = async function(elem, loopModel, labelText, conf2) {\n  const {\n    boxMargin,\n    boxTextMargin,\n    labelBoxHeight,\n    labelBoxWidth,\n    messageFontFamily: fontFamily,\n    messageFontSize: fontSize,\n    messageFontWeight: fontWeight\n  } = conf2;\n  const g = elem.append(\"g\");\n  const drawLoopLine = function(startx, starty, stopx, stopy) {\n    return g.append(\"line\").attr(\"x1\", startx).attr(\"y1\", starty).attr(\"x2\", stopx).attr(\"y2\", stopy).attr(\"class\", \"loopLine\");\n  };\n  drawLoopLine(loopModel.startx, loopModel.starty, loopModel.stopx, loopModel.starty);\n  drawLoopLine(loopModel.stopx, loopModel.starty, loopModel.stopx, loopModel.stopy);\n  drawLoopLine(loopModel.startx, loopModel.stopy, loopModel.stopx, loopModel.stopy);\n  drawLoopLine(loopModel.startx, loopModel.starty, loopModel.startx, loopModel.stopy);\n  if (loopModel.sections !== void 0) {\n    loopModel.sections.forEach(function(item) {\n      drawLoopLine(loopModel.startx, item.y, loopModel.stopx, item.y).style(\n        \"stroke-dasharray\",\n        \"3, 3\"\n      );\n    });\n  }\n  let txt = getTextObj$1();\n  txt.text = labelText;\n  txt.x = loopModel.startx;\n  txt.y = loopModel.starty;\n  txt.fontFamily = fontFamily;\n  txt.fontSize = fontSize;\n  txt.fontWeight = fontWeight;\n  txt.anchor = \"middle\";\n  txt.valign = \"middle\";\n  txt.tspan = false;\n  txt.width = labelBoxWidth || 50;\n  txt.height = labelBoxHeight || 20;\n  txt.textMargin = boxTextMargin;\n  txt.class = \"labelText\";\n  drawLabel(g, txt);\n  txt = getTextObj();\n  txt.text = loopModel.title;\n  txt.x = loopModel.startx + labelBoxWidth / 2 + (loopModel.stopx - loopModel.startx) / 2;\n  txt.y = loopModel.starty + boxMargin + boxTextMargin;\n  txt.anchor = \"middle\";\n  txt.valign = \"middle\";\n  txt.textMargin = boxTextMargin;\n  txt.class = \"loopText\";\n  txt.fontFamily = fontFamily;\n  txt.fontSize = fontSize;\n  txt.fontWeight = fontWeight;\n  txt.wrap = true;\n  let textElem = hasKatex(txt.text) ? await drawKatex(g, txt, loopModel) : drawText(g, txt);\n  if (loopModel.sectionTitles !== void 0) {\n    for (const [idx, item] of Object.entries(loopModel.sectionTitles)) {\n      if (item.message) {\n        txt.text = item.message;\n        txt.x = loopModel.startx + (loopModel.stopx - loopModel.startx) / 2;\n        txt.y = loopModel.sections[idx].y + boxMargin + boxTextMargin;\n        txt.class = \"loopText\";\n        txt.anchor = \"middle\";\n        txt.valign = \"middle\";\n        txt.tspan = false;\n        txt.fontFamily = fontFamily;\n        txt.fontSize = fontSize;\n        txt.fontWeight = fontWeight;\n        txt.wrap = loopModel.wrap;\n        if (hasKatex(txt.text)) {\n          loopModel.starty = loopModel.sections[idx].y;\n          await drawKatex(g, txt, loopModel);\n        } else {\n          drawText(g, txt);\n        }\n        let sectionHeight = Math.round(\n          textElem.map((te) => (te._groups || te)[0][0].getBBox().height).reduce((acc, curr) => acc + curr)\n        );\n        loopModel.sections[idx].height += sectionHeight - (boxMargin + boxTextMargin);\n      }\n    }\n  }\n  loopModel.height = Math.round(loopModel.stopy - loopModel.starty);\n  return g;\n};\nconst drawBackgroundRect = function(elem, bounds2) {\n  drawBackgroundRect$1(elem, bounds2);\n};\nconst insertDatabaseIcon = function(elem) {\n  elem.append(\"defs\").append(\"symbol\").attr(\"id\", \"database\").attr(\"fill-rule\", \"evenodd\").attr(\"clip-rule\", \"evenodd\").append(\"path\").attr(\"transform\", \"scale(.5)\").attr(\n    \"d\",\n    \"M12.258.001l.256.004.255.005.253.008.251.01.249.012.247.015.246.016.242.019.241.02.239.023.236.024.233.027.231.028.229.031.225.032.223.034.22.036.217.038.214.04.211.041.208.043.205.045.201.046.198.048.194.05.191.051.187.053.183.054.18.056.175.057.172.059.168.06.163.061.16.063.155.064.15.066.074.033.073.033.071.034.07.034.069.035.068.035.067.035.066.035.064.036.064.036.062.036.06.036.06.037.058.037.058.037.055.038.055.038.053.038.052.038.051.039.05.039.048.039.047.039.045.04.044.04.043.04.041.04.04.041.039.041.037.041.036.041.034.041.033.042.032.042.03.042.029.042.027.042.026.043.024.043.023.043.021.043.02.043.018.044.017.043.015.044.013.044.012.044.011.045.009.044.007.045.006.045.004.045.002.045.001.045v17l-.001.045-.002.045-.004.045-.006.045-.007.045-.009.044-.011.045-.012.044-.013.044-.015.044-.017.043-.018.044-.02.043-.021.043-.023.043-.024.043-.026.043-.027.042-.029.042-.03.042-.032.042-.033.042-.034.041-.036.041-.037.041-.039.041-.04.041-.041.04-.043.04-.044.04-.045.04-.047.039-.048.039-.05.039-.051.039-.052.038-.053.038-.055.038-.055.038-.058.037-.058.037-.06.037-.06.036-.062.036-.064.036-.064.036-.066.035-.067.035-.068.035-.069.035-.07.034-.071.034-.073.033-.074.033-.15.066-.155.064-.16.063-.163.061-.168.06-.172.059-.175.057-.18.056-.183.054-.187.053-.191.051-.194.05-.198.048-.201.046-.205.045-.208.043-.211.041-.214.04-.217.038-.22.036-.223.034-.225.032-.229.031-.231.028-.233.027-.236.024-.239.023-.241.02-.242.019-.246.016-.247.015-.249.012-.251.01-.253.008-.255.005-.256.004-.258.001-.258-.001-.256-.004-.255-.005-.253-.008-.251-.01-.249-.012-.247-.015-.245-.016-.243-.019-.241-.02-.238-.023-.236-.024-.234-.027-.231-.028-.228-.031-.226-.032-.223-.034-.22-.036-.217-.038-.214-.04-.211-.041-.208-.043-.204-.045-.201-.046-.198-.048-.195-.05-.19-.051-.187-.053-.184-.054-.179-.056-.176-.057-.172-.059-.167-.06-.164-.061-.159-.063-.155-.064-.151-.066-.074-.033-.072-.033-.072-.034-.07-.034-.069-.035-.068-.035-.067-.035-.066-.035-.064-.036-.063-.036-.062-.036-.061-.036-.06-.037-.058-.037-.057-.037-.056-.038-.055-.038-.053-.038-.052-.038-.051-.039-.049-.039-.049-.039-.046-.039-.046-.04-.044-.04-.043-.04-.041-.04-.04-.041-.039-.041-.037-.041-.036-.041-.034-.041-.033-.042-.032-.042-.03-.042-.029-.042-.027-.042-.026-.043-.024-.043-.023-.043-.021-.043-.02-.043-.018-.044-.017-.043-.015-.044-.013-.044-.012-.044-.011-.045-.009-.044-.007-.045-.006-.045-.004-.045-.002-.045-.001-.045v-17l.001-.045.002-.045.004-.045.006-.045.007-.045.009-.044.011-.045.012-.044.013-.044.015-.044.017-.043.018-.044.02-.043.021-.043.023-.043.024-.043.026-.043.027-.042.029-.042.03-.042.032-.042.033-.042.034-.041.036-.041.037-.041.039-.041.04-.041.041-.04.043-.04.044-.04.046-.04.046-.039.049-.039.049-.039.051-.039.052-.038.053-.038.055-.038.056-.038.057-.037.058-.037.06-.037.061-.036.062-.036.063-.036.064-.036.066-.035.067-.035.068-.035.069-.035.07-.034.072-.034.072-.033.074-.033.151-.066.155-.064.159-.063.164-.061.167-.06.172-.059.176-.057.179-.056.184-.054.187-.053.19-.051.195-.05.198-.048.201-.046.204-.045.208-.043.211-.041.214-.04.217-.038.22-.036.223-.034.226-.032.228-.031.231-.028.234-.027.236-.024.238-.023.241-.02.243-.019.245-.016.247-.015.249-.012.251-.01.253-.008.255-.005.256-.004.258-.001.258.001zm-9.258 20.499v.01l.001.021.003.021.004.022.005.021.006.022.007.022.009.023.01.022.011.023.012.023.013.023.015.023.016.024.017.023.018.024.019.024.021.024.022.025.023.024.024.025.052.049.056.05.061.051.066.051.07.051.075.051.079.052.084.052.088.052.092.052.097.052.102.051.105.052.11.052.114.051.119.051.123.051.127.05.131.05.135.05.139.048.144.049.147.047.152.047.155.047.16.045.163.045.167.043.171.043.176.041.178.041.183.039.187.039.19.037.194.035.197.035.202.033.204.031.209.03.212.029.216.027.219.025.222.024.226.021.23.02.233.018.236.016.24.015.243.012.246.01.249.008.253.005.256.004.259.001.26-.001.257-.004.254-.005.25-.008.247-.011.244-.012.241-.014.237-.016.233-.018.231-.021.226-.021.224-.024.22-.026.216-.027.212-.028.21-.031.205-.031.202-.034.198-.034.194-.036.191-.037.187-.039.183-.04.179-.04.175-.042.172-.043.168-.044.163-.045.16-.046.155-.046.152-.047.148-.048.143-.049.139-.049.136-.05.131-.05.126-.05.123-.051.118-.052.114-.051.11-.052.106-.052.101-.052.096-.052.092-.052.088-.053.083-.051.079-.052.074-.052.07-.051.065-.051.06-.051.056-.05.051-.05.023-.024.023-.025.021-.024.02-.024.019-.024.018-.024.017-.024.015-.023.014-.024.013-.023.012-.023.01-.023.01-.022.008-.022.006-.022.006-.022.004-.022.004-.021.001-.021.001-.021v-4.127l-.077.055-.08.053-.083.054-.085.053-.087.052-.09.052-.093.051-.095.05-.097.05-.1.049-.102.049-.105.048-.106.047-.109.047-.111.046-.114.045-.115.045-.118.044-.12.043-.122.042-.124.042-.126.041-.128.04-.13.04-.132.038-.134.038-.135.037-.138.037-.139.035-.142.035-.143.034-.144.033-.147.032-.148.031-.15.03-.151.03-.153.029-.154.027-.156.027-.158.026-.159.025-.161.024-.162.023-.163.022-.165.021-.166.02-.167.019-.169.018-.169.017-.171.016-.173.015-.173.014-.175.013-.175.012-.177.011-.178.01-.179.008-.179.008-.181.006-.182.005-.182.004-.184.003-.184.002h-.37l-.184-.002-.184-.003-.182-.004-.182-.005-.181-.006-.179-.008-.179-.008-.178-.01-.176-.011-.176-.012-.175-.013-.173-.014-.172-.015-.171-.016-.17-.017-.169-.018-.167-.019-.166-.02-.165-.021-.163-.022-.162-.023-.161-.024-.159-.025-.157-.026-.156-.027-.155-.027-.153-.029-.151-.03-.15-.03-.148-.031-.146-.032-.145-.033-.143-.034-.141-.035-.14-.035-.137-.037-.136-.037-.134-.038-.132-.038-.13-.04-.128-.04-.126-.041-.124-.042-.122-.042-.12-.044-.117-.043-.116-.045-.113-.045-.112-.046-.109-.047-.106-.047-.105-.048-.102-.049-.1-.049-.097-.05-.095-.05-.093-.052-.09-.051-.087-.052-.085-.053-.083-.054-.08-.054-.077-.054v4.127zm0-5.654v.011l.001.021.003.021.004.021.005.022.006.022.007.022.009.022.01.022.011.023.012.023.013.023.015.024.016.023.017.024.018.024.019.024.021.024.022.024.023.025.024.024.052.05.056.05.061.05.066.051.07.051.075.052.079.051.084.052.088.052.092.052.097.052.102.052.105.052.11.051.114.051.119.052.123.05.127.051.131.05.135.049.139.049.144.048.147.048.152.047.155.046.16.045.163.045.167.044.171.042.176.042.178.04.183.04.187.038.19.037.194.036.197.034.202.033.204.032.209.03.212.028.216.027.219.025.222.024.226.022.23.02.233.018.236.016.24.014.243.012.246.01.249.008.253.006.256.003.259.001.26-.001.257-.003.254-.006.25-.008.247-.01.244-.012.241-.015.237-.016.233-.018.231-.02.226-.022.224-.024.22-.025.216-.027.212-.029.21-.03.205-.032.202-.033.198-.035.194-.036.191-.037.187-.039.183-.039.179-.041.175-.042.172-.043.168-.044.163-.045.16-.045.155-.047.152-.047.148-.048.143-.048.139-.05.136-.049.131-.05.126-.051.123-.051.118-.051.114-.052.11-.052.106-.052.101-.052.096-.052.092-.052.088-.052.083-.052.079-.052.074-.051.07-.052.065-.051.06-.05.056-.051.051-.049.023-.025.023-.024.021-.025.02-.024.019-.024.018-.024.017-.024.015-.023.014-.023.013-.024.012-.022.01-.023.01-.023.008-.022.006-.022.006-.022.004-.021.004-.022.001-.021.001-.021v-4.139l-.077.054-.08.054-.083.054-.085.052-.087.053-.09.051-.093.051-.095.051-.097.05-.1.049-.102.049-.105.048-.106.047-.109.047-.111.046-.114.045-.115.044-.118.044-.12.044-.122.042-.124.042-.126.041-.128.04-.13.039-.132.039-.134.038-.135.037-.138.036-.139.036-.142.035-.143.033-.144.033-.147.033-.148.031-.15.03-.151.03-.153.028-.154.028-.156.027-.158.026-.159.025-.161.024-.162.023-.163.022-.165.021-.166.02-.167.019-.169.018-.169.017-.171.016-.173.015-.173.014-.175.013-.175.012-.177.011-.178.009-.179.009-.179.007-.181.007-.182.005-.182.004-.184.003-.184.002h-.37l-.184-.002-.184-.003-.182-.004-.182-.005-.181-.007-.179-.007-.179-.009-.178-.009-.176-.011-.176-.012-.175-.013-.173-.014-.172-.015-.171-.016-.17-.017-.169-.018-.167-.019-.166-.02-.165-.021-.163-.022-.162-.023-.161-.024-.159-.025-.157-.026-.156-.027-.155-.028-.153-.028-.151-.03-.15-.03-.148-.031-.146-.033-.145-.033-.143-.033-.141-.035-.14-.036-.137-.036-.136-.037-.134-.038-.132-.039-.13-.039-.128-.04-.126-.041-.124-.042-.122-.043-.12-.043-.117-.044-.116-.044-.113-.046-.112-.046-.109-.046-.106-.047-.105-.048-.102-.049-.1-.049-.097-.05-.095-.051-.093-.051-.09-.051-.087-.053-.085-.052-.083-.054-.08-.054-.077-.054v4.139zm0-5.666v.011l.001.02.003.022.004.021.005.022.006.021.007.022.009.023.01.022.011.023.012.023.013.023.015.023.016.024.017.024.018.023.019.024.021.025.022.024.023.024.024.025.052.05.056.05.061.05.066.051.07.051.075.052.079.051.084.052.088.052.092.052.097.052.102.052.105.051.11.052.114.051.119.051.123.051.127.05.131.05.135.05.139.049.144.048.147.048.152.047.155.046.16.045.163.045.167.043.171.043.176.042.178.04.183.04.187.038.19.037.194.036.197.034.202.033.204.032.209.03.212.028.216.027.219.025.222.024.226.021.23.02.233.018.236.017.24.014.243.012.246.01.249.008.253.006.256.003.259.001.26-.001.257-.003.254-.006.25-.008.247-.01.244-.013.241-.014.237-.016.233-.018.231-.02.226-.022.224-.024.22-.025.216-.027.212-.029.21-.03.205-.032.202-.033.198-.035.194-.036.191-.037.187-.039.183-.039.179-.041.175-.042.172-.043.168-.044.163-.045.16-.045.155-.047.152-.047.148-.048.143-.049.139-.049.136-.049.131-.051.126-.05.123-.051.118-.052.114-.051.11-.052.106-.052.101-.052.096-.052.092-.052.088-.052.083-.052.079-.052.074-.052.07-.051.065-.051.06-.051.056-.05.051-.049.023-.025.023-.025.021-.024.02-.024.019-.024.018-.024.017-.024.015-.023.014-.024.013-.023.012-.023.01-.022.01-.023.008-.022.006-.022.006-.022.004-.022.004-.021.001-.021.001-.021v-4.153l-.077.054-.08.054-.083.053-.085.053-.087.053-.09.051-.093.051-.095.051-.097.05-.1.049-.102.048-.105.048-.106.048-.109.046-.111.046-.114.046-.115.044-.118.044-.12.043-.122.043-.124.042-.126.041-.128.04-.13.039-.132.039-.134.038-.135.037-.138.036-.139.036-.142.034-.143.034-.144.033-.147.032-.148.032-.15.03-.151.03-.153.028-.154.028-.156.027-.158.026-.159.024-.161.024-.162.023-.163.023-.165.021-.166.02-.167.019-.169.018-.169.017-.171.016-.173.015-.173.014-.175.013-.175.012-.177.01-.178.01-.179.009-.179.007-.181.006-.182.006-.182.004-.184.003-.184.001-.185.001-.185-.001-.184-.001-.184-.003-.182-.004-.182-.006-.181-.006-.179-.007-.179-.009-.178-.01-.176-.01-.176-.012-.175-.013-.173-.014-.172-.015-.171-.016-.17-.017-.169-.018-.167-.019-.166-.02-.165-.021-.163-.023-.162-.023-.161-.024-.159-.024-.157-.026-.156-.027-.155-.028-.153-.028-.151-.03-.15-.03-.148-.032-.146-.032-.145-.033-.143-.034-.141-.034-.14-.036-.137-.036-.136-.037-.134-.038-.132-.039-.13-.039-.128-.041-.126-.041-.124-.041-.122-.043-.12-.043-.117-.044-.116-.044-.113-.046-.112-.046-.109-.046-.106-.048-.105-.048-.102-.048-.1-.05-.097-.049-.095-.051-.093-.051-.09-.052-.087-.052-.085-.053-.083-.053-.08-.054-.077-.054v4.153zm8.74-8.179l-.257.004-.254.005-.25.008-.247.011-.244.012-.241.014-.237.016-.233.018-.231.021-.226.022-.224.023-.22.026-.216.027-.212.028-.21.031-.205.032-.202.033-.198.034-.194.036-.191.038-.187.038-.183.04-.179.041-.175.042-.172.043-.168.043-.163.045-.16.046-.155.046-.152.048-.148.048-.143.048-.139.049-.136.05-.131.05-.126.051-.123.051-.118.051-.114.052-.11.052-.106.052-.101.052-.096.052-.092.052-.088.052-.083.052-.079.052-.074.051-.07.052-.065.051-.06.05-.056.05-.051.05-.023.025-.023.024-.021.024-.02.025-.019.024-.018.024-.017.023-.015.024-.014.023-.013.023-.012.023-.01.023-.01.022-.008.022-.006.023-.006.021-.004.022-.004.021-.001.021-.001.021.001.021.001.021.004.021.004.022.006.021.006.023.008.022.01.022.01.023.012.023.013.023.014.023.015.024.017.023.018.024.019.024.02.025.021.024.023.024.023.025.051.05.056.05.06.05.065.051.07.052.074.051.079.052.083.052.088.052.092.052.096.052.101.052.106.052.11.052.114.052.118.051.123.051.126.051.131.05.136.05.139.049.143.048.148.048.152.048.155.046.16.046.163.045.168.043.172.043.175.042.179.041.183.04.187.038.191.038.194.036.198.034.202.033.205.032.21.031.212.028.216.027.22.026.224.023.226.022.231.021.233.018.237.016.241.014.244.012.247.011.25.008.254.005.257.004.26.001.26-.001.257-.004.254-.005.25-.008.247-.011.244-.012.241-.014.237-.016.233-.018.231-.021.226-.022.224-.023.22-.026.216-.027.212-.028.21-.031.205-.032.202-.033.198-.034.194-.036.191-.038.187-.038.183-.04.179-.041.175-.042.172-.043.168-.043.163-.045.16-.046.155-.046.152-.048.148-.048.143-.048.139-.049.136-.05.131-.05.126-.051.123-.051.118-.051.114-.052.11-.052.106-.052.101-.052.096-.052.092-.052.088-.052.083-.052.079-.052.074-.051.07-.052.065-.051.06-.05.056-.05.051-.05.023-.025.023-.024.021-.024.02-.025.019-.024.018-.024.017-.023.015-.024.014-.023.013-.023.012-.023.01-.023.01-.022.008-.022.006-.023.006-.021.004-.022.004-.021.001-.021.001-.021-.001-.021-.001-.021-.004-.021-.004-.022-.006-.021-.006-.023-.008-.022-.01-.022-.01-.023-.012-.023-.013-.023-.014-.023-.015-.024-.017-.023-.018-.024-.019-.024-.02-.025-.021-.024-.023-.024-.023-.025-.051-.05-.056-.05-.06-.05-.065-.051-.07-.052-.074-.051-.079-.052-.083-.052-.088-.052-.092-.052-.096-.052-.101-.052-.106-.052-.11-.052-.114-.052-.118-.051-.123-.051-.126-.051-.131-.05-.136-.05-.139-.049-.143-.048-.148-.048-.152-.048-.155-.046-.16-.046-.163-.045-.168-.043-.172-.043-.175-.042-.179-.041-.183-.04-.187-.038-.191-.038-.194-.036-.198-.034-.202-.033-.205-.032-.21-.031-.212-.028-.216-.027-.22-.026-.224-.023-.226-.022-.231-.021-.233-.018-.237-.016-.241-.014-.244-.012-.247-.011-.25-.008-.254-.005-.257-.004-.26-.001-.26.001z\"\n  );\n};\nconst insertComputerIcon = function(elem) {\n  elem.append(\"defs\").append(\"symbol\").attr(\"id\", \"computer\").attr(\"width\", \"24\").attr(\"height\", \"24\").append(\"path\").attr(\"transform\", \"scale(.5)\").attr(\n    \"d\",\n    \"M2 2v13h20v-13h-20zm18 11h-16v-9h16v9zm-10.228 6l.466-1h3.524l.467 1h-4.457zm14.228 3h-24l2-6h2.104l-1.33 4h18.45l-1.297-4h2.073l2 6zm-5-10h-14v-7h14v7z\"\n  );\n};\nconst insertClockIcon = function(elem) {\n  elem.append(\"defs\").append(\"symbol\").attr(\"id\", \"clock\").attr(\"width\", \"24\").attr(\"height\", \"24\").append(\"path\").attr(\"transform\", \"scale(.5)\").attr(\n    \"d\",\n    \"M12 2c5.514 0 10 4.486 10 10s-4.486 10-10 10-10-4.486-10-10 4.486-10 10-10zm0-2c-6.627 0-12 5.373-12 12s5.373 12 12 12 12-5.373 12-12-5.373-12-12-12zm5.848 12.459c.202.038.202.333.001.372-1.907.361-6.045 1.111-6.547 1.111-.719 0-1.301-.582-1.301-1.301 0-.512.77-5.447 1.125-7.445.034-.192.312-.181.343.014l.985 6.238 5.394 1.011z\"\n  );\n};\nconst insertArrowHead = function(elem) {\n  elem.append(\"defs\").append(\"marker\").attr(\"id\", \"arrowhead\").attr(\"refX\", 7.9).attr(\"refY\", 5).attr(\"markerUnits\", \"userSpaceOnUse\").attr(\"markerWidth\", 12).attr(\"markerHeight\", 12).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M 0 0 L 10 5 L 0 10 z\");\n};\nconst insertArrowFilledHead = function(elem) {\n  elem.append(\"defs\").append(\"marker\").attr(\"id\", \"filled-head\").attr(\"refX\", 15.5).attr(\"refY\", 7).attr(\"markerWidth\", 20).attr(\"markerHeight\", 28).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M 18,7 L9,13 L14,7 L9,1 Z\");\n};\nconst insertSequenceNumber = function(elem) {\n  elem.append(\"defs\").append(\"marker\").attr(\"id\", \"sequencenumber\").attr(\"refX\", 15).attr(\"refY\", 15).attr(\"markerWidth\", 60).attr(\"markerHeight\", 40).attr(\"orient\", \"auto\").append(\"circle\").attr(\"cx\", 15).attr(\"cy\", 15).attr(\"r\", 6);\n};\nconst insertArrowCrossHead = function(elem) {\n  const defs = elem.append(\"defs\");\n  const marker = defs.append(\"marker\").attr(\"id\", \"crosshead\").attr(\"markerWidth\", 15).attr(\"markerHeight\", 8).attr(\"orient\", \"auto\").attr(\"refX\", 4).attr(\"refY\", 4.5);\n  marker.append(\"path\").attr(\"fill\", \"none\").attr(\"stroke\", \"#000000\").style(\"stroke-dasharray\", \"0, 0\").attr(\"stroke-width\", \"1pt\").attr(\"d\", \"M 1,2 L 6,7 M 6,2 L 1,7\");\n};\nconst getTextObj = function() {\n  return {\n    x: 0,\n    y: 0,\n    fill: void 0,\n    anchor: void 0,\n    style: \"#666\",\n    width: void 0,\n    height: void 0,\n    textMargin: 0,\n    rx: 0,\n    ry: 0,\n    tspan: true,\n    valign: void 0\n  };\n};\nconst getNoteRect = function() {\n  return {\n    x: 0,\n    y: 0,\n    fill: \"#EDF2AE\",\n    stroke: \"#666\",\n    width: 100,\n    anchor: \"start\",\n    height: 100,\n    rx: 0,\n    ry: 0\n  };\n};\nconst _drawTextCandidateFunc = function() {\n  function byText(content, g, x, y, width, height, textAttrs) {\n    const text = g.append(\"text\").attr(\"x\", x + width / 2).attr(\"y\", y + height / 2 + 5).style(\"text-anchor\", \"middle\").text(content);\n    _setTextAttrs(text, textAttrs);\n  }\n  function byTspan(content, g, x, y, width, height, textAttrs, conf2) {\n    const { actorFontSize, actorFontFamily, actorFontWeight } = conf2;\n    const [_actorFontSize, _actorFontSizePx] = parseFontSize(actorFontSize);\n    const lines = content.split(common.lineBreakRegex);\n    for (let i = 0; i < lines.length; i++) {\n      const dy = i * _actorFontSize - _actorFontSize * (lines.length - 1) / 2;\n      const text = g.append(\"text\").attr(\"x\", x + width / 2).attr(\"y\", y).style(\"text-anchor\", \"middle\").style(\"font-size\", _actorFontSizePx).style(\"font-weight\", actorFontWeight).style(\"font-family\", actorFontFamily);\n      text.append(\"tspan\").attr(\"x\", x + width / 2).attr(\"dy\", dy).text(lines[i]);\n      text.attr(\"y\", y + height / 2).attr(\"dominant-baseline\", \"central\").attr(\"alignment-baseline\", \"central\");\n      _setTextAttrs(text, textAttrs);\n    }\n  }\n  function byFo(content, g, x, y, width, height, textAttrs, conf2) {\n    const s = g.append(\"switch\");\n    const f = s.append(\"foreignObject\").attr(\"x\", x).attr(\"y\", y).attr(\"width\", width).attr(\"height\", height);\n    const text = f.append(\"xhtml:div\").style(\"display\", \"table\").style(\"height\", \"100%\").style(\"width\", \"100%\");\n    text.append(\"div\").style(\"display\", \"table-cell\").style(\"text-align\", \"center\").style(\"vertical-align\", \"middle\").text(content);\n    byTspan(content, s, x, y, width, height, textAttrs, conf2);\n    _setTextAttrs(text, textAttrs);\n  }\n  async function byKatex(content, g, x, y, width, height, textAttrs, conf2) {\n    const dim = await calculateMathMLDimensions(content, getConfig$1());\n    const s = g.append(\"switch\");\n    const f = s.append(\"foreignObject\").attr(\"x\", x + width / 2 - dim.width / 2).attr(\"y\", y + height / 2 - dim.height / 2).attr(\"width\", dim.width).attr(\"height\", dim.height);\n    const text = f.append(\"xhtml:div\").style(\"height\", \"100%\").style(\"width\", \"100%\");\n    text.append(\"div\").style(\"text-align\", \"center\").style(\"vertical-align\", \"middle\").html(await renderKatex(content, getConfig$1()));\n    byTspan(content, s, x, y, width, height, textAttrs, conf2);\n    _setTextAttrs(text, textAttrs);\n  }\n  function _setTextAttrs(toText, fromTextAttrsDict) {\n    for (const key in fromTextAttrsDict) {\n      if (fromTextAttrsDict.hasOwnProperty(key)) {\n        toText.attr(key, fromTextAttrsDict[key]);\n      }\n    }\n  }\n  return function(conf2, hasKatex2 = false) {\n    if (hasKatex2) {\n      return byKatex;\n    }\n    return conf2.textPlacement === \"fo\" ? byFo : conf2.textPlacement === \"old\" ? byText : byTspan;\n  };\n}();\nconst _drawMenuItemTextCandidateFunc = function() {\n  function byText(content, g, x, y, width, height, textAttrs) {\n    const text = g.append(\"text\").attr(\"x\", x).attr(\"y\", y).style(\"text-anchor\", \"start\").text(content);\n    _setTextAttrs(text, textAttrs);\n  }\n  function byTspan(content, g, x, y, width, height, textAttrs, conf2) {\n    const { actorFontSize, actorFontFamily, actorFontWeight } = conf2;\n    const lines = content.split(common.lineBreakRegex);\n    for (let i = 0; i < lines.length; i++) {\n      const dy = i * actorFontSize - actorFontSize * (lines.length - 1) / 2;\n      const text = g.append(\"text\").attr(\"x\", x).attr(\"y\", y).style(\"text-anchor\", \"start\").style(\"font-size\", actorFontSize).style(\"font-weight\", actorFontWeight).style(\"font-family\", actorFontFamily);\n      text.append(\"tspan\").attr(\"x\", x).attr(\"dy\", dy).text(lines[i]);\n      text.attr(\"y\", y + height / 2).attr(\"dominant-baseline\", \"central\").attr(\"alignment-baseline\", \"central\");\n      _setTextAttrs(text, textAttrs);\n    }\n  }\n  function byFo(content, g, x, y, width, height, textAttrs, conf2) {\n    const s = g.append(\"switch\");\n    const f = s.append(\"foreignObject\").attr(\"x\", x).attr(\"y\", y).attr(\"width\", width).attr(\"height\", height);\n    const text = f.append(\"xhtml:div\").style(\"display\", \"table\").style(\"height\", \"100%\").style(\"width\", \"100%\");\n    text.append(\"div\").style(\"display\", \"table-cell\").style(\"text-align\", \"center\").style(\"vertical-align\", \"middle\").text(content);\n    byTspan(content, s, x, y, width, height, textAttrs, conf2);\n    _setTextAttrs(text, textAttrs);\n  }\n  function _setTextAttrs(toText, fromTextAttrsDict) {\n    for (const key in fromTextAttrsDict) {\n      if (fromTextAttrsDict.hasOwnProperty(key)) {\n        toText.attr(key, fromTextAttrsDict[key]);\n      }\n    }\n  }\n  return function(conf2) {\n    return conf2.textPlacement === \"fo\" ? byFo : conf2.textPlacement === \"old\" ? byText : byTspan;\n  };\n}();\nconst svgDraw = {\n  drawRect,\n  drawText,\n  drawLabel,\n  drawActor,\n  drawBox,\n  drawPopup,\n  anchorElement,\n  drawActivation,\n  drawLoop,\n  drawBackgroundRect,\n  insertArrowHead,\n  insertArrowFilledHead,\n  insertSequenceNumber,\n  insertArrowCrossHead,\n  insertDatabaseIcon,\n  insertComputerIcon,\n  insertClockIcon,\n  getTextObj,\n  getNoteRect,\n  fixLifeLineHeights,\n  sanitizeUrl\n};\nlet conf = {};\nconst bounds = {\n  data: {\n    startx: void 0,\n    stopx: void 0,\n    starty: void 0,\n    stopy: void 0\n  },\n  verticalPos: 0,\n  sequenceItems: [],\n  activations: [],\n  models: {\n    getHeight: function() {\n      return Math.max.apply(\n        null,\n        this.actors.length === 0 ? [0] : this.actors.map((actor) => actor.height || 0)\n      ) + (this.loops.length === 0 ? 0 : this.loops.map((it) => it.height || 0).reduce((acc, h) => acc + h)) + (this.messages.length === 0 ? 0 : this.messages.map((it) => it.height || 0).reduce((acc, h) => acc + h)) + (this.notes.length === 0 ? 0 : this.notes.map((it) => it.height || 0).reduce((acc, h) => acc + h));\n    },\n    clear: function() {\n      this.actors = [];\n      this.boxes = [];\n      this.loops = [];\n      this.messages = [];\n      this.notes = [];\n    },\n    addBox: function(boxModel) {\n      this.boxes.push(boxModel);\n    },\n    addActor: function(actorModel) {\n      this.actors.push(actorModel);\n    },\n    addLoop: function(loopModel) {\n      this.loops.push(loopModel);\n    },\n    addMessage: function(msgModel) {\n      this.messages.push(msgModel);\n    },\n    addNote: function(noteModel) {\n      this.notes.push(noteModel);\n    },\n    lastActor: function() {\n      return this.actors[this.actors.length - 1];\n    },\n    lastLoop: function() {\n      return this.loops[this.loops.length - 1];\n    },\n    lastMessage: function() {\n      return this.messages[this.messages.length - 1];\n    },\n    lastNote: function() {\n      return this.notes[this.notes.length - 1];\n    },\n    actors: [],\n    boxes: [],\n    loops: [],\n    messages: [],\n    notes: []\n  },\n  init: function() {\n    this.sequenceItems = [];\n    this.activations = [];\n    this.models.clear();\n    this.data = {\n      startx: void 0,\n      stopx: void 0,\n      starty: void 0,\n      stopy: void 0\n    };\n    this.verticalPos = 0;\n    setConf(getConfig());\n  },\n  updateVal: function(obj, key, val, fun) {\n    if (obj[key] === void 0) {\n      obj[key] = val;\n    } else {\n      obj[key] = fun(val, obj[key]);\n    }\n  },\n  updateBounds: function(startx, starty, stopx, stopy) {\n    const _self = this;\n    let cnt = 0;\n    function updateFn(type) {\n      return function updateItemBounds(item) {\n        cnt++;\n        const n = _self.sequenceItems.length - cnt + 1;\n        _self.updateVal(item, \"starty\", starty - n * conf.boxMargin, Math.min);\n        _self.updateVal(item, \"stopy\", stopy + n * conf.boxMargin, Math.max);\n        _self.updateVal(bounds.data, \"startx\", startx - n * conf.boxMargin, Math.min);\n        _self.updateVal(bounds.data, \"stopx\", stopx + n * conf.boxMargin, Math.max);\n        if (!(type === \"activation\")) {\n          _self.updateVal(item, \"startx\", startx - n * conf.boxMargin, Math.min);\n          _self.updateVal(item, \"stopx\", stopx + n * conf.boxMargin, Math.max);\n          _self.updateVal(bounds.data, \"starty\", starty - n * conf.boxMargin, Math.min);\n          _self.updateVal(bounds.data, \"stopy\", stopy + n * conf.boxMargin, Math.max);\n        }\n      };\n    }\n    this.sequenceItems.forEach(updateFn());\n    this.activations.forEach(updateFn(\"activation\"));\n  },\n  insert: function(startx, starty, stopx, stopy) {\n    const _startx = common.getMin(startx, stopx);\n    const _stopx = common.getMax(startx, stopx);\n    const _starty = common.getMin(starty, stopy);\n    const _stopy = common.getMax(starty, stopy);\n    this.updateVal(bounds.data, \"startx\", _startx, Math.min);\n    this.updateVal(bounds.data, \"starty\", _starty, Math.min);\n    this.updateVal(bounds.data, \"stopx\", _stopx, Math.max);\n    this.updateVal(bounds.data, \"stopy\", _stopy, Math.max);\n    this.updateBounds(_startx, _starty, _stopx, _stopy);\n  },\n  newActivation: function(message, diagram2, actors) {\n    const actorRect = actors[message.from.actor];\n    const stackedSize = actorActivations(message.from.actor).length || 0;\n    const x = actorRect.x + actorRect.width / 2 + (stackedSize - 1) * conf.activationWidth / 2;\n    this.activations.push({\n      startx: x,\n      starty: this.verticalPos + 2,\n      stopx: x + conf.activationWidth,\n      stopy: void 0,\n      actor: message.from.actor,\n      anchored: svgDraw.anchorElement(diagram2)\n    });\n  },\n  endActivation: function(message) {\n    const lastActorActivationIdx = this.activations.map(function(activation) {\n      return activation.actor;\n    }).lastIndexOf(message.from.actor);\n    return this.activations.splice(lastActorActivationIdx, 1)[0];\n  },\n  createLoop: function(title = { message: void 0, wrap: false, width: void 0 }, fill) {\n    return {\n      startx: void 0,\n      starty: this.verticalPos,\n      stopx: void 0,\n      stopy: void 0,\n      title: title.message,\n      wrap: title.wrap,\n      width: title.width,\n      height: 0,\n      fill\n    };\n  },\n  newLoop: function(title = { message: void 0, wrap: false, width: void 0 }, fill) {\n    this.sequenceItems.push(this.createLoop(title, fill));\n  },\n  endLoop: function() {\n    return this.sequenceItems.pop();\n  },\n  isLoopOverlap: function() {\n    return this.sequenceItems.length ? this.sequenceItems[this.sequenceItems.length - 1].overlap : false;\n  },\n  addSectionToLoop: function(message) {\n    const loop = this.sequenceItems.pop();\n    loop.sections = loop.sections || [];\n    loop.sectionTitles = loop.sectionTitles || [];\n    loop.sections.push({ y: bounds.getVerticalPos(), height: 0 });\n    loop.sectionTitles.push(message);\n    this.sequenceItems.push(loop);\n  },\n  saveVerticalPos: function() {\n    if (this.isLoopOverlap()) {\n      this.savedVerticalPos = this.verticalPos;\n    }\n  },\n  resetVerticalPos: function() {\n    if (this.isLoopOverlap()) {\n      this.verticalPos = this.savedVerticalPos;\n    }\n  },\n  bumpVerticalPos: function(bump) {\n    this.verticalPos = this.verticalPos + bump;\n    this.data.stopy = common.getMax(this.data.stopy, this.verticalPos);\n  },\n  getVerticalPos: function() {\n    return this.verticalPos;\n  },\n  getBounds: function() {\n    return { bounds: this.data, models: this.models };\n  }\n};\nconst drawNote = async function(elem, noteModel) {\n  bounds.bumpVerticalPos(conf.boxMargin);\n  noteModel.height = conf.boxMargin;\n  noteModel.starty = bounds.getVerticalPos();\n  const rect = getNoteRect$1();\n  rect.x = noteModel.startx;\n  rect.y = noteModel.starty;\n  rect.width = noteModel.width || conf.width;\n  rect.class = \"note\";\n  const g = elem.append(\"g\");\n  const rectElem = svgDraw.drawRect(g, rect);\n  const textObj = getTextObj$1();\n  textObj.x = noteModel.startx;\n  textObj.y = noteModel.starty;\n  textObj.width = rect.width;\n  textObj.dy = \"1em\";\n  textObj.text = noteModel.message;\n  textObj.class = \"noteText\";\n  textObj.fontFamily = conf.noteFontFamily;\n  textObj.fontSize = conf.noteFontSize;\n  textObj.fontWeight = conf.noteFontWeight;\n  textObj.anchor = conf.noteAlign;\n  textObj.textMargin = conf.noteMargin;\n  textObj.valign = \"center\";\n  const textElem = hasKatex(textObj.text) ? await drawKatex(g, textObj) : drawText(g, textObj);\n  const textHeight = Math.round(\n    textElem.map((te) => (te._groups || te)[0][0].getBBox().height).reduce((acc, curr) => acc + curr)\n  );\n  rectElem.attr(\"height\", textHeight + 2 * conf.noteMargin);\n  noteModel.height += textHeight + 2 * conf.noteMargin;\n  bounds.bumpVerticalPos(textHeight + 2 * conf.noteMargin);\n  noteModel.stopy = noteModel.starty + textHeight + 2 * conf.noteMargin;\n  noteModel.stopx = noteModel.startx + rect.width;\n  bounds.insert(noteModel.startx, noteModel.starty, noteModel.stopx, noteModel.stopy);\n  bounds.models.addNote(noteModel);\n};\nconst messageFont = (cnf) => {\n  return {\n    fontFamily: cnf.messageFontFamily,\n    fontSize: cnf.messageFontSize,\n    fontWeight: cnf.messageFontWeight\n  };\n};\nconst noteFont = (cnf) => {\n  return {\n    fontFamily: cnf.noteFontFamily,\n    fontSize: cnf.noteFontSize,\n    fontWeight: cnf.noteFontWeight\n  };\n};\nconst actorFont = (cnf) => {\n  return {\n    fontFamily: cnf.actorFontFamily,\n    fontSize: cnf.actorFontSize,\n    fontWeight: cnf.actorFontWeight\n  };\n};\nasync function boundMessage(_diagram, msgModel) {\n  bounds.bumpVerticalPos(10);\n  const { startx, stopx, message } = msgModel;\n  const lines = common.splitBreaks(message).length;\n  const isKatexMsg = hasKatex(message);\n  const textDims = isKatexMsg ? await calculateMathMLDimensions(message, getConfig()) : utils.calculateTextDimensions(message, messageFont(conf));\n  if (!isKatexMsg) {\n    const lineHeight = textDims.height / lines;\n    msgModel.height += lineHeight;\n    bounds.bumpVerticalPos(lineHeight);\n  }\n  let lineStartY;\n  let totalOffset = textDims.height - 10;\n  const textWidth = textDims.width;\n  if (startx === stopx) {\n    lineStartY = bounds.getVerticalPos() + totalOffset;\n    if (!conf.rightAngles) {\n      totalOffset += conf.boxMargin;\n      lineStartY = bounds.getVerticalPos() + totalOffset;\n    }\n    totalOffset += 30;\n    const dx = common.getMax(textWidth / 2, conf.width / 2);\n    bounds.insert(\n      startx - dx,\n      bounds.getVerticalPos() - 10 + totalOffset,\n      stopx + dx,\n      bounds.getVerticalPos() + 30 + totalOffset\n    );\n  } else {\n    totalOffset += conf.boxMargin;\n    lineStartY = bounds.getVerticalPos() + totalOffset;\n    bounds.insert(startx, lineStartY - 10, stopx, lineStartY);\n  }\n  bounds.bumpVerticalPos(totalOffset);\n  msgModel.height += totalOffset;\n  msgModel.stopy = msgModel.starty + msgModel.height;\n  bounds.insert(msgModel.fromBounds, msgModel.starty, msgModel.toBounds, msgModel.stopy);\n  return lineStartY;\n}\nconst drawMessage = async function(diagram2, msgModel, lineStartY, diagObj) {\n  const { startx, stopx, starty, message, type, sequenceIndex, sequenceVisible } = msgModel;\n  const textDims = utils.calculateTextDimensions(message, messageFont(conf));\n  const textObj = getTextObj$1();\n  textObj.x = startx;\n  textObj.y = starty + 10;\n  textObj.width = stopx - startx;\n  textObj.class = \"messageText\";\n  textObj.dy = \"1em\";\n  textObj.text = message;\n  textObj.fontFamily = conf.messageFontFamily;\n  textObj.fontSize = conf.messageFontSize;\n  textObj.fontWeight = conf.messageFontWeight;\n  textObj.anchor = conf.messageAlign;\n  textObj.valign = \"center\";\n  textObj.textMargin = conf.wrapPadding;\n  textObj.tspan = false;\n  hasKatex(textObj.text) ? await drawKatex(diagram2, textObj, { startx, stopx, starty: lineStartY }) : drawText(diagram2, textObj);\n  const textWidth = textDims.width;\n  let line;\n  if (startx === stopx) {\n    if (conf.rightAngles) {\n      line = diagram2.append(\"path\").attr(\n        \"d\",\n        `M  ${startx},${lineStartY} H ${startx + common.getMax(conf.width / 2, textWidth / 2)} V ${lineStartY + 25} H ${startx}`\n      );\n    } else {\n      line = diagram2.append(\"path\").attr(\n        \"d\",\n        \"M \" + startx + \",\" + lineStartY + \" C \" + (startx + 60) + \",\" + (lineStartY - 10) + \" \" + (startx + 60) + \",\" + (lineStartY + 30) + \" \" + startx + \",\" + (lineStartY + 20)\n      );\n    }\n  } else {\n    line = diagram2.append(\"line\");\n    line.attr(\"x1\", startx);\n    line.attr(\"y1\", lineStartY);\n    line.attr(\"x2\", stopx);\n    line.attr(\"y2\", lineStartY);\n  }\n  if (type === diagObj.db.LINETYPE.DOTTED || type === diagObj.db.LINETYPE.DOTTED_CROSS || type === diagObj.db.LINETYPE.DOTTED_POINT || type === diagObj.db.LINETYPE.DOTTED_OPEN) {\n    line.style(\"stroke-dasharray\", \"3, 3\");\n    line.attr(\"class\", \"messageLine1\");\n  } else {\n    line.attr(\"class\", \"messageLine0\");\n  }\n  let url = \"\";\n  if (conf.arrowMarkerAbsolute) {\n    url = window.location.protocol + \"//\" + window.location.host + window.location.pathname + window.location.search;\n    url = url.replace(/\\(/g, \"\\\\(\");\n    url = url.replace(/\\)/g, \"\\\\)\");\n  }\n  line.attr(\"stroke-width\", 2);\n  line.attr(\"stroke\", \"none\");\n  line.style(\"fill\", \"none\");\n  if (type === diagObj.db.LINETYPE.SOLID || type === diagObj.db.LINETYPE.DOTTED) {\n    line.attr(\"marker-end\", \"url(\" + url + \"#arrowhead)\");\n  }\n  if (type === diagObj.db.LINETYPE.SOLID_POINT || type === diagObj.db.LINETYPE.DOTTED_POINT) {\n    line.attr(\"marker-end\", \"url(\" + url + \"#filled-head)\");\n  }\n  if (type === diagObj.db.LINETYPE.SOLID_CROSS || type === diagObj.db.LINETYPE.DOTTED_CROSS) {\n    line.attr(\"marker-end\", \"url(\" + url + \"#crosshead)\");\n  }\n  if (sequenceVisible || conf.showSequenceNumbers) {\n    line.attr(\"marker-start\", \"url(\" + url + \"#sequencenumber)\");\n    diagram2.append(\"text\").attr(\"x\", startx).attr(\"y\", lineStartY + 4).attr(\"font-family\", \"sans-serif\").attr(\"font-size\", \"12px\").attr(\"text-anchor\", \"middle\").attr(\"class\", \"sequenceNumber\").text(sequenceIndex);\n  }\n};\nconst addActorRenderingData = async function(diagram2, actors, createdActors, actorKeys, verticalPos, messages, isFooter) {\n  let prevWidth = 0;\n  let prevMargin = 0;\n  let prevBox = void 0;\n  let maxHeight = 0;\n  for (const actorKey of actorKeys) {\n    const actor = actors[actorKey];\n    const box = actor.box;\n    if (prevBox && prevBox != box) {\n      if (!isFooter) {\n        bounds.models.addBox(prevBox);\n      }\n      prevMargin += conf.boxMargin + prevBox.margin;\n    }\n    if (box && box != prevBox) {\n      if (!isFooter) {\n        box.x = prevWidth + prevMargin;\n        box.y = verticalPos;\n      }\n      prevMargin += box.margin;\n    }\n    actor.width = actor.width || conf.width;\n    actor.height = common.getMax(actor.height || conf.height, conf.height);\n    actor.margin = actor.margin || conf.actorMargin;\n    maxHeight = common.getMax(maxHeight, actor.height);\n    if (createdActors[actor.name]) {\n      prevMargin += actor.width / 2;\n    }\n    actor.x = prevWidth + prevMargin;\n    actor.starty = bounds.getVerticalPos();\n    bounds.insert(actor.x, verticalPos, actor.x + actor.width, actor.height);\n    prevWidth += actor.width + prevMargin;\n    if (actor.box) {\n      actor.box.width = prevWidth + box.margin - actor.box.x;\n    }\n    prevMargin = actor.margin;\n    prevBox = actor.box;\n    bounds.models.addActor(actor);\n  }\n  if (prevBox && !isFooter) {\n    bounds.models.addBox(prevBox);\n  }\n  bounds.bumpVerticalPos(maxHeight);\n};\nconst drawActors = async function(diagram2, actors, actorKeys, isFooter) {\n  if (!isFooter) {\n    for (const actorKey of actorKeys) {\n      const actor = actors[actorKey];\n      await svgDraw.drawActor(diagram2, actor, conf, false);\n    }\n  } else {\n    let maxHeight = 0;\n    bounds.bumpVerticalPos(conf.boxMargin * 2);\n    for (const actorKey of actorKeys) {\n      const actor = actors[actorKey];\n      if (!actor.stopy) {\n        actor.stopy = bounds.getVerticalPos();\n      }\n      const height = await svgDraw.drawActor(diagram2, actor, conf, true);\n      maxHeight = common.getMax(maxHeight, height);\n    }\n    bounds.bumpVerticalPos(maxHeight + conf.boxMargin);\n  }\n};\nconst drawActorsPopup = function(diagram2, actors, actorKeys, doc) {\n  let maxHeight = 0;\n  let maxWidth = 0;\n  for (const actorKey of actorKeys) {\n    const actor = actors[actorKey];\n    const minMenuWidth = getRequiredPopupWidth(actor);\n    const menuDimensions = svgDraw.drawPopup(\n      diagram2,\n      actor,\n      minMenuWidth,\n      conf,\n      conf.forceMenus,\n      doc\n    );\n    if (menuDimensions.height > maxHeight) {\n      maxHeight = menuDimensions.height;\n    }\n    if (menuDimensions.width + actor.x > maxWidth) {\n      maxWidth = menuDimensions.width + actor.x;\n    }\n  }\n  return { maxHeight, maxWidth };\n};\nconst setConf = function(cnf) {\n  assignWithDepth(conf, cnf);\n  if (cnf.fontFamily) {\n    conf.actorFontFamily = conf.noteFontFamily = conf.messageFontFamily = cnf.fontFamily;\n  }\n  if (cnf.fontSize) {\n    conf.actorFontSize = conf.noteFontSize = conf.messageFontSize = cnf.fontSize;\n  }\n  if (cnf.fontWeight) {\n    conf.actorFontWeight = conf.noteFontWeight = conf.messageFontWeight = cnf.fontWeight;\n  }\n};\nconst actorActivations = function(actor) {\n  return bounds.activations.filter(function(activation) {\n    return activation.actor === actor;\n  });\n};\nconst activationBounds = function(actor, actors) {\n  const actorObj = actors[actor];\n  const activations = actorActivations(actor);\n  const left = activations.reduce(function(acc, activation) {\n    return common.getMin(acc, activation.startx);\n  }, actorObj.x + actorObj.width / 2 - 1);\n  const right = activations.reduce(function(acc, activation) {\n    return common.getMax(acc, activation.stopx);\n  }, actorObj.x + actorObj.width / 2 + 1);\n  return [left, right];\n};\nfunction adjustLoopHeightForWrap(loopWidths, msg, preMargin, postMargin, addLoopFn) {\n  bounds.bumpVerticalPos(preMargin);\n  let heightAdjust = postMargin;\n  if (msg.id && msg.message && loopWidths[msg.id]) {\n    const loopWidth = loopWidths[msg.id].width;\n    const textConf = messageFont(conf);\n    msg.message = utils.wrapLabel(`[${msg.message}]`, loopWidth - 2 * conf.wrapPadding, textConf);\n    msg.width = loopWidth;\n    msg.wrap = true;\n    const textDims = utils.calculateTextDimensions(msg.message, textConf);\n    const totalOffset = common.getMax(textDims.height, conf.labelBoxHeight);\n    heightAdjust = postMargin + totalOffset;\n    log.debug(`${totalOffset} - ${msg.message}`);\n  }\n  addLoopFn(msg);\n  bounds.bumpVerticalPos(heightAdjust);\n}\nfunction adjustCreatedDestroyedData(msg, msgModel, lineStartY, index, actors, createdActors, destroyedActors) {\n  function receiverAdjustment(actor, adjustment) {\n    if (actor.x < actors[msg.from].x) {\n      bounds.insert(\n        msgModel.stopx - adjustment,\n        msgModel.starty,\n        msgModel.startx,\n        msgModel.stopy + actor.height / 2 + conf.noteMargin\n      );\n      msgModel.stopx = msgModel.stopx + adjustment;\n    } else {\n      bounds.insert(\n        msgModel.startx,\n        msgModel.starty,\n        msgModel.stopx + adjustment,\n        msgModel.stopy + actor.height / 2 + conf.noteMargin\n      );\n      msgModel.stopx = msgModel.stopx - adjustment;\n    }\n  }\n  function senderAdjustment(actor, adjustment) {\n    if (actor.x < actors[msg.to].x) {\n      bounds.insert(\n        msgModel.startx - adjustment,\n        msgModel.starty,\n        msgModel.stopx,\n        msgModel.stopy + actor.height / 2 + conf.noteMargin\n      );\n      msgModel.startx = msgModel.startx + adjustment;\n    } else {\n      bounds.insert(\n        msgModel.stopx,\n        msgModel.starty,\n        msgModel.startx + adjustment,\n        msgModel.stopy + actor.height / 2 + conf.noteMargin\n      );\n      msgModel.startx = msgModel.startx - adjustment;\n    }\n  }\n  if (createdActors[msg.to] == index) {\n    const actor = actors[msg.to];\n    const adjustment = actor.type == \"actor\" ? ACTOR_TYPE_WIDTH / 2 + 3 : actor.width / 2 + 3;\n    receiverAdjustment(actor, adjustment);\n    actor.starty = lineStartY - actor.height / 2;\n    bounds.bumpVerticalPos(actor.height / 2);\n  } else if (destroyedActors[msg.from] == index) {\n    const actor = actors[msg.from];\n    if (conf.mirrorActors) {\n      const adjustment = actor.type == \"actor\" ? ACTOR_TYPE_WIDTH / 2 : actor.width / 2;\n      senderAdjustment(actor, adjustment);\n    }\n    actor.stopy = lineStartY - actor.height / 2;\n    bounds.bumpVerticalPos(actor.height / 2);\n  } else if (destroyedActors[msg.to] == index) {\n    const actor = actors[msg.to];\n    if (conf.mirrorActors) {\n      const adjustment = actor.type == \"actor\" ? ACTOR_TYPE_WIDTH / 2 + 3 : actor.width / 2 + 3;\n      receiverAdjustment(actor, adjustment);\n    }\n    actor.stopy = lineStartY - actor.height / 2;\n    bounds.bumpVerticalPos(actor.height / 2);\n  }\n}\nconst draw = async function(_text, id, _version, diagObj) {\n  const { securityLevel, sequence } = getConfig();\n  conf = sequence;\n  let sandboxElement;\n  if (securityLevel === \"sandbox\") {\n    sandboxElement = select(\"#i\" + id);\n  }\n  const root = securityLevel === \"sandbox\" ? select(sandboxElement.nodes()[0].contentDocument.body) : select(\"body\");\n  const doc = securityLevel === \"sandbox\" ? sandboxElement.nodes()[0].contentDocument : document;\n  bounds.init();\n  log.debug(diagObj.db);\n  const diagram2 = securityLevel === \"sandbox\" ? root.select(`[id=\"${id}\"]`) : select(`[id=\"${id}\"]`);\n  const actors = diagObj.db.getActors();\n  const createdActors = diagObj.db.getCreatedActors();\n  const destroyedActors = diagObj.db.getDestroyedActors();\n  const boxes = diagObj.db.getBoxes();\n  let actorKeys = diagObj.db.getActorKeys();\n  const messages = diagObj.db.getMessages();\n  const title = diagObj.db.getDiagramTitle();\n  const hasBoxes = diagObj.db.hasAtLeastOneBox();\n  const hasBoxTitles = diagObj.db.hasAtLeastOneBoxWithTitle();\n  const maxMessageWidthPerActor = await getMaxMessageWidthPerActor(actors, messages, diagObj);\n  conf.height = await calculateActorMargins(actors, maxMessageWidthPerActor, boxes);\n  svgDraw.insertComputerIcon(diagram2);\n  svgDraw.insertDatabaseIcon(diagram2);\n  svgDraw.insertClockIcon(diagram2);\n  if (hasBoxes) {\n    bounds.bumpVerticalPos(conf.boxMargin);\n    if (hasBoxTitles) {\n      bounds.bumpVerticalPos(boxes[0].textMaxHeight);\n    }\n  }\n  if (conf.hideUnusedParticipants === true) {\n    const newActors = /* @__PURE__ */ new Set();\n    messages.forEach((message) => {\n      newActors.add(message.from);\n      newActors.add(message.to);\n    });\n    actorKeys = actorKeys.filter((actorKey) => newActors.has(actorKey));\n  }\n  await addActorRenderingData(diagram2, actors, createdActors, actorKeys, 0, messages, false);\n  const loopWidths = await calculateLoopBounds(messages, actors, maxMessageWidthPerActor, diagObj);\n  svgDraw.insertArrowHead(diagram2);\n  svgDraw.insertArrowCrossHead(diagram2);\n  svgDraw.insertArrowFilledHead(diagram2);\n  svgDraw.insertSequenceNumber(diagram2);\n  function activeEnd(msg, verticalPos) {\n    const activationData = bounds.endActivation(msg);\n    if (activationData.starty + 18 > verticalPos) {\n      activationData.starty = verticalPos - 6;\n      verticalPos += 12;\n    }\n    svgDraw.drawActivation(\n      diagram2,\n      activationData,\n      verticalPos,\n      conf,\n      actorActivations(msg.from.actor).length\n    );\n    bounds.insert(activationData.startx, verticalPos - 10, activationData.stopx, verticalPos);\n  }\n  let sequenceIndex = 1;\n  let sequenceIndexStep = 1;\n  const messagesToDraw = [];\n  const backgrounds = [];\n  let index = 0;\n  for (const msg of messages) {\n    let loopModel, noteModel, msgModel;\n    switch (msg.type) {\n      case diagObj.db.LINETYPE.NOTE:\n        bounds.resetVerticalPos();\n        noteModel = msg.noteModel;\n        await drawNote(diagram2, noteModel);\n        break;\n      case diagObj.db.LINETYPE.ACTIVE_START:\n        bounds.newActivation(msg, diagram2, actors);\n        break;\n      case diagObj.db.LINETYPE.ACTIVE_END:\n        activeEnd(msg, bounds.getVerticalPos());\n        break;\n      case diagObj.db.LINETYPE.LOOP_START:\n        adjustLoopHeightForWrap(\n          loopWidths,\n          msg,\n          conf.boxMargin,\n          conf.boxMargin + conf.boxTextMargin,\n          (message) => bounds.newLoop(message)\n        );\n        break;\n      case diagObj.db.LINETYPE.LOOP_END:\n        loopModel = bounds.endLoop();\n        await svgDraw.drawLoop(diagram2, loopModel, \"loop\", conf);\n        bounds.bumpVerticalPos(loopModel.stopy - bounds.getVerticalPos());\n        bounds.models.addLoop(loopModel);\n        break;\n      case diagObj.db.LINETYPE.RECT_START:\n        adjustLoopHeightForWrap(\n          loopWidths,\n          msg,\n          conf.boxMargin,\n          conf.boxMargin,\n          (message) => bounds.newLoop(void 0, message.message)\n        );\n        break;\n      case diagObj.db.LINETYPE.RECT_END:\n        loopModel = bounds.endLoop();\n        backgrounds.push(loopModel);\n        bounds.models.addLoop(loopModel);\n        bounds.bumpVerticalPos(loopModel.stopy - bounds.getVerticalPos());\n        break;\n      case diagObj.db.LINETYPE.OPT_START:\n        adjustLoopHeightForWrap(\n          loopWidths,\n          msg,\n          conf.boxMargin,\n          conf.boxMargin + conf.boxTextMargin,\n          (message) => bounds.newLoop(message)\n        );\n        break;\n      case diagObj.db.LINETYPE.OPT_END:\n        loopModel = bounds.endLoop();\n        await svgDraw.drawLoop(diagram2, loopModel, \"opt\", conf);\n        bounds.bumpVerticalPos(loopModel.stopy - bounds.getVerticalPos());\n        bounds.models.addLoop(loopModel);\n        break;\n      case diagObj.db.LINETYPE.ALT_START:\n        adjustLoopHeightForWrap(\n          loopWidths,\n          msg,\n          conf.boxMargin,\n          conf.boxMargin + conf.boxTextMargin,\n          (message) => bounds.newLoop(message)\n        );\n        break;\n      case diagObj.db.LINETYPE.ALT_ELSE:\n        adjustLoopHeightForWrap(\n          loopWidths,\n          msg,\n          conf.boxMargin + conf.boxTextMargin,\n          conf.boxMargin,\n          (message) => bounds.addSectionToLoop(message)\n        );\n        break;\n      case diagObj.db.LINETYPE.ALT_END:\n        loopModel = bounds.endLoop();\n        await svgDraw.drawLoop(diagram2, loopModel, \"alt\", conf);\n        bounds.bumpVerticalPos(loopModel.stopy - bounds.getVerticalPos());\n        bounds.models.addLoop(loopModel);\n        break;\n      case diagObj.db.LINETYPE.PAR_START:\n      case diagObj.db.LINETYPE.PAR_OVER_START:\n        adjustLoopHeightForWrap(\n          loopWidths,\n          msg,\n          conf.boxMargin,\n          conf.boxMargin + conf.boxTextMargin,\n          (message) => bounds.newLoop(message)\n        );\n        bounds.saveVerticalPos();\n        break;\n      case diagObj.db.LINETYPE.PAR_AND:\n        adjustLoopHeightForWrap(\n          loopWidths,\n          msg,\n          conf.boxMargin + conf.boxTextMargin,\n          conf.boxMargin,\n          (message) => bounds.addSectionToLoop(message)\n        );\n        break;\n      case diagObj.db.LINETYPE.PAR_END:\n        loopModel = bounds.endLoop();\n        await svgDraw.drawLoop(diagram2, loopModel, \"par\", conf);\n        bounds.bumpVerticalPos(loopModel.stopy - bounds.getVerticalPos());\n        bounds.models.addLoop(loopModel);\n        break;\n      case diagObj.db.LINETYPE.AUTONUMBER:\n        sequenceIndex = msg.message.start || sequenceIndex;\n        sequenceIndexStep = msg.message.step || sequenceIndexStep;\n        if (msg.message.visible) {\n          diagObj.db.enableSequenceNumbers();\n        } else {\n          diagObj.db.disableSequenceNumbers();\n        }\n        break;\n      case diagObj.db.LINETYPE.CRITICAL_START:\n        adjustLoopHeightForWrap(\n          loopWidths,\n          msg,\n          conf.boxMargin,\n          conf.boxMargin + conf.boxTextMargin,\n          (message) => bounds.newLoop(message)\n        );\n        break;\n      case diagObj.db.LINETYPE.CRITICAL_OPTION:\n        adjustLoopHeightForWrap(\n          loopWidths,\n          msg,\n          conf.boxMargin + conf.boxTextMargin,\n          conf.boxMargin,\n          (message) => bounds.addSectionToLoop(message)\n        );\n        break;\n      case diagObj.db.LINETYPE.CRITICAL_END:\n        loopModel = bounds.endLoop();\n        await svgDraw.drawLoop(diagram2, loopModel, \"critical\", conf);\n        bounds.bumpVerticalPos(loopModel.stopy - bounds.getVerticalPos());\n        bounds.models.addLoop(loopModel);\n        break;\n      case diagObj.db.LINETYPE.BREAK_START:\n        adjustLoopHeightForWrap(\n          loopWidths,\n          msg,\n          conf.boxMargin,\n          conf.boxMargin + conf.boxTextMargin,\n          (message) => bounds.newLoop(message)\n        );\n        break;\n      case diagObj.db.LINETYPE.BREAK_END:\n        loopModel = bounds.endLoop();\n        await svgDraw.drawLoop(diagram2, loopModel, \"break\", conf);\n        bounds.bumpVerticalPos(loopModel.stopy - bounds.getVerticalPos());\n        bounds.models.addLoop(loopModel);\n        break;\n      default:\n        try {\n          msgModel = msg.msgModel;\n          msgModel.starty = bounds.getVerticalPos();\n          msgModel.sequenceIndex = sequenceIndex;\n          msgModel.sequenceVisible = diagObj.db.showSequenceNumbers();\n          const lineStartY = await boundMessage(diagram2, msgModel);\n          adjustCreatedDestroyedData(\n            msg,\n            msgModel,\n            lineStartY,\n            index,\n            actors,\n            createdActors,\n            destroyedActors\n          );\n          messagesToDraw.push({ messageModel: msgModel, lineStartY });\n          bounds.models.addMessage(msgModel);\n        } catch (e) {\n          log.error(\"error while drawing message\", e);\n        }\n    }\n    if ([\n      diagObj.db.LINETYPE.SOLID_OPEN,\n      diagObj.db.LINETYPE.DOTTED_OPEN,\n      diagObj.db.LINETYPE.SOLID,\n      diagObj.db.LINETYPE.DOTTED,\n      diagObj.db.LINETYPE.SOLID_CROSS,\n      diagObj.db.LINETYPE.DOTTED_CROSS,\n      diagObj.db.LINETYPE.SOLID_POINT,\n      diagObj.db.LINETYPE.DOTTED_POINT\n    ].includes(msg.type)) {\n      sequenceIndex = sequenceIndex + sequenceIndexStep;\n    }\n    index++;\n  }\n  log.debug(\"createdActors\", createdActors);\n  log.debug(\"destroyedActors\", destroyedActors);\n  await drawActors(diagram2, actors, actorKeys, false);\n  for (const e of messagesToDraw) {\n    await drawMessage(diagram2, e.messageModel, e.lineStartY, diagObj);\n  }\n  if (conf.mirrorActors) {\n    await drawActors(diagram2, actors, actorKeys, true);\n  }\n  backgrounds.forEach((e) => svgDraw.drawBackgroundRect(diagram2, e));\n  fixLifeLineHeights(diagram2, actors, actorKeys, conf);\n  for (const box2 of bounds.models.boxes) {\n    box2.height = bounds.getVerticalPos() - box2.y;\n    bounds.insert(box2.x, box2.y, box2.x + box2.width, box2.height);\n    box2.startx = box2.x;\n    box2.starty = box2.y;\n    box2.stopx = box2.startx + box2.width;\n    box2.stopy = box2.starty + box2.height;\n    box2.stroke = \"rgb(0,0,0, 0.5)\";\n    await svgDraw.drawBox(diagram2, box2, conf);\n  }\n  if (hasBoxes) {\n    bounds.bumpVerticalPos(conf.boxMargin);\n  }\n  const requiredBoxSize = drawActorsPopup(diagram2, actors, actorKeys, doc);\n  const { bounds: box } = bounds.getBounds();\n  let boxHeight = box.stopy - box.starty;\n  if (boxHeight < requiredBoxSize.maxHeight) {\n    boxHeight = requiredBoxSize.maxHeight;\n  }\n  let height = boxHeight + 2 * conf.diagramMarginY;\n  if (conf.mirrorActors) {\n    height = height - conf.boxMargin + conf.bottomMarginAdj;\n  }\n  let boxWidth = box.stopx - box.startx;\n  if (boxWidth < requiredBoxSize.maxWidth) {\n    boxWidth = requiredBoxSize.maxWidth;\n  }\n  const width = boxWidth + 2 * conf.diagramMarginX;\n  if (title) {\n    diagram2.append(\"text\").text(title).attr(\"x\", (box.stopx - box.startx) / 2 - 2 * conf.diagramMarginX).attr(\"y\", -25);\n  }\n  configureSvgSize(diagram2, height, width, conf.useMaxWidth);\n  const extraVertForTitle = title ? 40 : 0;\n  diagram2.attr(\n    \"viewBox\",\n    box.startx - conf.diagramMarginX + \" -\" + (conf.diagramMarginY + extraVertForTitle) + \" \" + width + \" \" + (height + extraVertForTitle)\n  );\n  log.debug(`models:`, bounds.models);\n};\nasync function getMaxMessageWidthPerActor(actors, messages, diagObj) {\n  const maxMessageWidthPerActor = {};\n  for (const msg of messages) {\n    if (actors[msg.to] && actors[msg.from]) {\n      const actor = actors[msg.to];\n      if (msg.placement === diagObj.db.PLACEMENT.LEFTOF && !actor.prevActor) {\n        continue;\n      }\n      if (msg.placement === diagObj.db.PLACEMENT.RIGHTOF && !actor.nextActor) {\n        continue;\n      }\n      const isNote = msg.placement !== void 0;\n      const isMessage = !isNote;\n      const textFont = isNote ? noteFont(conf) : messageFont(conf);\n      const wrappedMessage = msg.wrap ? utils.wrapLabel(msg.message, conf.width - 2 * conf.wrapPadding, textFont) : msg.message;\n      const messageDimensions = hasKatex(wrappedMessage) ? await calculateMathMLDimensions(msg.message, getConfig()) : utils.calculateTextDimensions(wrappedMessage, textFont);\n      const messageWidth = messageDimensions.width + 2 * conf.wrapPadding;\n      if (isMessage && msg.from === actor.nextActor) {\n        maxMessageWidthPerActor[msg.to] = common.getMax(\n          maxMessageWidthPerActor[msg.to] || 0,\n          messageWidth\n        );\n      } else if (isMessage && msg.from === actor.prevActor) {\n        maxMessageWidthPerActor[msg.from] = common.getMax(\n          maxMessageWidthPerActor[msg.from] || 0,\n          messageWidth\n        );\n      } else if (isMessage && msg.from === msg.to) {\n        maxMessageWidthPerActor[msg.from] = common.getMax(\n          maxMessageWidthPerActor[msg.from] || 0,\n          messageWidth / 2\n        );\n        maxMessageWidthPerActor[msg.to] = common.getMax(\n          maxMessageWidthPerActor[msg.to] || 0,\n          messageWidth / 2\n        );\n      } else if (msg.placement === diagObj.db.PLACEMENT.RIGHTOF) {\n        maxMessageWidthPerActor[msg.from] = common.getMax(\n          maxMessageWidthPerActor[msg.from] || 0,\n          messageWidth\n        );\n      } else if (msg.placement === diagObj.db.PLACEMENT.LEFTOF) {\n        maxMessageWidthPerActor[actor.prevActor] = common.getMax(\n          maxMessageWidthPerActor[actor.prevActor] || 0,\n          messageWidth\n        );\n      } else if (msg.placement === diagObj.db.PLACEMENT.OVER) {\n        if (actor.prevActor) {\n          maxMessageWidthPerActor[actor.prevActor] = common.getMax(\n            maxMessageWidthPerActor[actor.prevActor] || 0,\n            messageWidth / 2\n          );\n        }\n        if (actor.nextActor) {\n          maxMessageWidthPerActor[msg.from] = common.getMax(\n            maxMessageWidthPerActor[msg.from] || 0,\n            messageWidth / 2\n          );\n        }\n      }\n    }\n  }\n  log.debug(\"maxMessageWidthPerActor:\", maxMessageWidthPerActor);\n  return maxMessageWidthPerActor;\n}\nconst getRequiredPopupWidth = function(actor) {\n  let requiredPopupWidth = 0;\n  const textFont = actorFont(conf);\n  for (const key in actor.links) {\n    const labelDimensions = utils.calculateTextDimensions(key, textFont);\n    const labelWidth = labelDimensions.width + 2 * conf.wrapPadding + 2 * conf.boxMargin;\n    if (requiredPopupWidth < labelWidth) {\n      requiredPopupWidth = labelWidth;\n    }\n  }\n  return requiredPopupWidth;\n};\nasync function calculateActorMargins(actors, actorToMessageWidth, boxes) {\n  let maxHeight = 0;\n  for (const prop of Object.keys(actors)) {\n    const actor = actors[prop];\n    if (actor.wrap) {\n      actor.description = utils.wrapLabel(\n        actor.description,\n        conf.width - 2 * conf.wrapPadding,\n        actorFont(conf)\n      );\n    }\n    const actDims = hasKatex(actor.description) ? await calculateMathMLDimensions(actor.description, getConfig()) : utils.calculateTextDimensions(actor.description, actorFont(conf));\n    actor.width = actor.wrap ? conf.width : common.getMax(conf.width, actDims.width + 2 * conf.wrapPadding);\n    actor.height = actor.wrap ? common.getMax(actDims.height, conf.height) : conf.height;\n    maxHeight = common.getMax(maxHeight, actor.height);\n  }\n  for (const actorKey in actorToMessageWidth) {\n    const actor = actors[actorKey];\n    if (!actor) {\n      continue;\n    }\n    const nextActor = actors[actor.nextActor];\n    if (!nextActor) {\n      const messageWidth2 = actorToMessageWidth[actorKey];\n      const actorWidth2 = messageWidth2 + conf.actorMargin - actor.width / 2;\n      actor.margin = common.getMax(actorWidth2, conf.actorMargin);\n      continue;\n    }\n    const messageWidth = actorToMessageWidth[actorKey];\n    const actorWidth = messageWidth + conf.actorMargin - actor.width / 2 - nextActor.width / 2;\n    actor.margin = common.getMax(actorWidth, conf.actorMargin);\n  }\n  let maxBoxHeight = 0;\n  boxes.forEach((box) => {\n    const textFont = messageFont(conf);\n    let totalWidth = box.actorKeys.reduce((total, aKey) => {\n      return total += actors[aKey].width + (actors[aKey].margin || 0);\n    }, 0);\n    totalWidth -= 2 * conf.boxTextMargin;\n    if (box.wrap) {\n      box.name = utils.wrapLabel(box.name, totalWidth - 2 * conf.wrapPadding, textFont);\n    }\n    const boxMsgDimensions = utils.calculateTextDimensions(box.name, textFont);\n    maxBoxHeight = common.getMax(boxMsgDimensions.height, maxBoxHeight);\n    const minWidth = common.getMax(totalWidth, boxMsgDimensions.width + 2 * conf.wrapPadding);\n    box.margin = conf.boxTextMargin;\n    if (totalWidth < minWidth) {\n      const missing = (minWidth - totalWidth) / 2;\n      box.margin += missing;\n    }\n  });\n  boxes.forEach((box) => box.textMaxHeight = maxBoxHeight);\n  return common.getMax(maxHeight, conf.height);\n}\nconst buildNoteModel = async function(msg, actors, diagObj) {\n  const startx = actors[msg.from].x;\n  const stopx = actors[msg.to].x;\n  const shouldWrap = msg.wrap && msg.message;\n  let textDimensions = hasKatex(msg.message) ? await calculateMathMLDimensions(msg.message, getConfig()) : utils.calculateTextDimensions(\n    shouldWrap ? utils.wrapLabel(msg.message, conf.width, noteFont(conf)) : msg.message,\n    noteFont(conf)\n  );\n  const noteModel = {\n    width: shouldWrap ? conf.width : common.getMax(conf.width, textDimensions.width + 2 * conf.noteMargin),\n    height: 0,\n    startx: actors[msg.from].x,\n    stopx: 0,\n    starty: 0,\n    stopy: 0,\n    message: msg.message\n  };\n  if (msg.placement === diagObj.db.PLACEMENT.RIGHTOF) {\n    noteModel.width = shouldWrap ? common.getMax(conf.width, textDimensions.width) : common.getMax(\n      actors[msg.from].width / 2 + actors[msg.to].width / 2,\n      textDimensions.width + 2 * conf.noteMargin\n    );\n    noteModel.startx = startx + (actors[msg.from].width + conf.actorMargin) / 2;\n  } else if (msg.placement === diagObj.db.PLACEMENT.LEFTOF) {\n    noteModel.width = shouldWrap ? common.getMax(conf.width, textDimensions.width + 2 * conf.noteMargin) : common.getMax(\n      actors[msg.from].width / 2 + actors[msg.to].width / 2,\n      textDimensions.width + 2 * conf.noteMargin\n    );\n    noteModel.startx = startx - noteModel.width + (actors[msg.from].width - conf.actorMargin) / 2;\n  } else if (msg.to === msg.from) {\n    textDimensions = utils.calculateTextDimensions(\n      shouldWrap ? utils.wrapLabel(\n        msg.message,\n        common.getMax(conf.width, actors[msg.from].width),\n        noteFont(conf)\n      ) : msg.message,\n      noteFont(conf)\n    );\n    noteModel.width = shouldWrap ? common.getMax(conf.width, actors[msg.from].width) : common.getMax(\n      actors[msg.from].width,\n      conf.width,\n      textDimensions.width + 2 * conf.noteMargin\n    );\n    noteModel.startx = startx + (actors[msg.from].width - noteModel.width) / 2;\n  } else {\n    noteModel.width = Math.abs(startx + actors[msg.from].width / 2 - (stopx + actors[msg.to].width / 2)) + conf.actorMargin;\n    noteModel.startx = startx < stopx ? startx + actors[msg.from].width / 2 - conf.actorMargin / 2 : stopx + actors[msg.to].width / 2 - conf.actorMargin / 2;\n  }\n  if (shouldWrap) {\n    noteModel.message = utils.wrapLabel(\n      msg.message,\n      noteModel.width - 2 * conf.wrapPadding,\n      noteFont(conf)\n    );\n  }\n  log.debug(\n    `NM:[${noteModel.startx},${noteModel.stopx},${noteModel.starty},${noteModel.stopy}:${noteModel.width},${noteModel.height}=${msg.message}]`\n  );\n  return noteModel;\n};\nconst buildMessageModel = function(msg, actors, diagObj) {\n  if (![\n    diagObj.db.LINETYPE.SOLID_OPEN,\n    diagObj.db.LINETYPE.DOTTED_OPEN,\n    diagObj.db.LINETYPE.SOLID,\n    diagObj.db.LINETYPE.DOTTED,\n    diagObj.db.LINETYPE.SOLID_CROSS,\n    diagObj.db.LINETYPE.DOTTED_CROSS,\n    diagObj.db.LINETYPE.SOLID_POINT,\n    diagObj.db.LINETYPE.DOTTED_POINT\n  ].includes(msg.type)) {\n    return {};\n  }\n  const [fromLeft, fromRight] = activationBounds(msg.from, actors);\n  const [toLeft, toRight] = activationBounds(msg.to, actors);\n  const isArrowToRight = fromLeft <= toLeft;\n  const startx = isArrowToRight ? fromRight : fromLeft;\n  let stopx = isArrowToRight ? toLeft : toRight;\n  const isArrowToActivation = Math.abs(toLeft - toRight) > 2;\n  const adjustValue = (value) => {\n    return isArrowToRight ? -value : value;\n  };\n  if (msg.from === msg.to) {\n    stopx = startx;\n  } else {\n    if (msg.activate && !isArrowToActivation) {\n      stopx += adjustValue(conf.activationWidth / 2 - 1);\n    }\n    if (![diagObj.db.LINETYPE.SOLID_OPEN, diagObj.db.LINETYPE.DOTTED_OPEN].includes(msg.type)) {\n      stopx += adjustValue(3);\n    }\n  }\n  const allBounds = [fromLeft, fromRight, toLeft, toRight];\n  const boundedWidth = Math.abs(startx - stopx);\n  if (msg.wrap && msg.message) {\n    msg.message = utils.wrapLabel(\n      msg.message,\n      common.getMax(boundedWidth + 2 * conf.wrapPadding, conf.width),\n      messageFont(conf)\n    );\n  }\n  const msgDims = utils.calculateTextDimensions(msg.message, messageFont(conf));\n  return {\n    width: common.getMax(\n      msg.wrap ? 0 : msgDims.width + 2 * conf.wrapPadding,\n      boundedWidth + 2 * conf.wrapPadding,\n      conf.width\n    ),\n    height: 0,\n    startx,\n    stopx,\n    starty: 0,\n    stopy: 0,\n    message: msg.message,\n    type: msg.type,\n    wrap: msg.wrap,\n    fromBounds: Math.min.apply(null, allBounds),\n    toBounds: Math.max.apply(null, allBounds)\n  };\n};\nconst calculateLoopBounds = async function(messages, actors, _maxWidthPerActor, diagObj) {\n  const loops = {};\n  const stack = [];\n  let current, noteModel, msgModel;\n  for (const msg of messages) {\n    msg.id = utils.random({ length: 10 });\n    switch (msg.type) {\n      case diagObj.db.LINETYPE.LOOP_START:\n      case diagObj.db.LINETYPE.ALT_START:\n      case diagObj.db.LINETYPE.OPT_START:\n      case diagObj.db.LINETYPE.PAR_START:\n      case diagObj.db.LINETYPE.PAR_OVER_START:\n      case diagObj.db.LINETYPE.CRITICAL_START:\n      case diagObj.db.LINETYPE.BREAK_START:\n        stack.push({\n          id: msg.id,\n          msg: msg.message,\n          from: Number.MAX_SAFE_INTEGER,\n          to: Number.MIN_SAFE_INTEGER,\n          width: 0\n        });\n        break;\n      case diagObj.db.LINETYPE.ALT_ELSE:\n      case diagObj.db.LINETYPE.PAR_AND:\n      case diagObj.db.LINETYPE.CRITICAL_OPTION:\n        if (msg.message) {\n          current = stack.pop();\n          loops[current.id] = current;\n          loops[msg.id] = current;\n          stack.push(current);\n        }\n        break;\n      case diagObj.db.LINETYPE.LOOP_END:\n      case diagObj.db.LINETYPE.ALT_END:\n      case diagObj.db.LINETYPE.OPT_END:\n      case diagObj.db.LINETYPE.PAR_END:\n      case diagObj.db.LINETYPE.CRITICAL_END:\n      case diagObj.db.LINETYPE.BREAK_END:\n        current = stack.pop();\n        loops[current.id] = current;\n        break;\n      case diagObj.db.LINETYPE.ACTIVE_START:\n        {\n          const actorRect = actors[msg.from ? msg.from.actor : msg.to.actor];\n          const stackedSize = actorActivations(msg.from ? msg.from.actor : msg.to.actor).length;\n          const x = actorRect.x + actorRect.width / 2 + (stackedSize - 1) * conf.activationWidth / 2;\n          const toAdd = {\n            startx: x,\n            stopx: x + conf.activationWidth,\n            actor: msg.from.actor,\n            enabled: true\n          };\n          bounds.activations.push(toAdd);\n        }\n        break;\n      case diagObj.db.LINETYPE.ACTIVE_END:\n        {\n          const lastActorActivationIdx = bounds.activations.map((a) => a.actor).lastIndexOf(msg.from.actor);\n          delete bounds.activations.splice(lastActorActivationIdx, 1)[0];\n        }\n        break;\n    }\n    const isNote = msg.placement !== void 0;\n    if (isNote) {\n      noteModel = await buildNoteModel(msg, actors, diagObj);\n      msg.noteModel = noteModel;\n      stack.forEach((stk) => {\n        current = stk;\n        current.from = common.getMin(current.from, noteModel.startx);\n        current.to = common.getMax(current.to, noteModel.startx + noteModel.width);\n        current.width = common.getMax(current.width, Math.abs(current.from - current.to)) - conf.labelBoxWidth;\n      });\n    } else {\n      msgModel = buildMessageModel(msg, actors, diagObj);\n      msg.msgModel = msgModel;\n      if (msgModel.startx && msgModel.stopx && stack.length > 0) {\n        stack.forEach((stk) => {\n          current = stk;\n          if (msgModel.startx === msgModel.stopx) {\n            const from = actors[msg.from];\n            const to = actors[msg.to];\n            current.from = common.getMin(\n              from.x - msgModel.width / 2,\n              from.x - from.width / 2,\n              current.from\n            );\n            current.to = common.getMax(\n              to.x + msgModel.width / 2,\n              to.x + from.width / 2,\n              current.to\n            );\n            current.width = common.getMax(current.width, Math.abs(current.to - current.from)) - conf.labelBoxWidth;\n          } else {\n            current.from = common.getMin(msgModel.startx, current.from);\n            current.to = common.getMax(msgModel.stopx, current.to);\n            current.width = common.getMax(current.width, msgModel.width) - conf.labelBoxWidth;\n          }\n        });\n      }\n    }\n  }\n  bounds.activations = [];\n  log.debug(\"Loop type widths:\", loops);\n  return loops;\n};\nconst renderer = {\n  bounds,\n  drawActors,\n  drawActorsPopup,\n  setConf,\n  draw\n};\nconst diagram = {\n  parser: parser$1,\n  db,\n  renderer,\n  styles,\n  init: ({ wrap }) => {\n    db.setWrap(wrap);\n  }\n};\nexport {\n  diagram\n};\n"]}