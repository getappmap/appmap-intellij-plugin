{"version":3,"sources":["../node_modules/mermaid/dist/stateDiagram-587899a1.js"],"names":[],"mappings":"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","file":"stateDiagram-587899a1-SRVDCYZN.js","sourcesContent":["import { d as db, p as parser, s as styles } from \"./styles-6aaf32cf.js\";\nimport { line, curveBasis, select } from \"d3\";\nimport { layout } from \"dagre-d3-es/src/dagre/index.js\";\nimport * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\nimport { c as getConfig, u as utils, e as common, l as log, i as configureSvgSize } from \"./mermaid-b5860b54.js\";\nimport \"ts-dedent\";\nimport \"dayjs\";\nimport \"@braintree/sanitize-url\";\nimport \"dompurify\";\nimport \"khroma\";\nimport \"lodash-es/memoize.js\";\nimport \"lodash-es/merge.js\";\nimport \"stylis\";\nimport \"lodash-es/isEmpty.js\";\nconst idCache = {};\nconst set = (key, val) => {\n  idCache[key] = val;\n};\nconst get = (k) => idCache[k];\nconst keys = () => Object.keys(idCache);\nconst size = () => keys().length;\nconst idCache$1 = {\n  get,\n  set,\n  keys,\n  size\n};\nconst drawStartState = (g) => g.append(\"circle\").attr(\"class\", \"start-state\").attr(\"r\", getConfig().state.sizeUnit).attr(\"cx\", getConfig().state.padding + getConfig().state.sizeUnit).attr(\"cy\", getConfig().state.padding + getConfig().state.sizeUnit);\nconst drawDivider = (g) => g.append(\"line\").style(\"stroke\", \"grey\").style(\"stroke-dasharray\", \"3\").attr(\"x1\", getConfig().state.textHeight).attr(\"class\", \"divider\").attr(\"x2\", getConfig().state.textHeight * 2).attr(\"y1\", 0).attr(\"y2\", 0);\nconst drawSimpleState = (g, stateDef) => {\n  const state = g.append(\"text\").attr(\"x\", 2 * getConfig().state.padding).attr(\"y\", getConfig().state.textHeight + 2 * getConfig().state.padding).attr(\"font-size\", getConfig().state.fontSize).attr(\"class\", \"state-title\").text(stateDef.id);\n  const classBox = state.node().getBBox();\n  g.insert(\"rect\", \":first-child\").attr(\"x\", getConfig().state.padding).attr(\"y\", getConfig().state.padding).attr(\"width\", classBox.width + 2 * getConfig().state.padding).attr(\"height\", classBox.height + 2 * getConfig().state.padding).attr(\"rx\", getConfig().state.radius);\n  return state;\n};\nconst drawDescrState = (g, stateDef) => {\n  const addTspan = function(textEl, txt, isFirst2) {\n    const tSpan = textEl.append(\"tspan\").attr(\"x\", 2 * getConfig().state.padding).text(txt);\n    if (!isFirst2) {\n      tSpan.attr(\"dy\", getConfig().state.textHeight);\n    }\n  };\n  const title = g.append(\"text\").attr(\"x\", 2 * getConfig().state.padding).attr(\"y\", getConfig().state.textHeight + 1.3 * getConfig().state.padding).attr(\"font-size\", getConfig().state.fontSize).attr(\"class\", \"state-title\").text(stateDef.descriptions[0]);\n  const titleBox = title.node().getBBox();\n  const titleHeight = titleBox.height;\n  const description = g.append(\"text\").attr(\"x\", getConfig().state.padding).attr(\n    \"y\",\n    titleHeight + getConfig().state.padding * 0.4 + getConfig().state.dividerMargin + getConfig().state.textHeight\n  ).attr(\"class\", \"state-description\");\n  let isFirst = true;\n  let isSecond = true;\n  stateDef.descriptions.forEach(function(descr) {\n    if (!isFirst) {\n      addTspan(description, descr, isSecond);\n      isSecond = false;\n    }\n    isFirst = false;\n  });\n  const descrLine = g.append(\"line\").attr(\"x1\", getConfig().state.padding).attr(\"y1\", getConfig().state.padding + titleHeight + getConfig().state.dividerMargin / 2).attr(\"y2\", getConfig().state.padding + titleHeight + getConfig().state.dividerMargin / 2).attr(\"class\", \"descr-divider\");\n  const descrBox = description.node().getBBox();\n  const width = Math.max(descrBox.width, titleBox.width);\n  descrLine.attr(\"x2\", width + 3 * getConfig().state.padding);\n  g.insert(\"rect\", \":first-child\").attr(\"x\", getConfig().state.padding).attr(\"y\", getConfig().state.padding).attr(\"width\", width + 2 * getConfig().state.padding).attr(\"height\", descrBox.height + titleHeight + 2 * getConfig().state.padding).attr(\"rx\", getConfig().state.radius);\n  return g;\n};\nconst addTitleAndBox = (g, stateDef, altBkg) => {\n  const pad = getConfig().state.padding;\n  const dblPad = 2 * getConfig().state.padding;\n  const orgBox = g.node().getBBox();\n  const orgWidth = orgBox.width;\n  const orgX = orgBox.x;\n  const title = g.append(\"text\").attr(\"x\", 0).attr(\"y\", getConfig().state.titleShift).attr(\"font-size\", getConfig().state.fontSize).attr(\"class\", \"state-title\").text(stateDef.id);\n  const titleBox = title.node().getBBox();\n  const titleWidth = titleBox.width + dblPad;\n  let width = Math.max(titleWidth, orgWidth);\n  if (width === orgWidth) {\n    width = width + dblPad;\n  }\n  let startX;\n  const graphBox = g.node().getBBox();\n  if (stateDef.doc)\n    ;\n  startX = orgX - pad;\n  if (titleWidth > orgWidth) {\n    startX = (orgWidth - width) / 2 + pad;\n  }\n  if (Math.abs(orgX - graphBox.x) < pad && titleWidth > orgWidth) {\n    startX = orgX - (titleWidth - orgWidth) / 2;\n  }\n  const lineY = 1 - getConfig().state.textHeight;\n  g.insert(\"rect\", \":first-child\").attr(\"x\", startX).attr(\"y\", lineY).attr(\"class\", altBkg ? \"alt-composit\" : \"composit\").attr(\"width\", width).attr(\n    \"height\",\n    graphBox.height + getConfig().state.textHeight + getConfig().state.titleShift + 1\n  ).attr(\"rx\", \"0\");\n  title.attr(\"x\", startX + pad);\n  if (titleWidth <= orgWidth) {\n    title.attr(\"x\", orgX + (width - dblPad) / 2 - titleWidth / 2 + pad);\n  }\n  g.insert(\"rect\", \":first-child\").attr(\"x\", startX).attr(\n    \"y\",\n    getConfig().state.titleShift - getConfig().state.textHeight - getConfig().state.padding\n  ).attr(\"width\", width).attr(\"height\", getConfig().state.textHeight * 3).attr(\"rx\", getConfig().state.radius);\n  g.insert(\"rect\", \":first-child\").attr(\"x\", startX).attr(\n    \"y\",\n    getConfig().state.titleShift - getConfig().state.textHeight - getConfig().state.padding\n  ).attr(\"width\", width).attr(\"height\", graphBox.height + 3 + 2 * getConfig().state.textHeight).attr(\"rx\", getConfig().state.radius);\n  return g;\n};\nconst drawEndState = (g) => {\n  g.append(\"circle\").attr(\"class\", \"end-state-outer\").attr(\"r\", getConfig().state.sizeUnit + getConfig().state.miniPadding).attr(\n    \"cx\",\n    getConfig().state.padding + getConfig().state.sizeUnit + getConfig().state.miniPadding\n  ).attr(\n    \"cy\",\n    getConfig().state.padding + getConfig().state.sizeUnit + getConfig().state.miniPadding\n  );\n  return g.append(\"circle\").attr(\"class\", \"end-state-inner\").attr(\"r\", getConfig().state.sizeUnit).attr(\"cx\", getConfig().state.padding + getConfig().state.sizeUnit + 2).attr(\"cy\", getConfig().state.padding + getConfig().state.sizeUnit + 2);\n};\nconst drawForkJoinState = (g, stateDef) => {\n  let width = getConfig().state.forkWidth;\n  let height = getConfig().state.forkHeight;\n  if (stateDef.parentId) {\n    let tmp = width;\n    width = height;\n    height = tmp;\n  }\n  return g.append(\"rect\").style(\"stroke\", \"black\").style(\"fill\", \"black\").attr(\"width\", width).attr(\"height\", height).attr(\"x\", getConfig().state.padding).attr(\"y\", getConfig().state.padding);\n};\nconst _drawLongText = (_text, x, y, g) => {\n  let textHeight = 0;\n  const textElem = g.append(\"text\");\n  textElem.style(\"text-anchor\", \"start\");\n  textElem.attr(\"class\", \"noteText\");\n  let text = _text.replace(/\\r\\n/g, \"<br/>\");\n  text = text.replace(/\\n/g, \"<br/>\");\n  const lines = text.split(common.lineBreakRegex);\n  let tHeight = 1.25 * getConfig().state.noteMargin;\n  for (const line2 of lines) {\n    const txt = line2.trim();\n    if (txt.length > 0) {\n      const span = textElem.append(\"tspan\");\n      span.text(txt);\n      if (tHeight === 0) {\n        const textBounds = span.node().getBBox();\n        tHeight += textBounds.height;\n      }\n      textHeight += tHeight;\n      span.attr(\"x\", x + getConfig().state.noteMargin);\n      span.attr(\"y\", y + textHeight + 1.25 * getConfig().state.noteMargin);\n    }\n  }\n  return { textWidth: textElem.node().getBBox().width, textHeight };\n};\nconst drawNote = (text, g) => {\n  g.attr(\"class\", \"state-note\");\n  const note = g.append(\"rect\").attr(\"x\", 0).attr(\"y\", getConfig().state.padding);\n  const rectElem = g.append(\"g\");\n  const { textWidth, textHeight } = _drawLongText(text, 0, 0, rectElem);\n  note.attr(\"height\", textHeight + 2 * getConfig().state.noteMargin);\n  note.attr(\"width\", textWidth + getConfig().state.noteMargin * 2);\n  return note;\n};\nconst drawState = function(elem, stateDef) {\n  const id = stateDef.id;\n  const stateInfo = {\n    id,\n    label: stateDef.id,\n    width: 0,\n    height: 0\n  };\n  const g = elem.append(\"g\").attr(\"id\", id).attr(\"class\", \"stateGroup\");\n  if (stateDef.type === \"start\") {\n    drawStartState(g);\n  }\n  if (stateDef.type === \"end\") {\n    drawEndState(g);\n  }\n  if (stateDef.type === \"fork\" || stateDef.type === \"join\") {\n    drawForkJoinState(g, stateDef);\n  }\n  if (stateDef.type === \"note\") {\n    drawNote(stateDef.note.text, g);\n  }\n  if (stateDef.type === \"divider\") {\n    drawDivider(g);\n  }\n  if (stateDef.type === \"default\" && stateDef.descriptions.length === 0) {\n    drawSimpleState(g, stateDef);\n  }\n  if (stateDef.type === \"default\" && stateDef.descriptions.length > 0) {\n    drawDescrState(g, stateDef);\n  }\n  const stateBox = g.node().getBBox();\n  stateInfo.width = stateBox.width + 2 * getConfig().state.padding;\n  stateInfo.height = stateBox.height + 2 * getConfig().state.padding;\n  idCache$1.set(id, stateInfo);\n  return stateInfo;\n};\nlet edgeCount = 0;\nconst drawEdge = function(elem, path, relation) {\n  const getRelationType = function(type) {\n    switch (type) {\n      case db.relationType.AGGREGATION:\n        return \"aggregation\";\n      case db.relationType.EXTENSION:\n        return \"extension\";\n      case db.relationType.COMPOSITION:\n        return \"composition\";\n      case db.relationType.DEPENDENCY:\n        return \"dependency\";\n    }\n  };\n  path.points = path.points.filter((p) => !Number.isNaN(p.y));\n  const lineData = path.points;\n  const lineFunction = line().x(function(d) {\n    return d.x;\n  }).y(function(d) {\n    return d.y;\n  }).curve(curveBasis);\n  const svgPath = elem.append(\"path\").attr(\"d\", lineFunction(lineData)).attr(\"id\", \"edge\" + edgeCount).attr(\"class\", \"transition\");\n  let url = \"\";\n  if (getConfig().state.arrowMarkerAbsolute) {\n    url = window.location.protocol + \"//\" + window.location.host + window.location.pathname + window.location.search;\n    url = url.replace(/\\(/g, \"\\\\(\");\n    url = url.replace(/\\)/g, \"\\\\)\");\n  }\n  svgPath.attr(\n    \"marker-end\",\n    \"url(\" + url + \"#\" + getRelationType(db.relationType.DEPENDENCY) + \"End)\"\n  );\n  if (relation.title !== void 0) {\n    const label = elem.append(\"g\").attr(\"class\", \"stateLabel\");\n    const { x, y } = utils.calcLabelPosition(path.points);\n    const rows = common.getRows(relation.title);\n    let titleHeight = 0;\n    const titleRows = [];\n    let maxWidth = 0;\n    let minX = 0;\n    for (let i = 0; i <= rows.length; i++) {\n      const title = label.append(\"text\").attr(\"text-anchor\", \"middle\").text(rows[i]).attr(\"x\", x).attr(\"y\", y + titleHeight);\n      const boundsTmp = title.node().getBBox();\n      maxWidth = Math.max(maxWidth, boundsTmp.width);\n      minX = Math.min(minX, boundsTmp.x);\n      log.info(boundsTmp.x, x, y + titleHeight);\n      if (titleHeight === 0) {\n        const titleBox = title.node().getBBox();\n        titleHeight = titleBox.height;\n        log.info(\"Title height\", titleHeight, y);\n      }\n      titleRows.push(title);\n    }\n    let boxHeight = titleHeight * rows.length;\n    if (rows.length > 1) {\n      const heightAdj = (rows.length - 1) * titleHeight * 0.5;\n      titleRows.forEach((title, i) => title.attr(\"y\", y + i * titleHeight - heightAdj));\n      boxHeight = titleHeight * rows.length;\n    }\n    const bounds = label.node().getBBox();\n    label.insert(\"rect\", \":first-child\").attr(\"class\", \"box\").attr(\"x\", x - maxWidth / 2 - getConfig().state.padding / 2).attr(\"y\", y - boxHeight / 2 - getConfig().state.padding / 2 - 3.5).attr(\"width\", maxWidth + getConfig().state.padding).attr(\"height\", boxHeight + getConfig().state.padding);\n    log.info(bounds);\n  }\n  edgeCount++;\n};\nlet conf;\nconst transformationLog = {};\nconst setConf = function() {\n};\nconst insertMarkers = function(elem) {\n  elem.append(\"defs\").append(\"marker\").attr(\"id\", \"dependencyEnd\").attr(\"refX\", 19).attr(\"refY\", 7).attr(\"markerWidth\", 20).attr(\"markerHeight\", 28).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M 19,7 L9,13 L14,7 L9,1 Z\");\n};\nconst draw = function(text, id, _version, diagObj) {\n  conf = getConfig().state;\n  const securityLevel = getConfig().securityLevel;\n  let sandboxElement;\n  if (securityLevel === \"sandbox\") {\n    sandboxElement = select(\"#i\" + id);\n  }\n  const root = securityLevel === \"sandbox\" ? select(sandboxElement.nodes()[0].contentDocument.body) : select(\"body\");\n  const doc = securityLevel === \"sandbox\" ? sandboxElement.nodes()[0].contentDocument : document;\n  log.debug(\"Rendering diagram \" + text);\n  const diagram2 = root.select(`[id='${id}']`);\n  insertMarkers(diagram2);\n  const rootDoc = diagObj.db.getRootDoc();\n  renderDoc(rootDoc, diagram2, void 0, false, root, doc, diagObj);\n  const padding = conf.padding;\n  const bounds = diagram2.node().getBBox();\n  const width = bounds.width + padding * 2;\n  const height = bounds.height + padding * 2;\n  const svgWidth = width * 1.75;\n  configureSvgSize(diagram2, height, svgWidth, conf.useMaxWidth);\n  diagram2.attr(\n    \"viewBox\",\n    `${bounds.x - conf.padding}  ${bounds.y - conf.padding} ` + width + \" \" + height\n  );\n};\nconst getLabelWidth = (text) => {\n  return text ? text.length * conf.fontSizeFactor : 1;\n};\nconst renderDoc = (doc, diagram2, parentId, altBkg, root, domDocument, diagObj) => {\n  const graph = new graphlib.Graph({\n    compound: true,\n    multigraph: true\n  });\n  let i;\n  let edgeFreeDoc = true;\n  for (i = 0; i < doc.length; i++) {\n    if (doc[i].stmt === \"relation\") {\n      edgeFreeDoc = false;\n      break;\n    }\n  }\n  if (parentId) {\n    graph.setGraph({\n      rankdir: \"LR\",\n      multigraph: true,\n      compound: true,\n      // acyclicer: 'greedy',\n      ranker: \"tight-tree\",\n      ranksep: edgeFreeDoc ? 1 : conf.edgeLengthFactor,\n      nodeSep: edgeFreeDoc ? 1 : 50,\n      isMultiGraph: true\n      // ranksep: 5,\n      // nodesep: 1\n    });\n  } else {\n    graph.setGraph({\n      rankdir: \"TB\",\n      multigraph: true,\n      compound: true,\n      // isCompound: true,\n      // acyclicer: 'greedy',\n      // ranker: 'longest-path'\n      ranksep: edgeFreeDoc ? 1 : conf.edgeLengthFactor,\n      nodeSep: edgeFreeDoc ? 1 : 50,\n      ranker: \"tight-tree\",\n      // ranker: 'network-simplex'\n      isMultiGraph: true\n    });\n  }\n  graph.setDefaultEdgeLabel(function() {\n    return {};\n  });\n  diagObj.db.extract(doc);\n  const states = diagObj.db.getStates();\n  const relations = diagObj.db.getRelations();\n  const keys2 = Object.keys(states);\n  for (const key of keys2) {\n    const stateDef = states[key];\n    if (parentId) {\n      stateDef.parentId = parentId;\n    }\n    let node;\n    if (stateDef.doc) {\n      let sub = diagram2.append(\"g\").attr(\"id\", stateDef.id).attr(\"class\", \"stateGroup\");\n      node = renderDoc(stateDef.doc, sub, stateDef.id, !altBkg, root, domDocument, diagObj);\n      {\n        sub = addTitleAndBox(sub, stateDef, altBkg);\n        let boxBounds = sub.node().getBBox();\n        node.width = boxBounds.width;\n        node.height = boxBounds.height + conf.padding / 2;\n        transformationLog[stateDef.id] = { y: conf.compositTitleSize };\n      }\n    } else {\n      node = drawState(diagram2, stateDef);\n    }\n    if (stateDef.note) {\n      const noteDef = {\n        descriptions: [],\n        id: stateDef.id + \"-note\",\n        note: stateDef.note,\n        type: \"note\"\n      };\n      const note = drawState(diagram2, noteDef);\n      if (stateDef.note.position === \"left of\") {\n        graph.setNode(node.id + \"-note\", note);\n        graph.setNode(node.id, node);\n      } else {\n        graph.setNode(node.id, node);\n        graph.setNode(node.id + \"-note\", note);\n      }\n      graph.setParent(node.id, node.id + \"-group\");\n      graph.setParent(node.id + \"-note\", node.id + \"-group\");\n    } else {\n      graph.setNode(node.id, node);\n    }\n  }\n  log.debug(\"Count=\", graph.nodeCount(), graph);\n  let cnt = 0;\n  relations.forEach(function(relation) {\n    cnt++;\n    log.debug(\"Setting edge\", relation);\n    graph.setEdge(\n      relation.id1,\n      relation.id2,\n      {\n        relation,\n        width: getLabelWidth(relation.title),\n        height: conf.labelHeight * common.getRows(relation.title).length,\n        labelpos: \"c\"\n      },\n      \"id\" + cnt\n    );\n  });\n  layout(graph);\n  log.debug(\"Graph after layout\", graph.nodes());\n  const svgElem = diagram2.node();\n  graph.nodes().forEach(function(v) {\n    if (v !== void 0 && graph.node(v) !== void 0) {\n      log.warn(\"Node \" + v + \": \" + JSON.stringify(graph.node(v)));\n      root.select(\"#\" + svgElem.id + \" #\" + v).attr(\n        \"transform\",\n        \"translate(\" + (graph.node(v).x - graph.node(v).width / 2) + \",\" + (graph.node(v).y + (transformationLog[v] ? transformationLog[v].y : 0) - graph.node(v).height / 2) + \" )\"\n      );\n      root.select(\"#\" + svgElem.id + \" #\" + v).attr(\"data-x-shift\", graph.node(v).x - graph.node(v).width / 2);\n      const dividers = domDocument.querySelectorAll(\"#\" + svgElem.id + \" #\" + v + \" .divider\");\n      dividers.forEach((divider) => {\n        const parent = divider.parentElement;\n        let pWidth = 0;\n        let pShift = 0;\n        if (parent) {\n          if (parent.parentElement) {\n            pWidth = parent.parentElement.getBBox().width;\n          }\n          pShift = parseInt(parent.getAttribute(\"data-x-shift\"), 10);\n          if (Number.isNaN(pShift)) {\n            pShift = 0;\n          }\n        }\n        divider.setAttribute(\"x1\", 0 - pShift + 8);\n        divider.setAttribute(\"x2\", pWidth - pShift - 8);\n      });\n    } else {\n      log.debug(\"No Node \" + v + \": \" + JSON.stringify(graph.node(v)));\n    }\n  });\n  let stateBox = svgElem.getBBox();\n  graph.edges().forEach(function(e) {\n    if (e !== void 0 && graph.edge(e) !== void 0) {\n      log.debug(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(graph.edge(e)));\n      drawEdge(diagram2, graph.edge(e), graph.edge(e).relation);\n    }\n  });\n  stateBox = svgElem.getBBox();\n  const stateInfo = {\n    id: parentId ? parentId : \"root\",\n    label: parentId ? parentId : \"root\",\n    width: 0,\n    height: 0\n  };\n  stateInfo.width = stateBox.width + 2 * conf.padding;\n  stateInfo.height = stateBox.height + 2 * conf.padding;\n  log.debug(\"Doc rendered\", stateInfo, graph);\n  return stateInfo;\n};\nconst renderer = {\n  setConf,\n  draw\n};\nconst diagram = {\n  parser,\n  db,\n  renderer,\n  styles,\n  init: (cnf) => {\n    if (!cnf.state) {\n      cnf.state = {};\n    }\n    cnf.state.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;\n    db.clear();\n  }\n};\nexport {\n  diagram\n};\n"]}