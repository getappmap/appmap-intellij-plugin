{"version":3,"sources":["../node_modules/layout-base/layout-base.js","../node_modules/cose-base/cose-base.js","../node_modules/cytoscape-cose-bilkent/cytoscape-cose-bilkent.js","../node_modules/mermaid/dist/mindmap-definition-fc14e90a.js","../node_modules/cytoscape/dist/cytoscape.esm.mjs"],"names":["root","modules","module","exports","object","size","width","height","x","y","self","edge","nodes","Point","parent","layout","edges","p","_createClass","_classCallCheck","instance","nodeFrom","add","next","_remove","LinkedList","push","remove","shift","_typeof","id","Emitter","Layout","parents","startX","startY","DimensionD","Quicksort","NeedlemanWunsch","array","layoutBase","event","data","pred1","processed","bounds","transform","p_id","i","node","min","max","last","diff","defaults","ready","stop","extend","options","getUserOptions","getPositions","iterateAnimated","afterReposition","dimensions","register","cytoscape","obj","step","instanceStr","string","plainObject","integer","htmlElement","elementOrCollection","element","collection","core","stylesheet","emptyString","domElement","boundingBox","promise","ms","fn","keyFn","memoizedFn","cache","capitalize","number","ascending","descending","hex2tuple","hsl2tuple","q","rgb2tuple","colorname2tuple","color2tuple","setMap","getMap","time","requestAnimationFrame","hashIterableInts","hashInt","hashIntAlt","combineHashes","combineHashesArray","hashArrays","hashIntsArray","hashString","hashStrings","hashStringsArray","trueify","falsify","zeroify","error","warnings","warn","clone","copy","uuid","staticEmptyObject","removeFromArray","clearArray","getPrefixedProperty","setPrefixedProperty","ObjectMap","set","clear","get","ObjectSet","instanceString","toArray","forEach","Element","group","pan","zoom","classes","defineSearch","_loop","v","e","Heap","heap","weight","dist","getDist","setDist","distBetween","u","uid","findSetIndex","heuristic","addToOpenSet","popFromOpenSet","isInOpenSet","indexOf","atIndex","getArgEle","indexOfArgEle","j","path","getInfo","getNodeFromTo","distanceTo","pathTo","checkForEdgeReplacement","collapse","contractUntil","copyNodesMap","constructComponent","component","components","copyPosition","modelToRenderedPosition","renderedToModelPosition","array2point","mean","median","sort","deg2rad","getAngleFromDisp","signum","sqdist","inPlaceSumNormalize","qbezierAt","qbezierPtAt","lineAt","bound","makeBoundingBox","copyBoundingBox","clearBoundingBox","shiftBoundingBox","updateBoundingBox","expandBoundingBoxByPoint","expandBoundingBox","expandBoundingBoxSides","assignBoundingBox","boundingBoxesIntersect","inBoundingBox","pointInBoundingBox","boundingBoxInBoundingBox","roundRectangleIntersectLine","radius","inLineVicinity","x2","y2","inBezierVicinity","solveQuadratic","solveCubic","sqdistToQuadraticBezier","sqdistToFiniteLine","pointInsidePolygonPoints","pointInsidePolygon","angle","cos","sin","pointInsideRoundPolygon","joinLines","expandPolygon","intersectLineEllipse","checkInEllipse","intersectLineCircle","midOfThree","finiteLinesIntersect","polygonIntersectLine","roundPolygonIntersectLine","shortenIntersection","generateUnitNgonPointsFitToSquare","fitPolygonToSquare","generateUnitNgonPoints","getRoundRectangleRadius","getRoundPolygonRadius","getCutRectangleCornerLength","bezierPtsToQuadCoeff","getBarrelCurveConstants","dijkstra","s","addLoops","normalize","mmult","expand","inflate","hasConverged","v1","v2","isDuplicate","removeDuplicates","markovClustering","identity","absDiff","addAbsDiff","addSquaredDiff","sqrt","maxAbsDiff","getDistance","impl","setOptions","getQ","randomCentroids","classify","buildCluster","haveValuesConverged","haveMatricesConverged","seenBefore","randomMedoids","findCost","kMeans","kMedoids","updateCentroids","updateMembership","assign","fuzzyCMeans","mergeClosest","getAllChildren","buildDendrogram","buildClustersFromTree","hierarchicalClustering","cluster","getSimilarity","attr","getPreference","findExemplars","assignClusters","affinityPropagation","max2","K","d","walk","subtour","hopcroftTarjanBiconnected","buildComponent","biconnectedSearch","tarjanStronglyConnected","stronglyConnectedSearch","api","deliver","execute","execute_handlers","func","resolver","resolve","then","fulfill","val","reject","Animation","swap","style","panBy","center","fit","clearQueue","map","memoize","match","copyArray","beforeGet","beforeSet","onSet","canSet","valid","callback","define","cls","hasClass","newQuery","matches","stateSelectorMatches","cleanMetaChars","replaceLastQuery","populate","meta","consumeExpr","consumeWhitespace","parse","toString","clean","cleanVal","space","checkToString","queryToString","query","str","valCmp","boolCmp","existCmp","filter","selectorFunction","Selector","elements","beforePositionSet","hasCompoundNodes","update","_p","noninf","updateBounds","updateBoundsFromBox","prefixedProperty","updateBoundsFromArrow","updateBoundsFromLabel","isEdge","rotate","updateBoundsFromOutline","boundingBoxImpl","styleEnabled","headless","isNode","isDisplayed","ele","pts","getKey","tf","getBoundingBoxPosKey","r","cachedBoundingBoxImpl","isDirty","storeOldPos","getOldPos","defineDimFns","ifEdge","getValue","ifEdgeRenderedPosition","ifEdgeRenderedPositions","controlPoints","segmentPoints","sourceEndpoint","targetEndpoint","midpoint","renderedName","Event","forEachEvent","makeEventObj","forEachEventObj","qualifier","conf","_loop2","qualifierCompare","eventMatches","addEventFields","callbackContext","beforeEmit","bubble","other","zIndexSort","eq","defineSymbolIterator","getMemoizeKey","calculateSpacing","spacingBb","bb","newPos","ani","selfFn","renderer","dirty","overrideAble","overrideField","defineDagExtremity","defineDagOneHop","defineDagAllHops","sourceImpl","visitInComponent","Collection","json","eles","checkSwitch","addToPool","removeFromElements","removeFromPool","addChildren","pllEdge","f","cubicBezier","spring","now","callbacks","argSelector","createEmitter","emitter","on","removeListener","removeAllListeners","one","once","emit","emitAndNotify","propHash","propNames","updateGrKey1","grKey","updateGrKey2","updateGrKey","updateGrKeyWStr","cleanNum","getVal","checkTriggers","printMappingErr","delay","getRenderedValue","getValueStringWithUnits","units","number$1","rgba","hsla","mapData","nodeSizeHashOverride","prop","name","same","checkEnums","Style","updateStyle","zoom2","container","Core","defVal","loadExtData","setElesAndLayout","window","getFreshRef","updateEles","gr","position","setInfo","n","_i","addToDepth","changeDepth","assignDepthsAt","assignDepths","adjustMaximally","shifted","enqueue","dequeue","getWeightedPercent","sortFn","getPosition","animateFilter","getPos","levelWidth","refresh","mainLoop","done","frame","createLayoutInfo","findLCA","findLCA_aux","randomizePositions","getScaleInBoundsFn","refreshPositions","calculateNodeForces","nodeRepulsion","randomDistance","nodesOverlap","findClippingPoint","calculateEdgeForces","calculateGravityForces","propagateForces","updatePositions","limitForce","updateAncestryBoundaries","separateComponents","small","large","used","row","col","use","moveToNextCell","rcPos","noop","throwImgErr","notify","bbCollide","transformPoints","pointsToArr","standardGap","defineArrowShape","draw","styleValue","width2","asVec","invertVec","calcCornerArc","recalcVectorNormInverse","x1","y1","subDWH","getIsTooClose","pairId","src","tgt","intersect","qbezierAt$1","p2","lineAngleFromDelta","lineAngle","bezierAngle","setRs","createControlPointInfo","cp","p0","p1","calculateEndProjection","rscratch","document","updateEleCalcs","isCleanConnected","isSelected","getShadowRoot","triggerEvents","isMultSelKeyDown","allowPanningPassthrough","setGrabbed","setFreed","setInDragLayer","setOutDragLayer","setGrabTarget","removeGrabTarget","addToDragList","addDescendantsToDrag","addNodesToDrag","freeDraggedElements","updateAncestorsInDragLayer","blurActiveDomElement","forEachUp","invalidateCoords","inBoxSelection","eventInContainer","positions","checkForTaphold","makeEvent","triggerGrab","preventDefault","dist2","updateDragDelta","dragDelta","goIntoBoxMode","eleWouldBeSelected","wheelHandler","distance","distanceSq","touchstartHandler","touchmoveHandler","touchcancelHandler","touchendHandler","makeTouch","makePointer","addPointer","removePointer","updatePointer","addTouchesToEvent","pointerIsMouse","approximateBarrelCurvePts","getCurveT","y0","priority","beforeRenderCallbacks","renderFn","BaseRenderer","extent","ElementTextureCacheLookup","ElementTextureCache","lookup","addNewTxr","scalableFrom","downscale","maxZoom","LayeredTextureCache","qSort","checkTempLevels","canUseAsTmpLvl","checkLvls","layer","getBb","makeLayer","deq","getOpacity","getZeroRotation","getLabelRotation","getSourceLabelRotation","getTargetLabelRotation","getTextOpacity","drawLine","drawLineOutline","drawOverlay","drawUnderlay","drawArrows","drawText","drawEdgeOverlayUnderlay","setupShapeColor","setupBorderColor","setupOutlineColor","getPath","drawShape","drawImages","drawPie","darken","drawBorder","drawOutline","drawNodeOverlayUnderlay","colors","context","drawMotionBlur","cxt","getB64Uri","getBoxCenter","getCenterOffset","backgroundTimestampHasChanged","getStyleKey","getLabelKey","getSourceLabelKey","getTargetLabelKey","drawElement","drawLabel","drawSourceLabel","drawTargetLabel","getElementBox","getLabelBox","getSourceLabelBox","getTargetLabelBox","isLabelVisibleAtScale","getElementRotationPoint","addTextMargin","getRsPt","getLabelRotationPoint","getSourceLabelRotationPoint","getTargetLabelRotationPoint","getElementRotationOffset","getSourceLabelRotationOffset","getTargetLabelRotationOffset","getLabelRotationOffset","refineInLayers","overrideErr","getCy","Renderer","extension","Stylesheet","getElementById","coseBilkent"],"mappings":"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","file":"mindmap-definition-fc14e90a-RSPZP6M5.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"layoutBase\"] = factory();\n\telse\n\t\troot[\"layoutBase\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 26);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction LayoutConstants() {}\n\n/**\r\n * Layout Quality: 0:draft, 1:default, 2:proof\r\n */\nLayoutConstants.QUALITY = 1;\n\n/**\r\n * Default parameters\r\n */\nLayoutConstants.DEFAULT_CREATE_BENDS_AS_NEEDED = false;\nLayoutConstants.DEFAULT_INCREMENTAL = false;\nLayoutConstants.DEFAULT_ANIMATION_ON_LAYOUT = true;\nLayoutConstants.DEFAULT_ANIMATION_DURING_LAYOUT = false;\nLayoutConstants.DEFAULT_ANIMATION_PERIOD = 50;\nLayoutConstants.DEFAULT_UNIFORM_LEAF_NODE_SIZES = false;\n\n// -----------------------------------------------------------------------------\n// Section: General other constants\n// -----------------------------------------------------------------------------\n/*\r\n * Margins of a graph to be applied on bouding rectangle of its contents. We\r\n * assume margins on all four sides to be uniform.\r\n */\nLayoutConstants.DEFAULT_GRAPH_MARGIN = 15;\n\n/*\r\n * Whether to consider labels in node dimensions or not\r\n */\nLayoutConstants.NODE_DIMENSIONS_INCLUDE_LABELS = false;\n\n/*\r\n * Default dimension of a non-compound node.\r\n */\nLayoutConstants.SIMPLE_NODE_SIZE = 40;\n\n/*\r\n * Default dimension of a non-compound node.\r\n */\nLayoutConstants.SIMPLE_NODE_HALF_SIZE = LayoutConstants.SIMPLE_NODE_SIZE / 2;\n\n/*\r\n * Empty compound node size. When a compound node is empty, its both\r\n * dimensions should be of this value.\r\n */\nLayoutConstants.EMPTY_COMPOUND_NODE_SIZE = 40;\n\n/*\r\n * Minimum length that an edge should take during layout\r\n */\nLayoutConstants.MIN_EDGE_LENGTH = 1;\n\n/*\r\n * World boundaries that layout operates on\r\n */\nLayoutConstants.WORLD_BOUNDARY = 1000000;\n\n/*\r\n * World boundaries that random positioning can be performed with\r\n */\nLayoutConstants.INITIAL_WORLD_BOUNDARY = LayoutConstants.WORLD_BOUNDARY / 1000;\n\n/*\r\n * Coordinates of the world center\r\n */\nLayoutConstants.WORLD_CENTER_X = 1200;\nLayoutConstants.WORLD_CENTER_Y = 900;\n\nmodule.exports = LayoutConstants;\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar LGraphObject = __webpack_require__(2);\nvar IGeometry = __webpack_require__(8);\nvar IMath = __webpack_require__(9);\n\nfunction LEdge(source, target, vEdge) {\n  LGraphObject.call(this, vEdge);\n\n  this.isOverlapingSourceAndTarget = false;\n  this.vGraphObject = vEdge;\n  this.bendpoints = [];\n  this.source = source;\n  this.target = target;\n}\n\nLEdge.prototype = Object.create(LGraphObject.prototype);\n\nfor (var prop in LGraphObject) {\n  LEdge[prop] = LGraphObject[prop];\n}\n\nLEdge.prototype.getSource = function () {\n  return this.source;\n};\n\nLEdge.prototype.getTarget = function () {\n  return this.target;\n};\n\nLEdge.prototype.isInterGraph = function () {\n  return this.isInterGraph;\n};\n\nLEdge.prototype.getLength = function () {\n  return this.length;\n};\n\nLEdge.prototype.isOverlapingSourceAndTarget = function () {\n  return this.isOverlapingSourceAndTarget;\n};\n\nLEdge.prototype.getBendpoints = function () {\n  return this.bendpoints;\n};\n\nLEdge.prototype.getLca = function () {\n  return this.lca;\n};\n\nLEdge.prototype.getSourceInLca = function () {\n  return this.sourceInLca;\n};\n\nLEdge.prototype.getTargetInLca = function () {\n  return this.targetInLca;\n};\n\nLEdge.prototype.getOtherEnd = function (node) {\n  if (this.source === node) {\n    return this.target;\n  } else if (this.target === node) {\n    return this.source;\n  } else {\n    throw \"Node is not incident with this edge\";\n  }\n};\n\nLEdge.prototype.getOtherEndInGraph = function (node, graph) {\n  var otherEnd = this.getOtherEnd(node);\n  var root = graph.getGraphManager().getRoot();\n\n  while (true) {\n    if (otherEnd.getOwner() == graph) {\n      return otherEnd;\n    }\n\n    if (otherEnd.getOwner() == root) {\n      break;\n    }\n\n    otherEnd = otherEnd.getOwner().getParent();\n  }\n\n  return null;\n};\n\nLEdge.prototype.updateLength = function () {\n  var clipPointCoordinates = new Array(4);\n\n  this.isOverlapingSourceAndTarget = IGeometry.getIntersection(this.target.getRect(), this.source.getRect(), clipPointCoordinates);\n\n  if (!this.isOverlapingSourceAndTarget) {\n    this.lengthX = clipPointCoordinates[0] - clipPointCoordinates[2];\n    this.lengthY = clipPointCoordinates[1] - clipPointCoordinates[3];\n\n    if (Math.abs(this.lengthX) < 1.0) {\n      this.lengthX = IMath.sign(this.lengthX);\n    }\n\n    if (Math.abs(this.lengthY) < 1.0) {\n      this.lengthY = IMath.sign(this.lengthY);\n    }\n\n    this.length = Math.sqrt(this.lengthX * this.lengthX + this.lengthY * this.lengthY);\n  }\n};\n\nLEdge.prototype.updateLengthSimple = function () {\n  this.lengthX = this.target.getCenterX() - this.source.getCenterX();\n  this.lengthY = this.target.getCenterY() - this.source.getCenterY();\n\n  if (Math.abs(this.lengthX) < 1.0) {\n    this.lengthX = IMath.sign(this.lengthX);\n  }\n\n  if (Math.abs(this.lengthY) < 1.0) {\n    this.lengthY = IMath.sign(this.lengthY);\n  }\n\n  this.length = Math.sqrt(this.lengthX * this.lengthX + this.lengthY * this.lengthY);\n};\n\nmodule.exports = LEdge;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction LGraphObject(vGraphObject) {\n  this.vGraphObject = vGraphObject;\n}\n\nmodule.exports = LGraphObject;\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar LGraphObject = __webpack_require__(2);\nvar Integer = __webpack_require__(10);\nvar RectangleD = __webpack_require__(13);\nvar LayoutConstants = __webpack_require__(0);\nvar RandomSeed = __webpack_require__(16);\nvar PointD = __webpack_require__(4);\n\nfunction LNode(gm, loc, size, vNode) {\n  //Alternative constructor 1 : LNode(LGraphManager gm, Point loc, Dimension size, Object vNode)\n  if (size == null && vNode == null) {\n    vNode = loc;\n  }\n\n  LGraphObject.call(this, vNode);\n\n  //Alternative constructor 2 : LNode(Layout layout, Object vNode)\n  if (gm.graphManager != null) gm = gm.graphManager;\n\n  this.estimatedSize = Integer.MIN_VALUE;\n  this.inclusionTreeDepth = Integer.MAX_VALUE;\n  this.vGraphObject = vNode;\n  this.edges = [];\n  this.graphManager = gm;\n\n  if (size != null && loc != null) this.rect = new RectangleD(loc.x, loc.y, size.width, size.height);else this.rect = new RectangleD();\n}\n\nLNode.prototype = Object.create(LGraphObject.prototype);\nfor (var prop in LGraphObject) {\n  LNode[prop] = LGraphObject[prop];\n}\n\nLNode.prototype.getEdges = function () {\n  return this.edges;\n};\n\nLNode.prototype.getChild = function () {\n  return this.child;\n};\n\nLNode.prototype.getOwner = function () {\n  //  if (this.owner != null) {\n  //    if (!(this.owner == null || this.owner.getNodes().indexOf(this) > -1)) {\n  //      throw \"assert failed\";\n  //    }\n  //  }\n\n  return this.owner;\n};\n\nLNode.prototype.getWidth = function () {\n  return this.rect.width;\n};\n\nLNode.prototype.setWidth = function (width) {\n  this.rect.width = width;\n};\n\nLNode.prototype.getHeight = function () {\n  return this.rect.height;\n};\n\nLNode.prototype.setHeight = function (height) {\n  this.rect.height = height;\n};\n\nLNode.prototype.getCenterX = function () {\n  return this.rect.x + this.rect.width / 2;\n};\n\nLNode.prototype.getCenterY = function () {\n  return this.rect.y + this.rect.height / 2;\n};\n\nLNode.prototype.getCenter = function () {\n  return new PointD(this.rect.x + this.rect.width / 2, this.rect.y + this.rect.height / 2);\n};\n\nLNode.prototype.getLocation = function () {\n  return new PointD(this.rect.x, this.rect.y);\n};\n\nLNode.prototype.getRect = function () {\n  return this.rect;\n};\n\nLNode.prototype.getDiagonal = function () {\n  return Math.sqrt(this.rect.width * this.rect.width + this.rect.height * this.rect.height);\n};\n\n/**\n * This method returns half the diagonal length of this node.\n */\nLNode.prototype.getHalfTheDiagonal = function () {\n  return Math.sqrt(this.rect.height * this.rect.height + this.rect.width * this.rect.width) / 2;\n};\n\nLNode.prototype.setRect = function (upperLeft, dimension) {\n  this.rect.x = upperLeft.x;\n  this.rect.y = upperLeft.y;\n  this.rect.width = dimension.width;\n  this.rect.height = dimension.height;\n};\n\nLNode.prototype.setCenter = function (cx, cy) {\n  this.rect.x = cx - this.rect.width / 2;\n  this.rect.y = cy - this.rect.height / 2;\n};\n\nLNode.prototype.setLocation = function (x, y) {\n  this.rect.x = x;\n  this.rect.y = y;\n};\n\nLNode.prototype.moveBy = function (dx, dy) {\n  this.rect.x += dx;\n  this.rect.y += dy;\n};\n\nLNode.prototype.getEdgeListToNode = function (to) {\n  var edgeList = [];\n  var edge;\n  var self = this;\n\n  self.edges.forEach(function (edge) {\n\n    if (edge.target == to) {\n      if (edge.source != self) throw \"Incorrect edge source!\";\n\n      edgeList.push(edge);\n    }\n  });\n\n  return edgeList;\n};\n\nLNode.prototype.getEdgesBetween = function (other) {\n  var edgeList = [];\n  var edge;\n\n  var self = this;\n  self.edges.forEach(function (edge) {\n\n    if (!(edge.source == self || edge.target == self)) throw \"Incorrect edge source and/or target\";\n\n    if (edge.target == other || edge.source == other) {\n      edgeList.push(edge);\n    }\n  });\n\n  return edgeList;\n};\n\nLNode.prototype.getNeighborsList = function () {\n  var neighbors = new Set();\n\n  var self = this;\n  self.edges.forEach(function (edge) {\n\n    if (edge.source == self) {\n      neighbors.add(edge.target);\n    } else {\n      if (edge.target != self) {\n        throw \"Incorrect incidency!\";\n      }\n\n      neighbors.add(edge.source);\n    }\n  });\n\n  return neighbors;\n};\n\nLNode.prototype.withChildren = function () {\n  var withNeighborsList = new Set();\n  var childNode;\n  var children;\n\n  withNeighborsList.add(this);\n\n  if (this.child != null) {\n    var nodes = this.child.getNodes();\n    for (var i = 0; i < nodes.length; i++) {\n      childNode = nodes[i];\n      children = childNode.withChildren();\n      children.forEach(function (node) {\n        withNeighborsList.add(node);\n      });\n    }\n  }\n\n  return withNeighborsList;\n};\n\nLNode.prototype.getNoOfChildren = function () {\n  var noOfChildren = 0;\n  var childNode;\n\n  if (this.child == null) {\n    noOfChildren = 1;\n  } else {\n    var nodes = this.child.getNodes();\n    for (var i = 0; i < nodes.length; i++) {\n      childNode = nodes[i];\n\n      noOfChildren += childNode.getNoOfChildren();\n    }\n  }\n\n  if (noOfChildren == 0) {\n    noOfChildren = 1;\n  }\n  return noOfChildren;\n};\n\nLNode.prototype.getEstimatedSize = function () {\n  if (this.estimatedSize == Integer.MIN_VALUE) {\n    throw \"assert failed\";\n  }\n  return this.estimatedSize;\n};\n\nLNode.prototype.calcEstimatedSize = function () {\n  if (this.child == null) {\n    return this.estimatedSize = (this.rect.width + this.rect.height) / 2;\n  } else {\n    this.estimatedSize = this.child.calcEstimatedSize();\n    this.rect.width = this.estimatedSize;\n    this.rect.height = this.estimatedSize;\n\n    return this.estimatedSize;\n  }\n};\n\nLNode.prototype.scatter = function () {\n  var randomCenterX;\n  var randomCenterY;\n\n  var minX = -LayoutConstants.INITIAL_WORLD_BOUNDARY;\n  var maxX = LayoutConstants.INITIAL_WORLD_BOUNDARY;\n  randomCenterX = LayoutConstants.WORLD_CENTER_X + RandomSeed.nextDouble() * (maxX - minX) + minX;\n\n  var minY = -LayoutConstants.INITIAL_WORLD_BOUNDARY;\n  var maxY = LayoutConstants.INITIAL_WORLD_BOUNDARY;\n  randomCenterY = LayoutConstants.WORLD_CENTER_Y + RandomSeed.nextDouble() * (maxY - minY) + minY;\n\n  this.rect.x = randomCenterX;\n  this.rect.y = randomCenterY;\n};\n\nLNode.prototype.updateBounds = function () {\n  if (this.getChild() == null) {\n    throw \"assert failed\";\n  }\n  if (this.getChild().getNodes().length != 0) {\n    // wrap the children nodes by re-arranging the boundaries\n    var childGraph = this.getChild();\n    childGraph.updateBounds(true);\n\n    this.rect.x = childGraph.getLeft();\n    this.rect.y = childGraph.getTop();\n\n    this.setWidth(childGraph.getRight() - childGraph.getLeft());\n    this.setHeight(childGraph.getBottom() - childGraph.getTop());\n\n    // Update compound bounds considering its label properties    \n    if (LayoutConstants.NODE_DIMENSIONS_INCLUDE_LABELS) {\n\n      var width = childGraph.getRight() - childGraph.getLeft();\n      var height = childGraph.getBottom() - childGraph.getTop();\n\n      if (this.labelWidth > width) {\n        this.rect.x -= (this.labelWidth - width) / 2;\n        this.setWidth(this.labelWidth);\n      }\n\n      if (this.labelHeight > height) {\n        if (this.labelPos == \"center\") {\n          this.rect.y -= (this.labelHeight - height) / 2;\n        } else if (this.labelPos == \"top\") {\n          this.rect.y -= this.labelHeight - height;\n        }\n        this.setHeight(this.labelHeight);\n      }\n    }\n  }\n};\n\nLNode.prototype.getInclusionTreeDepth = function () {\n  if (this.inclusionTreeDepth == Integer.MAX_VALUE) {\n    throw \"assert failed\";\n  }\n  return this.inclusionTreeDepth;\n};\n\nLNode.prototype.transform = function (trans) {\n  var left = this.rect.x;\n\n  if (left > LayoutConstants.WORLD_BOUNDARY) {\n    left = LayoutConstants.WORLD_BOUNDARY;\n  } else if (left < -LayoutConstants.WORLD_BOUNDARY) {\n    left = -LayoutConstants.WORLD_BOUNDARY;\n  }\n\n  var top = this.rect.y;\n\n  if (top > LayoutConstants.WORLD_BOUNDARY) {\n    top = LayoutConstants.WORLD_BOUNDARY;\n  } else if (top < -LayoutConstants.WORLD_BOUNDARY) {\n    top = -LayoutConstants.WORLD_BOUNDARY;\n  }\n\n  var leftTop = new PointD(left, top);\n  var vLeftTop = trans.inverseTransformPoint(leftTop);\n\n  this.setLocation(vLeftTop.x, vLeftTop.y);\n};\n\nLNode.prototype.getLeft = function () {\n  return this.rect.x;\n};\n\nLNode.prototype.getRight = function () {\n  return this.rect.x + this.rect.width;\n};\n\nLNode.prototype.getTop = function () {\n  return this.rect.y;\n};\n\nLNode.prototype.getBottom = function () {\n  return this.rect.y + this.rect.height;\n};\n\nLNode.prototype.getParent = function () {\n  if (this.owner == null) {\n    return null;\n  }\n\n  return this.owner.getParent();\n};\n\nmodule.exports = LNode;\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction PointD(x, y) {\n  if (x == null && y == null) {\n    this.x = 0;\n    this.y = 0;\n  } else {\n    this.x = x;\n    this.y = y;\n  }\n}\n\nPointD.prototype.getX = function () {\n  return this.x;\n};\n\nPointD.prototype.getY = function () {\n  return this.y;\n};\n\nPointD.prototype.setX = function (x) {\n  this.x = x;\n};\n\nPointD.prototype.setY = function (y) {\n  this.y = y;\n};\n\nPointD.prototype.getDifference = function (pt) {\n  return new DimensionD(this.x - pt.x, this.y - pt.y);\n};\n\nPointD.prototype.getCopy = function () {\n  return new PointD(this.x, this.y);\n};\n\nPointD.prototype.translate = function (dim) {\n  this.x += dim.width;\n  this.y += dim.height;\n  return this;\n};\n\nmodule.exports = PointD;\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar LGraphObject = __webpack_require__(2);\nvar Integer = __webpack_require__(10);\nvar LayoutConstants = __webpack_require__(0);\nvar LGraphManager = __webpack_require__(6);\nvar LNode = __webpack_require__(3);\nvar LEdge = __webpack_require__(1);\nvar RectangleD = __webpack_require__(13);\nvar Point = __webpack_require__(12);\nvar LinkedList = __webpack_require__(11);\n\nfunction LGraph(parent, obj2, vGraph) {\n  LGraphObject.call(this, vGraph);\n  this.estimatedSize = Integer.MIN_VALUE;\n  this.margin = LayoutConstants.DEFAULT_GRAPH_MARGIN;\n  this.edges = [];\n  this.nodes = [];\n  this.isConnected = false;\n  this.parent = parent;\n\n  if (obj2 != null && obj2 instanceof LGraphManager) {\n    this.graphManager = obj2;\n  } else if (obj2 != null && obj2 instanceof Layout) {\n    this.graphManager = obj2.graphManager;\n  }\n}\n\nLGraph.prototype = Object.create(LGraphObject.prototype);\nfor (var prop in LGraphObject) {\n  LGraph[prop] = LGraphObject[prop];\n}\n\nLGraph.prototype.getNodes = function () {\n  return this.nodes;\n};\n\nLGraph.prototype.getEdges = function () {\n  return this.edges;\n};\n\nLGraph.prototype.getGraphManager = function () {\n  return this.graphManager;\n};\n\nLGraph.prototype.getParent = function () {\n  return this.parent;\n};\n\nLGraph.prototype.getLeft = function () {\n  return this.left;\n};\n\nLGraph.prototype.getRight = function () {\n  return this.right;\n};\n\nLGraph.prototype.getTop = function () {\n  return this.top;\n};\n\nLGraph.prototype.getBottom = function () {\n  return this.bottom;\n};\n\nLGraph.prototype.isConnected = function () {\n  return this.isConnected;\n};\n\nLGraph.prototype.add = function (obj1, sourceNode, targetNode) {\n  if (sourceNode == null && targetNode == null) {\n    var newNode = obj1;\n    if (this.graphManager == null) {\n      throw \"Graph has no graph mgr!\";\n    }\n    if (this.getNodes().indexOf(newNode) > -1) {\n      throw \"Node already in graph!\";\n    }\n    newNode.owner = this;\n    this.getNodes().push(newNode);\n\n    return newNode;\n  } else {\n    var newEdge = obj1;\n    if (!(this.getNodes().indexOf(sourceNode) > -1 && this.getNodes().indexOf(targetNode) > -1)) {\n      throw \"Source or target not in graph!\";\n    }\n\n    if (!(sourceNode.owner == targetNode.owner && sourceNode.owner == this)) {\n      throw \"Both owners must be this graph!\";\n    }\n\n    if (sourceNode.owner != targetNode.owner) {\n      return null;\n    }\n\n    // set source and target\n    newEdge.source = sourceNode;\n    newEdge.target = targetNode;\n\n    // set as intra-graph edge\n    newEdge.isInterGraph = false;\n\n    // add to graph edge list\n    this.getEdges().push(newEdge);\n\n    // add to incidency lists\n    sourceNode.edges.push(newEdge);\n\n    if (targetNode != sourceNode) {\n      targetNode.edges.push(newEdge);\n    }\n\n    return newEdge;\n  }\n};\n\nLGraph.prototype.remove = function (obj) {\n  var node = obj;\n  if (obj instanceof LNode) {\n    if (node == null) {\n      throw \"Node is null!\";\n    }\n    if (!(node.owner != null && node.owner == this)) {\n      throw \"Owner graph is invalid!\";\n    }\n    if (this.graphManager == null) {\n      throw \"Owner graph manager is invalid!\";\n    }\n    // remove incident edges first (make a copy to do it safely)\n    var edgesToBeRemoved = node.edges.slice();\n    var edge;\n    var s = edgesToBeRemoved.length;\n    for (var i = 0; i < s; i++) {\n      edge = edgesToBeRemoved[i];\n\n      if (edge.isInterGraph) {\n        this.graphManager.remove(edge);\n      } else {\n        edge.source.owner.remove(edge);\n      }\n    }\n\n    // now the node itself\n    var index = this.nodes.indexOf(node);\n    if (index == -1) {\n      throw \"Node not in owner node list!\";\n    }\n\n    this.nodes.splice(index, 1);\n  } else if (obj instanceof LEdge) {\n    var edge = obj;\n    if (edge == null) {\n      throw \"Edge is null!\";\n    }\n    if (!(edge.source != null && edge.target != null)) {\n      throw \"Source and/or target is null!\";\n    }\n    if (!(edge.source.owner != null && edge.target.owner != null && edge.source.owner == this && edge.target.owner == this)) {\n      throw \"Source and/or target owner is invalid!\";\n    }\n\n    var sourceIndex = edge.source.edges.indexOf(edge);\n    var targetIndex = edge.target.edges.indexOf(edge);\n    if (!(sourceIndex > -1 && targetIndex > -1)) {\n      throw \"Source and/or target doesn't know this edge!\";\n    }\n\n    edge.source.edges.splice(sourceIndex, 1);\n\n    if (edge.target != edge.source) {\n      edge.target.edges.splice(targetIndex, 1);\n    }\n\n    var index = edge.source.owner.getEdges().indexOf(edge);\n    if (index == -1) {\n      throw \"Not in owner's edge list!\";\n    }\n\n    edge.source.owner.getEdges().splice(index, 1);\n  }\n};\n\nLGraph.prototype.updateLeftTop = function () {\n  var top = Integer.MAX_VALUE;\n  var left = Integer.MAX_VALUE;\n  var nodeTop;\n  var nodeLeft;\n  var margin;\n\n  var nodes = this.getNodes();\n  var s = nodes.length;\n\n  for (var i = 0; i < s; i++) {\n    var lNode = nodes[i];\n    nodeTop = lNode.getTop();\n    nodeLeft = lNode.getLeft();\n\n    if (top > nodeTop) {\n      top = nodeTop;\n    }\n\n    if (left > nodeLeft) {\n      left = nodeLeft;\n    }\n  }\n\n  // Do we have any nodes in this graph?\n  if (top == Integer.MAX_VALUE) {\n    return null;\n  }\n\n  if (nodes[0].getParent().paddingLeft != undefined) {\n    margin = nodes[0].getParent().paddingLeft;\n  } else {\n    margin = this.margin;\n  }\n\n  this.left = left - margin;\n  this.top = top - margin;\n\n  // Apply the margins and return the result\n  return new Point(this.left, this.top);\n};\n\nLGraph.prototype.updateBounds = function (recursive) {\n  // calculate bounds\n  var left = Integer.MAX_VALUE;\n  var right = -Integer.MAX_VALUE;\n  var top = Integer.MAX_VALUE;\n  var bottom = -Integer.MAX_VALUE;\n  var nodeLeft;\n  var nodeRight;\n  var nodeTop;\n  var nodeBottom;\n  var margin;\n\n  var nodes = this.nodes;\n  var s = nodes.length;\n  for (var i = 0; i < s; i++) {\n    var lNode = nodes[i];\n\n    if (recursive && lNode.child != null) {\n      lNode.updateBounds();\n    }\n    nodeLeft = lNode.getLeft();\n    nodeRight = lNode.getRight();\n    nodeTop = lNode.getTop();\n    nodeBottom = lNode.getBottom();\n\n    if (left > nodeLeft) {\n      left = nodeLeft;\n    }\n\n    if (right < nodeRight) {\n      right = nodeRight;\n    }\n\n    if (top > nodeTop) {\n      top = nodeTop;\n    }\n\n    if (bottom < nodeBottom) {\n      bottom = nodeBottom;\n    }\n  }\n\n  var boundingRect = new RectangleD(left, top, right - left, bottom - top);\n  if (left == Integer.MAX_VALUE) {\n    this.left = this.parent.getLeft();\n    this.right = this.parent.getRight();\n    this.top = this.parent.getTop();\n    this.bottom = this.parent.getBottom();\n  }\n\n  if (nodes[0].getParent().paddingLeft != undefined) {\n    margin = nodes[0].getParent().paddingLeft;\n  } else {\n    margin = this.margin;\n  }\n\n  this.left = boundingRect.x - margin;\n  this.right = boundingRect.x + boundingRect.width + margin;\n  this.top = boundingRect.y - margin;\n  this.bottom = boundingRect.y + boundingRect.height + margin;\n};\n\nLGraph.calculateBounds = function (nodes) {\n  var left = Integer.MAX_VALUE;\n  var right = -Integer.MAX_VALUE;\n  var top = Integer.MAX_VALUE;\n  var bottom = -Integer.MAX_VALUE;\n  var nodeLeft;\n  var nodeRight;\n  var nodeTop;\n  var nodeBottom;\n\n  var s = nodes.length;\n\n  for (var i = 0; i < s; i++) {\n    var lNode = nodes[i];\n    nodeLeft = lNode.getLeft();\n    nodeRight = lNode.getRight();\n    nodeTop = lNode.getTop();\n    nodeBottom = lNode.getBottom();\n\n    if (left > nodeLeft) {\n      left = nodeLeft;\n    }\n\n    if (right < nodeRight) {\n      right = nodeRight;\n    }\n\n    if (top > nodeTop) {\n      top = nodeTop;\n    }\n\n    if (bottom < nodeBottom) {\n      bottom = nodeBottom;\n    }\n  }\n\n  var boundingRect = new RectangleD(left, top, right - left, bottom - top);\n\n  return boundingRect;\n};\n\nLGraph.prototype.getInclusionTreeDepth = function () {\n  if (this == this.graphManager.getRoot()) {\n    return 1;\n  } else {\n    return this.parent.getInclusionTreeDepth();\n  }\n};\n\nLGraph.prototype.getEstimatedSize = function () {\n  if (this.estimatedSize == Integer.MIN_VALUE) {\n    throw \"assert failed\";\n  }\n  return this.estimatedSize;\n};\n\nLGraph.prototype.calcEstimatedSize = function () {\n  var size = 0;\n  var nodes = this.nodes;\n  var s = nodes.length;\n\n  for (var i = 0; i < s; i++) {\n    var lNode = nodes[i];\n    size += lNode.calcEstimatedSize();\n  }\n\n  if (size == 0) {\n    this.estimatedSize = LayoutConstants.EMPTY_COMPOUND_NODE_SIZE;\n  } else {\n    this.estimatedSize = size / Math.sqrt(this.nodes.length);\n  }\n\n  return this.estimatedSize;\n};\n\nLGraph.prototype.updateConnected = function () {\n  var self = this;\n  if (this.nodes.length == 0) {\n    this.isConnected = true;\n    return;\n  }\n\n  var queue = new LinkedList();\n  var visited = new Set();\n  var currentNode = this.nodes[0];\n  var neighborEdges;\n  var currentNeighbor;\n  var childrenOfNode = currentNode.withChildren();\n  childrenOfNode.forEach(function (node) {\n    queue.push(node);\n    visited.add(node);\n  });\n\n  while (queue.length !== 0) {\n    currentNode = queue.shift();\n\n    // Traverse all neighbors of this node\n    neighborEdges = currentNode.getEdges();\n    var size = neighborEdges.length;\n    for (var i = 0; i < size; i++) {\n      var neighborEdge = neighborEdges[i];\n      currentNeighbor = neighborEdge.getOtherEndInGraph(currentNode, this);\n\n      // Add unvisited neighbors to the list to visit\n      if (currentNeighbor != null && !visited.has(currentNeighbor)) {\n        var childrenOfNeighbor = currentNeighbor.withChildren();\n\n        childrenOfNeighbor.forEach(function (node) {\n          queue.push(node);\n          visited.add(node);\n        });\n      }\n    }\n  }\n\n  this.isConnected = false;\n\n  if (visited.size >= this.nodes.length) {\n    var noOfVisitedInThisGraph = 0;\n\n    visited.forEach(function (visitedNode) {\n      if (visitedNode.owner == self) {\n        noOfVisitedInThisGraph++;\n      }\n    });\n\n    if (noOfVisitedInThisGraph == this.nodes.length) {\n      this.isConnected = true;\n    }\n  }\n};\n\nmodule.exports = LGraph;\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar LGraph;\nvar LEdge = __webpack_require__(1);\n\nfunction LGraphManager(layout) {\n  LGraph = __webpack_require__(5); // It may be better to initilize this out of this function but it gives an error (Right-hand side of 'instanceof' is not callable) now.\n  this.layout = layout;\n\n  this.graphs = [];\n  this.edges = [];\n}\n\nLGraphManager.prototype.addRoot = function () {\n  var ngraph = this.layout.newGraph();\n  var nnode = this.layout.newNode(null);\n  var root = this.add(ngraph, nnode);\n  this.setRootGraph(root);\n  return this.rootGraph;\n};\n\nLGraphManager.prototype.add = function (newGraph, parentNode, newEdge, sourceNode, targetNode) {\n  //there are just 2 parameters are passed then it adds an LGraph else it adds an LEdge\n  if (newEdge == null && sourceNode == null && targetNode == null) {\n    if (newGraph == null) {\n      throw \"Graph is null!\";\n    }\n    if (parentNode == null) {\n      throw \"Parent node is null!\";\n    }\n    if (this.graphs.indexOf(newGraph) > -1) {\n      throw \"Graph already in this graph mgr!\";\n    }\n\n    this.graphs.push(newGraph);\n\n    if (newGraph.parent != null) {\n      throw \"Already has a parent!\";\n    }\n    if (parentNode.child != null) {\n      throw \"Already has a child!\";\n    }\n\n    newGraph.parent = parentNode;\n    parentNode.child = newGraph;\n\n    return newGraph;\n  } else {\n    //change the order of the parameters\n    targetNode = newEdge;\n    sourceNode = parentNode;\n    newEdge = newGraph;\n    var sourceGraph = sourceNode.getOwner();\n    var targetGraph = targetNode.getOwner();\n\n    if (!(sourceGraph != null && sourceGraph.getGraphManager() == this)) {\n      throw \"Source not in this graph mgr!\";\n    }\n    if (!(targetGraph != null && targetGraph.getGraphManager() == this)) {\n      throw \"Target not in this graph mgr!\";\n    }\n\n    if (sourceGraph == targetGraph) {\n      newEdge.isInterGraph = false;\n      return sourceGraph.add(newEdge, sourceNode, targetNode);\n    } else {\n      newEdge.isInterGraph = true;\n\n      // set source and target\n      newEdge.source = sourceNode;\n      newEdge.target = targetNode;\n\n      // add edge to inter-graph edge list\n      if (this.edges.indexOf(newEdge) > -1) {\n        throw \"Edge already in inter-graph edge list!\";\n      }\n\n      this.edges.push(newEdge);\n\n      // add edge to source and target incidency lists\n      if (!(newEdge.source != null && newEdge.target != null)) {\n        throw \"Edge source and/or target is null!\";\n      }\n\n      if (!(newEdge.source.edges.indexOf(newEdge) == -1 && newEdge.target.edges.indexOf(newEdge) == -1)) {\n        throw \"Edge already in source and/or target incidency list!\";\n      }\n\n      newEdge.source.edges.push(newEdge);\n      newEdge.target.edges.push(newEdge);\n\n      return newEdge;\n    }\n  }\n};\n\nLGraphManager.prototype.remove = function (lObj) {\n  if (lObj instanceof LGraph) {\n    var graph = lObj;\n    if (graph.getGraphManager() != this) {\n      throw \"Graph not in this graph mgr\";\n    }\n    if (!(graph == this.rootGraph || graph.parent != null && graph.parent.graphManager == this)) {\n      throw \"Invalid parent node!\";\n    }\n\n    // first the edges (make a copy to do it safely)\n    var edgesToBeRemoved = [];\n\n    edgesToBeRemoved = edgesToBeRemoved.concat(graph.getEdges());\n\n    var edge;\n    var s = edgesToBeRemoved.length;\n    for (var i = 0; i < s; i++) {\n      edge = edgesToBeRemoved[i];\n      graph.remove(edge);\n    }\n\n    // then the nodes (make a copy to do it safely)\n    var nodesToBeRemoved = [];\n\n    nodesToBeRemoved = nodesToBeRemoved.concat(graph.getNodes());\n\n    var node;\n    s = nodesToBeRemoved.length;\n    for (var i = 0; i < s; i++) {\n      node = nodesToBeRemoved[i];\n      graph.remove(node);\n    }\n\n    // check if graph is the root\n    if (graph == this.rootGraph) {\n      this.setRootGraph(null);\n    }\n\n    // now remove the graph itself\n    var index = this.graphs.indexOf(graph);\n    this.graphs.splice(index, 1);\n\n    // also reset the parent of the graph\n    graph.parent = null;\n  } else if (lObj instanceof LEdge) {\n    edge = lObj;\n    if (edge == null) {\n      throw \"Edge is null!\";\n    }\n    if (!edge.isInterGraph) {\n      throw \"Not an inter-graph edge!\";\n    }\n    if (!(edge.source != null && edge.target != null)) {\n      throw \"Source and/or target is null!\";\n    }\n\n    // remove edge from source and target nodes' incidency lists\n\n    if (!(edge.source.edges.indexOf(edge) != -1 && edge.target.edges.indexOf(edge) != -1)) {\n      throw \"Source and/or target doesn't know this edge!\";\n    }\n\n    var index = edge.source.edges.indexOf(edge);\n    edge.source.edges.splice(index, 1);\n    index = edge.target.edges.indexOf(edge);\n    edge.target.edges.splice(index, 1);\n\n    // remove edge from owner graph manager's inter-graph edge list\n\n    if (!(edge.source.owner != null && edge.source.owner.getGraphManager() != null)) {\n      throw \"Edge owner graph or owner graph manager is null!\";\n    }\n    if (edge.source.owner.getGraphManager().edges.indexOf(edge) == -1) {\n      throw \"Not in owner graph manager's edge list!\";\n    }\n\n    var index = edge.source.owner.getGraphManager().edges.indexOf(edge);\n    edge.source.owner.getGraphManager().edges.splice(index, 1);\n  }\n};\n\nLGraphManager.prototype.updateBounds = function () {\n  this.rootGraph.updateBounds(true);\n};\n\nLGraphManager.prototype.getGraphs = function () {\n  return this.graphs;\n};\n\nLGraphManager.prototype.getAllNodes = function () {\n  if (this.allNodes == null) {\n    var nodeList = [];\n    var graphs = this.getGraphs();\n    var s = graphs.length;\n    for (var i = 0; i < s; i++) {\n      nodeList = nodeList.concat(graphs[i].getNodes());\n    }\n    this.allNodes = nodeList;\n  }\n  return this.allNodes;\n};\n\nLGraphManager.prototype.resetAllNodes = function () {\n  this.allNodes = null;\n};\n\nLGraphManager.prototype.resetAllEdges = function () {\n  this.allEdges = null;\n};\n\nLGraphManager.prototype.resetAllNodesToApplyGravitation = function () {\n  this.allNodesToApplyGravitation = null;\n};\n\nLGraphManager.prototype.getAllEdges = function () {\n  if (this.allEdges == null) {\n    var edgeList = [];\n    var graphs = this.getGraphs();\n    var s = graphs.length;\n    for (var i = 0; i < graphs.length; i++) {\n      edgeList = edgeList.concat(graphs[i].getEdges());\n    }\n\n    edgeList = edgeList.concat(this.edges);\n\n    this.allEdges = edgeList;\n  }\n  return this.allEdges;\n};\n\nLGraphManager.prototype.getAllNodesToApplyGravitation = function () {\n  return this.allNodesToApplyGravitation;\n};\n\nLGraphManager.prototype.setAllNodesToApplyGravitation = function (nodeList) {\n  if (this.allNodesToApplyGravitation != null) {\n    throw \"assert failed\";\n  }\n\n  this.allNodesToApplyGravitation = nodeList;\n};\n\nLGraphManager.prototype.getRoot = function () {\n  return this.rootGraph;\n};\n\nLGraphManager.prototype.setRootGraph = function (graph) {\n  if (graph.getGraphManager() != this) {\n    throw \"Root not in this graph mgr!\";\n  }\n\n  this.rootGraph = graph;\n  // root graph must have a root node associated with it for convenience\n  if (graph.parent == null) {\n    graph.parent = this.layout.newNode(\"Root node\");\n  }\n};\n\nLGraphManager.prototype.getLayout = function () {\n  return this.layout;\n};\n\nLGraphManager.prototype.isOneAncestorOfOther = function (firstNode, secondNode) {\n  if (!(firstNode != null && secondNode != null)) {\n    throw \"assert failed\";\n  }\n\n  if (firstNode == secondNode) {\n    return true;\n  }\n  // Is second node an ancestor of the first one?\n  var ownerGraph = firstNode.getOwner();\n  var parentNode;\n\n  do {\n    parentNode = ownerGraph.getParent();\n\n    if (parentNode == null) {\n      break;\n    }\n\n    if (parentNode == secondNode) {\n      return true;\n    }\n\n    ownerGraph = parentNode.getOwner();\n    if (ownerGraph == null) {\n      break;\n    }\n  } while (true);\n  // Is first node an ancestor of the second one?\n  ownerGraph = secondNode.getOwner();\n\n  do {\n    parentNode = ownerGraph.getParent();\n\n    if (parentNode == null) {\n      break;\n    }\n\n    if (parentNode == firstNode) {\n      return true;\n    }\n\n    ownerGraph = parentNode.getOwner();\n    if (ownerGraph == null) {\n      break;\n    }\n  } while (true);\n\n  return false;\n};\n\nLGraphManager.prototype.calcLowestCommonAncestors = function () {\n  var edge;\n  var sourceNode;\n  var targetNode;\n  var sourceAncestorGraph;\n  var targetAncestorGraph;\n\n  var edges = this.getAllEdges();\n  var s = edges.length;\n  for (var i = 0; i < s; i++) {\n    edge = edges[i];\n\n    sourceNode = edge.source;\n    targetNode = edge.target;\n    edge.lca = null;\n    edge.sourceInLca = sourceNode;\n    edge.targetInLca = targetNode;\n\n    if (sourceNode == targetNode) {\n      edge.lca = sourceNode.getOwner();\n      continue;\n    }\n\n    sourceAncestorGraph = sourceNode.getOwner();\n\n    while (edge.lca == null) {\n      edge.targetInLca = targetNode;\n      targetAncestorGraph = targetNode.getOwner();\n\n      while (edge.lca == null) {\n        if (targetAncestorGraph == sourceAncestorGraph) {\n          edge.lca = targetAncestorGraph;\n          break;\n        }\n\n        if (targetAncestorGraph == this.rootGraph) {\n          break;\n        }\n\n        if (edge.lca != null) {\n          throw \"assert failed\";\n        }\n        edge.targetInLca = targetAncestorGraph.getParent();\n        targetAncestorGraph = edge.targetInLca.getOwner();\n      }\n\n      if (sourceAncestorGraph == this.rootGraph) {\n        break;\n      }\n\n      if (edge.lca == null) {\n        edge.sourceInLca = sourceAncestorGraph.getParent();\n        sourceAncestorGraph = edge.sourceInLca.getOwner();\n      }\n    }\n\n    if (edge.lca == null) {\n      throw \"assert failed\";\n    }\n  }\n};\n\nLGraphManager.prototype.calcLowestCommonAncestor = function (firstNode, secondNode) {\n  if (firstNode == secondNode) {\n    return firstNode.getOwner();\n  }\n  var firstOwnerGraph = firstNode.getOwner();\n\n  do {\n    if (firstOwnerGraph == null) {\n      break;\n    }\n    var secondOwnerGraph = secondNode.getOwner();\n\n    do {\n      if (secondOwnerGraph == null) {\n        break;\n      }\n\n      if (secondOwnerGraph == firstOwnerGraph) {\n        return secondOwnerGraph;\n      }\n      secondOwnerGraph = secondOwnerGraph.getParent().getOwner();\n    } while (true);\n\n    firstOwnerGraph = firstOwnerGraph.getParent().getOwner();\n  } while (true);\n\n  return firstOwnerGraph;\n};\n\nLGraphManager.prototype.calcInclusionTreeDepths = function (graph, depth) {\n  if (graph == null && depth == null) {\n    graph = this.rootGraph;\n    depth = 1;\n  }\n  var node;\n\n  var nodes = graph.getNodes();\n  var s = nodes.length;\n  for (var i = 0; i < s; i++) {\n    node = nodes[i];\n    node.inclusionTreeDepth = depth;\n\n    if (node.child != null) {\n      this.calcInclusionTreeDepths(node.child, depth + 1);\n    }\n  }\n};\n\nLGraphManager.prototype.includesInvalidEdge = function () {\n  var edge;\n\n  var s = this.edges.length;\n  for (var i = 0; i < s; i++) {\n    edge = this.edges[i];\n\n    if (this.isOneAncestorOfOther(edge.source, edge.target)) {\n      return true;\n    }\n  }\n  return false;\n};\n\nmodule.exports = LGraphManager;\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar LayoutConstants = __webpack_require__(0);\n\nfunction FDLayoutConstants() {}\n\n//FDLayoutConstants inherits static props in LayoutConstants\nfor (var prop in LayoutConstants) {\n  FDLayoutConstants[prop] = LayoutConstants[prop];\n}\n\nFDLayoutConstants.MAX_ITERATIONS = 2500;\n\nFDLayoutConstants.DEFAULT_EDGE_LENGTH = 50;\nFDLayoutConstants.DEFAULT_SPRING_STRENGTH = 0.45;\nFDLayoutConstants.DEFAULT_REPULSION_STRENGTH = 4500.0;\nFDLayoutConstants.DEFAULT_GRAVITY_STRENGTH = 0.4;\nFDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_STRENGTH = 1.0;\nFDLayoutConstants.DEFAULT_GRAVITY_RANGE_FACTOR = 3.8;\nFDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_RANGE_FACTOR = 1.5;\nFDLayoutConstants.DEFAULT_USE_SMART_IDEAL_EDGE_LENGTH_CALCULATION = true;\nFDLayoutConstants.DEFAULT_USE_SMART_REPULSION_RANGE_CALCULATION = true;\nFDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL = 0.3;\nFDLayoutConstants.COOLING_ADAPTATION_FACTOR = 0.33;\nFDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT = 1000;\nFDLayoutConstants.ADAPTATION_UPPER_NODE_LIMIT = 5000;\nFDLayoutConstants.MAX_NODE_DISPLACEMENT_INCREMENTAL = 100.0;\nFDLayoutConstants.MAX_NODE_DISPLACEMENT = FDLayoutConstants.MAX_NODE_DISPLACEMENT_INCREMENTAL * 3;\nFDLayoutConstants.MIN_REPULSION_DIST = FDLayoutConstants.DEFAULT_EDGE_LENGTH / 10.0;\nFDLayoutConstants.CONVERGENCE_CHECK_PERIOD = 100;\nFDLayoutConstants.PER_LEVEL_IDEAL_EDGE_LENGTH_FACTOR = 0.1;\nFDLayoutConstants.MIN_EDGE_LENGTH = 1;\nFDLayoutConstants.GRID_CALCULATION_CHECK_PERIOD = 10;\n\nmodule.exports = FDLayoutConstants;\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n/**\n * This class maintains a list of static geometry related utility methods.\n *\n *\n * Copyright: i-Vis Research Group, Bilkent University, 2007 - present\n */\n\nvar Point = __webpack_require__(12);\n\nfunction IGeometry() {}\n\n/**\n * This method calculates *half* the amount in x and y directions of the two\n * input rectangles needed to separate them keeping their respective\n * positioning, and returns the result in the input array. An input\n * separation buffer added to the amount in both directions. We assume that\n * the two rectangles do intersect.\n */\nIGeometry.calcSeparationAmount = function (rectA, rectB, overlapAmount, separationBuffer) {\n  if (!rectA.intersects(rectB)) {\n    throw \"assert failed\";\n  }\n\n  var directions = new Array(2);\n\n  this.decideDirectionsForOverlappingNodes(rectA, rectB, directions);\n\n  overlapAmount[0] = Math.min(rectA.getRight(), rectB.getRight()) - Math.max(rectA.x, rectB.x);\n  overlapAmount[1] = Math.min(rectA.getBottom(), rectB.getBottom()) - Math.max(rectA.y, rectB.y);\n\n  // update the overlapping amounts for the following cases:\n  if (rectA.getX() <= rectB.getX() && rectA.getRight() >= rectB.getRight()) {\n    /* Case x.1:\n    *\n    * rectA\n    * \t|                       |\n    * \t|        _________      |\n    * \t|        |       |      |\n    * \t|________|_______|______|\n    * \t\t\t |       |\n    *           |       |\n    *        rectB\n    */\n    overlapAmount[0] += Math.min(rectB.getX() - rectA.getX(), rectA.getRight() - rectB.getRight());\n  } else if (rectB.getX() <= rectA.getX() && rectB.getRight() >= rectA.getRight()) {\n    /* Case x.2:\n    *\n    * rectB\n    * \t|                       |\n    * \t|        _________      |\n    * \t|        |       |      |\n    * \t|________|_______|______|\n    * \t\t\t |       |\n    *           |       |\n    *        rectA\n    */\n    overlapAmount[0] += Math.min(rectA.getX() - rectB.getX(), rectB.getRight() - rectA.getRight());\n  }\n  if (rectA.getY() <= rectB.getY() && rectA.getBottom() >= rectB.getBottom()) {\n    /* Case y.1:\n     *          ________ rectA\n     *         |\n     *         |\n     *   ______|____  rectB\n     *         |    |\n     *         |    |\n     *   ______|____|\n     *         |\n     *         |\n     *         |________\n     *\n     */\n    overlapAmount[1] += Math.min(rectB.getY() - rectA.getY(), rectA.getBottom() - rectB.getBottom());\n  } else if (rectB.getY() <= rectA.getY() && rectB.getBottom() >= rectA.getBottom()) {\n    /* Case y.2:\n    *          ________ rectB\n    *         |\n    *         |\n    *   ______|____  rectA\n    *         |    |\n    *         |    |\n    *   ______|____|\n    *         |\n    *         |\n    *         |________\n    *\n    */\n    overlapAmount[1] += Math.min(rectA.getY() - rectB.getY(), rectB.getBottom() - rectA.getBottom());\n  }\n\n  // find slope of the line passes two centers\n  var slope = Math.abs((rectB.getCenterY() - rectA.getCenterY()) / (rectB.getCenterX() - rectA.getCenterX()));\n  // if centers are overlapped\n  if (rectB.getCenterY() === rectA.getCenterY() && rectB.getCenterX() === rectA.getCenterX()) {\n    // assume the slope is 1 (45 degree)\n    slope = 1.0;\n  }\n\n  var moveByY = slope * overlapAmount[0];\n  var moveByX = overlapAmount[1] / slope;\n  if (overlapAmount[0] < moveByX) {\n    moveByX = overlapAmount[0];\n  } else {\n    moveByY = overlapAmount[1];\n  }\n  // return half the amount so that if each rectangle is moved by these\n  // amounts in opposite directions, overlap will be resolved\n  overlapAmount[0] = -1 * directions[0] * (moveByX / 2 + separationBuffer);\n  overlapAmount[1] = -1 * directions[1] * (moveByY / 2 + separationBuffer);\n};\n\n/**\n * This method decides the separation direction of overlapping nodes\n *\n * if directions[0] = -1, then rectA goes left\n * if directions[0] = 1,  then rectA goes right\n * if directions[1] = -1, then rectA goes up\n * if directions[1] = 1,  then rectA goes down\n */\nIGeometry.decideDirectionsForOverlappingNodes = function (rectA, rectB, directions) {\n  if (rectA.getCenterX() < rectB.getCenterX()) {\n    directions[0] = -1;\n  } else {\n    directions[0] = 1;\n  }\n\n  if (rectA.getCenterY() < rectB.getCenterY()) {\n    directions[1] = -1;\n  } else {\n    directions[1] = 1;\n  }\n};\n\n/**\n * This method calculates the intersection (clipping) points of the two\n * input rectangles with line segment defined by the centers of these two\n * rectangles. The clipping points are saved in the input double array and\n * whether or not the two rectangles overlap is returned.\n */\nIGeometry.getIntersection2 = function (rectA, rectB, result) {\n  //result[0-1] will contain clipPoint of rectA, result[2-3] will contain clipPoint of rectB\n  var p1x = rectA.getCenterX();\n  var p1y = rectA.getCenterY();\n  var p2x = rectB.getCenterX();\n  var p2y = rectB.getCenterY();\n\n  //if two rectangles intersect, then clipping points are centers\n  if (rectA.intersects(rectB)) {\n    result[0] = p1x;\n    result[1] = p1y;\n    result[2] = p2x;\n    result[3] = p2y;\n    return true;\n  }\n  //variables for rectA\n  var topLeftAx = rectA.getX();\n  var topLeftAy = rectA.getY();\n  var topRightAx = rectA.getRight();\n  var bottomLeftAx = rectA.getX();\n  var bottomLeftAy = rectA.getBottom();\n  var bottomRightAx = rectA.getRight();\n  var halfWidthA = rectA.getWidthHalf();\n  var halfHeightA = rectA.getHeightHalf();\n  //variables for rectB\n  var topLeftBx = rectB.getX();\n  var topLeftBy = rectB.getY();\n  var topRightBx = rectB.getRight();\n  var bottomLeftBx = rectB.getX();\n  var bottomLeftBy = rectB.getBottom();\n  var bottomRightBx = rectB.getRight();\n  var halfWidthB = rectB.getWidthHalf();\n  var halfHeightB = rectB.getHeightHalf();\n\n  //flag whether clipping points are found\n  var clipPointAFound = false;\n  var clipPointBFound = false;\n\n  // line is vertical\n  if (p1x === p2x) {\n    if (p1y > p2y) {\n      result[0] = p1x;\n      result[1] = topLeftAy;\n      result[2] = p2x;\n      result[3] = bottomLeftBy;\n      return false;\n    } else if (p1y < p2y) {\n      result[0] = p1x;\n      result[1] = bottomLeftAy;\n      result[2] = p2x;\n      result[3] = topLeftBy;\n      return false;\n    } else {\n      //not line, return null;\n    }\n  }\n  // line is horizontal\n  else if (p1y === p2y) {\n      if (p1x > p2x) {\n        result[0] = topLeftAx;\n        result[1] = p1y;\n        result[2] = topRightBx;\n        result[3] = p2y;\n        return false;\n      } else if (p1x < p2x) {\n        result[0] = topRightAx;\n        result[1] = p1y;\n        result[2] = topLeftBx;\n        result[3] = p2y;\n        return false;\n      } else {\n        //not valid line, return null;\n      }\n    } else {\n      //slopes of rectA's and rectB's diagonals\n      var slopeA = rectA.height / rectA.width;\n      var slopeB = rectB.height / rectB.width;\n\n      //slope of line between center of rectA and center of rectB\n      var slopePrime = (p2y - p1y) / (p2x - p1x);\n      var cardinalDirectionA = void 0;\n      var cardinalDirectionB = void 0;\n      var tempPointAx = void 0;\n      var tempPointAy = void 0;\n      var tempPointBx = void 0;\n      var tempPointBy = void 0;\n\n      //determine whether clipping point is the corner of nodeA\n      if (-slopeA === slopePrime) {\n        if (p1x > p2x) {\n          result[0] = bottomLeftAx;\n          result[1] = bottomLeftAy;\n          clipPointAFound = true;\n        } else {\n          result[0] = topRightAx;\n          result[1] = topLeftAy;\n          clipPointAFound = true;\n        }\n      } else if (slopeA === slopePrime) {\n        if (p1x > p2x) {\n          result[0] = topLeftAx;\n          result[1] = topLeftAy;\n          clipPointAFound = true;\n        } else {\n          result[0] = bottomRightAx;\n          result[1] = bottomLeftAy;\n          clipPointAFound = true;\n        }\n      }\n\n      //determine whether clipping point is the corner of nodeB\n      if (-slopeB === slopePrime) {\n        if (p2x > p1x) {\n          result[2] = bottomLeftBx;\n          result[3] = bottomLeftBy;\n          clipPointBFound = true;\n        } else {\n          result[2] = topRightBx;\n          result[3] = topLeftBy;\n          clipPointBFound = true;\n        }\n      } else if (slopeB === slopePrime) {\n        if (p2x > p1x) {\n          result[2] = topLeftBx;\n          result[3] = topLeftBy;\n          clipPointBFound = true;\n        } else {\n          result[2] = bottomRightBx;\n          result[3] = bottomLeftBy;\n          clipPointBFound = true;\n        }\n      }\n\n      //if both clipping points are corners\n      if (clipPointAFound && clipPointBFound) {\n        return false;\n      }\n\n      //determine Cardinal Direction of rectangles\n      if (p1x > p2x) {\n        if (p1y > p2y) {\n          cardinalDirectionA = this.getCardinalDirection(slopeA, slopePrime, 4);\n          cardinalDirectionB = this.getCardinalDirection(slopeB, slopePrime, 2);\n        } else {\n          cardinalDirectionA = this.getCardinalDirection(-slopeA, slopePrime, 3);\n          cardinalDirectionB = this.getCardinalDirection(-slopeB, slopePrime, 1);\n        }\n      } else {\n        if (p1y > p2y) {\n          cardinalDirectionA = this.getCardinalDirection(-slopeA, slopePrime, 1);\n          cardinalDirectionB = this.getCardinalDirection(-slopeB, slopePrime, 3);\n        } else {\n          cardinalDirectionA = this.getCardinalDirection(slopeA, slopePrime, 2);\n          cardinalDirectionB = this.getCardinalDirection(slopeB, slopePrime, 4);\n        }\n      }\n      //calculate clipping Point if it is not found before\n      if (!clipPointAFound) {\n        switch (cardinalDirectionA) {\n          case 1:\n            tempPointAy = topLeftAy;\n            tempPointAx = p1x + -halfHeightA / slopePrime;\n            result[0] = tempPointAx;\n            result[1] = tempPointAy;\n            break;\n          case 2:\n            tempPointAx = bottomRightAx;\n            tempPointAy = p1y + halfWidthA * slopePrime;\n            result[0] = tempPointAx;\n            result[1] = tempPointAy;\n            break;\n          case 3:\n            tempPointAy = bottomLeftAy;\n            tempPointAx = p1x + halfHeightA / slopePrime;\n            result[0] = tempPointAx;\n            result[1] = tempPointAy;\n            break;\n          case 4:\n            tempPointAx = bottomLeftAx;\n            tempPointAy = p1y + -halfWidthA * slopePrime;\n            result[0] = tempPointAx;\n            result[1] = tempPointAy;\n            break;\n        }\n      }\n      if (!clipPointBFound) {\n        switch (cardinalDirectionB) {\n          case 1:\n            tempPointBy = topLeftBy;\n            tempPointBx = p2x + -halfHeightB / slopePrime;\n            result[2] = tempPointBx;\n            result[3] = tempPointBy;\n            break;\n          case 2:\n            tempPointBx = bottomRightBx;\n            tempPointBy = p2y + halfWidthB * slopePrime;\n            result[2] = tempPointBx;\n            result[3] = tempPointBy;\n            break;\n          case 3:\n            tempPointBy = bottomLeftBy;\n            tempPointBx = p2x + halfHeightB / slopePrime;\n            result[2] = tempPointBx;\n            result[3] = tempPointBy;\n            break;\n          case 4:\n            tempPointBx = bottomLeftBx;\n            tempPointBy = p2y + -halfWidthB * slopePrime;\n            result[2] = tempPointBx;\n            result[3] = tempPointBy;\n            break;\n        }\n      }\n    }\n  return false;\n};\n\n/**\n * This method returns in which cardinal direction does input point stays\n * 1: North\n * 2: East\n * 3: South\n * 4: West\n */\nIGeometry.getCardinalDirection = function (slope, slopePrime, line) {\n  if (slope > slopePrime) {\n    return line;\n  } else {\n    return 1 + line % 4;\n  }\n};\n\n/**\n * This method calculates the intersection of the two lines defined by\n * point pairs (s1,s2) and (f1,f2).\n */\nIGeometry.getIntersection = function (s1, s2, f1, f2) {\n  if (f2 == null) {\n    return this.getIntersection2(s1, s2, f1);\n  }\n\n  var x1 = s1.x;\n  var y1 = s1.y;\n  var x2 = s2.x;\n  var y2 = s2.y;\n  var x3 = f1.x;\n  var y3 = f1.y;\n  var x4 = f2.x;\n  var y4 = f2.y;\n  var x = void 0,\n      y = void 0; // intersection point\n  var a1 = void 0,\n      a2 = void 0,\n      b1 = void 0,\n      b2 = void 0,\n      c1 = void 0,\n      c2 = void 0; // coefficients of line eqns.\n  var denom = void 0;\n\n  a1 = y2 - y1;\n  b1 = x1 - x2;\n  c1 = x2 * y1 - x1 * y2; // { a1*x + b1*y + c1 = 0 is line 1 }\n\n  a2 = y4 - y3;\n  b2 = x3 - x4;\n  c2 = x4 * y3 - x3 * y4; // { a2*x + b2*y + c2 = 0 is line 2 }\n\n  denom = a1 * b2 - a2 * b1;\n\n  if (denom === 0) {\n    return null;\n  }\n\n  x = (b1 * c2 - b2 * c1) / denom;\n  y = (a2 * c1 - a1 * c2) / denom;\n\n  return new Point(x, y);\n};\n\n/**\n * This method finds and returns the angle of the vector from the + x-axis\n * in clockwise direction (compatible w/ Java coordinate system!).\n */\nIGeometry.angleOfVector = function (Cx, Cy, Nx, Ny) {\n  var C_angle = void 0;\n\n  if (Cx !== Nx) {\n    C_angle = Math.atan((Ny - Cy) / (Nx - Cx));\n\n    if (Nx < Cx) {\n      C_angle += Math.PI;\n    } else if (Ny < Cy) {\n      C_angle += this.TWO_PI;\n    }\n  } else if (Ny < Cy) {\n    C_angle = this.ONE_AND_HALF_PI; // 270 degrees\n  } else {\n    C_angle = this.HALF_PI; // 90 degrees\n  }\n\n  return C_angle;\n};\n\n/**\n * This method checks whether the given two line segments (one with point\n * p1 and p2, the other with point p3 and p4) intersect at a point other\n * than these points.\n */\nIGeometry.doIntersect = function (p1, p2, p3, p4) {\n  var a = p1.x;\n  var b = p1.y;\n  var c = p2.x;\n  var d = p2.y;\n  var p = p3.x;\n  var q = p3.y;\n  var r = p4.x;\n  var s = p4.y;\n  var det = (c - a) * (s - q) - (r - p) * (d - b);\n\n  if (det === 0) {\n    return false;\n  } else {\n    var lambda = ((s - q) * (r - a) + (p - r) * (s - b)) / det;\n    var gamma = ((b - d) * (r - a) + (c - a) * (s - b)) / det;\n    return 0 < lambda && lambda < 1 && 0 < gamma && gamma < 1;\n  }\n};\n\n// -----------------------------------------------------------------------------\n// Section: Class Constants\n// -----------------------------------------------------------------------------\n/**\n * Some useful pre-calculated constants\n */\nIGeometry.HALF_PI = 0.5 * Math.PI;\nIGeometry.ONE_AND_HALF_PI = 1.5 * Math.PI;\nIGeometry.TWO_PI = 2.0 * Math.PI;\nIGeometry.THREE_PI = 3.0 * Math.PI;\n\nmodule.exports = IGeometry;\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction IMath() {}\n\n/**\n * This method returns the sign of the input value.\n */\nIMath.sign = function (value) {\n  if (value > 0) {\n    return 1;\n  } else if (value < 0) {\n    return -1;\n  } else {\n    return 0;\n  }\n};\n\nIMath.floor = function (value) {\n  return value < 0 ? Math.ceil(value) : Math.floor(value);\n};\n\nIMath.ceil = function (value) {\n  return value < 0 ? Math.floor(value) : Math.ceil(value);\n};\n\nmodule.exports = IMath;\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction Integer() {}\n\nInteger.MAX_VALUE = 2147483647;\nInteger.MIN_VALUE = -2147483648;\n\nmodule.exports = Integer;\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar nodeFrom = function nodeFrom(value) {\n  return { value: value, next: null, prev: null };\n};\n\nvar add = function add(prev, node, next, list) {\n  if (prev !== null) {\n    prev.next = node;\n  } else {\n    list.head = node;\n  }\n\n  if (next !== null) {\n    next.prev = node;\n  } else {\n    list.tail = node;\n  }\n\n  node.prev = prev;\n  node.next = next;\n\n  list.length++;\n\n  return node;\n};\n\nvar _remove = function _remove(node, list) {\n  var prev = node.prev,\n      next = node.next;\n\n\n  if (prev !== null) {\n    prev.next = next;\n  } else {\n    list.head = next;\n  }\n\n  if (next !== null) {\n    next.prev = prev;\n  } else {\n    list.tail = prev;\n  }\n\n  node.prev = node.next = null;\n\n  list.length--;\n\n  return node;\n};\n\nvar LinkedList = function () {\n  function LinkedList(vals) {\n    var _this = this;\n\n    _classCallCheck(this, LinkedList);\n\n    this.length = 0;\n    this.head = null;\n    this.tail = null;\n\n    if (vals != null) {\n      vals.forEach(function (v) {\n        return _this.push(v);\n      });\n    }\n  }\n\n  _createClass(LinkedList, [{\n    key: \"size\",\n    value: function size() {\n      return this.length;\n    }\n  }, {\n    key: \"insertBefore\",\n    value: function insertBefore(val, otherNode) {\n      return add(otherNode.prev, nodeFrom(val), otherNode, this);\n    }\n  }, {\n    key: \"insertAfter\",\n    value: function insertAfter(val, otherNode) {\n      return add(otherNode, nodeFrom(val), otherNode.next, this);\n    }\n  }, {\n    key: \"insertNodeBefore\",\n    value: function insertNodeBefore(newNode, otherNode) {\n      return add(otherNode.prev, newNode, otherNode, this);\n    }\n  }, {\n    key: \"insertNodeAfter\",\n    value: function insertNodeAfter(newNode, otherNode) {\n      return add(otherNode, newNode, otherNode.next, this);\n    }\n  }, {\n    key: \"push\",\n    value: function push(val) {\n      return add(this.tail, nodeFrom(val), null, this);\n    }\n  }, {\n    key: \"unshift\",\n    value: function unshift(val) {\n      return add(null, nodeFrom(val), this.head, this);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(node) {\n      return _remove(node, this);\n    }\n  }, {\n    key: \"pop\",\n    value: function pop() {\n      return _remove(this.tail, this).value;\n    }\n  }, {\n    key: \"popNode\",\n    value: function popNode() {\n      return _remove(this.tail, this);\n    }\n  }, {\n    key: \"shift\",\n    value: function shift() {\n      return _remove(this.head, this).value;\n    }\n  }, {\n    key: \"shiftNode\",\n    value: function shiftNode() {\n      return _remove(this.head, this);\n    }\n  }, {\n    key: \"get_object_at\",\n    value: function get_object_at(index) {\n      if (index <= this.length()) {\n        var i = 1;\n        var current = this.head;\n        while (i < index) {\n          current = current.next;\n          i++;\n        }\n        return current.value;\n      }\n    }\n  }, {\n    key: \"set_object_at\",\n    value: function set_object_at(index, value) {\n      if (index <= this.length()) {\n        var i = 1;\n        var current = this.head;\n        while (i < index) {\n          current = current.next;\n          i++;\n        }\n        current.value = value;\n      }\n    }\n  }]);\n\n  return LinkedList;\n}();\n\nmodule.exports = LinkedList;\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n/*\r\n *This class is the javascript implementation of the Point.java class in jdk\r\n */\nfunction Point(x, y, p) {\n  this.x = null;\n  this.y = null;\n  if (x == null && y == null && p == null) {\n    this.x = 0;\n    this.y = 0;\n  } else if (typeof x == 'number' && typeof y == 'number' && p == null) {\n    this.x = x;\n    this.y = y;\n  } else if (x.constructor.name == 'Point' && y == null && p == null) {\n    p = x;\n    this.x = p.x;\n    this.y = p.y;\n  }\n}\n\nPoint.prototype.getX = function () {\n  return this.x;\n};\n\nPoint.prototype.getY = function () {\n  return this.y;\n};\n\nPoint.prototype.getLocation = function () {\n  return new Point(this.x, this.y);\n};\n\nPoint.prototype.setLocation = function (x, y, p) {\n  if (x.constructor.name == 'Point' && y == null && p == null) {\n    p = x;\n    this.setLocation(p.x, p.y);\n  } else if (typeof x == 'number' && typeof y == 'number' && p == null) {\n    //if both parameters are integer just move (x,y) location\n    if (parseInt(x) == x && parseInt(y) == y) {\n      this.move(x, y);\n    } else {\n      this.x = Math.floor(x + 0.5);\n      this.y = Math.floor(y + 0.5);\n    }\n  }\n};\n\nPoint.prototype.move = function (x, y) {\n  this.x = x;\n  this.y = y;\n};\n\nPoint.prototype.translate = function (dx, dy) {\n  this.x += dx;\n  this.y += dy;\n};\n\nPoint.prototype.equals = function (obj) {\n  if (obj.constructor.name == \"Point\") {\n    var pt = obj;\n    return this.x == pt.x && this.y == pt.y;\n  }\n  return this == obj;\n};\n\nPoint.prototype.toString = function () {\n  return new Point().constructor.name + \"[x=\" + this.x + \",y=\" + this.y + \"]\";\n};\n\nmodule.exports = Point;\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction RectangleD(x, y, width, height) {\n  this.x = 0;\n  this.y = 0;\n  this.width = 0;\n  this.height = 0;\n\n  if (x != null && y != null && width != null && height != null) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n}\n\nRectangleD.prototype.getX = function () {\n  return this.x;\n};\n\nRectangleD.prototype.setX = function (x) {\n  this.x = x;\n};\n\nRectangleD.prototype.getY = function () {\n  return this.y;\n};\n\nRectangleD.prototype.setY = function (y) {\n  this.y = y;\n};\n\nRectangleD.prototype.getWidth = function () {\n  return this.width;\n};\n\nRectangleD.prototype.setWidth = function (width) {\n  this.width = width;\n};\n\nRectangleD.prototype.getHeight = function () {\n  return this.height;\n};\n\nRectangleD.prototype.setHeight = function (height) {\n  this.height = height;\n};\n\nRectangleD.prototype.getRight = function () {\n  return this.x + this.width;\n};\n\nRectangleD.prototype.getBottom = function () {\n  return this.y + this.height;\n};\n\nRectangleD.prototype.intersects = function (a) {\n  if (this.getRight() < a.x) {\n    return false;\n  }\n\n  if (this.getBottom() < a.y) {\n    return false;\n  }\n\n  if (a.getRight() < this.x) {\n    return false;\n  }\n\n  if (a.getBottom() < this.y) {\n    return false;\n  }\n\n  return true;\n};\n\nRectangleD.prototype.getCenterX = function () {\n  return this.x + this.width / 2;\n};\n\nRectangleD.prototype.getMinX = function () {\n  return this.getX();\n};\n\nRectangleD.prototype.getMaxX = function () {\n  return this.getX() + this.width;\n};\n\nRectangleD.prototype.getCenterY = function () {\n  return this.y + this.height / 2;\n};\n\nRectangleD.prototype.getMinY = function () {\n  return this.getY();\n};\n\nRectangleD.prototype.getMaxY = function () {\n  return this.getY() + this.height;\n};\n\nRectangleD.prototype.getWidthHalf = function () {\n  return this.width / 2;\n};\n\nRectangleD.prototype.getHeightHalf = function () {\n  return this.height / 2;\n};\n\nmodule.exports = RectangleD;\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction UniqueIDGeneretor() {}\n\nUniqueIDGeneretor.lastID = 0;\n\nUniqueIDGeneretor.createID = function (obj) {\n  if (UniqueIDGeneretor.isPrimitive(obj)) {\n    return obj;\n  }\n  if (obj.uniqueID != null) {\n    return obj.uniqueID;\n  }\n  obj.uniqueID = UniqueIDGeneretor.getString();\n  UniqueIDGeneretor.lastID++;\n  return obj.uniqueID;\n};\n\nUniqueIDGeneretor.getString = function (id) {\n  if (id == null) id = UniqueIDGeneretor.lastID;\n  return \"Object#\" + id + \"\";\n};\n\nUniqueIDGeneretor.isPrimitive = function (arg) {\n  var type = typeof arg === \"undefined\" ? \"undefined\" : _typeof(arg);\n  return arg == null || type != \"object\" && type != \"function\";\n};\n\nmodule.exports = UniqueIDGeneretor;\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nvar LayoutConstants = __webpack_require__(0);\nvar LGraphManager = __webpack_require__(6);\nvar LNode = __webpack_require__(3);\nvar LEdge = __webpack_require__(1);\nvar LGraph = __webpack_require__(5);\nvar PointD = __webpack_require__(4);\nvar Transform = __webpack_require__(17);\nvar Emitter = __webpack_require__(27);\n\nfunction Layout(isRemoteUse) {\n  Emitter.call(this);\n\n  //Layout Quality: 0:draft, 1:default, 2:proof\n  this.layoutQuality = LayoutConstants.QUALITY;\n  //Whether layout should create bendpoints as needed or not\n  this.createBendsAsNeeded = LayoutConstants.DEFAULT_CREATE_BENDS_AS_NEEDED;\n  //Whether layout should be incremental or not\n  this.incremental = LayoutConstants.DEFAULT_INCREMENTAL;\n  //Whether we animate from before to after layout node positions\n  this.animationOnLayout = LayoutConstants.DEFAULT_ANIMATION_ON_LAYOUT;\n  //Whether we animate the layout process or not\n  this.animationDuringLayout = LayoutConstants.DEFAULT_ANIMATION_DURING_LAYOUT;\n  //Number iterations that should be done between two successive animations\n  this.animationPeriod = LayoutConstants.DEFAULT_ANIMATION_PERIOD;\n  /**\r\n   * Whether or not leaf nodes (non-compound nodes) are of uniform sizes. When\r\n   * they are, both spring and repulsion forces between two leaf nodes can be\r\n   * calculated without the expensive clipping point calculations, resulting\r\n   * in major speed-up.\r\n   */\n  this.uniformLeafNodeSizes = LayoutConstants.DEFAULT_UNIFORM_LEAF_NODE_SIZES;\n  /**\r\n   * This is used for creation of bendpoints by using dummy nodes and edges.\r\n   * Maps an LEdge to its dummy bendpoint path.\r\n   */\n  this.edgeToDummyNodes = new Map();\n  this.graphManager = new LGraphManager(this);\n  this.isLayoutFinished = false;\n  this.isSubLayout = false;\n  this.isRemoteUse = false;\n\n  if (isRemoteUse != null) {\n    this.isRemoteUse = isRemoteUse;\n  }\n}\n\nLayout.RANDOM_SEED = 1;\n\nLayout.prototype = Object.create(Emitter.prototype);\n\nLayout.prototype.getGraphManager = function () {\n  return this.graphManager;\n};\n\nLayout.prototype.getAllNodes = function () {\n  return this.graphManager.getAllNodes();\n};\n\nLayout.prototype.getAllEdges = function () {\n  return this.graphManager.getAllEdges();\n};\n\nLayout.prototype.getAllNodesToApplyGravitation = function () {\n  return this.graphManager.getAllNodesToApplyGravitation();\n};\n\nLayout.prototype.newGraphManager = function () {\n  var gm = new LGraphManager(this);\n  this.graphManager = gm;\n  return gm;\n};\n\nLayout.prototype.newGraph = function (vGraph) {\n  return new LGraph(null, this.graphManager, vGraph);\n};\n\nLayout.prototype.newNode = function (vNode) {\n  return new LNode(this.graphManager, vNode);\n};\n\nLayout.prototype.newEdge = function (vEdge) {\n  return new LEdge(null, null, vEdge);\n};\n\nLayout.prototype.checkLayoutSuccess = function () {\n  return this.graphManager.getRoot() == null || this.graphManager.getRoot().getNodes().length == 0 || this.graphManager.includesInvalidEdge();\n};\n\nLayout.prototype.runLayout = function () {\n  this.isLayoutFinished = false;\n\n  if (this.tilingPreLayout) {\n    this.tilingPreLayout();\n  }\n\n  this.initParameters();\n  var isLayoutSuccessfull;\n\n  if (this.checkLayoutSuccess()) {\n    isLayoutSuccessfull = false;\n  } else {\n    isLayoutSuccessfull = this.layout();\n  }\n\n  if (LayoutConstants.ANIMATE === 'during') {\n    // If this is a 'during' layout animation. Layout is not finished yet. \n    // We need to perform these in index.js when layout is really finished.\n    return false;\n  }\n\n  if (isLayoutSuccessfull) {\n    if (!this.isSubLayout) {\n      this.doPostLayout();\n    }\n  }\n\n  if (this.tilingPostLayout) {\n    this.tilingPostLayout();\n  }\n\n  this.isLayoutFinished = true;\n\n  return isLayoutSuccessfull;\n};\n\n/**\r\n * This method performs the operations required after layout.\r\n */\nLayout.prototype.doPostLayout = function () {\n  //assert !isSubLayout : \"Should not be called on sub-layout!\";\n  // Propagate geometric changes to v-level objects\n  if (!this.incremental) {\n    this.transform();\n  }\n  this.update();\n};\n\n/**\r\n * This method updates the geometry of the target graph according to\r\n * calculated layout.\r\n */\nLayout.prototype.update2 = function () {\n  // update bend points\n  if (this.createBendsAsNeeded) {\n    this.createBendpointsFromDummyNodes();\n\n    // reset all edges, since the topology has changed\n    this.graphManager.resetAllEdges();\n  }\n\n  // perform edge, node and root updates if layout is not called\n  // remotely\n  if (!this.isRemoteUse) {\n    // update all edges\n    var edge;\n    var allEdges = this.graphManager.getAllEdges();\n    for (var i = 0; i < allEdges.length; i++) {\n      edge = allEdges[i];\n      //      this.update(edge);\n    }\n\n    // recursively update nodes\n    var node;\n    var nodes = this.graphManager.getRoot().getNodes();\n    for (var i = 0; i < nodes.length; i++) {\n      node = nodes[i];\n      //      this.update(node);\n    }\n\n    // update root graph\n    this.update(this.graphManager.getRoot());\n  }\n};\n\nLayout.prototype.update = function (obj) {\n  if (obj == null) {\n    this.update2();\n  } else if (obj instanceof LNode) {\n    var node = obj;\n    if (node.getChild() != null) {\n      // since node is compound, recursively update child nodes\n      var nodes = node.getChild().getNodes();\n      for (var i = 0; i < nodes.length; i++) {\n        update(nodes[i]);\n      }\n    }\n\n    // if the l-level node is associated with a v-level graph object,\n    // then it is assumed that the v-level node implements the\n    // interface Updatable.\n    if (node.vGraphObject != null) {\n      // cast to Updatable without any type check\n      var vNode = node.vGraphObject;\n\n      // call the update method of the interface\n      vNode.update(node);\n    }\n  } else if (obj instanceof LEdge) {\n    var edge = obj;\n    // if the l-level edge is associated with a v-level graph object,\n    // then it is assumed that the v-level edge implements the\n    // interface Updatable.\n\n    if (edge.vGraphObject != null) {\n      // cast to Updatable without any type check\n      var vEdge = edge.vGraphObject;\n\n      // call the update method of the interface\n      vEdge.update(edge);\n    }\n  } else if (obj instanceof LGraph) {\n    var graph = obj;\n    // if the l-level graph is associated with a v-level graph object,\n    // then it is assumed that the v-level object implements the\n    // interface Updatable.\n\n    if (graph.vGraphObject != null) {\n      // cast to Updatable without any type check\n      var vGraph = graph.vGraphObject;\n\n      // call the update method of the interface\n      vGraph.update(graph);\n    }\n  }\n};\n\n/**\r\n * This method is used to set all layout parameters to default values\r\n * determined at compile time.\r\n */\nLayout.prototype.initParameters = function () {\n  if (!this.isSubLayout) {\n    this.layoutQuality = LayoutConstants.QUALITY;\n    this.animationDuringLayout = LayoutConstants.DEFAULT_ANIMATION_DURING_LAYOUT;\n    this.animationPeriod = LayoutConstants.DEFAULT_ANIMATION_PERIOD;\n    this.animationOnLayout = LayoutConstants.DEFAULT_ANIMATION_ON_LAYOUT;\n    this.incremental = LayoutConstants.DEFAULT_INCREMENTAL;\n    this.createBendsAsNeeded = LayoutConstants.DEFAULT_CREATE_BENDS_AS_NEEDED;\n    this.uniformLeafNodeSizes = LayoutConstants.DEFAULT_UNIFORM_LEAF_NODE_SIZES;\n  }\n\n  if (this.animationDuringLayout) {\n    this.animationOnLayout = false;\n  }\n};\n\nLayout.prototype.transform = function (newLeftTop) {\n  if (newLeftTop == undefined) {\n    this.transform(new PointD(0, 0));\n  } else {\n    // create a transformation object (from Eclipse to layout). When an\n    // inverse transform is applied, we get upper-left coordinate of the\n    // drawing or the root graph at given input coordinate (some margins\n    // already included in calculation of left-top).\n\n    var trans = new Transform();\n    var leftTop = this.graphManager.getRoot().updateLeftTop();\n\n    if (leftTop != null) {\n      trans.setWorldOrgX(newLeftTop.x);\n      trans.setWorldOrgY(newLeftTop.y);\n\n      trans.setDeviceOrgX(leftTop.x);\n      trans.setDeviceOrgY(leftTop.y);\n\n      var nodes = this.getAllNodes();\n      var node;\n\n      for (var i = 0; i < nodes.length; i++) {\n        node = nodes[i];\n        node.transform(trans);\n      }\n    }\n  }\n};\n\nLayout.prototype.positionNodesRandomly = function (graph) {\n\n  if (graph == undefined) {\n    //assert !this.incremental;\n    this.positionNodesRandomly(this.getGraphManager().getRoot());\n    this.getGraphManager().getRoot().updateBounds(true);\n  } else {\n    var lNode;\n    var childGraph;\n\n    var nodes = graph.getNodes();\n    for (var i = 0; i < nodes.length; i++) {\n      lNode = nodes[i];\n      childGraph = lNode.getChild();\n\n      if (childGraph == null) {\n        lNode.scatter();\n      } else if (childGraph.getNodes().length == 0) {\n        lNode.scatter();\n      } else {\n        this.positionNodesRandomly(childGraph);\n        lNode.updateBounds();\n      }\n    }\n  }\n};\n\n/**\r\n * This method returns a list of trees where each tree is represented as a\r\n * list of l-nodes. The method returns a list of size 0 when:\r\n * - The graph is not flat or\r\n * - One of the component(s) of the graph is not a tree.\r\n */\nLayout.prototype.getFlatForest = function () {\n  var flatForest = [];\n  var isForest = true;\n\n  // Quick reference for all nodes in the graph manager associated with\n  // this layout. The list should not be changed.\n  var allNodes = this.graphManager.getRoot().getNodes();\n\n  // First be sure that the graph is flat\n  var isFlat = true;\n\n  for (var i = 0; i < allNodes.length; i++) {\n    if (allNodes[i].getChild() != null) {\n      isFlat = false;\n    }\n  }\n\n  // Return empty forest if the graph is not flat.\n  if (!isFlat) {\n    return flatForest;\n  }\n\n  // Run BFS for each component of the graph.\n\n  var visited = new Set();\n  var toBeVisited = [];\n  var parents = new Map();\n  var unProcessedNodes = [];\n\n  unProcessedNodes = unProcessedNodes.concat(allNodes);\n\n  // Each iteration of this loop finds a component of the graph and\n  // decides whether it is a tree or not. If it is a tree, adds it to the\n  // forest and continued with the next component.\n\n  while (unProcessedNodes.length > 0 && isForest) {\n    toBeVisited.push(unProcessedNodes[0]);\n\n    // Start the BFS. Each iteration of this loop visits a node in a\n    // BFS manner.\n    while (toBeVisited.length > 0 && isForest) {\n      //pool operation\n      var currentNode = toBeVisited[0];\n      toBeVisited.splice(0, 1);\n      visited.add(currentNode);\n\n      // Traverse all neighbors of this node\n      var neighborEdges = currentNode.getEdges();\n\n      for (var i = 0; i < neighborEdges.length; i++) {\n        var currentNeighbor = neighborEdges[i].getOtherEnd(currentNode);\n\n        // If BFS is not growing from this neighbor.\n        if (parents.get(currentNode) != currentNeighbor) {\n          // We haven't previously visited this neighbor.\n          if (!visited.has(currentNeighbor)) {\n            toBeVisited.push(currentNeighbor);\n            parents.set(currentNeighbor, currentNode);\n          }\n          // Since we have previously visited this neighbor and\n          // this neighbor is not parent of currentNode, given\n          // graph contains a component that is not tree, hence\n          // it is not a forest.\n          else {\n              isForest = false;\n              break;\n            }\n        }\n      }\n    }\n\n    // The graph contains a component that is not a tree. Empty\n    // previously found trees. The method will end.\n    if (!isForest) {\n      flatForest = [];\n    }\n    // Save currently visited nodes as a tree in our forest. Reset\n    // visited and parents lists. Continue with the next component of\n    // the graph, if any.\n    else {\n        var temp = [].concat(_toConsumableArray(visited));\n        flatForest.push(temp);\n        //flatForest = flatForest.concat(temp);\n        //unProcessedNodes.removeAll(visited);\n        for (var i = 0; i < temp.length; i++) {\n          var value = temp[i];\n          var index = unProcessedNodes.indexOf(value);\n          if (index > -1) {\n            unProcessedNodes.splice(index, 1);\n          }\n        }\n        visited = new Set();\n        parents = new Map();\n      }\n  }\n\n  return flatForest;\n};\n\n/**\r\n * This method creates dummy nodes (an l-level node with minimal dimensions)\r\n * for the given edge (one per bendpoint). The existing l-level structure\r\n * is updated accordingly.\r\n */\nLayout.prototype.createDummyNodesForBendpoints = function (edge) {\n  var dummyNodes = [];\n  var prev = edge.source;\n\n  var graph = this.graphManager.calcLowestCommonAncestor(edge.source, edge.target);\n\n  for (var i = 0; i < edge.bendpoints.length; i++) {\n    // create new dummy node\n    var dummyNode = this.newNode(null);\n    dummyNode.setRect(new Point(0, 0), new Dimension(1, 1));\n\n    graph.add(dummyNode);\n\n    // create new dummy edge between prev and dummy node\n    var dummyEdge = this.newEdge(null);\n    this.graphManager.add(dummyEdge, prev, dummyNode);\n\n    dummyNodes.add(dummyNode);\n    prev = dummyNode;\n  }\n\n  var dummyEdge = this.newEdge(null);\n  this.graphManager.add(dummyEdge, prev, edge.target);\n\n  this.edgeToDummyNodes.set(edge, dummyNodes);\n\n  // remove real edge from graph manager if it is inter-graph\n  if (edge.isInterGraph()) {\n    this.graphManager.remove(edge);\n  }\n  // else, remove the edge from the current graph\n  else {\n      graph.remove(edge);\n    }\n\n  return dummyNodes;\n};\n\n/**\r\n * This method creates bendpoints for edges from the dummy nodes\r\n * at l-level.\r\n */\nLayout.prototype.createBendpointsFromDummyNodes = function () {\n  var edges = [];\n  edges = edges.concat(this.graphManager.getAllEdges());\n  edges = [].concat(_toConsumableArray(this.edgeToDummyNodes.keys())).concat(edges);\n\n  for (var k = 0; k < edges.length; k++) {\n    var lEdge = edges[k];\n\n    if (lEdge.bendpoints.length > 0) {\n      var path = this.edgeToDummyNodes.get(lEdge);\n\n      for (var i = 0; i < path.length; i++) {\n        var dummyNode = path[i];\n        var p = new PointD(dummyNode.getCenterX(), dummyNode.getCenterY());\n\n        // update bendpoint's location according to dummy node\n        var ebp = lEdge.bendpoints.get(i);\n        ebp.x = p.x;\n        ebp.y = p.y;\n\n        // remove the dummy node, dummy edges incident with this\n        // dummy node is also removed (within the remove method)\n        dummyNode.getOwner().remove(dummyNode);\n      }\n\n      // add the real edge to graph\n      this.graphManager.add(lEdge, lEdge.source, lEdge.target);\n    }\n  }\n};\n\nLayout.transform = function (sliderValue, defaultValue, minDiv, maxMul) {\n  if (minDiv != undefined && maxMul != undefined) {\n    var value = defaultValue;\n\n    if (sliderValue <= 50) {\n      var minValue = defaultValue / minDiv;\n      value -= (defaultValue - minValue) / 50 * (50 - sliderValue);\n    } else {\n      var maxValue = defaultValue * maxMul;\n      value += (maxValue - defaultValue) / 50 * (sliderValue - 50);\n    }\n\n    return value;\n  } else {\n    var a, b;\n\n    if (sliderValue <= 50) {\n      a = 9.0 * defaultValue / 500.0;\n      b = defaultValue / 10.0;\n    } else {\n      a = 9.0 * defaultValue / 50.0;\n      b = -8 * defaultValue;\n    }\n\n    return a * sliderValue + b;\n  }\n};\n\n/**\r\n * This method finds and returns the center of the given nodes, assuming\r\n * that the given nodes form a tree in themselves.\r\n */\nLayout.findCenterOfTree = function (nodes) {\n  var list = [];\n  list = list.concat(nodes);\n\n  var removedNodes = [];\n  var remainingDegrees = new Map();\n  var foundCenter = false;\n  var centerNode = null;\n\n  if (list.length == 1 || list.length == 2) {\n    foundCenter = true;\n    centerNode = list[0];\n  }\n\n  for (var i = 0; i < list.length; i++) {\n    var node = list[i];\n    var degree = node.getNeighborsList().size;\n    remainingDegrees.set(node, node.getNeighborsList().size);\n\n    if (degree == 1) {\n      removedNodes.push(node);\n    }\n  }\n\n  var tempList = [];\n  tempList = tempList.concat(removedNodes);\n\n  while (!foundCenter) {\n    var tempList2 = [];\n    tempList2 = tempList2.concat(tempList);\n    tempList = [];\n\n    for (var i = 0; i < list.length; i++) {\n      var node = list[i];\n\n      var index = list.indexOf(node);\n      if (index >= 0) {\n        list.splice(index, 1);\n      }\n\n      var neighbours = node.getNeighborsList();\n\n      neighbours.forEach(function (neighbour) {\n        if (removedNodes.indexOf(neighbour) < 0) {\n          var otherDegree = remainingDegrees.get(neighbour);\n          var newDegree = otherDegree - 1;\n\n          if (newDegree == 1) {\n            tempList.push(neighbour);\n          }\n\n          remainingDegrees.set(neighbour, newDegree);\n        }\n      });\n    }\n\n    removedNodes = removedNodes.concat(tempList);\n\n    if (list.length == 1 || list.length == 2) {\n      foundCenter = true;\n      centerNode = list[0];\n    }\n  }\n\n  return centerNode;\n};\n\n/**\r\n * During the coarsening process, this layout may be referenced by two graph managers\r\n * this setter function grants access to change the currently being used graph manager\r\n */\nLayout.prototype.setGraphManager = function (gm) {\n  this.graphManager = gm;\n};\n\nmodule.exports = Layout;\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction RandomSeed() {}\n// adapted from: https://stackoverflow.com/a/19303725\nRandomSeed.seed = 1;\nRandomSeed.x = 0;\n\nRandomSeed.nextDouble = function () {\n  RandomSeed.x = Math.sin(RandomSeed.seed++) * 10000;\n  return RandomSeed.x - Math.floor(RandomSeed.x);\n};\n\nmodule.exports = RandomSeed;\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar PointD = __webpack_require__(4);\n\nfunction Transform(x, y) {\n  this.lworldOrgX = 0.0;\n  this.lworldOrgY = 0.0;\n  this.ldeviceOrgX = 0.0;\n  this.ldeviceOrgY = 0.0;\n  this.lworldExtX = 1.0;\n  this.lworldExtY = 1.0;\n  this.ldeviceExtX = 1.0;\n  this.ldeviceExtY = 1.0;\n}\n\nTransform.prototype.getWorldOrgX = function () {\n  return this.lworldOrgX;\n};\n\nTransform.prototype.setWorldOrgX = function (wox) {\n  this.lworldOrgX = wox;\n};\n\nTransform.prototype.getWorldOrgY = function () {\n  return this.lworldOrgY;\n};\n\nTransform.prototype.setWorldOrgY = function (woy) {\n  this.lworldOrgY = woy;\n};\n\nTransform.prototype.getWorldExtX = function () {\n  return this.lworldExtX;\n};\n\nTransform.prototype.setWorldExtX = function (wex) {\n  this.lworldExtX = wex;\n};\n\nTransform.prototype.getWorldExtY = function () {\n  return this.lworldExtY;\n};\n\nTransform.prototype.setWorldExtY = function (wey) {\n  this.lworldExtY = wey;\n};\n\n/* Device related */\n\nTransform.prototype.getDeviceOrgX = function () {\n  return this.ldeviceOrgX;\n};\n\nTransform.prototype.setDeviceOrgX = function (dox) {\n  this.ldeviceOrgX = dox;\n};\n\nTransform.prototype.getDeviceOrgY = function () {\n  return this.ldeviceOrgY;\n};\n\nTransform.prototype.setDeviceOrgY = function (doy) {\n  this.ldeviceOrgY = doy;\n};\n\nTransform.prototype.getDeviceExtX = function () {\n  return this.ldeviceExtX;\n};\n\nTransform.prototype.setDeviceExtX = function (dex) {\n  this.ldeviceExtX = dex;\n};\n\nTransform.prototype.getDeviceExtY = function () {\n  return this.ldeviceExtY;\n};\n\nTransform.prototype.setDeviceExtY = function (dey) {\n  this.ldeviceExtY = dey;\n};\n\nTransform.prototype.transformX = function (x) {\n  var xDevice = 0.0;\n  var worldExtX = this.lworldExtX;\n  if (worldExtX != 0.0) {\n    xDevice = this.ldeviceOrgX + (x - this.lworldOrgX) * this.ldeviceExtX / worldExtX;\n  }\n\n  return xDevice;\n};\n\nTransform.prototype.transformY = function (y) {\n  var yDevice = 0.0;\n  var worldExtY = this.lworldExtY;\n  if (worldExtY != 0.0) {\n    yDevice = this.ldeviceOrgY + (y - this.lworldOrgY) * this.ldeviceExtY / worldExtY;\n  }\n\n  return yDevice;\n};\n\nTransform.prototype.inverseTransformX = function (x) {\n  var xWorld = 0.0;\n  var deviceExtX = this.ldeviceExtX;\n  if (deviceExtX != 0.0) {\n    xWorld = this.lworldOrgX + (x - this.ldeviceOrgX) * this.lworldExtX / deviceExtX;\n  }\n\n  return xWorld;\n};\n\nTransform.prototype.inverseTransformY = function (y) {\n  var yWorld = 0.0;\n  var deviceExtY = this.ldeviceExtY;\n  if (deviceExtY != 0.0) {\n    yWorld = this.lworldOrgY + (y - this.ldeviceOrgY) * this.lworldExtY / deviceExtY;\n  }\n  return yWorld;\n};\n\nTransform.prototype.inverseTransformPoint = function (inPoint) {\n  var outPoint = new PointD(this.inverseTransformX(inPoint.x), this.inverseTransformY(inPoint.y));\n  return outPoint;\n};\n\nmodule.exports = Transform;\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nvar Layout = __webpack_require__(15);\nvar FDLayoutConstants = __webpack_require__(7);\nvar LayoutConstants = __webpack_require__(0);\nvar IGeometry = __webpack_require__(8);\nvar IMath = __webpack_require__(9);\n\nfunction FDLayout() {\n  Layout.call(this);\n\n  this.useSmartIdealEdgeLengthCalculation = FDLayoutConstants.DEFAULT_USE_SMART_IDEAL_EDGE_LENGTH_CALCULATION;\n  this.idealEdgeLength = FDLayoutConstants.DEFAULT_EDGE_LENGTH;\n  this.springConstant = FDLayoutConstants.DEFAULT_SPRING_STRENGTH;\n  this.repulsionConstant = FDLayoutConstants.DEFAULT_REPULSION_STRENGTH;\n  this.gravityConstant = FDLayoutConstants.DEFAULT_GRAVITY_STRENGTH;\n  this.compoundGravityConstant = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_STRENGTH;\n  this.gravityRangeFactor = FDLayoutConstants.DEFAULT_GRAVITY_RANGE_FACTOR;\n  this.compoundGravityRangeFactor = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_RANGE_FACTOR;\n  this.displacementThresholdPerNode = 3.0 * FDLayoutConstants.DEFAULT_EDGE_LENGTH / 100;\n  this.coolingFactor = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL;\n  this.initialCoolingFactor = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL;\n  this.totalDisplacement = 0.0;\n  this.oldTotalDisplacement = 0.0;\n  this.maxIterations = FDLayoutConstants.MAX_ITERATIONS;\n}\n\nFDLayout.prototype = Object.create(Layout.prototype);\n\nfor (var prop in Layout) {\n  FDLayout[prop] = Layout[prop];\n}\n\nFDLayout.prototype.initParameters = function () {\n  Layout.prototype.initParameters.call(this, arguments);\n\n  this.totalIterations = 0;\n  this.notAnimatedIterations = 0;\n\n  this.useFRGridVariant = FDLayoutConstants.DEFAULT_USE_SMART_REPULSION_RANGE_CALCULATION;\n\n  this.grid = [];\n};\n\nFDLayout.prototype.calcIdealEdgeLengths = function () {\n  var edge;\n  var lcaDepth;\n  var source;\n  var target;\n  var sizeOfSourceInLca;\n  var sizeOfTargetInLca;\n\n  var allEdges = this.getGraphManager().getAllEdges();\n  for (var i = 0; i < allEdges.length; i++) {\n    edge = allEdges[i];\n\n    edge.idealLength = this.idealEdgeLength;\n\n    if (edge.isInterGraph) {\n      source = edge.getSource();\n      target = edge.getTarget();\n\n      sizeOfSourceInLca = edge.getSourceInLca().getEstimatedSize();\n      sizeOfTargetInLca = edge.getTargetInLca().getEstimatedSize();\n\n      if (this.useSmartIdealEdgeLengthCalculation) {\n        edge.idealLength += sizeOfSourceInLca + sizeOfTargetInLca - 2 * LayoutConstants.SIMPLE_NODE_SIZE;\n      }\n\n      lcaDepth = edge.getLca().getInclusionTreeDepth();\n\n      edge.idealLength += FDLayoutConstants.DEFAULT_EDGE_LENGTH * FDLayoutConstants.PER_LEVEL_IDEAL_EDGE_LENGTH_FACTOR * (source.getInclusionTreeDepth() + target.getInclusionTreeDepth() - 2 * lcaDepth);\n    }\n  }\n};\n\nFDLayout.prototype.initSpringEmbedder = function () {\n\n  var s = this.getAllNodes().length;\n  if (this.incremental) {\n    if (s > FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) {\n      this.coolingFactor = Math.max(this.coolingFactor * FDLayoutConstants.COOLING_ADAPTATION_FACTOR, this.coolingFactor - (s - FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) / (FDLayoutConstants.ADAPTATION_UPPER_NODE_LIMIT - FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) * this.coolingFactor * (1 - FDLayoutConstants.COOLING_ADAPTATION_FACTOR));\n    }\n    this.maxNodeDisplacement = FDLayoutConstants.MAX_NODE_DISPLACEMENT_INCREMENTAL;\n  } else {\n    if (s > FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) {\n      this.coolingFactor = Math.max(FDLayoutConstants.COOLING_ADAPTATION_FACTOR, 1.0 - (s - FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) / (FDLayoutConstants.ADAPTATION_UPPER_NODE_LIMIT - FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) * (1 - FDLayoutConstants.COOLING_ADAPTATION_FACTOR));\n    } else {\n      this.coolingFactor = 1.0;\n    }\n    this.initialCoolingFactor = this.coolingFactor;\n    this.maxNodeDisplacement = FDLayoutConstants.MAX_NODE_DISPLACEMENT;\n  }\n\n  this.maxIterations = Math.max(this.getAllNodes().length * 5, this.maxIterations);\n\n  this.totalDisplacementThreshold = this.displacementThresholdPerNode * this.getAllNodes().length;\n\n  this.repulsionRange = this.calcRepulsionRange();\n};\n\nFDLayout.prototype.calcSpringForces = function () {\n  var lEdges = this.getAllEdges();\n  var edge;\n\n  for (var i = 0; i < lEdges.length; i++) {\n    edge = lEdges[i];\n\n    this.calcSpringForce(edge, edge.idealLength);\n  }\n};\n\nFDLayout.prototype.calcRepulsionForces = function () {\n  var gridUpdateAllowed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  var forceToNodeSurroundingUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var i, j;\n  var nodeA, nodeB;\n  var lNodes = this.getAllNodes();\n  var processedNodeSet;\n\n  if (this.useFRGridVariant) {\n    if (this.totalIterations % FDLayoutConstants.GRID_CALCULATION_CHECK_PERIOD == 1 && gridUpdateAllowed) {\n      this.updateGrid();\n    }\n\n    processedNodeSet = new Set();\n\n    // calculate repulsion forces between each nodes and its surrounding\n    for (i = 0; i < lNodes.length; i++) {\n      nodeA = lNodes[i];\n      this.calculateRepulsionForceOfANode(nodeA, processedNodeSet, gridUpdateAllowed, forceToNodeSurroundingUpdate);\n      processedNodeSet.add(nodeA);\n    }\n  } else {\n    for (i = 0; i < lNodes.length; i++) {\n      nodeA = lNodes[i];\n\n      for (j = i + 1; j < lNodes.length; j++) {\n        nodeB = lNodes[j];\n\n        // If both nodes are not members of the same graph, skip.\n        if (nodeA.getOwner() != nodeB.getOwner()) {\n          continue;\n        }\n\n        this.calcRepulsionForce(nodeA, nodeB);\n      }\n    }\n  }\n};\n\nFDLayout.prototype.calcGravitationalForces = function () {\n  var node;\n  var lNodes = this.getAllNodesToApplyGravitation();\n\n  for (var i = 0; i < lNodes.length; i++) {\n    node = lNodes[i];\n    this.calcGravitationalForce(node);\n  }\n};\n\nFDLayout.prototype.moveNodes = function () {\n  var lNodes = this.getAllNodes();\n  var node;\n\n  for (var i = 0; i < lNodes.length; i++) {\n    node = lNodes[i];\n    node.move();\n  }\n};\n\nFDLayout.prototype.calcSpringForce = function (edge, idealLength) {\n  var sourceNode = edge.getSource();\n  var targetNode = edge.getTarget();\n\n  var length;\n  var springForce;\n  var springForceX;\n  var springForceY;\n\n  // Update edge length\n  if (this.uniformLeafNodeSizes && sourceNode.getChild() == null && targetNode.getChild() == null) {\n    edge.updateLengthSimple();\n  } else {\n    edge.updateLength();\n\n    if (edge.isOverlapingSourceAndTarget) {\n      return;\n    }\n  }\n\n  length = edge.getLength();\n\n  if (length == 0) return;\n\n  // Calculate spring forces\n  springForce = this.springConstant * (length - idealLength);\n\n  // Project force onto x and y axes\n  springForceX = springForce * (edge.lengthX / length);\n  springForceY = springForce * (edge.lengthY / length);\n\n  // Apply forces on the end nodes\n  sourceNode.springForceX += springForceX;\n  sourceNode.springForceY += springForceY;\n  targetNode.springForceX -= springForceX;\n  targetNode.springForceY -= springForceY;\n};\n\nFDLayout.prototype.calcRepulsionForce = function (nodeA, nodeB) {\n  var rectA = nodeA.getRect();\n  var rectB = nodeB.getRect();\n  var overlapAmount = new Array(2);\n  var clipPoints = new Array(4);\n  var distanceX;\n  var distanceY;\n  var distanceSquared;\n  var distance;\n  var repulsionForce;\n  var repulsionForceX;\n  var repulsionForceY;\n\n  if (rectA.intersects(rectB)) // two nodes overlap\n    {\n      // calculate separation amount in x and y directions\n      IGeometry.calcSeparationAmount(rectA, rectB, overlapAmount, FDLayoutConstants.DEFAULT_EDGE_LENGTH / 2.0);\n\n      repulsionForceX = 2 * overlapAmount[0];\n      repulsionForceY = 2 * overlapAmount[1];\n\n      var childrenConstant = nodeA.noOfChildren * nodeB.noOfChildren / (nodeA.noOfChildren + nodeB.noOfChildren);\n\n      // Apply forces on the two nodes\n      nodeA.repulsionForceX -= childrenConstant * repulsionForceX;\n      nodeA.repulsionForceY -= childrenConstant * repulsionForceY;\n      nodeB.repulsionForceX += childrenConstant * repulsionForceX;\n      nodeB.repulsionForceY += childrenConstant * repulsionForceY;\n    } else // no overlap\n    {\n      // calculate distance\n\n      if (this.uniformLeafNodeSizes && nodeA.getChild() == null && nodeB.getChild() == null) // simply base repulsion on distance of node centers\n        {\n          distanceX = rectB.getCenterX() - rectA.getCenterX();\n          distanceY = rectB.getCenterY() - rectA.getCenterY();\n        } else // use clipping points\n        {\n          IGeometry.getIntersection(rectA, rectB, clipPoints);\n\n          distanceX = clipPoints[2] - clipPoints[0];\n          distanceY = clipPoints[3] - clipPoints[1];\n        }\n\n      // No repulsion range. FR grid variant should take care of this.\n      if (Math.abs(distanceX) < FDLayoutConstants.MIN_REPULSION_DIST) {\n        distanceX = IMath.sign(distanceX) * FDLayoutConstants.MIN_REPULSION_DIST;\n      }\n\n      if (Math.abs(distanceY) < FDLayoutConstants.MIN_REPULSION_DIST) {\n        distanceY = IMath.sign(distanceY) * FDLayoutConstants.MIN_REPULSION_DIST;\n      }\n\n      distanceSquared = distanceX * distanceX + distanceY * distanceY;\n      distance = Math.sqrt(distanceSquared);\n\n      repulsionForce = this.repulsionConstant * nodeA.noOfChildren * nodeB.noOfChildren / distanceSquared;\n\n      // Project force onto x and y axes\n      repulsionForceX = repulsionForce * distanceX / distance;\n      repulsionForceY = repulsionForce * distanceY / distance;\n\n      // Apply forces on the two nodes    \n      nodeA.repulsionForceX -= repulsionForceX;\n      nodeA.repulsionForceY -= repulsionForceY;\n      nodeB.repulsionForceX += repulsionForceX;\n      nodeB.repulsionForceY += repulsionForceY;\n    }\n};\n\nFDLayout.prototype.calcGravitationalForce = function (node) {\n  var ownerGraph;\n  var ownerCenterX;\n  var ownerCenterY;\n  var distanceX;\n  var distanceY;\n  var absDistanceX;\n  var absDistanceY;\n  var estimatedSize;\n  ownerGraph = node.getOwner();\n\n  ownerCenterX = (ownerGraph.getRight() + ownerGraph.getLeft()) / 2;\n  ownerCenterY = (ownerGraph.getTop() + ownerGraph.getBottom()) / 2;\n  distanceX = node.getCenterX() - ownerCenterX;\n  distanceY = node.getCenterY() - ownerCenterY;\n  absDistanceX = Math.abs(distanceX) + node.getWidth() / 2;\n  absDistanceY = Math.abs(distanceY) + node.getHeight() / 2;\n\n  if (node.getOwner() == this.graphManager.getRoot()) // in the root graph\n    {\n      estimatedSize = ownerGraph.getEstimatedSize() * this.gravityRangeFactor;\n\n      if (absDistanceX > estimatedSize || absDistanceY > estimatedSize) {\n        node.gravitationForceX = -this.gravityConstant * distanceX;\n        node.gravitationForceY = -this.gravityConstant * distanceY;\n      }\n    } else // inside a compound\n    {\n      estimatedSize = ownerGraph.getEstimatedSize() * this.compoundGravityRangeFactor;\n\n      if (absDistanceX > estimatedSize || absDistanceY > estimatedSize) {\n        node.gravitationForceX = -this.gravityConstant * distanceX * this.compoundGravityConstant;\n        node.gravitationForceY = -this.gravityConstant * distanceY * this.compoundGravityConstant;\n      }\n    }\n};\n\nFDLayout.prototype.isConverged = function () {\n  var converged;\n  var oscilating = false;\n\n  if (this.totalIterations > this.maxIterations / 3) {\n    oscilating = Math.abs(this.totalDisplacement - this.oldTotalDisplacement) < 2;\n  }\n\n  converged = this.totalDisplacement < this.totalDisplacementThreshold;\n\n  this.oldTotalDisplacement = this.totalDisplacement;\n\n  return converged || oscilating;\n};\n\nFDLayout.prototype.animate = function () {\n  if (this.animationDuringLayout && !this.isSubLayout) {\n    if (this.notAnimatedIterations == this.animationPeriod) {\n      this.update();\n      this.notAnimatedIterations = 0;\n    } else {\n      this.notAnimatedIterations++;\n    }\n  }\n};\n\n//This method calculates the number of children (weight) for all nodes\nFDLayout.prototype.calcNoOfChildrenForAllNodes = function () {\n  var node;\n  var allNodes = this.graphManager.getAllNodes();\n\n  for (var i = 0; i < allNodes.length; i++) {\n    node = allNodes[i];\n    node.noOfChildren = node.getNoOfChildren();\n  }\n};\n\n// -----------------------------------------------------------------------------\n// Section: FR-Grid Variant Repulsion Force Calculation\n// -----------------------------------------------------------------------------\n\nFDLayout.prototype.calcGrid = function (graph) {\n\n  var sizeX = 0;\n  var sizeY = 0;\n\n  sizeX = parseInt(Math.ceil((graph.getRight() - graph.getLeft()) / this.repulsionRange));\n  sizeY = parseInt(Math.ceil((graph.getBottom() - graph.getTop()) / this.repulsionRange));\n\n  var grid = new Array(sizeX);\n\n  for (var i = 0; i < sizeX; i++) {\n    grid[i] = new Array(sizeY);\n  }\n\n  for (var i = 0; i < sizeX; i++) {\n    for (var j = 0; j < sizeY; j++) {\n      grid[i][j] = new Array();\n    }\n  }\n\n  return grid;\n};\n\nFDLayout.prototype.addNodeToGrid = function (v, left, top) {\n\n  var startX = 0;\n  var finishX = 0;\n  var startY = 0;\n  var finishY = 0;\n\n  startX = parseInt(Math.floor((v.getRect().x - left) / this.repulsionRange));\n  finishX = parseInt(Math.floor((v.getRect().width + v.getRect().x - left) / this.repulsionRange));\n  startY = parseInt(Math.floor((v.getRect().y - top) / this.repulsionRange));\n  finishY = parseInt(Math.floor((v.getRect().height + v.getRect().y - top) / this.repulsionRange));\n\n  for (var i = startX; i <= finishX; i++) {\n    for (var j = startY; j <= finishY; j++) {\n      this.grid[i][j].push(v);\n      v.setGridCoordinates(startX, finishX, startY, finishY);\n    }\n  }\n};\n\nFDLayout.prototype.updateGrid = function () {\n  var i;\n  var nodeA;\n  var lNodes = this.getAllNodes();\n\n  this.grid = this.calcGrid(this.graphManager.getRoot());\n\n  // put all nodes to proper grid cells\n  for (i = 0; i < lNodes.length; i++) {\n    nodeA = lNodes[i];\n    this.addNodeToGrid(nodeA, this.graphManager.getRoot().getLeft(), this.graphManager.getRoot().getTop());\n  }\n};\n\nFDLayout.prototype.calculateRepulsionForceOfANode = function (nodeA, processedNodeSet, gridUpdateAllowed, forceToNodeSurroundingUpdate) {\n\n  if (this.totalIterations % FDLayoutConstants.GRID_CALCULATION_CHECK_PERIOD == 1 && gridUpdateAllowed || forceToNodeSurroundingUpdate) {\n    var surrounding = new Set();\n    nodeA.surrounding = new Array();\n    var nodeB;\n    var grid = this.grid;\n\n    for (var i = nodeA.startX - 1; i < nodeA.finishX + 2; i++) {\n      for (var j = nodeA.startY - 1; j < nodeA.finishY + 2; j++) {\n        if (!(i < 0 || j < 0 || i >= grid.length || j >= grid[0].length)) {\n          for (var k = 0; k < grid[i][j].length; k++) {\n            nodeB = grid[i][j][k];\n\n            // If both nodes are not members of the same graph, \n            // or both nodes are the same, skip.\n            if (nodeA.getOwner() != nodeB.getOwner() || nodeA == nodeB) {\n              continue;\n            }\n\n            // check if the repulsion force between\n            // nodeA and nodeB has already been calculated\n            if (!processedNodeSet.has(nodeB) && !surrounding.has(nodeB)) {\n              var distanceX = Math.abs(nodeA.getCenterX() - nodeB.getCenterX()) - (nodeA.getWidth() / 2 + nodeB.getWidth() / 2);\n              var distanceY = Math.abs(nodeA.getCenterY() - nodeB.getCenterY()) - (nodeA.getHeight() / 2 + nodeB.getHeight() / 2);\n\n              // if the distance between nodeA and nodeB \n              // is less then calculation range\n              if (distanceX <= this.repulsionRange && distanceY <= this.repulsionRange) {\n                //then add nodeB to surrounding of nodeA\n                surrounding.add(nodeB);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    nodeA.surrounding = [].concat(_toConsumableArray(surrounding));\n  }\n  for (i = 0; i < nodeA.surrounding.length; i++) {\n    this.calcRepulsionForce(nodeA, nodeA.surrounding[i]);\n  }\n};\n\nFDLayout.prototype.calcRepulsionRange = function () {\n  return 0.0;\n};\n\nmodule.exports = FDLayout;\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar LEdge = __webpack_require__(1);\nvar FDLayoutConstants = __webpack_require__(7);\n\nfunction FDLayoutEdge(source, target, vEdge) {\n  LEdge.call(this, source, target, vEdge);\n  this.idealLength = FDLayoutConstants.DEFAULT_EDGE_LENGTH;\n}\n\nFDLayoutEdge.prototype = Object.create(LEdge.prototype);\n\nfor (var prop in LEdge) {\n  FDLayoutEdge[prop] = LEdge[prop];\n}\n\nmodule.exports = FDLayoutEdge;\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar LNode = __webpack_require__(3);\n\nfunction FDLayoutNode(gm, loc, size, vNode) {\n  // alternative constructor is handled inside LNode\n  LNode.call(this, gm, loc, size, vNode);\n  //Spring, repulsion and gravitational forces acting on this node\n  this.springForceX = 0;\n  this.springForceY = 0;\n  this.repulsionForceX = 0;\n  this.repulsionForceY = 0;\n  this.gravitationForceX = 0;\n  this.gravitationForceY = 0;\n  //Amount by which this node is to be moved in this iteration\n  this.displacementX = 0;\n  this.displacementY = 0;\n\n  //Start and finish grid coordinates that this node is fallen into\n  this.startX = 0;\n  this.finishX = 0;\n  this.startY = 0;\n  this.finishY = 0;\n\n  //Geometric neighbors of this node\n  this.surrounding = [];\n}\n\nFDLayoutNode.prototype = Object.create(LNode.prototype);\n\nfor (var prop in LNode) {\n  FDLayoutNode[prop] = LNode[prop];\n}\n\nFDLayoutNode.prototype.setGridCoordinates = function (_startX, _finishX, _startY, _finishY) {\n  this.startX = _startX;\n  this.finishX = _finishX;\n  this.startY = _startY;\n  this.finishY = _finishY;\n};\n\nmodule.exports = FDLayoutNode;\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction DimensionD(width, height) {\n  this.width = 0;\n  this.height = 0;\n  if (width !== null && height !== null) {\n    this.height = height;\n    this.width = width;\n  }\n}\n\nDimensionD.prototype.getWidth = function () {\n  return this.width;\n};\n\nDimensionD.prototype.setWidth = function (width) {\n  this.width = width;\n};\n\nDimensionD.prototype.getHeight = function () {\n  return this.height;\n};\n\nDimensionD.prototype.setHeight = function (height) {\n  this.height = height;\n};\n\nmodule.exports = DimensionD;\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar UniqueIDGeneretor = __webpack_require__(14);\n\nfunction HashMap() {\n  this.map = {};\n  this.keys = [];\n}\n\nHashMap.prototype.put = function (key, value) {\n  var theId = UniqueIDGeneretor.createID(key);\n  if (!this.contains(theId)) {\n    this.map[theId] = value;\n    this.keys.push(key);\n  }\n};\n\nHashMap.prototype.contains = function (key) {\n  var theId = UniqueIDGeneretor.createID(key);\n  return this.map[key] != null;\n};\n\nHashMap.prototype.get = function (key) {\n  var theId = UniqueIDGeneretor.createID(key);\n  return this.map[theId];\n};\n\nHashMap.prototype.keySet = function () {\n  return this.keys;\n};\n\nmodule.exports = HashMap;\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar UniqueIDGeneretor = __webpack_require__(14);\n\nfunction HashSet() {\n  this.set = {};\n}\n;\n\nHashSet.prototype.add = function (obj) {\n  var theId = UniqueIDGeneretor.createID(obj);\n  if (!this.contains(theId)) this.set[theId] = obj;\n};\n\nHashSet.prototype.remove = function (obj) {\n  delete this.set[UniqueIDGeneretor.createID(obj)];\n};\n\nHashSet.prototype.clear = function () {\n  this.set = {};\n};\n\nHashSet.prototype.contains = function (obj) {\n  return this.set[UniqueIDGeneretor.createID(obj)] == obj;\n};\n\nHashSet.prototype.isEmpty = function () {\n  return this.size() === 0;\n};\n\nHashSet.prototype.size = function () {\n  return Object.keys(this.set).length;\n};\n\n//concats this.set to the given list\nHashSet.prototype.addAllTo = function (list) {\n  var keys = Object.keys(this.set);\n  var length = keys.length;\n  for (var i = 0; i < length; i++) {\n    list.push(this.set[keys[i]]);\n  }\n};\n\nHashSet.prototype.size = function () {\n  return Object.keys(this.set).length;\n};\n\nHashSet.prototype.addAll = function (list) {\n  var s = list.length;\n  for (var i = 0; i < s; i++) {\n    var v = list[i];\n    this.add(v);\n  }\n};\n\nmodule.exports = HashSet;\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * A classic Quicksort algorithm with Hoare's partition\n * - Works also on LinkedList objects\n *\n * Copyright: i-Vis Research Group, Bilkent University, 2007 - present\n */\n\nvar LinkedList = __webpack_require__(11);\n\nvar Quicksort = function () {\n    function Quicksort(A, compareFunction) {\n        _classCallCheck(this, Quicksort);\n\n        if (compareFunction !== null || compareFunction !== undefined) this.compareFunction = this._defaultCompareFunction;\n\n        var length = void 0;\n        if (A instanceof LinkedList) length = A.size();else length = A.length;\n\n        this._quicksort(A, 0, length - 1);\n    }\n\n    _createClass(Quicksort, [{\n        key: '_quicksort',\n        value: function _quicksort(A, p, r) {\n            if (p < r) {\n                var q = this._partition(A, p, r);\n                this._quicksort(A, p, q);\n                this._quicksort(A, q + 1, r);\n            }\n        }\n    }, {\n        key: '_partition',\n        value: function _partition(A, p, r) {\n            var x = this._get(A, p);\n            var i = p;\n            var j = r;\n            while (true) {\n                while (this.compareFunction(x, this._get(A, j))) {\n                    j--;\n                }while (this.compareFunction(this._get(A, i), x)) {\n                    i++;\n                }if (i < j) {\n                    this._swap(A, i, j);\n                    i++;\n                    j--;\n                } else return j;\n            }\n        }\n    }, {\n        key: '_get',\n        value: function _get(object, index) {\n            if (object instanceof LinkedList) return object.get_object_at(index);else return object[index];\n        }\n    }, {\n        key: '_set',\n        value: function _set(object, index, value) {\n            if (object instanceof LinkedList) object.set_object_at(index, value);else object[index] = value;\n        }\n    }, {\n        key: '_swap',\n        value: function _swap(A, i, j) {\n            var temp = this._get(A, i);\n            this._set(A, i, this._get(A, j));\n            this._set(A, j, temp);\n        }\n    }, {\n        key: '_defaultCompareFunction',\n        value: function _defaultCompareFunction(a, b) {\n            return b > a;\n        }\n    }]);\n\n    return Quicksort;\n}();\n\nmodule.exports = Quicksort;\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n *   Needleman-Wunsch algorithm is an procedure to compute the optimal global alignment of two string\n *   sequences by S.B.Needleman and C.D.Wunsch (1970).\n *\n *   Aside from the inputs, you can assign the scores for,\n *   - Match: The two characters at the current index are same.\n *   - Mismatch: The two characters at the current index are different.\n *   - Insertion/Deletion(gaps): The best alignment involves one letter aligning to a gap in the other string.\n */\n\nvar NeedlemanWunsch = function () {\n    function NeedlemanWunsch(sequence1, sequence2) {\n        var match_score = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n        var mismatch_penalty = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;\n        var gap_penalty = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : -1;\n\n        _classCallCheck(this, NeedlemanWunsch);\n\n        this.sequence1 = sequence1;\n        this.sequence2 = sequence2;\n        this.match_score = match_score;\n        this.mismatch_penalty = mismatch_penalty;\n        this.gap_penalty = gap_penalty;\n\n        // Just the remove redundancy\n        this.iMax = sequence1.length + 1;\n        this.jMax = sequence2.length + 1;\n\n        // Grid matrix of scores\n        this.grid = new Array(this.iMax);\n        for (var i = 0; i < this.iMax; i++) {\n            this.grid[i] = new Array(this.jMax);\n\n            for (var j = 0; j < this.jMax; j++) {\n                this.grid[i][j] = 0;\n            }\n        }\n\n        // Traceback matrix (2D array, each cell is an array of boolean values for [`Diag`, `Up`, `Left`] positions)\n        this.tracebackGrid = new Array(this.iMax);\n        for (var _i = 0; _i < this.iMax; _i++) {\n            this.tracebackGrid[_i] = new Array(this.jMax);\n\n            for (var _j = 0; _j < this.jMax; _j++) {\n                this.tracebackGrid[_i][_j] = [null, null, null];\n            }\n        }\n\n        // The aligned sequences (return multiple possibilities)\n        this.alignments = [];\n\n        // Final alignment score\n        this.score = -1;\n\n        // Calculate scores and tracebacks\n        this.computeGrids();\n    }\n\n    _createClass(NeedlemanWunsch, [{\n        key: \"getScore\",\n        value: function getScore() {\n            return this.score;\n        }\n    }, {\n        key: \"getAlignments\",\n        value: function getAlignments() {\n            return this.alignments;\n        }\n\n        // Main dynamic programming procedure\n\n    }, {\n        key: \"computeGrids\",\n        value: function computeGrids() {\n            // Fill in the first row\n            for (var j = 1; j < this.jMax; j++) {\n                this.grid[0][j] = this.grid[0][j - 1] + this.gap_penalty;\n                this.tracebackGrid[0][j] = [false, false, true];\n            }\n\n            // Fill in the first column\n            for (var i = 1; i < this.iMax; i++) {\n                this.grid[i][0] = this.grid[i - 1][0] + this.gap_penalty;\n                this.tracebackGrid[i][0] = [false, true, false];\n            }\n\n            // Fill the rest of the grid\n            for (var _i2 = 1; _i2 < this.iMax; _i2++) {\n                for (var _j2 = 1; _j2 < this.jMax; _j2++) {\n                    // Find the max score(s) among [`Diag`, `Up`, `Left`]\n                    var diag = void 0;\n                    if (this.sequence1[_i2 - 1] === this.sequence2[_j2 - 1]) diag = this.grid[_i2 - 1][_j2 - 1] + this.match_score;else diag = this.grid[_i2 - 1][_j2 - 1] + this.mismatch_penalty;\n\n                    var up = this.grid[_i2 - 1][_j2] + this.gap_penalty;\n                    var left = this.grid[_i2][_j2 - 1] + this.gap_penalty;\n\n                    // If there exists multiple max values, capture them for multiple paths\n                    var maxOf = [diag, up, left];\n                    var indices = this.arrayAllMaxIndexes(maxOf);\n\n                    // Update Grids\n                    this.grid[_i2][_j2] = maxOf[indices[0]];\n                    this.tracebackGrid[_i2][_j2] = [indices.includes(0), indices.includes(1), indices.includes(2)];\n                }\n            }\n\n            // Update alignment score\n            this.score = this.grid[this.iMax - 1][this.jMax - 1];\n        }\n\n        // Gets all possible valid sequence combinations\n\n    }, {\n        key: \"alignmentTraceback\",\n        value: function alignmentTraceback() {\n            var inProcessAlignments = [];\n\n            inProcessAlignments.push({ pos: [this.sequence1.length, this.sequence2.length],\n                seq1: \"\",\n                seq2: \"\"\n            });\n\n            while (inProcessAlignments[0]) {\n                var current = inProcessAlignments[0];\n                var directions = this.tracebackGrid[current.pos[0]][current.pos[1]];\n\n                if (directions[0]) {\n                    inProcessAlignments.push({ pos: [current.pos[0] - 1, current.pos[1] - 1],\n                        seq1: this.sequence1[current.pos[0] - 1] + current.seq1,\n                        seq2: this.sequence2[current.pos[1] - 1] + current.seq2\n                    });\n                }\n                if (directions[1]) {\n                    inProcessAlignments.push({ pos: [current.pos[0] - 1, current.pos[1]],\n                        seq1: this.sequence1[current.pos[0] - 1] + current.seq1,\n                        seq2: '-' + current.seq2\n                    });\n                }\n                if (directions[2]) {\n                    inProcessAlignments.push({ pos: [current.pos[0], current.pos[1] - 1],\n                        seq1: '-' + current.seq1,\n                        seq2: this.sequence2[current.pos[1] - 1] + current.seq2\n                    });\n                }\n\n                if (current.pos[0] === 0 && current.pos[1] === 0) this.alignments.push({ sequence1: current.seq1,\n                    sequence2: current.seq2\n                });\n\n                inProcessAlignments.shift();\n            }\n\n            return this.alignments;\n        }\n\n        // Helper Functions\n\n    }, {\n        key: \"getAllIndexes\",\n        value: function getAllIndexes(arr, val) {\n            var indexes = [],\n                i = -1;\n            while ((i = arr.indexOf(val, i + 1)) !== -1) {\n                indexes.push(i);\n            }\n            return indexes;\n        }\n    }, {\n        key: \"arrayAllMaxIndexes\",\n        value: function arrayAllMaxIndexes(array) {\n            return this.getAllIndexes(array, Math.max.apply(null, array));\n        }\n    }]);\n\n    return NeedlemanWunsch;\n}();\n\nmodule.exports = NeedlemanWunsch;\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar layoutBase = function layoutBase() {\n  return;\n};\n\nlayoutBase.FDLayout = __webpack_require__(18);\nlayoutBase.FDLayoutConstants = __webpack_require__(7);\nlayoutBase.FDLayoutEdge = __webpack_require__(19);\nlayoutBase.FDLayoutNode = __webpack_require__(20);\nlayoutBase.DimensionD = __webpack_require__(21);\nlayoutBase.HashMap = __webpack_require__(22);\nlayoutBase.HashSet = __webpack_require__(23);\nlayoutBase.IGeometry = __webpack_require__(8);\nlayoutBase.IMath = __webpack_require__(9);\nlayoutBase.Integer = __webpack_require__(10);\nlayoutBase.Point = __webpack_require__(12);\nlayoutBase.PointD = __webpack_require__(4);\nlayoutBase.RandomSeed = __webpack_require__(16);\nlayoutBase.RectangleD = __webpack_require__(13);\nlayoutBase.Transform = __webpack_require__(17);\nlayoutBase.UniqueIDGeneretor = __webpack_require__(14);\nlayoutBase.Quicksort = __webpack_require__(24);\nlayoutBase.LinkedList = __webpack_require__(11);\nlayoutBase.LGraphObject = __webpack_require__(2);\nlayoutBase.LGraph = __webpack_require__(5);\nlayoutBase.LEdge = __webpack_require__(1);\nlayoutBase.LGraphManager = __webpack_require__(6);\nlayoutBase.LNode = __webpack_require__(3);\nlayoutBase.Layout = __webpack_require__(15);\nlayoutBase.LayoutConstants = __webpack_require__(0);\nlayoutBase.NeedlemanWunsch = __webpack_require__(25);\n\nmodule.exports = layoutBase;\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction Emitter() {\n  this.listeners = [];\n}\n\nvar p = Emitter.prototype;\n\np.addListener = function (event, callback) {\n  this.listeners.push({\n    event: event,\n    callback: callback\n  });\n};\n\np.removeListener = function (event, callback) {\n  for (var i = this.listeners.length; i >= 0; i--) {\n    var l = this.listeners[i];\n\n    if (l.event === event && l.callback === callback) {\n      this.listeners.splice(i, 1);\n    }\n  }\n};\n\np.emit = function (event, data) {\n  for (var i = 0; i < this.listeners.length; i++) {\n    var l = this.listeners[i];\n\n    if (event === l.event) {\n      l.callback(data);\n    }\n  }\n};\n\nmodule.exports = Emitter;\n\n/***/ })\n/******/ ]);\n});","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"layout-base\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"layout-base\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"coseBase\"] = factory(require(\"layout-base\"));\n\telse\n\t\troot[\"coseBase\"] = factory(root[\"layoutBase\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_0__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 7);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_0__;\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar FDLayoutConstants = __webpack_require__(0).FDLayoutConstants;\n\nfunction CoSEConstants() {}\n\n//CoSEConstants inherits static props in FDLayoutConstants\nfor (var prop in FDLayoutConstants) {\n  CoSEConstants[prop] = FDLayoutConstants[prop];\n}\n\nCoSEConstants.DEFAULT_USE_MULTI_LEVEL_SCALING = false;\nCoSEConstants.DEFAULT_RADIAL_SEPARATION = FDLayoutConstants.DEFAULT_EDGE_LENGTH;\nCoSEConstants.DEFAULT_COMPONENT_SEPERATION = 60;\nCoSEConstants.TILE = true;\nCoSEConstants.TILING_PADDING_VERTICAL = 10;\nCoSEConstants.TILING_PADDING_HORIZONTAL = 10;\nCoSEConstants.TREE_REDUCTION_ON_INCREMENTAL = false; // make this true when cose is used incrementally as a part of other non-incremental layout\n\nmodule.exports = CoSEConstants;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar FDLayoutEdge = __webpack_require__(0).FDLayoutEdge;\n\nfunction CoSEEdge(source, target, vEdge) {\n  FDLayoutEdge.call(this, source, target, vEdge);\n}\n\nCoSEEdge.prototype = Object.create(FDLayoutEdge.prototype);\nfor (var prop in FDLayoutEdge) {\n  CoSEEdge[prop] = FDLayoutEdge[prop];\n}\n\nmodule.exports = CoSEEdge;\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar LGraph = __webpack_require__(0).LGraph;\n\nfunction CoSEGraph(parent, graphMgr, vGraph) {\n  LGraph.call(this, parent, graphMgr, vGraph);\n}\n\nCoSEGraph.prototype = Object.create(LGraph.prototype);\nfor (var prop in LGraph) {\n  CoSEGraph[prop] = LGraph[prop];\n}\n\nmodule.exports = CoSEGraph;\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar LGraphManager = __webpack_require__(0).LGraphManager;\n\nfunction CoSEGraphManager(layout) {\n  LGraphManager.call(this, layout);\n}\n\nCoSEGraphManager.prototype = Object.create(LGraphManager.prototype);\nfor (var prop in LGraphManager) {\n  CoSEGraphManager[prop] = LGraphManager[prop];\n}\n\nmodule.exports = CoSEGraphManager;\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar FDLayoutNode = __webpack_require__(0).FDLayoutNode;\nvar IMath = __webpack_require__(0).IMath;\n\nfunction CoSENode(gm, loc, size, vNode) {\n  FDLayoutNode.call(this, gm, loc, size, vNode);\n}\n\nCoSENode.prototype = Object.create(FDLayoutNode.prototype);\nfor (var prop in FDLayoutNode) {\n  CoSENode[prop] = FDLayoutNode[prop];\n}\n\nCoSENode.prototype.move = function () {\n  var layout = this.graphManager.getLayout();\n  this.displacementX = layout.coolingFactor * (this.springForceX + this.repulsionForceX + this.gravitationForceX) / this.noOfChildren;\n  this.displacementY = layout.coolingFactor * (this.springForceY + this.repulsionForceY + this.gravitationForceY) / this.noOfChildren;\n\n  if (Math.abs(this.displacementX) > layout.coolingFactor * layout.maxNodeDisplacement) {\n    this.displacementX = layout.coolingFactor * layout.maxNodeDisplacement * IMath.sign(this.displacementX);\n  }\n\n  if (Math.abs(this.displacementY) > layout.coolingFactor * layout.maxNodeDisplacement) {\n    this.displacementY = layout.coolingFactor * layout.maxNodeDisplacement * IMath.sign(this.displacementY);\n  }\n\n  // a simple node, just move it\n  if (this.child == null) {\n    this.moveBy(this.displacementX, this.displacementY);\n  }\n  // an empty compound node, again just move it\n  else if (this.child.getNodes().length == 0) {\n      this.moveBy(this.displacementX, this.displacementY);\n    }\n    // non-empty compound node, propogate movement to children as well\n    else {\n        this.propogateDisplacementToChildren(this.displacementX, this.displacementY);\n      }\n\n  layout.totalDisplacement += Math.abs(this.displacementX) + Math.abs(this.displacementY);\n\n  this.springForceX = 0;\n  this.springForceY = 0;\n  this.repulsionForceX = 0;\n  this.repulsionForceY = 0;\n  this.gravitationForceX = 0;\n  this.gravitationForceY = 0;\n  this.displacementX = 0;\n  this.displacementY = 0;\n};\n\nCoSENode.prototype.propogateDisplacementToChildren = function (dX, dY) {\n  var nodes = this.getChild().getNodes();\n  var node;\n  for (var i = 0; i < nodes.length; i++) {\n    node = nodes[i];\n    if (node.getChild() == null) {\n      node.moveBy(dX, dY);\n      node.displacementX += dX;\n      node.displacementY += dY;\n    } else {\n      node.propogateDisplacementToChildren(dX, dY);\n    }\n  }\n};\n\nCoSENode.prototype.setPred1 = function (pred1) {\n  this.pred1 = pred1;\n};\n\nCoSENode.prototype.getPred1 = function () {\n  return pred1;\n};\n\nCoSENode.prototype.getPred2 = function () {\n  return pred2;\n};\n\nCoSENode.prototype.setNext = function (next) {\n  this.next = next;\n};\n\nCoSENode.prototype.getNext = function () {\n  return next;\n};\n\nCoSENode.prototype.setProcessed = function (processed) {\n  this.processed = processed;\n};\n\nCoSENode.prototype.isProcessed = function () {\n  return processed;\n};\n\nmodule.exports = CoSENode;\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar FDLayout = __webpack_require__(0).FDLayout;\nvar CoSEGraphManager = __webpack_require__(4);\nvar CoSEGraph = __webpack_require__(3);\nvar CoSENode = __webpack_require__(5);\nvar CoSEEdge = __webpack_require__(2);\nvar CoSEConstants = __webpack_require__(1);\nvar FDLayoutConstants = __webpack_require__(0).FDLayoutConstants;\nvar LayoutConstants = __webpack_require__(0).LayoutConstants;\nvar Point = __webpack_require__(0).Point;\nvar PointD = __webpack_require__(0).PointD;\nvar Layout = __webpack_require__(0).Layout;\nvar Integer = __webpack_require__(0).Integer;\nvar IGeometry = __webpack_require__(0).IGeometry;\nvar LGraph = __webpack_require__(0).LGraph;\nvar Transform = __webpack_require__(0).Transform;\n\nfunction CoSELayout() {\n  FDLayout.call(this);\n\n  this.toBeTiled = {}; // Memorize if a node is to be tiled or is tiled\n}\n\nCoSELayout.prototype = Object.create(FDLayout.prototype);\n\nfor (var prop in FDLayout) {\n  CoSELayout[prop] = FDLayout[prop];\n}\n\nCoSELayout.prototype.newGraphManager = function () {\n  var gm = new CoSEGraphManager(this);\n  this.graphManager = gm;\n  return gm;\n};\n\nCoSELayout.prototype.newGraph = function (vGraph) {\n  return new CoSEGraph(null, this.graphManager, vGraph);\n};\n\nCoSELayout.prototype.newNode = function (vNode) {\n  return new CoSENode(this.graphManager, vNode);\n};\n\nCoSELayout.prototype.newEdge = function (vEdge) {\n  return new CoSEEdge(null, null, vEdge);\n};\n\nCoSELayout.prototype.initParameters = function () {\n  FDLayout.prototype.initParameters.call(this, arguments);\n  if (!this.isSubLayout) {\n    if (CoSEConstants.DEFAULT_EDGE_LENGTH < 10) {\n      this.idealEdgeLength = 10;\n    } else {\n      this.idealEdgeLength = CoSEConstants.DEFAULT_EDGE_LENGTH;\n    }\n\n    this.useSmartIdealEdgeLengthCalculation = CoSEConstants.DEFAULT_USE_SMART_IDEAL_EDGE_LENGTH_CALCULATION;\n    this.springConstant = FDLayoutConstants.DEFAULT_SPRING_STRENGTH;\n    this.repulsionConstant = FDLayoutConstants.DEFAULT_REPULSION_STRENGTH;\n    this.gravityConstant = FDLayoutConstants.DEFAULT_GRAVITY_STRENGTH;\n    this.compoundGravityConstant = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_STRENGTH;\n    this.gravityRangeFactor = FDLayoutConstants.DEFAULT_GRAVITY_RANGE_FACTOR;\n    this.compoundGravityRangeFactor = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_RANGE_FACTOR;\n\n    // variables for tree reduction support\n    this.prunedNodesAll = [];\n    this.growTreeIterations = 0;\n    this.afterGrowthIterations = 0;\n    this.isTreeGrowing = false;\n    this.isGrowthFinished = false;\n\n    // variables for cooling\n    this.coolingCycle = 0;\n    this.maxCoolingCycle = this.maxIterations / FDLayoutConstants.CONVERGENCE_CHECK_PERIOD;\n    this.finalTemperature = FDLayoutConstants.CONVERGENCE_CHECK_PERIOD / this.maxIterations;\n    this.coolingAdjuster = 1;\n  }\n};\n\nCoSELayout.prototype.layout = function () {\n  var createBendsAsNeeded = LayoutConstants.DEFAULT_CREATE_BENDS_AS_NEEDED;\n  if (createBendsAsNeeded) {\n    this.createBendpoints();\n    this.graphManager.resetAllEdges();\n  }\n\n  this.level = 0;\n  return this.classicLayout();\n};\n\nCoSELayout.prototype.classicLayout = function () {\n  this.nodesWithGravity = this.calculateNodesToApplyGravitationTo();\n  this.graphManager.setAllNodesToApplyGravitation(this.nodesWithGravity);\n  this.calcNoOfChildrenForAllNodes();\n  this.graphManager.calcLowestCommonAncestors();\n  this.graphManager.calcInclusionTreeDepths();\n  this.graphManager.getRoot().calcEstimatedSize();\n  this.calcIdealEdgeLengths();\n\n  if (!this.incremental) {\n    var forest = this.getFlatForest();\n\n    // The graph associated with this layout is flat and a forest\n    if (forest.length > 0) {\n      this.positionNodesRadially(forest);\n    }\n    // The graph associated with this layout is not flat or a forest\n    else {\n        // Reduce the trees when incremental mode is not enabled and graph is not a forest \n        this.reduceTrees();\n        // Update nodes that gravity will be applied\n        this.graphManager.resetAllNodesToApplyGravitation();\n        var allNodes = new Set(this.getAllNodes());\n        var intersection = this.nodesWithGravity.filter(function (x) {\n          return allNodes.has(x);\n        });\n        this.graphManager.setAllNodesToApplyGravitation(intersection);\n\n        this.positionNodesRandomly();\n      }\n  } else {\n    if (CoSEConstants.TREE_REDUCTION_ON_INCREMENTAL) {\n      // Reduce the trees in incremental mode if only this constant is set to true \n      this.reduceTrees();\n      // Update nodes that gravity will be applied\n      this.graphManager.resetAllNodesToApplyGravitation();\n      var allNodes = new Set(this.getAllNodes());\n      var intersection = this.nodesWithGravity.filter(function (x) {\n        return allNodes.has(x);\n      });\n      this.graphManager.setAllNodesToApplyGravitation(intersection);\n    }\n  }\n\n  this.initSpringEmbedder();\n  this.runSpringEmbedder();\n\n  return true;\n};\n\nCoSELayout.prototype.tick = function () {\n  this.totalIterations++;\n\n  if (this.totalIterations === this.maxIterations && !this.isTreeGrowing && !this.isGrowthFinished) {\n    if (this.prunedNodesAll.length > 0) {\n      this.isTreeGrowing = true;\n    } else {\n      return true;\n    }\n  }\n\n  if (this.totalIterations % FDLayoutConstants.CONVERGENCE_CHECK_PERIOD == 0 && !this.isTreeGrowing && !this.isGrowthFinished) {\n    if (this.isConverged()) {\n      if (this.prunedNodesAll.length > 0) {\n        this.isTreeGrowing = true;\n      } else {\n        return true;\n      }\n    }\n\n    this.coolingCycle++;\n\n    if (this.layoutQuality == 0) {\n      // quality - \"draft\"\n      this.coolingAdjuster = this.coolingCycle;\n    } else if (this.layoutQuality == 1) {\n      // quality - \"default\"\n      this.coolingAdjuster = this.coolingCycle / 3;\n    }\n\n    // cooling schedule is based on http://www.btluke.com/simanf1.html -> cooling schedule 3\n    this.coolingFactor = Math.max(this.initialCoolingFactor - Math.pow(this.coolingCycle, Math.log(100 * (this.initialCoolingFactor - this.finalTemperature)) / Math.log(this.maxCoolingCycle)) / 100 * this.coolingAdjuster, this.finalTemperature);\n    this.animationPeriod = Math.ceil(this.initialAnimationPeriod * Math.sqrt(this.coolingFactor));\n  }\n  // Operations while tree is growing again \n  if (this.isTreeGrowing) {\n    if (this.growTreeIterations % 10 == 0) {\n      if (this.prunedNodesAll.length > 0) {\n        this.graphManager.updateBounds();\n        this.updateGrid();\n        this.growTree(this.prunedNodesAll);\n        // Update nodes that gravity will be applied\n        this.graphManager.resetAllNodesToApplyGravitation();\n        var allNodes = new Set(this.getAllNodes());\n        var intersection = this.nodesWithGravity.filter(function (x) {\n          return allNodes.has(x);\n        });\n        this.graphManager.setAllNodesToApplyGravitation(intersection);\n\n        this.graphManager.updateBounds();\n        this.updateGrid();\n        this.coolingFactor = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL;\n      } else {\n        this.isTreeGrowing = false;\n        this.isGrowthFinished = true;\n      }\n    }\n    this.growTreeIterations++;\n  }\n  // Operations after growth is finished\n  if (this.isGrowthFinished) {\n    if (this.isConverged()) {\n      return true;\n    }\n    if (this.afterGrowthIterations % 10 == 0) {\n      this.graphManager.updateBounds();\n      this.updateGrid();\n    }\n    this.coolingFactor = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL * ((100 - this.afterGrowthIterations) / 100);\n    this.afterGrowthIterations++;\n  }\n\n  var gridUpdateAllowed = !this.isTreeGrowing && !this.isGrowthFinished;\n  var forceToNodeSurroundingUpdate = this.growTreeIterations % 10 == 1 && this.isTreeGrowing || this.afterGrowthIterations % 10 == 1 && this.isGrowthFinished;\n\n  this.totalDisplacement = 0;\n  this.graphManager.updateBounds();\n  this.calcSpringForces();\n  this.calcRepulsionForces(gridUpdateAllowed, forceToNodeSurroundingUpdate);\n  this.calcGravitationalForces();\n  this.moveNodes();\n  this.animate();\n\n  return false; // Layout is not ended yet return false\n};\n\nCoSELayout.prototype.getPositionsData = function () {\n  var allNodes = this.graphManager.getAllNodes();\n  var pData = {};\n  for (var i = 0; i < allNodes.length; i++) {\n    var rect = allNodes[i].rect;\n    var id = allNodes[i].id;\n    pData[id] = {\n      id: id,\n      x: rect.getCenterX(),\n      y: rect.getCenterY(),\n      w: rect.width,\n      h: rect.height\n    };\n  }\n\n  return pData;\n};\n\nCoSELayout.prototype.runSpringEmbedder = function () {\n  this.initialAnimationPeriod = 25;\n  this.animationPeriod = this.initialAnimationPeriod;\n  var layoutEnded = false;\n\n  // If aminate option is 'during' signal that layout is supposed to start iterating\n  if (FDLayoutConstants.ANIMATE === 'during') {\n    this.emit('layoutstarted');\n  } else {\n    // If aminate option is 'during' tick() function will be called on index.js\n    while (!layoutEnded) {\n      layoutEnded = this.tick();\n    }\n\n    this.graphManager.updateBounds();\n  }\n};\n\nCoSELayout.prototype.calculateNodesToApplyGravitationTo = function () {\n  var nodeList = [];\n  var graph;\n\n  var graphs = this.graphManager.getGraphs();\n  var size = graphs.length;\n  var i;\n  for (i = 0; i < size; i++) {\n    graph = graphs[i];\n\n    graph.updateConnected();\n\n    if (!graph.isConnected) {\n      nodeList = nodeList.concat(graph.getNodes());\n    }\n  }\n\n  return nodeList;\n};\n\nCoSELayout.prototype.createBendpoints = function () {\n  var edges = [];\n  edges = edges.concat(this.graphManager.getAllEdges());\n  var visited = new Set();\n  var i;\n  for (i = 0; i < edges.length; i++) {\n    var edge = edges[i];\n\n    if (!visited.has(edge)) {\n      var source = edge.getSource();\n      var target = edge.getTarget();\n\n      if (source == target) {\n        edge.getBendpoints().push(new PointD());\n        edge.getBendpoints().push(new PointD());\n        this.createDummyNodesForBendpoints(edge);\n        visited.add(edge);\n      } else {\n        var edgeList = [];\n\n        edgeList = edgeList.concat(source.getEdgeListToNode(target));\n        edgeList = edgeList.concat(target.getEdgeListToNode(source));\n\n        if (!visited.has(edgeList[0])) {\n          if (edgeList.length > 1) {\n            var k;\n            for (k = 0; k < edgeList.length; k++) {\n              var multiEdge = edgeList[k];\n              multiEdge.getBendpoints().push(new PointD());\n              this.createDummyNodesForBendpoints(multiEdge);\n            }\n          }\n          edgeList.forEach(function (edge) {\n            visited.add(edge);\n          });\n        }\n      }\n    }\n\n    if (visited.size == edges.length) {\n      break;\n    }\n  }\n};\n\nCoSELayout.prototype.positionNodesRadially = function (forest) {\n  // We tile the trees to a grid row by row; first tree starts at (0,0)\n  var currentStartingPoint = new Point(0, 0);\n  var numberOfColumns = Math.ceil(Math.sqrt(forest.length));\n  var height = 0;\n  var currentY = 0;\n  var currentX = 0;\n  var point = new PointD(0, 0);\n\n  for (var i = 0; i < forest.length; i++) {\n    if (i % numberOfColumns == 0) {\n      // Start of a new row, make the x coordinate 0, increment the\n      // y coordinate with the max height of the previous row\n      currentX = 0;\n      currentY = height;\n\n      if (i != 0) {\n        currentY += CoSEConstants.DEFAULT_COMPONENT_SEPERATION;\n      }\n\n      height = 0;\n    }\n\n    var tree = forest[i];\n\n    // Find the center of the tree\n    var centerNode = Layout.findCenterOfTree(tree);\n\n    // Set the staring point of the next tree\n    currentStartingPoint.x = currentX;\n    currentStartingPoint.y = currentY;\n\n    // Do a radial layout starting with the center\n    point = CoSELayout.radialLayout(tree, centerNode, currentStartingPoint);\n\n    if (point.y > height) {\n      height = Math.floor(point.y);\n    }\n\n    currentX = Math.floor(point.x + CoSEConstants.DEFAULT_COMPONENT_SEPERATION);\n  }\n\n  this.transform(new PointD(LayoutConstants.WORLD_CENTER_X - point.x / 2, LayoutConstants.WORLD_CENTER_Y - point.y / 2));\n};\n\nCoSELayout.radialLayout = function (tree, centerNode, startingPoint) {\n  var radialSep = Math.max(this.maxDiagonalInTree(tree), CoSEConstants.DEFAULT_RADIAL_SEPARATION);\n  CoSELayout.branchRadialLayout(centerNode, null, 0, 359, 0, radialSep);\n  var bounds = LGraph.calculateBounds(tree);\n\n  var transform = new Transform();\n  transform.setDeviceOrgX(bounds.getMinX());\n  transform.setDeviceOrgY(bounds.getMinY());\n  transform.setWorldOrgX(startingPoint.x);\n  transform.setWorldOrgY(startingPoint.y);\n\n  for (var i = 0; i < tree.length; i++) {\n    var node = tree[i];\n    node.transform(transform);\n  }\n\n  var bottomRight = new PointD(bounds.getMaxX(), bounds.getMaxY());\n\n  return transform.inverseTransformPoint(bottomRight);\n};\n\nCoSELayout.branchRadialLayout = function (node, parentOfNode, startAngle, endAngle, distance, radialSeparation) {\n  // First, position this node by finding its angle.\n  var halfInterval = (endAngle - startAngle + 1) / 2;\n\n  if (halfInterval < 0) {\n    halfInterval += 180;\n  }\n\n  var nodeAngle = (halfInterval + startAngle) % 360;\n  var teta = nodeAngle * IGeometry.TWO_PI / 360;\n\n  // Make polar to java cordinate conversion.\n  var cos_teta = Math.cos(teta);\n  var x_ = distance * Math.cos(teta);\n  var y_ = distance * Math.sin(teta);\n\n  node.setCenter(x_, y_);\n\n  // Traverse all neighbors of this node and recursively call this\n  // function.\n  var neighborEdges = [];\n  neighborEdges = neighborEdges.concat(node.getEdges());\n  var childCount = neighborEdges.length;\n\n  if (parentOfNode != null) {\n    childCount--;\n  }\n\n  var branchCount = 0;\n\n  var incEdgesCount = neighborEdges.length;\n  var startIndex;\n\n  var edges = node.getEdgesBetween(parentOfNode);\n\n  // If there are multiple edges, prune them until there remains only one\n  // edge.\n  while (edges.length > 1) {\n    //neighborEdges.remove(edges.remove(0));\n    var temp = edges[0];\n    edges.splice(0, 1);\n    var index = neighborEdges.indexOf(temp);\n    if (index >= 0) {\n      neighborEdges.splice(index, 1);\n    }\n    incEdgesCount--;\n    childCount--;\n  }\n\n  if (parentOfNode != null) {\n    //assert edges.length == 1;\n    startIndex = (neighborEdges.indexOf(edges[0]) + 1) % incEdgesCount;\n  } else {\n    startIndex = 0;\n  }\n\n  var stepAngle = Math.abs(endAngle - startAngle) / childCount;\n\n  for (var i = startIndex; branchCount != childCount; i = ++i % incEdgesCount) {\n    var currentNeighbor = neighborEdges[i].getOtherEnd(node);\n\n    // Don't back traverse to root node in current tree.\n    if (currentNeighbor == parentOfNode) {\n      continue;\n    }\n\n    var childStartAngle = (startAngle + branchCount * stepAngle) % 360;\n    var childEndAngle = (childStartAngle + stepAngle) % 360;\n\n    CoSELayout.branchRadialLayout(currentNeighbor, node, childStartAngle, childEndAngle, distance + radialSeparation, radialSeparation);\n\n    branchCount++;\n  }\n};\n\nCoSELayout.maxDiagonalInTree = function (tree) {\n  var maxDiagonal = Integer.MIN_VALUE;\n\n  for (var i = 0; i < tree.length; i++) {\n    var node = tree[i];\n    var diagonal = node.getDiagonal();\n\n    if (diagonal > maxDiagonal) {\n      maxDiagonal = diagonal;\n    }\n  }\n\n  return maxDiagonal;\n};\n\nCoSELayout.prototype.calcRepulsionRange = function () {\n  // formula is 2 x (level + 1) x idealEdgeLength\n  return 2 * (this.level + 1) * this.idealEdgeLength;\n};\n\n// Tiling methods\n\n// Group zero degree members whose parents are not to be tiled, create dummy parents where needed and fill memberGroups by their dummp parent id's\nCoSELayout.prototype.groupZeroDegreeMembers = function () {\n  var self = this;\n  // array of [parent_id x oneDegreeNode_id]\n  var tempMemberGroups = {}; // A temporary map of parent node and its zero degree members\n  this.memberGroups = {}; // A map of dummy parent node and its zero degree members whose parents are not to be tiled\n  this.idToDummyNode = {}; // A map of id to dummy node \n\n  var zeroDegree = []; // List of zero degree nodes whose parents are not to be tiled\n  var allNodes = this.graphManager.getAllNodes();\n\n  // Fill zero degree list\n  for (var i = 0; i < allNodes.length; i++) {\n    var node = allNodes[i];\n    var parent = node.getParent();\n    // If a node has zero degree and its parent is not to be tiled if exists add that node to zeroDegres list\n    if (this.getNodeDegreeWithChildren(node) === 0 && (parent.id == undefined || !this.getToBeTiled(parent))) {\n      zeroDegree.push(node);\n    }\n  }\n\n  // Create a map of parent node and its zero degree members\n  for (var i = 0; i < zeroDegree.length; i++) {\n    var node = zeroDegree[i]; // Zero degree node itself\n    var p_id = node.getParent().id; // Parent id\n\n    if (typeof tempMemberGroups[p_id] === \"undefined\") tempMemberGroups[p_id] = [];\n\n    tempMemberGroups[p_id] = tempMemberGroups[p_id].concat(node); // Push node to the list belongs to its parent in tempMemberGroups\n  }\n\n  // If there are at least two nodes at a level, create a dummy compound for them\n  Object.keys(tempMemberGroups).forEach(function (p_id) {\n    if (tempMemberGroups[p_id].length > 1) {\n      var dummyCompoundId = \"DummyCompound_\" + p_id; // The id of dummy compound which will be created soon\n      self.memberGroups[dummyCompoundId] = tempMemberGroups[p_id]; // Add dummy compound to memberGroups\n\n      var parent = tempMemberGroups[p_id][0].getParent(); // The parent of zero degree nodes will be the parent of new dummy compound\n\n      // Create a dummy compound with calculated id\n      var dummyCompound = new CoSENode(self.graphManager);\n      dummyCompound.id = dummyCompoundId;\n      dummyCompound.paddingLeft = parent.paddingLeft || 0;\n      dummyCompound.paddingRight = parent.paddingRight || 0;\n      dummyCompound.paddingBottom = parent.paddingBottom || 0;\n      dummyCompound.paddingTop = parent.paddingTop || 0;\n\n      self.idToDummyNode[dummyCompoundId] = dummyCompound;\n\n      var dummyParentGraph = self.getGraphManager().add(self.newGraph(), dummyCompound);\n      var parentGraph = parent.getChild();\n\n      // Add dummy compound to parent the graph\n      parentGraph.add(dummyCompound);\n\n      // For each zero degree node in this level remove it from its parent graph and add it to the graph of dummy parent\n      for (var i = 0; i < tempMemberGroups[p_id].length; i++) {\n        var node = tempMemberGroups[p_id][i];\n\n        parentGraph.remove(node);\n        dummyParentGraph.add(node);\n      }\n    }\n  });\n};\n\nCoSELayout.prototype.clearCompounds = function () {\n  var childGraphMap = {};\n  var idToNode = {};\n\n  // Get compound ordering by finding the inner one first\n  this.performDFSOnCompounds();\n\n  for (var i = 0; i < this.compoundOrder.length; i++) {\n\n    idToNode[this.compoundOrder[i].id] = this.compoundOrder[i];\n    childGraphMap[this.compoundOrder[i].id] = [].concat(this.compoundOrder[i].getChild().getNodes());\n\n    // Remove children of compounds\n    this.graphManager.remove(this.compoundOrder[i].getChild());\n    this.compoundOrder[i].child = null;\n  }\n\n  this.graphManager.resetAllNodes();\n\n  // Tile the removed children\n  this.tileCompoundMembers(childGraphMap, idToNode);\n};\n\nCoSELayout.prototype.clearZeroDegreeMembers = function () {\n  var self = this;\n  var tiledZeroDegreePack = this.tiledZeroDegreePack = [];\n\n  Object.keys(this.memberGroups).forEach(function (id) {\n    var compoundNode = self.idToDummyNode[id]; // Get the dummy compound\n\n    tiledZeroDegreePack[id] = self.tileNodes(self.memberGroups[id], compoundNode.paddingLeft + compoundNode.paddingRight);\n\n    // Set the width and height of the dummy compound as calculated\n    compoundNode.rect.width = tiledZeroDegreePack[id].width;\n    compoundNode.rect.height = tiledZeroDegreePack[id].height;\n  });\n};\n\nCoSELayout.prototype.repopulateCompounds = function () {\n  for (var i = this.compoundOrder.length - 1; i >= 0; i--) {\n    var lCompoundNode = this.compoundOrder[i];\n    var id = lCompoundNode.id;\n    var horizontalMargin = lCompoundNode.paddingLeft;\n    var verticalMargin = lCompoundNode.paddingTop;\n\n    this.adjustLocations(this.tiledMemberPack[id], lCompoundNode.rect.x, lCompoundNode.rect.y, horizontalMargin, verticalMargin);\n  }\n};\n\nCoSELayout.prototype.repopulateZeroDegreeMembers = function () {\n  var self = this;\n  var tiledPack = this.tiledZeroDegreePack;\n\n  Object.keys(tiledPack).forEach(function (id) {\n    var compoundNode = self.idToDummyNode[id]; // Get the dummy compound by its id\n    var horizontalMargin = compoundNode.paddingLeft;\n    var verticalMargin = compoundNode.paddingTop;\n\n    // Adjust the positions of nodes wrt its compound\n    self.adjustLocations(tiledPack[id], compoundNode.rect.x, compoundNode.rect.y, horizontalMargin, verticalMargin);\n  });\n};\n\nCoSELayout.prototype.getToBeTiled = function (node) {\n  var id = node.id;\n  //firstly check the previous results\n  if (this.toBeTiled[id] != null) {\n    return this.toBeTiled[id];\n  }\n\n  //only compound nodes are to be tiled\n  var childGraph = node.getChild();\n  if (childGraph == null) {\n    this.toBeTiled[id] = false;\n    return false;\n  }\n\n  var children = childGraph.getNodes(); // Get the children nodes\n\n  //a compound node is not to be tiled if all of its compound children are not to be tiled\n  for (var i = 0; i < children.length; i++) {\n    var theChild = children[i];\n\n    if (this.getNodeDegree(theChild) > 0) {\n      this.toBeTiled[id] = false;\n      return false;\n    }\n\n    //pass the children not having the compound structure\n    if (theChild.getChild() == null) {\n      this.toBeTiled[theChild.id] = false;\n      continue;\n    }\n\n    if (!this.getToBeTiled(theChild)) {\n      this.toBeTiled[id] = false;\n      return false;\n    }\n  }\n  this.toBeTiled[id] = true;\n  return true;\n};\n\n// Get degree of a node depending of its edges and independent of its children\nCoSELayout.prototype.getNodeDegree = function (node) {\n  var id = node.id;\n  var edges = node.getEdges();\n  var degree = 0;\n\n  // For the edges connected\n  for (var i = 0; i < edges.length; i++) {\n    var edge = edges[i];\n    if (edge.getSource().id !== edge.getTarget().id) {\n      degree = degree + 1;\n    }\n  }\n  return degree;\n};\n\n// Get degree of a node with its children\nCoSELayout.prototype.getNodeDegreeWithChildren = function (node) {\n  var degree = this.getNodeDegree(node);\n  if (node.getChild() == null) {\n    return degree;\n  }\n  var children = node.getChild().getNodes();\n  for (var i = 0; i < children.length; i++) {\n    var child = children[i];\n    degree += this.getNodeDegreeWithChildren(child);\n  }\n  return degree;\n};\n\nCoSELayout.prototype.performDFSOnCompounds = function () {\n  this.compoundOrder = [];\n  this.fillCompexOrderByDFS(this.graphManager.getRoot().getNodes());\n};\n\nCoSELayout.prototype.fillCompexOrderByDFS = function (children) {\n  for (var i = 0; i < children.length; i++) {\n    var child = children[i];\n    if (child.getChild() != null) {\n      this.fillCompexOrderByDFS(child.getChild().getNodes());\n    }\n    if (this.getToBeTiled(child)) {\n      this.compoundOrder.push(child);\n    }\n  }\n};\n\n/**\n* This method places each zero degree member wrt given (x,y) coordinates (top left).\n*/\nCoSELayout.prototype.adjustLocations = function (organization, x, y, compoundHorizontalMargin, compoundVerticalMargin) {\n  x += compoundHorizontalMargin;\n  y += compoundVerticalMargin;\n\n  var left = x;\n\n  for (var i = 0; i < organization.rows.length; i++) {\n    var row = organization.rows[i];\n    x = left;\n    var maxHeight = 0;\n\n    for (var j = 0; j < row.length; j++) {\n      var lnode = row[j];\n\n      lnode.rect.x = x; // + lnode.rect.width / 2;\n      lnode.rect.y = y; // + lnode.rect.height / 2;\n\n      x += lnode.rect.width + organization.horizontalPadding;\n\n      if (lnode.rect.height > maxHeight) maxHeight = lnode.rect.height;\n    }\n\n    y += maxHeight + organization.verticalPadding;\n  }\n};\n\nCoSELayout.prototype.tileCompoundMembers = function (childGraphMap, idToNode) {\n  var self = this;\n  this.tiledMemberPack = [];\n\n  Object.keys(childGraphMap).forEach(function (id) {\n    // Get the compound node\n    var compoundNode = idToNode[id];\n\n    self.tiledMemberPack[id] = self.tileNodes(childGraphMap[id], compoundNode.paddingLeft + compoundNode.paddingRight);\n\n    compoundNode.rect.width = self.tiledMemberPack[id].width;\n    compoundNode.rect.height = self.tiledMemberPack[id].height;\n  });\n};\n\nCoSELayout.prototype.tileNodes = function (nodes, minWidth) {\n  var verticalPadding = CoSEConstants.TILING_PADDING_VERTICAL;\n  var horizontalPadding = CoSEConstants.TILING_PADDING_HORIZONTAL;\n  var organization = {\n    rows: [],\n    rowWidth: [],\n    rowHeight: [],\n    width: 0,\n    height: minWidth, // assume minHeight equals to minWidth\n    verticalPadding: verticalPadding,\n    horizontalPadding: horizontalPadding\n  };\n\n  // Sort the nodes in ascending order of their areas\n  nodes.sort(function (n1, n2) {\n    if (n1.rect.width * n1.rect.height > n2.rect.width * n2.rect.height) return -1;\n    if (n1.rect.width * n1.rect.height < n2.rect.width * n2.rect.height) return 1;\n    return 0;\n  });\n\n  // Create the organization -> tile members\n  for (var i = 0; i < nodes.length; i++) {\n    var lNode = nodes[i];\n\n    if (organization.rows.length == 0) {\n      this.insertNodeToRow(organization, lNode, 0, minWidth);\n    } else if (this.canAddHorizontal(organization, lNode.rect.width, lNode.rect.height)) {\n      this.insertNodeToRow(organization, lNode, this.getShortestRowIndex(organization), minWidth);\n    } else {\n      this.insertNodeToRow(organization, lNode, organization.rows.length, minWidth);\n    }\n\n    this.shiftToLastRow(organization);\n  }\n\n  return organization;\n};\n\nCoSELayout.prototype.insertNodeToRow = function (organization, node, rowIndex, minWidth) {\n  var minCompoundSize = minWidth;\n\n  // Add new row if needed\n  if (rowIndex == organization.rows.length) {\n    var secondDimension = [];\n\n    organization.rows.push(secondDimension);\n    organization.rowWidth.push(minCompoundSize);\n    organization.rowHeight.push(0);\n  }\n\n  // Update row width\n  var w = organization.rowWidth[rowIndex] + node.rect.width;\n\n  if (organization.rows[rowIndex].length > 0) {\n    w += organization.horizontalPadding;\n  }\n\n  organization.rowWidth[rowIndex] = w;\n  // Update compound width\n  if (organization.width < w) {\n    organization.width = w;\n  }\n\n  // Update height\n  var h = node.rect.height;\n  if (rowIndex > 0) h += organization.verticalPadding;\n\n  var extraHeight = 0;\n  if (h > organization.rowHeight[rowIndex]) {\n    extraHeight = organization.rowHeight[rowIndex];\n    organization.rowHeight[rowIndex] = h;\n    extraHeight = organization.rowHeight[rowIndex] - extraHeight;\n  }\n\n  organization.height += extraHeight;\n\n  // Insert node\n  organization.rows[rowIndex].push(node);\n};\n\n//Scans the rows of an organization and returns the one with the min width\nCoSELayout.prototype.getShortestRowIndex = function (organization) {\n  var r = -1;\n  var min = Number.MAX_VALUE;\n\n  for (var i = 0; i < organization.rows.length; i++) {\n    if (organization.rowWidth[i] < min) {\n      r = i;\n      min = organization.rowWidth[i];\n    }\n  }\n  return r;\n};\n\n//Scans the rows of an organization and returns the one with the max width\nCoSELayout.prototype.getLongestRowIndex = function (organization) {\n  var r = -1;\n  var max = Number.MIN_VALUE;\n\n  for (var i = 0; i < organization.rows.length; i++) {\n\n    if (organization.rowWidth[i] > max) {\n      r = i;\n      max = organization.rowWidth[i];\n    }\n  }\n\n  return r;\n};\n\n/**\n* This method checks whether adding extra width to the organization violates\n* the aspect ratio(1) or not.\n*/\nCoSELayout.prototype.canAddHorizontal = function (organization, extraWidth, extraHeight) {\n\n  var sri = this.getShortestRowIndex(organization);\n\n  if (sri < 0) {\n    return true;\n  }\n\n  var min = organization.rowWidth[sri];\n\n  if (min + organization.horizontalPadding + extraWidth <= organization.width) return true;\n\n  var hDiff = 0;\n\n  // Adding to an existing row\n  if (organization.rowHeight[sri] < extraHeight) {\n    if (sri > 0) hDiff = extraHeight + organization.verticalPadding - organization.rowHeight[sri];\n  }\n\n  var add_to_row_ratio;\n  if (organization.width - min >= extraWidth + organization.horizontalPadding) {\n    add_to_row_ratio = (organization.height + hDiff) / (min + extraWidth + organization.horizontalPadding);\n  } else {\n    add_to_row_ratio = (organization.height + hDiff) / organization.width;\n  }\n\n  // Adding a new row for this node\n  hDiff = extraHeight + organization.verticalPadding;\n  var add_new_row_ratio;\n  if (organization.width < extraWidth) {\n    add_new_row_ratio = (organization.height + hDiff) / extraWidth;\n  } else {\n    add_new_row_ratio = (organization.height + hDiff) / organization.width;\n  }\n\n  if (add_new_row_ratio < 1) add_new_row_ratio = 1 / add_new_row_ratio;\n\n  if (add_to_row_ratio < 1) add_to_row_ratio = 1 / add_to_row_ratio;\n\n  return add_to_row_ratio < add_new_row_ratio;\n};\n\n//If moving the last node from the longest row and adding it to the last\n//row makes the bounding box smaller, do it.\nCoSELayout.prototype.shiftToLastRow = function (organization) {\n  var longest = this.getLongestRowIndex(organization);\n  var last = organization.rowWidth.length - 1;\n  var row = organization.rows[longest];\n  var node = row[row.length - 1];\n\n  var diff = node.width + organization.horizontalPadding;\n\n  // Check if there is enough space on the last row\n  if (organization.width - organization.rowWidth[last] > diff && longest != last) {\n    // Remove the last element of the longest row\n    row.splice(-1, 1);\n\n    // Push it to the last row\n    organization.rows[last].push(node);\n\n    organization.rowWidth[longest] = organization.rowWidth[longest] - diff;\n    organization.rowWidth[last] = organization.rowWidth[last] + diff;\n    organization.width = organization.rowWidth[instance.getLongestRowIndex(organization)];\n\n    // Update heights of the organization\n    var maxHeight = Number.MIN_VALUE;\n    for (var i = 0; i < row.length; i++) {\n      if (row[i].height > maxHeight) maxHeight = row[i].height;\n    }\n    if (longest > 0) maxHeight += organization.verticalPadding;\n\n    var prevTotal = organization.rowHeight[longest] + organization.rowHeight[last];\n\n    organization.rowHeight[longest] = maxHeight;\n    if (organization.rowHeight[last] < node.height + organization.verticalPadding) organization.rowHeight[last] = node.height + organization.verticalPadding;\n\n    var finalTotal = organization.rowHeight[longest] + organization.rowHeight[last];\n    organization.height += finalTotal - prevTotal;\n\n    this.shiftToLastRow(organization);\n  }\n};\n\nCoSELayout.prototype.tilingPreLayout = function () {\n  if (CoSEConstants.TILE) {\n    // Find zero degree nodes and create a compound for each level\n    this.groupZeroDegreeMembers();\n    // Tile and clear children of each compound\n    this.clearCompounds();\n    // Separately tile and clear zero degree nodes for each level\n    this.clearZeroDegreeMembers();\n  }\n};\n\nCoSELayout.prototype.tilingPostLayout = function () {\n  if (CoSEConstants.TILE) {\n    this.repopulateZeroDegreeMembers();\n    this.repopulateCompounds();\n  }\n};\n\n// -----------------------------------------------------------------------------\n// Section: Tree Reduction methods\n// -----------------------------------------------------------------------------\n// Reduce trees \nCoSELayout.prototype.reduceTrees = function () {\n  var prunedNodesAll = [];\n  var containsLeaf = true;\n  var node;\n\n  while (containsLeaf) {\n    var allNodes = this.graphManager.getAllNodes();\n    var prunedNodesInStepTemp = [];\n    containsLeaf = false;\n\n    for (var i = 0; i < allNodes.length; i++) {\n      node = allNodes[i];\n      if (node.getEdges().length == 1 && !node.getEdges()[0].isInterGraph && node.getChild() == null) {\n        prunedNodesInStepTemp.push([node, node.getEdges()[0], node.getOwner()]);\n        containsLeaf = true;\n      }\n    }\n    if (containsLeaf == true) {\n      var prunedNodesInStep = [];\n      for (var j = 0; j < prunedNodesInStepTemp.length; j++) {\n        if (prunedNodesInStepTemp[j][0].getEdges().length == 1) {\n          prunedNodesInStep.push(prunedNodesInStepTemp[j]);\n          prunedNodesInStepTemp[j][0].getOwner().remove(prunedNodesInStepTemp[j][0]);\n        }\n      }\n      prunedNodesAll.push(prunedNodesInStep);\n      this.graphManager.resetAllNodes();\n      this.graphManager.resetAllEdges();\n    }\n  }\n  this.prunedNodesAll = prunedNodesAll;\n};\n\n// Grow tree one step \nCoSELayout.prototype.growTree = function (prunedNodesAll) {\n  var lengthOfPrunedNodesInStep = prunedNodesAll.length;\n  var prunedNodesInStep = prunedNodesAll[lengthOfPrunedNodesInStep - 1];\n\n  var nodeData;\n  for (var i = 0; i < prunedNodesInStep.length; i++) {\n    nodeData = prunedNodesInStep[i];\n\n    this.findPlaceforPrunedNode(nodeData);\n\n    nodeData[2].add(nodeData[0]);\n    nodeData[2].add(nodeData[1], nodeData[1].source, nodeData[1].target);\n  }\n\n  prunedNodesAll.splice(prunedNodesAll.length - 1, 1);\n  this.graphManager.resetAllNodes();\n  this.graphManager.resetAllEdges();\n};\n\n// Find an appropriate position to replace pruned node, this method can be improved\nCoSELayout.prototype.findPlaceforPrunedNode = function (nodeData) {\n\n  var gridForPrunedNode;\n  var nodeToConnect;\n  var prunedNode = nodeData[0];\n  if (prunedNode == nodeData[1].source) {\n    nodeToConnect = nodeData[1].target;\n  } else {\n    nodeToConnect = nodeData[1].source;\n  }\n  var startGridX = nodeToConnect.startX;\n  var finishGridX = nodeToConnect.finishX;\n  var startGridY = nodeToConnect.startY;\n  var finishGridY = nodeToConnect.finishY;\n\n  var upNodeCount = 0;\n  var downNodeCount = 0;\n  var rightNodeCount = 0;\n  var leftNodeCount = 0;\n  var controlRegions = [upNodeCount, rightNodeCount, downNodeCount, leftNodeCount];\n\n  if (startGridY > 0) {\n    for (var i = startGridX; i <= finishGridX; i++) {\n      controlRegions[0] += this.grid[i][startGridY - 1].length + this.grid[i][startGridY].length - 1;\n    }\n  }\n  if (finishGridX < this.grid.length - 1) {\n    for (var i = startGridY; i <= finishGridY; i++) {\n      controlRegions[1] += this.grid[finishGridX + 1][i].length + this.grid[finishGridX][i].length - 1;\n    }\n  }\n  if (finishGridY < this.grid[0].length - 1) {\n    for (var i = startGridX; i <= finishGridX; i++) {\n      controlRegions[2] += this.grid[i][finishGridY + 1].length + this.grid[i][finishGridY].length - 1;\n    }\n  }\n  if (startGridX > 0) {\n    for (var i = startGridY; i <= finishGridY; i++) {\n      controlRegions[3] += this.grid[startGridX - 1][i].length + this.grid[startGridX][i].length - 1;\n    }\n  }\n  var min = Integer.MAX_VALUE;\n  var minCount;\n  var minIndex;\n  for (var j = 0; j < controlRegions.length; j++) {\n    if (controlRegions[j] < min) {\n      min = controlRegions[j];\n      minCount = 1;\n      minIndex = j;\n    } else if (controlRegions[j] == min) {\n      minCount++;\n    }\n  }\n\n  if (minCount == 3 && min == 0) {\n    if (controlRegions[0] == 0 && controlRegions[1] == 0 && controlRegions[2] == 0) {\n      gridForPrunedNode = 1;\n    } else if (controlRegions[0] == 0 && controlRegions[1] == 0 && controlRegions[3] == 0) {\n      gridForPrunedNode = 0;\n    } else if (controlRegions[0] == 0 && controlRegions[2] == 0 && controlRegions[3] == 0) {\n      gridForPrunedNode = 3;\n    } else if (controlRegions[1] == 0 && controlRegions[2] == 0 && controlRegions[3] == 0) {\n      gridForPrunedNode = 2;\n    }\n  } else if (minCount == 2 && min == 0) {\n    var random = Math.floor(Math.random() * 2);\n    if (controlRegions[0] == 0 && controlRegions[1] == 0) {\n      ;\n      if (random == 0) {\n        gridForPrunedNode = 0;\n      } else {\n        gridForPrunedNode = 1;\n      }\n    } else if (controlRegions[0] == 0 && controlRegions[2] == 0) {\n      if (random == 0) {\n        gridForPrunedNode = 0;\n      } else {\n        gridForPrunedNode = 2;\n      }\n    } else if (controlRegions[0] == 0 && controlRegions[3] == 0) {\n      if (random == 0) {\n        gridForPrunedNode = 0;\n      } else {\n        gridForPrunedNode = 3;\n      }\n    } else if (controlRegions[1] == 0 && controlRegions[2] == 0) {\n      if (random == 0) {\n        gridForPrunedNode = 1;\n      } else {\n        gridForPrunedNode = 2;\n      }\n    } else if (controlRegions[1] == 0 && controlRegions[3] == 0) {\n      if (random == 0) {\n        gridForPrunedNode = 1;\n      } else {\n        gridForPrunedNode = 3;\n      }\n    } else {\n      if (random == 0) {\n        gridForPrunedNode = 2;\n      } else {\n        gridForPrunedNode = 3;\n      }\n    }\n  } else if (minCount == 4 && min == 0) {\n    var random = Math.floor(Math.random() * 4);\n    gridForPrunedNode = random;\n  } else {\n    gridForPrunedNode = minIndex;\n  }\n\n  if (gridForPrunedNode == 0) {\n    prunedNode.setCenter(nodeToConnect.getCenterX(), nodeToConnect.getCenterY() - nodeToConnect.getHeight() / 2 - FDLayoutConstants.DEFAULT_EDGE_LENGTH - prunedNode.getHeight() / 2);\n  } else if (gridForPrunedNode == 1) {\n    prunedNode.setCenter(nodeToConnect.getCenterX() + nodeToConnect.getWidth() / 2 + FDLayoutConstants.DEFAULT_EDGE_LENGTH + prunedNode.getWidth() / 2, nodeToConnect.getCenterY());\n  } else if (gridForPrunedNode == 2) {\n    prunedNode.setCenter(nodeToConnect.getCenterX(), nodeToConnect.getCenterY() + nodeToConnect.getHeight() / 2 + FDLayoutConstants.DEFAULT_EDGE_LENGTH + prunedNode.getHeight() / 2);\n  } else {\n    prunedNode.setCenter(nodeToConnect.getCenterX() - nodeToConnect.getWidth() / 2 - FDLayoutConstants.DEFAULT_EDGE_LENGTH - prunedNode.getWidth() / 2, nodeToConnect.getCenterY());\n  }\n};\n\nmodule.exports = CoSELayout;\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar coseBase = {};\n\ncoseBase.layoutBase = __webpack_require__(0);\ncoseBase.CoSEConstants = __webpack_require__(1);\ncoseBase.CoSEEdge = __webpack_require__(2);\ncoseBase.CoSEGraph = __webpack_require__(3);\ncoseBase.CoSEGraphManager = __webpack_require__(4);\ncoseBase.CoSELayout = __webpack_require__(6);\ncoseBase.CoSENode = __webpack_require__(5);\n\nmodule.exports = coseBase;\n\n/***/ })\n/******/ ]);\n});","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"cose-base\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"cose-base\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"cytoscapeCoseBilkent\"] = factory(require(\"cose-base\"));\n\telse\n\t\troot[\"cytoscapeCoseBilkent\"] = factory(root[\"coseBase\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_0__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_0__;\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar LayoutConstants = __webpack_require__(0).layoutBase.LayoutConstants;\nvar FDLayoutConstants = __webpack_require__(0).layoutBase.FDLayoutConstants;\nvar CoSEConstants = __webpack_require__(0).CoSEConstants;\nvar CoSELayout = __webpack_require__(0).CoSELayout;\nvar CoSENode = __webpack_require__(0).CoSENode;\nvar PointD = __webpack_require__(0).layoutBase.PointD;\nvar DimensionD = __webpack_require__(0).layoutBase.DimensionD;\n\nvar defaults = {\n  // Called on `layoutready`\n  ready: function ready() {},\n  // Called on `layoutstop`\n  stop: function stop() {},\n  // 'draft', 'default' or 'proof\" \n  // - 'draft' fast cooling rate \n  // - 'default' moderate cooling rate \n  // - \"proof\" slow cooling rate\n  quality: 'default',\n  // include labels in node dimensions\n  nodeDimensionsIncludeLabels: false,\n  // number of ticks per frame; higher is faster but more jerky\n  refresh: 30,\n  // Whether to fit the network view after when done\n  fit: true,\n  // Padding on fit\n  padding: 10,\n  // Whether to enable incremental mode\n  randomize: true,\n  // Node repulsion (non overlapping) multiplier\n  nodeRepulsion: 4500,\n  // Ideal edge (non nested) length\n  idealEdgeLength: 50,\n  // Divisor to compute edge forces\n  edgeElasticity: 0.45,\n  // Nesting factor (multiplier) to compute ideal edge length for nested edges\n  nestingFactor: 0.1,\n  // Gravity force (constant)\n  gravity: 0.25,\n  // Maximum number of iterations to perform\n  numIter: 2500,\n  // For enabling tiling\n  tile: true,\n  // Type of layout animation. The option set is {'during', 'end', false}\n  animate: 'end',\n  // Duration for animate:end\n  animationDuration: 500,\n  // Represents the amount of the vertical space to put between the zero degree members during the tiling operation(can also be a function)\n  tilingPaddingVertical: 10,\n  // Represents the amount of the horizontal space to put between the zero degree members during the tiling operation(can also be a function)\n  tilingPaddingHorizontal: 10,\n  // Gravity range (constant) for compounds\n  gravityRangeCompound: 1.5,\n  // Gravity force (constant) for compounds\n  gravityCompound: 1.0,\n  // Gravity range (constant)\n  gravityRange: 3.8,\n  // Initial cooling factor for incremental layout\n  initialEnergyOnIncremental: 0.5\n};\n\nfunction extend(defaults, options) {\n  var obj = {};\n\n  for (var i in defaults) {\n    obj[i] = defaults[i];\n  }\n\n  for (var i in options) {\n    obj[i] = options[i];\n  }\n\n  return obj;\n};\n\nfunction _CoSELayout(_options) {\n  this.options = extend(defaults, _options);\n  getUserOptions(this.options);\n}\n\nvar getUserOptions = function getUserOptions(options) {\n  if (options.nodeRepulsion != null) CoSEConstants.DEFAULT_REPULSION_STRENGTH = FDLayoutConstants.DEFAULT_REPULSION_STRENGTH = options.nodeRepulsion;\n  if (options.idealEdgeLength != null) CoSEConstants.DEFAULT_EDGE_LENGTH = FDLayoutConstants.DEFAULT_EDGE_LENGTH = options.idealEdgeLength;\n  if (options.edgeElasticity != null) CoSEConstants.DEFAULT_SPRING_STRENGTH = FDLayoutConstants.DEFAULT_SPRING_STRENGTH = options.edgeElasticity;\n  if (options.nestingFactor != null) CoSEConstants.PER_LEVEL_IDEAL_EDGE_LENGTH_FACTOR = FDLayoutConstants.PER_LEVEL_IDEAL_EDGE_LENGTH_FACTOR = options.nestingFactor;\n  if (options.gravity != null) CoSEConstants.DEFAULT_GRAVITY_STRENGTH = FDLayoutConstants.DEFAULT_GRAVITY_STRENGTH = options.gravity;\n  if (options.numIter != null) CoSEConstants.MAX_ITERATIONS = FDLayoutConstants.MAX_ITERATIONS = options.numIter;\n  if (options.gravityRange != null) CoSEConstants.DEFAULT_GRAVITY_RANGE_FACTOR = FDLayoutConstants.DEFAULT_GRAVITY_RANGE_FACTOR = options.gravityRange;\n  if (options.gravityCompound != null) CoSEConstants.DEFAULT_COMPOUND_GRAVITY_STRENGTH = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_STRENGTH = options.gravityCompound;\n  if (options.gravityRangeCompound != null) CoSEConstants.DEFAULT_COMPOUND_GRAVITY_RANGE_FACTOR = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_RANGE_FACTOR = options.gravityRangeCompound;\n  if (options.initialEnergyOnIncremental != null) CoSEConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL = options.initialEnergyOnIncremental;\n\n  if (options.quality == 'draft') LayoutConstants.QUALITY = 0;else if (options.quality == 'proof') LayoutConstants.QUALITY = 2;else LayoutConstants.QUALITY = 1;\n\n  CoSEConstants.NODE_DIMENSIONS_INCLUDE_LABELS = FDLayoutConstants.NODE_DIMENSIONS_INCLUDE_LABELS = LayoutConstants.NODE_DIMENSIONS_INCLUDE_LABELS = options.nodeDimensionsIncludeLabels;\n  CoSEConstants.DEFAULT_INCREMENTAL = FDLayoutConstants.DEFAULT_INCREMENTAL = LayoutConstants.DEFAULT_INCREMENTAL = !options.randomize;\n  CoSEConstants.ANIMATE = FDLayoutConstants.ANIMATE = LayoutConstants.ANIMATE = options.animate;\n  CoSEConstants.TILE = options.tile;\n  CoSEConstants.TILING_PADDING_VERTICAL = typeof options.tilingPaddingVertical === 'function' ? options.tilingPaddingVertical.call() : options.tilingPaddingVertical;\n  CoSEConstants.TILING_PADDING_HORIZONTAL = typeof options.tilingPaddingHorizontal === 'function' ? options.tilingPaddingHorizontal.call() : options.tilingPaddingHorizontal;\n};\n\n_CoSELayout.prototype.run = function () {\n  var ready;\n  var frameId;\n  var options = this.options;\n  var idToLNode = this.idToLNode = {};\n  var layout = this.layout = new CoSELayout();\n  var self = this;\n\n  self.stopped = false;\n\n  this.cy = this.options.cy;\n\n  this.cy.trigger({ type: 'layoutstart', layout: this });\n\n  var gm = layout.newGraphManager();\n  this.gm = gm;\n\n  var nodes = this.options.eles.nodes();\n  var edges = this.options.eles.edges();\n\n  this.root = gm.addRoot();\n  this.processChildrenList(this.root, this.getTopMostNodes(nodes), layout);\n\n  for (var i = 0; i < edges.length; i++) {\n    var edge = edges[i];\n    var sourceNode = this.idToLNode[edge.data(\"source\")];\n    var targetNode = this.idToLNode[edge.data(\"target\")];\n    if (sourceNode !== targetNode && sourceNode.getEdgesBetween(targetNode).length == 0) {\n      var e1 = gm.add(layout.newEdge(), sourceNode, targetNode);\n      e1.id = edge.id();\n    }\n  }\n\n  var getPositions = function getPositions(ele, i) {\n    if (typeof ele === \"number\") {\n      ele = i;\n    }\n    var theId = ele.data('id');\n    var lNode = self.idToLNode[theId];\n\n    return {\n      x: lNode.getRect().getCenterX(),\n      y: lNode.getRect().getCenterY()\n    };\n  };\n\n  /*\n   * Reposition nodes in iterations animatedly\n   */\n  var iterateAnimated = function iterateAnimated() {\n    // Thigs to perform after nodes are repositioned on screen\n    var afterReposition = function afterReposition() {\n      if (options.fit) {\n        options.cy.fit(options.eles, options.padding);\n      }\n\n      if (!ready) {\n        ready = true;\n        self.cy.one('layoutready', options.ready);\n        self.cy.trigger({ type: 'layoutready', layout: self });\n      }\n    };\n\n    var ticksPerFrame = self.options.refresh;\n    var isDone;\n\n    for (var i = 0; i < ticksPerFrame && !isDone; i++) {\n      isDone = self.stopped || self.layout.tick();\n    }\n\n    // If layout is done\n    if (isDone) {\n      // If the layout is not a sublayout and it is successful perform post layout.\n      if (layout.checkLayoutSuccess() && !layout.isSubLayout) {\n        layout.doPostLayout();\n      }\n\n      // If layout has a tilingPostLayout function property call it.\n      if (layout.tilingPostLayout) {\n        layout.tilingPostLayout();\n      }\n\n      layout.isLayoutFinished = true;\n\n      self.options.eles.nodes().positions(getPositions);\n\n      afterReposition();\n\n      // trigger layoutstop when the layout stops (e.g. finishes)\n      self.cy.one('layoutstop', self.options.stop);\n      self.cy.trigger({ type: 'layoutstop', layout: self });\n\n      if (frameId) {\n        cancelAnimationFrame(frameId);\n      }\n\n      ready = false;\n      return;\n    }\n\n    var animationData = self.layout.getPositionsData(); // Get positions of layout nodes note that all nodes may not be layout nodes because of tiling\n\n    // Position nodes, for the nodes whose id does not included in data (because they are removed from their parents and included in dummy compounds)\n    // use position of their ancestors or dummy ancestors\n    options.eles.nodes().positions(function (ele, i) {\n      if (typeof ele === \"number\") {\n        ele = i;\n      }\n      // If ele is a compound node, then its position will be defined by its children\n      if (!ele.isParent()) {\n        var theId = ele.id();\n        var pNode = animationData[theId];\n        var temp = ele;\n        // If pNode is undefined search until finding position data of its first ancestor (It may be dummy as well)\n        while (pNode == null) {\n          pNode = animationData[temp.data('parent')] || animationData['DummyCompound_' + temp.data('parent')];\n          animationData[theId] = pNode;\n          temp = temp.parent()[0];\n          if (temp == undefined) {\n            break;\n          }\n        }\n        if (pNode != null) {\n          return {\n            x: pNode.x,\n            y: pNode.y\n          };\n        } else {\n          return {\n            x: ele.position('x'),\n            y: ele.position('y')\n          };\n        }\n      }\n    });\n\n    afterReposition();\n\n    frameId = requestAnimationFrame(iterateAnimated);\n  };\n\n  /*\n  * Listen 'layoutstarted' event and start animated iteration if animate option is 'during'\n  */\n  layout.addListener('layoutstarted', function () {\n    if (self.options.animate === 'during') {\n      frameId = requestAnimationFrame(iterateAnimated);\n    }\n  });\n\n  layout.runLayout(); // Run cose layout\n\n  /*\n   * If animate option is not 'during' ('end' or false) perform these here (If it is 'during' similar things are already performed)\n   */\n  if (this.options.animate !== \"during\") {\n    self.options.eles.nodes().not(\":parent\").layoutPositions(self, self.options, getPositions); // Use layout positions to reposition the nodes it considers the options parameter\n    ready = false;\n  }\n\n  return this; // chaining\n};\n\n//Get the top most ones of a list of nodes\n_CoSELayout.prototype.getTopMostNodes = function (nodes) {\n  var nodesMap = {};\n  for (var i = 0; i < nodes.length; i++) {\n    nodesMap[nodes[i].id()] = true;\n  }\n  var roots = nodes.filter(function (ele, i) {\n    if (typeof ele === \"number\") {\n      ele = i;\n    }\n    var parent = ele.parent()[0];\n    while (parent != null) {\n      if (nodesMap[parent.id()]) {\n        return false;\n      }\n      parent = parent.parent()[0];\n    }\n    return true;\n  });\n\n  return roots;\n};\n\n_CoSELayout.prototype.processChildrenList = function (parent, children, layout) {\n  var size = children.length;\n  for (var i = 0; i < size; i++) {\n    var theChild = children[i];\n    var children_of_children = theChild.children();\n    var theNode;\n\n    var dimensions = theChild.layoutDimensions({\n      nodeDimensionsIncludeLabels: this.options.nodeDimensionsIncludeLabels\n    });\n\n    if (theChild.outerWidth() != null && theChild.outerHeight() != null) {\n      theNode = parent.add(new CoSENode(layout.graphManager, new PointD(theChild.position('x') - dimensions.w / 2, theChild.position('y') - dimensions.h / 2), new DimensionD(parseFloat(dimensions.w), parseFloat(dimensions.h))));\n    } else {\n      theNode = parent.add(new CoSENode(this.graphManager));\n    }\n    // Attach id to the layout node\n    theNode.id = theChild.data(\"id\");\n    // Attach the paddings of cy node to layout node\n    theNode.paddingLeft = parseInt(theChild.css('padding'));\n    theNode.paddingTop = parseInt(theChild.css('padding'));\n    theNode.paddingRight = parseInt(theChild.css('padding'));\n    theNode.paddingBottom = parseInt(theChild.css('padding'));\n\n    //Attach the label properties to compound if labels will be included in node dimensions  \n    if (this.options.nodeDimensionsIncludeLabels) {\n      if (theChild.isParent()) {\n        var labelWidth = theChild.boundingBox({ includeLabels: true, includeNodes: false }).w;\n        var labelHeight = theChild.boundingBox({ includeLabels: true, includeNodes: false }).h;\n        var labelPos = theChild.css(\"text-halign\");\n        theNode.labelWidth = labelWidth;\n        theNode.labelHeight = labelHeight;\n        theNode.labelPos = labelPos;\n      }\n    }\n\n    // Map the layout node\n    this.idToLNode[theChild.data(\"id\")] = theNode;\n\n    if (isNaN(theNode.rect.x)) {\n      theNode.rect.x = 0;\n    }\n\n    if (isNaN(theNode.rect.y)) {\n      theNode.rect.y = 0;\n    }\n\n    if (children_of_children != null && children_of_children.length > 0) {\n      var theNewGraph;\n      theNewGraph = layout.getGraphManager().add(layout.newGraph(), theNode);\n      this.processChildrenList(theNewGraph, children_of_children, layout);\n    }\n  }\n};\n\n/**\n * @brief : called on continuous layouts to stop them before they finish\n */\n_CoSELayout.prototype.stop = function () {\n  this.stopped = true;\n\n  return this; // chaining\n};\n\nvar register = function register(cytoscape) {\n  //  var Layout = getLayout( cytoscape );\n\n  cytoscape('layout', 'cose-bilkent', _CoSELayout);\n};\n\n// auto reg for globals\nif (typeof cytoscape !== 'undefined') {\n  register(cytoscape);\n}\n\nmodule.exports = register;\n\n/***/ })\n/******/ ]);\n});","import { l as log, c as getConfig, B as defaultConfig, d as sanitizeText, D as parseFontSize, A as selectSvgElement, o as setupGraphViewbox } from \"./mermaid-b5860b54.js\";\nimport cytoscape from \"cytoscape\";\nimport coseBilkent from \"cytoscape-cose-bilkent\";\nimport { select } from \"d3\";\nimport { a as createText } from \"./createText-2e5e7dd3.js\";\nimport { isDark, lighten, darken } from \"khroma\";\nimport \"ts-dedent\";\nimport \"dayjs\";\nimport \"@braintree/sanitize-url\";\nimport \"dompurify\";\nimport \"lodash-es/memoize.js\";\nimport \"lodash-es/merge.js\";\nimport \"stylis\";\nimport \"lodash-es/isEmpty.js\";\nimport \"mdast-util-from-markdown\";\nvar parser = function() {\n  var o = function(k, v, o2, l) {\n    for (o2 = o2 || {}, l = k.length; l--; o2[k[l]] = v)\n      ;\n    return o2;\n  }, $V0 = [1, 4], $V1 = [1, 13], $V2 = [1, 12], $V3 = [1, 15], $V4 = [1, 16], $V5 = [1, 20], $V6 = [1, 19], $V7 = [6, 7, 8], $V8 = [1, 26], $V9 = [1, 24], $Va = [1, 25], $Vb = [6, 7, 11], $Vc = [1, 6, 13, 15, 16, 19, 22], $Vd = [1, 33], $Ve = [1, 34], $Vf = [1, 6, 7, 11, 13, 15, 16, 19, 22];\n  var parser2 = {\n    trace: function trace() {\n    },\n    yy: {},\n    symbols_: { \"error\": 2, \"start\": 3, \"mindMap\": 4, \"spaceLines\": 5, \"SPACELINE\": 6, \"NL\": 7, \"MINDMAP\": 8, \"document\": 9, \"stop\": 10, \"EOF\": 11, \"statement\": 12, \"SPACELIST\": 13, \"node\": 14, \"ICON\": 15, \"CLASS\": 16, \"nodeWithId\": 17, \"nodeWithoutId\": 18, \"NODE_DSTART\": 19, \"NODE_DESCR\": 20, \"NODE_DEND\": 21, \"NODE_ID\": 22, \"$accept\": 0, \"$end\": 1 },\n    terminals_: { 2: \"error\", 6: \"SPACELINE\", 7: \"NL\", 8: \"MINDMAP\", 11: \"EOF\", 13: \"SPACELIST\", 15: \"ICON\", 16: \"CLASS\", 19: \"NODE_DSTART\", 20: \"NODE_DESCR\", 21: \"NODE_DEND\", 22: \"NODE_ID\" },\n    productions_: [0, [3, 1], [3, 2], [5, 1], [5, 2], [5, 2], [4, 2], [4, 3], [10, 1], [10, 1], [10, 1], [10, 2], [10, 2], [9, 3], [9, 2], [12, 2], [12, 2], [12, 2], [12, 1], [12, 1], [12, 1], [12, 1], [12, 1], [14, 1], [14, 1], [18, 3], [17, 1], [17, 4]],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$) {\n      var $0 = $$.length - 1;\n      switch (yystate) {\n        case 6:\n        case 7:\n          return yy;\n        case 8:\n          yy.getLogger().trace(\"Stop NL \");\n          break;\n        case 9:\n          yy.getLogger().trace(\"Stop EOF \");\n          break;\n        case 11:\n          yy.getLogger().trace(\"Stop NL2 \");\n          break;\n        case 12:\n          yy.getLogger().trace(\"Stop EOF2 \");\n          break;\n        case 15:\n          yy.getLogger().info(\"Node: \", $$[$0].id);\n          yy.addNode($$[$0 - 1].length, $$[$0].id, $$[$0].descr, $$[$0].type);\n          break;\n        case 16:\n          yy.getLogger().trace(\"Icon: \", $$[$0]);\n          yy.decorateNode({ icon: $$[$0] });\n          break;\n        case 17:\n        case 21:\n          yy.decorateNode({ class: $$[$0] });\n          break;\n        case 18:\n          yy.getLogger().trace(\"SPACELIST\");\n          break;\n        case 19:\n          yy.getLogger().trace(\"Node: \", $$[$0].id);\n          yy.addNode(0, $$[$0].id, $$[$0].descr, $$[$0].type);\n          break;\n        case 20:\n          yy.decorateNode({ icon: $$[$0] });\n          break;\n        case 25:\n          yy.getLogger().trace(\"node found ..\", $$[$0 - 2]);\n          this.$ = { id: $$[$0 - 1], descr: $$[$0 - 1], type: yy.getType($$[$0 - 2], $$[$0]) };\n          break;\n        case 26:\n          this.$ = { id: $$[$0], descr: $$[$0], type: yy.nodeType.DEFAULT };\n          break;\n        case 27:\n          yy.getLogger().trace(\"node found ..\", $$[$0 - 3]);\n          this.$ = { id: $$[$0 - 3], descr: $$[$0 - 1], type: yy.getType($$[$0 - 2], $$[$0]) };\n          break;\n      }\n    },\n    table: [{ 3: 1, 4: 2, 5: 3, 6: [1, 5], 8: $V0 }, { 1: [3] }, { 1: [2, 1] }, { 4: 6, 6: [1, 7], 7: [1, 8], 8: $V0 }, { 6: $V1, 7: [1, 10], 9: 9, 12: 11, 13: $V2, 14: 14, 15: $V3, 16: $V4, 17: 17, 18: 18, 19: $V5, 22: $V6 }, o($V7, [2, 3]), { 1: [2, 2] }, o($V7, [2, 4]), o($V7, [2, 5]), { 1: [2, 6], 6: $V1, 12: 21, 13: $V2, 14: 14, 15: $V3, 16: $V4, 17: 17, 18: 18, 19: $V5, 22: $V6 }, { 6: $V1, 9: 22, 12: 11, 13: $V2, 14: 14, 15: $V3, 16: $V4, 17: 17, 18: 18, 19: $V5, 22: $V6 }, { 6: $V8, 7: $V9, 10: 23, 11: $Va }, o($Vb, [2, 22], { 17: 17, 18: 18, 14: 27, 15: [1, 28], 16: [1, 29], 19: $V5, 22: $V6 }), o($Vb, [2, 18]), o($Vb, [2, 19]), o($Vb, [2, 20]), o($Vb, [2, 21]), o($Vb, [2, 23]), o($Vb, [2, 24]), o($Vb, [2, 26], { 19: [1, 30] }), { 20: [1, 31] }, { 6: $V8, 7: $V9, 10: 32, 11: $Va }, { 1: [2, 7], 6: $V1, 12: 21, 13: $V2, 14: 14, 15: $V3, 16: $V4, 17: 17, 18: 18, 19: $V5, 22: $V6 }, o($Vc, [2, 14], { 7: $Vd, 11: $Ve }), o($Vf, [2, 8]), o($Vf, [2, 9]), o($Vf, [2, 10]), o($Vb, [2, 15]), o($Vb, [2, 16]), o($Vb, [2, 17]), { 20: [1, 35] }, { 21: [1, 36] }, o($Vc, [2, 13], { 7: $Vd, 11: $Ve }), o($Vf, [2, 11]), o($Vf, [2, 12]), { 21: [1, 37] }, o($Vb, [2, 25]), o($Vb, [2, 27])],\n    defaultActions: { 2: [2, 1], 6: [2, 2] },\n    parseError: function parseError(str, hash) {\n      if (hash.recoverable) {\n        this.trace(str);\n      } else {\n        var error = new Error(str);\n        error.hash = hash;\n        throw error;\n      }\n    },\n    parse: function parse(input) {\n      var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = \"\", yylineno = 0, yyleng = 0, TERROR = 2, EOF = 1;\n      var args = lstack.slice.call(arguments, 1);\n      var lexer2 = Object.create(this.lexer);\n      var sharedState = { yy: {} };\n      for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n          sharedState.yy[k] = this.yy[k];\n        }\n      }\n      lexer2.setInput(input, sharedState.yy);\n      sharedState.yy.lexer = lexer2;\n      sharedState.yy.parser = this;\n      if (typeof lexer2.yylloc == \"undefined\") {\n        lexer2.yylloc = {};\n      }\n      var yyloc = lexer2.yylloc;\n      lstack.push(yyloc);\n      var ranges = lexer2.options && lexer2.options.ranges;\n      if (typeof sharedState.yy.parseError === \"function\") {\n        this.parseError = sharedState.yy.parseError;\n      } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n      }\n      function lex() {\n        var token;\n        token = tstack.pop() || lexer2.lex() || EOF;\n        if (typeof token !== \"number\") {\n          if (token instanceof Array) {\n            tstack = token;\n            token = tstack.pop();\n          }\n          token = self.symbols_[token] || token;\n        }\n        return token;\n      }\n      var symbol, state, action, r, yyval = {}, p, len, newState, expected;\n      while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n          action = this.defaultActions[state];\n        } else {\n          if (symbol === null || typeof symbol == \"undefined\") {\n            symbol = lex();\n          }\n          action = table[state] && table[state][symbol];\n        }\n        if (typeof action === \"undefined\" || !action.length || !action[0]) {\n          var errStr = \"\";\n          expected = [];\n          for (p in table[state]) {\n            if (this.terminals_[p] && p > TERROR) {\n              expected.push(\"'\" + this.terminals_[p] + \"'\");\n            }\n          }\n          if (lexer2.showPosition) {\n            errStr = \"Parse error on line \" + (yylineno + 1) + \":\\n\" + lexer2.showPosition() + \"\\nExpecting \" + expected.join(\", \") + \", got '\" + (this.terminals_[symbol] || symbol) + \"'\";\n          } else {\n            errStr = \"Parse error on line \" + (yylineno + 1) + \": Unexpected \" + (symbol == EOF ? \"end of input\" : \"'\" + (this.terminals_[symbol] || symbol) + \"'\");\n          }\n          this.parseError(errStr, {\n            text: lexer2.match,\n            token: this.terminals_[symbol] || symbol,\n            line: lexer2.yylineno,\n            loc: yyloc,\n            expected\n          });\n        }\n        if (action[0] instanceof Array && action.length > 1) {\n          throw new Error(\"Parse Error: multiple actions possible at state: \" + state + \", token: \" + symbol);\n        }\n        switch (action[0]) {\n          case 1:\n            stack.push(symbol);\n            vstack.push(lexer2.yytext);\n            lstack.push(lexer2.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            {\n              yyleng = lexer2.yyleng;\n              yytext = lexer2.yytext;\n              yylineno = lexer2.yylineno;\n              yyloc = lexer2.yylloc;\n            }\n            break;\n          case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n              first_line: lstack[lstack.length - (len || 1)].first_line,\n              last_line: lstack[lstack.length - 1].last_line,\n              first_column: lstack[lstack.length - (len || 1)].first_column,\n              last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n              yyval._$.range = [\n                lstack[lstack.length - (len || 1)].range[0],\n                lstack[lstack.length - 1].range[1]\n              ];\n            }\n            r = this.performAction.apply(yyval, [\n              yytext,\n              yyleng,\n              yylineno,\n              sharedState.yy,\n              action[1],\n              vstack,\n              lstack\n            ].concat(args));\n            if (typeof r !== \"undefined\") {\n              return r;\n            }\n            if (len) {\n              stack = stack.slice(0, -1 * len * 2);\n              vstack = vstack.slice(0, -1 * len);\n              lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n          case 3:\n            return true;\n        }\n      }\n      return true;\n    }\n  };\n  var lexer = function() {\n    var lexer2 = {\n      EOF: 1,\n      parseError: function parseError(str, hash) {\n        if (this.yy.parser) {\n          this.yy.parser.parseError(str, hash);\n        } else {\n          throw new Error(str);\n        }\n      },\n      // resets the lexer, sets new input\n      setInput: function(input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = \"\";\n        this.conditionStack = [\"INITIAL\"];\n        this.yylloc = {\n          first_line: 1,\n          first_column: 0,\n          last_line: 1,\n          last_column: 0\n        };\n        if (this.options.ranges) {\n          this.yylloc.range = [0, 0];\n        }\n        this.offset = 0;\n        return this;\n      },\n      // consumes and returns one char from the input\n      input: function() {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n          this.yylineno++;\n          this.yylloc.last_line++;\n        } else {\n          this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n          this.yylloc.range[1]++;\n        }\n        this._input = this._input.slice(1);\n        return ch;\n      },\n      // unshifts one char (or a string) into the input\n      unput: function(ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n        if (lines.length - 1) {\n          this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n        this.yylloc = {\n          first_line: this.yylloc.first_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.first_column,\n          last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len\n        };\n        if (this.options.ranges) {\n          this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n      },\n      // When called from action, caches matched text and appends it on next action\n      more: function() {\n        this._more = true;\n        return this;\n      },\n      // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\n      reject: function() {\n        if (this.options.backtrack_lexer) {\n          this._backtrack = true;\n        } else {\n          return this.parseError(\"Lexical error on line \" + (this.yylineno + 1) + \". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n\" + this.showPosition(), {\n            text: \"\",\n            token: null,\n            line: this.yylineno\n          });\n        }\n        return this;\n      },\n      // retain first n characters of the match\n      less: function(n) {\n        this.unput(this.match.slice(n));\n      },\n      // displays already matched input, i.e. for error messages\n      pastInput: function() {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? \"...\" : \"\") + past.substr(-20).replace(/\\n/g, \"\");\n      },\n      // displays upcoming input, i.e. for error messages\n      upcomingInput: function() {\n        var next = this.match;\n        if (next.length < 20) {\n          next += this._input.substr(0, 20 - next.length);\n        }\n        return (next.substr(0, 20) + (next.length > 20 ? \"...\" : \"\")).replace(/\\n/g, \"\");\n      },\n      // displays the character position where the lexing error occurred, i.e. for error messages\n      showPosition: function() {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n      },\n      // test the lexed token: return FALSE when not a match, otherwise return token\n      test_match: function(match, indexed_rule) {\n        var token, lines, backup;\n        if (this.options.backtrack_lexer) {\n          backup = {\n            yylineno: this.yylineno,\n            yylloc: {\n              first_line: this.yylloc.first_line,\n              last_line: this.last_line,\n              first_column: this.yylloc.first_column,\n              last_column: this.yylloc.last_column\n            },\n            yytext: this.yytext,\n            match: this.match,\n            matches: this.matches,\n            matched: this.matched,\n            yyleng: this.yyleng,\n            offset: this.offset,\n            _more: this._more,\n            _input: this._input,\n            yy: this.yy,\n            conditionStack: this.conditionStack.slice(0),\n            done: this.done\n          };\n          if (this.options.ranges) {\n            backup.yylloc.range = this.yylloc.range.slice(0);\n          }\n        }\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n          this.yylineno += lines.length;\n        }\n        this.yylloc = {\n          first_line: this.yylloc.last_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.last_column,\n          last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length : this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n          this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n          this.done = false;\n        }\n        if (token) {\n          return token;\n        } else if (this._backtrack) {\n          for (var k in backup) {\n            this[k] = backup[k];\n          }\n          return false;\n        }\n        return false;\n      },\n      // return next match in input\n      next: function() {\n        if (this.done) {\n          return this.EOF;\n        }\n        if (!this._input) {\n          this.done = true;\n        }\n        var token, match, tempMatch, index;\n        if (!this._more) {\n          this.yytext = \"\";\n          this.match = \"\";\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n          tempMatch = this._input.match(this.rules[rules[i]]);\n          if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n            match = tempMatch;\n            index = i;\n            if (this.options.backtrack_lexer) {\n              token = this.test_match(tempMatch, rules[i]);\n              if (token !== false) {\n                return token;\n              } else if (this._backtrack) {\n                match = false;\n                continue;\n              } else {\n                return false;\n              }\n            } else if (!this.options.flex) {\n              break;\n            }\n          }\n        }\n        if (match) {\n          token = this.test_match(match, rules[index]);\n          if (token !== false) {\n            return token;\n          }\n          return false;\n        }\n        if (this._input === \"\") {\n          return this.EOF;\n        } else {\n          return this.parseError(\"Lexical error on line \" + (this.yylineno + 1) + \". Unrecognized text.\\n\" + this.showPosition(), {\n            text: \"\",\n            token: null,\n            line: this.yylineno\n          });\n        }\n      },\n      // return next match that has a token\n      lex: function lex() {\n        var r = this.next();\n        if (r) {\n          return r;\n        } else {\n          return this.lex();\n        }\n      },\n      // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\n      begin: function begin(condition) {\n        this.conditionStack.push(condition);\n      },\n      // pop the previously active lexer condition state off the condition stack\n      popState: function popState() {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n          return this.conditionStack.pop();\n        } else {\n          return this.conditionStack[0];\n        }\n      },\n      // produce the lexer rule set which is active for the currently active lexer condition state\n      _currentRules: function _currentRules() {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n          return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n          return this.conditions[\"INITIAL\"].rules;\n        }\n      },\n      // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\n      topState: function topState(n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n          return this.conditionStack[n];\n        } else {\n          return \"INITIAL\";\n        }\n      },\n      // alias for begin(condition)\n      pushState: function pushState(condition) {\n        this.begin(condition);\n      },\n      // return the number of states currently on the stack\n      stateStackSize: function stateStackSize() {\n        return this.conditionStack.length;\n      },\n      options: { \"case-insensitive\": true },\n      performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {\n        switch ($avoiding_name_collisions) {\n          case 0:\n            yy.getLogger().trace(\"Found comment\", yy_.yytext);\n            return 6;\n          case 1:\n            return 8;\n          case 2:\n            this.begin(\"CLASS\");\n            break;\n          case 3:\n            this.popState();\n            return 16;\n          case 4:\n            this.popState();\n            break;\n          case 5:\n            yy.getLogger().trace(\"Begin icon\");\n            this.begin(\"ICON\");\n            break;\n          case 6:\n            yy.getLogger().trace(\"SPACELINE\");\n            return 6;\n          case 7:\n            return 7;\n          case 8:\n            return 15;\n          case 9:\n            yy.getLogger().trace(\"end icon\");\n            this.popState();\n            break;\n          case 10:\n            yy.getLogger().trace(\"Exploding node\");\n            this.begin(\"NODE\");\n            return 19;\n          case 11:\n            yy.getLogger().trace(\"Cloud\");\n            this.begin(\"NODE\");\n            return 19;\n          case 12:\n            yy.getLogger().trace(\"Explosion Bang\");\n            this.begin(\"NODE\");\n            return 19;\n          case 13:\n            yy.getLogger().trace(\"Cloud Bang\");\n            this.begin(\"NODE\");\n            return 19;\n          case 14:\n            this.begin(\"NODE\");\n            return 19;\n          case 15:\n            this.begin(\"NODE\");\n            return 19;\n          case 16:\n            this.begin(\"NODE\");\n            return 19;\n          case 17:\n            this.begin(\"NODE\");\n            return 19;\n          case 18:\n            return 13;\n          case 19:\n            return 22;\n          case 20:\n            return 11;\n          case 21:\n            this.begin(\"NSTR2\");\n            break;\n          case 22:\n            return \"NODE_DESCR\";\n          case 23:\n            this.popState();\n            break;\n          case 24:\n            yy.getLogger().trace(\"Starting NSTR\");\n            this.begin(\"NSTR\");\n            break;\n          case 25:\n            yy.getLogger().trace(\"description:\", yy_.yytext);\n            return \"NODE_DESCR\";\n          case 26:\n            this.popState();\n            break;\n          case 27:\n            this.popState();\n            yy.getLogger().trace(\"node end ))\");\n            return \"NODE_DEND\";\n          case 28:\n            this.popState();\n            yy.getLogger().trace(\"node end )\");\n            return \"NODE_DEND\";\n          case 29:\n            this.popState();\n            yy.getLogger().trace(\"node end ...\", yy_.yytext);\n            return \"NODE_DEND\";\n          case 30:\n            this.popState();\n            yy.getLogger().trace(\"node end ((\");\n            return \"NODE_DEND\";\n          case 31:\n            this.popState();\n            yy.getLogger().trace(\"node end (-\");\n            return \"NODE_DEND\";\n          case 32:\n            this.popState();\n            yy.getLogger().trace(\"node end (-\");\n            return \"NODE_DEND\";\n          case 33:\n            this.popState();\n            yy.getLogger().trace(\"node end ((\");\n            return \"NODE_DEND\";\n          case 34:\n            this.popState();\n            yy.getLogger().trace(\"node end ((\");\n            return \"NODE_DEND\";\n          case 35:\n            yy.getLogger().trace(\"Long description:\", yy_.yytext);\n            return 20;\n          case 36:\n            yy.getLogger().trace(\"Long description:\", yy_.yytext);\n            return 20;\n        }\n      },\n      rules: [/^(?:\\s*%%.*)/i, /^(?:mindmap\\b)/i, /^(?::::)/i, /^(?:.+)/i, /^(?:\\n)/i, /^(?:::icon\\()/i, /^(?:[\\s]+[\\n])/i, /^(?:[\\n]+)/i, /^(?:[^\\)]+)/i, /^(?:\\))/i, /^(?:-\\))/i, /^(?:\\(-)/i, /^(?:\\)\\))/i, /^(?:\\))/i, /^(?:\\(\\()/i, /^(?:\\{\\{)/i, /^(?:\\()/i, /^(?:\\[)/i, /^(?:[\\s]+)/i, /^(?:[^\\(\\[\\n\\)\\{\\}]+)/i, /^(?:$)/i, /^(?:[\"][`])/i, /^(?:[^`\"]+)/i, /^(?:[`][\"])/i, /^(?:[\"])/i, /^(?:[^\"]+)/i, /^(?:[\"])/i, /^(?:[\\)]\\))/i, /^(?:[\\)])/i, /^(?:[\\]])/i, /^(?:\\}\\})/i, /^(?:\\(-)/i, /^(?:-\\))/i, /^(?:\\(\\()/i, /^(?:\\()/i, /^(?:[^\\)\\]\\(\\}]+)/i, /^(?:.+(?!\\(\\())/i],\n      conditions: { \"CLASS\": { \"rules\": [3, 4], \"inclusive\": false }, \"ICON\": { \"rules\": [8, 9], \"inclusive\": false }, \"NSTR2\": { \"rules\": [22, 23], \"inclusive\": false }, \"NSTR\": { \"rules\": [25, 26], \"inclusive\": false }, \"NODE\": { \"rules\": [21, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], \"inclusive\": false }, \"INITIAL\": { \"rules\": [0, 1, 2, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], \"inclusive\": true } }\n    };\n    return lexer2;\n  }();\n  parser2.lexer = lexer;\n  function Parser() {\n    this.yy = {};\n  }\n  Parser.prototype = parser2;\n  parser2.Parser = Parser;\n  return new Parser();\n}();\nparser.parser = parser;\nconst parser$1 = parser;\nlet nodes = [];\nlet cnt = 0;\nlet elements = {};\nconst clear = () => {\n  nodes = [];\n  cnt = 0;\n  elements = {};\n};\nconst getParent = function(level) {\n  for (let i = nodes.length - 1; i >= 0; i--) {\n    if (nodes[i].level < level) {\n      return nodes[i];\n    }\n  }\n  return null;\n};\nconst getMindmap = () => {\n  return nodes.length > 0 ? nodes[0] : null;\n};\nconst addNode = (level, id, descr, type) => {\n  var _a, _b;\n  log.info(\"addNode\", level, id, descr, type);\n  const conf = getConfig();\n  let padding = ((_a = conf.mindmap) == null ? void 0 : _a.padding) ?? defaultConfig.mindmap.padding;\n  switch (type) {\n    case nodeType.ROUNDED_RECT:\n    case nodeType.RECT:\n    case nodeType.HEXAGON:\n      padding *= 2;\n  }\n  const node = {\n    id: cnt++,\n    nodeId: sanitizeText(id, conf),\n    level,\n    descr: sanitizeText(descr, conf),\n    type,\n    children: [],\n    width: ((_b = conf.mindmap) == null ? void 0 : _b.maxNodeWidth) ?? defaultConfig.mindmap.maxNodeWidth,\n    padding\n  };\n  const parent = getParent(level);\n  if (parent) {\n    parent.children.push(node);\n    nodes.push(node);\n  } else {\n    if (nodes.length === 0) {\n      nodes.push(node);\n    } else {\n      throw new Error(\n        'There can be only one root. No parent could be found for (\"' + node.descr + '\")'\n      );\n    }\n  }\n};\nconst nodeType = {\n  DEFAULT: 0,\n  NO_BORDER: 0,\n  ROUNDED_RECT: 1,\n  RECT: 2,\n  CIRCLE: 3,\n  CLOUD: 4,\n  BANG: 5,\n  HEXAGON: 6\n};\nconst getType = (startStr, endStr) => {\n  log.debug(\"In get type\", startStr, endStr);\n  switch (startStr) {\n    case \"[\":\n      return nodeType.RECT;\n    case \"(\":\n      return endStr === \")\" ? nodeType.ROUNDED_RECT : nodeType.CLOUD;\n    case \"((\":\n      return nodeType.CIRCLE;\n    case \")\":\n      return nodeType.CLOUD;\n    case \"))\":\n      return nodeType.BANG;\n    case \"{{\":\n      return nodeType.HEXAGON;\n    default:\n      return nodeType.DEFAULT;\n  }\n};\nconst setElementForId = (id, element) => {\n  elements[id] = element;\n};\nconst decorateNode = (decoration) => {\n  if (!decoration) {\n    return;\n  }\n  const config = getConfig();\n  const node = nodes[nodes.length - 1];\n  if (decoration.icon) {\n    node.icon = sanitizeText(decoration.icon, config);\n  }\n  if (decoration.class) {\n    node.class = sanitizeText(decoration.class, config);\n  }\n};\nconst type2Str = (type) => {\n  switch (type) {\n    case nodeType.DEFAULT:\n      return \"no-border\";\n    case nodeType.RECT:\n      return \"rect\";\n    case nodeType.ROUNDED_RECT:\n      return \"rounded-rect\";\n    case nodeType.CIRCLE:\n      return \"circle\";\n    case nodeType.CLOUD:\n      return \"cloud\";\n    case nodeType.BANG:\n      return \"bang\";\n    case nodeType.HEXAGON:\n      return \"hexgon\";\n    default:\n      return \"no-border\";\n  }\n};\nconst getLogger = () => log;\nconst getElementById = (id) => elements[id];\nconst db = {\n  clear,\n  addNode,\n  getMindmap,\n  nodeType,\n  getType,\n  setElementForId,\n  decorateNode,\n  type2Str,\n  getLogger,\n  getElementById\n};\nconst db$1 = db;\nconst MAX_SECTIONS = 12;\nconst defaultBkg = function(db2, elem, node, section) {\n  const rd = 5;\n  elem.append(\"path\").attr(\"id\", \"node-\" + node.id).attr(\"class\", \"node-bkg node-\" + db2.type2Str(node.type)).attr(\n    \"d\",\n    `M0 ${node.height - rd} v${-node.height + 2 * rd} q0,-5 5,-5 h${node.width - 2 * rd} q5,0 5,5 v${node.height - rd} H0 Z`\n  );\n  elem.append(\"line\").attr(\"class\", \"node-line-\" + section).attr(\"x1\", 0).attr(\"y1\", node.height).attr(\"x2\", node.width).attr(\"y2\", node.height);\n};\nconst rectBkg = function(db2, elem, node) {\n  elem.append(\"rect\").attr(\"id\", \"node-\" + node.id).attr(\"class\", \"node-bkg node-\" + db2.type2Str(node.type)).attr(\"height\", node.height).attr(\"width\", node.width);\n};\nconst cloudBkg = function(db2, elem, node) {\n  const w = node.width;\n  const h = node.height;\n  const r1 = 0.15 * w;\n  const r2 = 0.25 * w;\n  const r3 = 0.35 * w;\n  const r4 = 0.2 * w;\n  elem.append(\"path\").attr(\"id\", \"node-\" + node.id).attr(\"class\", \"node-bkg node-\" + db2.type2Str(node.type)).attr(\n    \"d\",\n    `M0 0 a${r1},${r1} 0 0,1 ${w * 0.25},${-1 * w * 0.1}\n      a${r3},${r3} 1 0,1 ${w * 0.4},${-1 * w * 0.1}\n      a${r2},${r2} 1 0,1 ${w * 0.35},${1 * w * 0.2}\n\n      a${r1},${r1} 1 0,1 ${w * 0.15},${1 * h * 0.35}\n      a${r4},${r4} 1 0,1 ${-1 * w * 0.15},${1 * h * 0.65}\n\n      a${r2},${r1} 1 0,1 ${-1 * w * 0.25},${w * 0.15}\n      a${r3},${r3} 1 0,1 ${-1 * w * 0.5},${0}\n      a${r1},${r1} 1 0,1 ${-1 * w * 0.25},${-1 * w * 0.15}\n\n      a${r1},${r1} 1 0,1 ${-1 * w * 0.1},${-1 * h * 0.35}\n      a${r4},${r4} 1 0,1 ${w * 0.1},${-1 * h * 0.65}\n\n    H0 V0 Z`\n  );\n};\nconst bangBkg = function(db2, elem, node) {\n  const w = node.width;\n  const h = node.height;\n  const r = 0.15 * w;\n  elem.append(\"path\").attr(\"id\", \"node-\" + node.id).attr(\"class\", \"node-bkg node-\" + db2.type2Str(node.type)).attr(\n    \"d\",\n    `M0 0 a${r},${r} 1 0,0 ${w * 0.25},${-1 * h * 0.1}\n      a${r},${r} 1 0,0 ${w * 0.25},${0}\n      a${r},${r} 1 0,0 ${w * 0.25},${0}\n      a${r},${r} 1 0,0 ${w * 0.25},${1 * h * 0.1}\n\n      a${r},${r} 1 0,0 ${w * 0.15},${1 * h * 0.33}\n      a${r * 0.8},${r * 0.8} 1 0,0 ${0},${1 * h * 0.34}\n      a${r},${r} 1 0,0 ${-1 * w * 0.15},${1 * h * 0.33}\n\n      a${r},${r} 1 0,0 ${-1 * w * 0.25},${h * 0.15}\n      a${r},${r} 1 0,0 ${-1 * w * 0.25},${0}\n      a${r},${r} 1 0,0 ${-1 * w * 0.25},${0}\n      a${r},${r} 1 0,0 ${-1 * w * 0.25},${-1 * h * 0.15}\n\n      a${r},${r} 1 0,0 ${-1 * w * 0.1},${-1 * h * 0.33}\n      a${r * 0.8},${r * 0.8} 1 0,0 ${0},${-1 * h * 0.34}\n      a${r},${r} 1 0,0 ${w * 0.1},${-1 * h * 0.33}\n\n    H0 V0 Z`\n  );\n};\nconst circleBkg = function(db2, elem, node) {\n  elem.append(\"circle\").attr(\"id\", \"node-\" + node.id).attr(\"class\", \"node-bkg node-\" + db2.type2Str(node.type)).attr(\"r\", node.width / 2);\n};\nfunction insertPolygonShape(parent, w, h, points, node) {\n  return parent.insert(\"polygon\", \":first-child\").attr(\n    \"points\",\n    points.map(function(d) {\n      return d.x + \",\" + d.y;\n    }).join(\" \")\n  ).attr(\"transform\", \"translate(\" + (node.width - w) / 2 + \", \" + h + \")\");\n}\nconst hexagonBkg = function(_db, elem, node) {\n  const h = node.height;\n  const f = 4;\n  const m = h / f;\n  const w = node.width - node.padding + 2 * m;\n  const points = [\n    { x: m, y: 0 },\n    { x: w - m, y: 0 },\n    { x: w, y: -h / 2 },\n    { x: w - m, y: -h },\n    { x: m, y: -h },\n    { x: 0, y: -h / 2 }\n  ];\n  insertPolygonShape(elem, w, h, points, node);\n};\nconst roundedRectBkg = function(db2, elem, node) {\n  elem.append(\"rect\").attr(\"id\", \"node-\" + node.id).attr(\"class\", \"node-bkg node-\" + db2.type2Str(node.type)).attr(\"height\", node.height).attr(\"rx\", node.padding).attr(\"ry\", node.padding).attr(\"width\", node.width);\n};\nconst drawNode = function(db2, elem, node, fullSection, conf) {\n  const htmlLabels = conf.htmlLabels;\n  const section = fullSection % (MAX_SECTIONS - 1);\n  const nodeElem = elem.append(\"g\");\n  node.section = section;\n  let sectionClass = \"section-\" + section;\n  if (section < 0) {\n    sectionClass += \" section-root\";\n  }\n  nodeElem.attr(\"class\", (node.class ? node.class + \" \" : \"\") + \"mindmap-node \" + sectionClass);\n  const bkgElem = nodeElem.append(\"g\");\n  const textElem = nodeElem.append(\"g\");\n  const description = node.descr.replace(/(<br\\/*>)/g, \"\\n\");\n  createText(textElem, description, {\n    useHtmlLabels: htmlLabels,\n    width: node.width,\n    classes: \"mindmap-node-label\"\n  });\n  if (!htmlLabels) {\n    textElem.attr(\"dy\", \"1em\").attr(\"alignment-baseline\", \"middle\").attr(\"dominant-baseline\", \"middle\").attr(\"text-anchor\", \"middle\");\n  }\n  const bbox = textElem.node().getBBox();\n  const [fontSize] = parseFontSize(conf.fontSize);\n  node.height = bbox.height + fontSize * 1.1 * 0.5 + node.padding;\n  node.width = bbox.width + 2 * node.padding;\n  if (node.icon) {\n    if (node.type === db2.nodeType.CIRCLE) {\n      node.height += 50;\n      node.width += 50;\n      const icon = nodeElem.append(\"foreignObject\").attr(\"height\", \"50px\").attr(\"width\", node.width).attr(\"style\", \"text-align: center;\");\n      icon.append(\"div\").attr(\"class\", \"icon-container\").append(\"i\").attr(\"class\", \"node-icon-\" + section + \" \" + node.icon);\n      textElem.attr(\n        \"transform\",\n        \"translate(\" + node.width / 2 + \", \" + (node.height / 2 - 1.5 * node.padding) + \")\"\n      );\n    } else {\n      node.width += 50;\n      const orgHeight = node.height;\n      node.height = Math.max(orgHeight, 60);\n      const heightDiff = Math.abs(node.height - orgHeight);\n      const icon = nodeElem.append(\"foreignObject\").attr(\"width\", \"60px\").attr(\"height\", node.height).attr(\"style\", \"text-align: center;margin-top:\" + heightDiff / 2 + \"px;\");\n      icon.append(\"div\").attr(\"class\", \"icon-container\").append(\"i\").attr(\"class\", \"node-icon-\" + section + \" \" + node.icon);\n      textElem.attr(\n        \"transform\",\n        \"translate(\" + (25 + node.width / 2) + \", \" + (heightDiff / 2 + node.padding / 2) + \")\"\n      );\n    }\n  } else {\n    if (!htmlLabels) {\n      const dx = node.width / 2;\n      const dy = node.padding / 2;\n      textElem.attr(\"transform\", \"translate(\" + dx + \", \" + dy + \")\");\n    } else {\n      const dx = (node.width - bbox.width) / 2;\n      const dy = (node.height - bbox.height) / 2;\n      textElem.attr(\"transform\", \"translate(\" + dx + \", \" + dy + \")\");\n    }\n  }\n  switch (node.type) {\n    case db2.nodeType.DEFAULT:\n      defaultBkg(db2, bkgElem, node, section);\n      break;\n    case db2.nodeType.ROUNDED_RECT:\n      roundedRectBkg(db2, bkgElem, node);\n      break;\n    case db2.nodeType.RECT:\n      rectBkg(db2, bkgElem, node);\n      break;\n    case db2.nodeType.CIRCLE:\n      bkgElem.attr(\"transform\", \"translate(\" + node.width / 2 + \", \" + +node.height / 2 + \")\");\n      circleBkg(db2, bkgElem, node);\n      break;\n    case db2.nodeType.CLOUD:\n      cloudBkg(db2, bkgElem, node);\n      break;\n    case db2.nodeType.BANG:\n      bangBkg(db2, bkgElem, node);\n      break;\n    case db2.nodeType.HEXAGON:\n      hexagonBkg(db2, bkgElem, node);\n      break;\n  }\n  db2.setElementForId(node.id, nodeElem);\n  return node.height;\n};\nconst positionNode = function(db2, node) {\n  const nodeElem = db2.getElementById(node.id);\n  const x = node.x || 0;\n  const y = node.y || 0;\n  nodeElem.attr(\"transform\", \"translate(\" + x + \",\" + y + \")\");\n};\ncytoscape.use(coseBilkent);\nfunction drawNodes(db2, svg, mindmap, section, conf) {\n  drawNode(db2, svg, mindmap, section, conf);\n  if (mindmap.children) {\n    mindmap.children.forEach((child, index) => {\n      drawNodes(db2, svg, child, section < 0 ? index : section, conf);\n    });\n  }\n}\nfunction drawEdges(edgesEl, cy) {\n  cy.edges().map((edge, id) => {\n    const data = edge.data();\n    if (edge[0]._private.bodyBounds) {\n      const bounds = edge[0]._private.rscratch;\n      log.trace(\"Edge: \", id, data);\n      edgesEl.insert(\"path\").attr(\n        \"d\",\n        `M ${bounds.startX},${bounds.startY} L ${bounds.midX},${bounds.midY} L${bounds.endX},${bounds.endY} `\n      ).attr(\"class\", \"edge section-edge-\" + data.section + \" edge-depth-\" + data.depth);\n    }\n  });\n}\nfunction addNodes(mindmap, cy, conf, level) {\n  cy.add({\n    group: \"nodes\",\n    data: {\n      id: mindmap.id.toString(),\n      labelText: mindmap.descr,\n      height: mindmap.height,\n      width: mindmap.width,\n      level,\n      nodeId: mindmap.id,\n      padding: mindmap.padding,\n      type: mindmap.type\n    },\n    position: {\n      x: mindmap.x,\n      y: mindmap.y\n    }\n  });\n  if (mindmap.children) {\n    mindmap.children.forEach((child) => {\n      addNodes(child, cy, conf, level + 1);\n      cy.add({\n        group: \"edges\",\n        data: {\n          id: `${mindmap.id}_${child.id}`,\n          source: mindmap.id,\n          target: child.id,\n          depth: level,\n          section: child.section\n        }\n      });\n    });\n  }\n}\nfunction layoutMindmap(node, conf) {\n  return new Promise((resolve) => {\n    const renderEl = select(\"body\").append(\"div\").attr(\"id\", \"cy\").attr(\"style\", \"display:none\");\n    const cy = cytoscape({\n      container: document.getElementById(\"cy\"),\n      // container to render in\n      style: [\n        {\n          selector: \"edge\",\n          style: {\n            \"curve-style\": \"bezier\"\n          }\n        }\n      ]\n    });\n    renderEl.remove();\n    addNodes(node, cy, conf, 0);\n    cy.nodes().forEach(function(n) {\n      n.layoutDimensions = () => {\n        const data = n.data();\n        return { w: data.width, h: data.height };\n      };\n    });\n    cy.layout({\n      name: \"cose-bilkent\",\n      // @ts-ignore Types for cose-bilkent are not correct?\n      quality: \"proof\",\n      styleEnabled: false,\n      animate: false\n    }).run();\n    cy.ready((e) => {\n      log.info(\"Ready\", e);\n      resolve(cy);\n    });\n  });\n}\nfunction positionNodes(db2, cy) {\n  cy.nodes().map((node, id) => {\n    const data = node.data();\n    data.x = node.position().x;\n    data.y = node.position().y;\n    positionNode(db2, data);\n    const el = db2.getElementById(data.nodeId);\n    log.info(\"Id:\", id, \"Position: (\", node.position().x, \", \", node.position().y, \")\", data);\n    el.attr(\n      \"transform\",\n      `translate(${node.position().x - data.width / 2}, ${node.position().y - data.height / 2})`\n    );\n    el.attr(\"attr\", `apa-${id})`);\n  });\n}\nconst draw = async (text, id, _version, diagObj) => {\n  var _a, _b;\n  log.debug(\"Rendering mindmap diagram\\n\" + text);\n  const db2 = diagObj.db;\n  const mm = db2.getMindmap();\n  if (!mm) {\n    return;\n  }\n  const conf = getConfig();\n  conf.htmlLabels = false;\n  const svg = selectSvgElement(id);\n  const edgesElem = svg.append(\"g\");\n  edgesElem.attr(\"class\", \"mindmap-edges\");\n  const nodesElem = svg.append(\"g\");\n  nodesElem.attr(\"class\", \"mindmap-nodes\");\n  drawNodes(db2, nodesElem, mm, -1, conf);\n  const cy = await layoutMindmap(mm, conf);\n  drawEdges(edgesElem, cy);\n  positionNodes(db2, cy);\n  setupGraphViewbox(\n    void 0,\n    svg,\n    ((_a = conf.mindmap) == null ? void 0 : _a.padding) ?? defaultConfig.mindmap.padding,\n    ((_b = conf.mindmap) == null ? void 0 : _b.useMaxWidth) ?? defaultConfig.mindmap.useMaxWidth\n  );\n};\nconst renderer = {\n  draw\n};\nconst genSections = (options) => {\n  let sections = \"\";\n  for (let i = 0; i < options.THEME_COLOR_LIMIT; i++) {\n    options[\"lineColor\" + i] = options[\"lineColor\" + i] || options[\"cScaleInv\" + i];\n    if (isDark(options[\"lineColor\" + i])) {\n      options[\"lineColor\" + i] = lighten(options[\"lineColor\" + i], 20);\n    } else {\n      options[\"lineColor\" + i] = darken(options[\"lineColor\" + i], 20);\n    }\n  }\n  for (let i = 0; i < options.THEME_COLOR_LIMIT; i++) {\n    const sw = \"\" + (17 - 3 * i);\n    sections += `\n    .section-${i - 1} rect, .section-${i - 1} path, .section-${i - 1} circle, .section-${i - 1} polygon, .section-${i - 1} path  {\n      fill: ${options[\"cScale\" + i]};\n    }\n    .section-${i - 1} text {\n     fill: ${options[\"cScaleLabel\" + i]};\n    }\n    .node-icon-${i - 1} {\n      font-size: 40px;\n      color: ${options[\"cScaleLabel\" + i]};\n    }\n    .section-edge-${i - 1}{\n      stroke: ${options[\"cScale\" + i]};\n    }\n    .edge-depth-${i - 1}{\n      stroke-width: ${sw};\n    }\n    .section-${i - 1} line {\n      stroke: ${options[\"cScaleInv\" + i]} ;\n      stroke-width: 3;\n    }\n\n    .disabled, .disabled circle, .disabled text {\n      fill: lightgray;\n    }\n    .disabled text {\n      fill: #efefef;\n    }\n    `;\n  }\n  return sections;\n};\nconst getStyles = (options) => `\n  .edge {\n    stroke-width: 3;\n  }\n  ${genSections(options)}\n  .section-root rect, .section-root path, .section-root circle, .section-root polygon  {\n    fill: ${options.git0};\n  }\n  .section-root text {\n    fill: ${options.gitBranchLabel0};\n  }\n  .icon-container {\n    height:100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n  .edge {\n    fill: none;\n  }\n  .mindmap-node-label {\n    dy: 1em;\n    alignment-baseline: middle;\n    text-anchor: middle;\n    dominant-baseline: middle;\n    text-align: center;\n  }\n`;\nconst styles = getStyles;\nconst diagram = {\n  db: db$1,\n  renderer,\n  parser: parser$1,\n  styles\n};\nexport {\n  diagram\n};\n","/**\n * Copyright (c) 2016-2024, The Cytoscape Consortium.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy of\n * this software and associated documentation files (the “Software”), to deal in\n * the Software without restriction, including without limitation the rights to\n * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\n * of the Software, and to permit persons to whom the Software is furnished to do\n * so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _defineProperty$1(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _s, _e;\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function () {};\n      return {\n        s: F,\n        n: function () {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function (e) {\n          throw e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function () {\n      it = it.call(o);\n    },\n    n: function () {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function (e) {\n      didErr = true;\n      err = e;\n    },\n    f: function () {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nvar _window = typeof window === 'undefined' ? null : window; // eslint-disable-line no-undef\n\nvar navigator = _window ? _window.navigator : null;\n_window ? _window.document : null;\nvar typeofstr = _typeof('');\nvar typeofobj = _typeof({});\nvar typeoffn = _typeof(function () {});\nvar typeofhtmlele = typeof HTMLElement === \"undefined\" ? \"undefined\" : _typeof(HTMLElement);\nvar instanceStr = function instanceStr(obj) {\n  return obj && obj.instanceString && fn$6(obj.instanceString) ? obj.instanceString() : null;\n};\n\nvar string = function string(obj) {\n  return obj != null && _typeof(obj) == typeofstr;\n};\nvar fn$6 = function fn(obj) {\n  return obj != null && _typeof(obj) === typeoffn;\n};\nvar array = function array(obj) {\n  return !elementOrCollection(obj) && (Array.isArray ? Array.isArray(obj) : obj != null && obj instanceof Array);\n};\nvar plainObject = function plainObject(obj) {\n  return obj != null && _typeof(obj) === typeofobj && !array(obj) && obj.constructor === Object;\n};\nvar object = function object(obj) {\n  return obj != null && _typeof(obj) === typeofobj;\n};\nvar number$1 = function number(obj) {\n  return obj != null && _typeof(obj) === _typeof(1) && !isNaN(obj);\n};\nvar integer = function integer(obj) {\n  return number$1(obj) && Math.floor(obj) === obj;\n};\nvar htmlElement = function htmlElement(obj) {\n  if ('undefined' === typeofhtmlele) {\n    return undefined;\n  } else {\n    return null != obj && obj instanceof HTMLElement;\n  }\n};\nvar elementOrCollection = function elementOrCollection(obj) {\n  return element(obj) || collection(obj);\n};\nvar element = function element(obj) {\n  return instanceStr(obj) === 'collection' && obj._private.single;\n};\nvar collection = function collection(obj) {\n  return instanceStr(obj) === 'collection' && !obj._private.single;\n};\nvar core = function core(obj) {\n  return instanceStr(obj) === 'core';\n};\nvar stylesheet = function stylesheet(obj) {\n  return instanceStr(obj) === 'stylesheet';\n};\nvar event = function event(obj) {\n  return instanceStr(obj) === 'event';\n};\nvar emptyString = function emptyString(obj) {\n  if (obj === undefined || obj === null) {\n    // null is empty\n    return true;\n  } else if (obj === '' || obj.match(/^\\s+$/)) {\n    return true; // empty string is empty\n  }\n\n  return false; // otherwise, we don't know what we've got\n};\nvar domElement = function domElement(obj) {\n  if (typeof HTMLElement === 'undefined') {\n    return false; // we're not in a browser so it doesn't matter\n  } else {\n    return obj instanceof HTMLElement;\n  }\n};\nvar boundingBox = function boundingBox(obj) {\n  return plainObject(obj) && number$1(obj.x1) && number$1(obj.x2) && number$1(obj.y1) && number$1(obj.y2);\n};\nvar promise = function promise(obj) {\n  return object(obj) && fn$6(obj.then);\n};\nvar ms = function ms() {\n  return navigator && navigator.userAgent.match(/msie|trident|edge/i);\n}; // probably a better way to detect this...\n\nvar memoize$1 = function memoize(fn, keyFn) {\n  if (!keyFn) {\n    keyFn = function keyFn() {\n      if (arguments.length === 1) {\n        return arguments[0];\n      } else if (arguments.length === 0) {\n        return 'undefined';\n      }\n      var args = [];\n      for (var i = 0; i < arguments.length; i++) {\n        args.push(arguments[i]);\n      }\n      return args.join('$');\n    };\n  }\n  var memoizedFn = function memoizedFn() {\n    var self = this;\n    var args = arguments;\n    var ret;\n    var k = keyFn.apply(self, args);\n    var cache = memoizedFn.cache;\n    if (!(ret = cache[k])) {\n      ret = cache[k] = fn.apply(self, args);\n    }\n    return ret;\n  };\n  memoizedFn.cache = {};\n  return memoizedFn;\n};\n\nvar camel2dash = memoize$1(function (str) {\n  return str.replace(/([A-Z])/g, function (v) {\n    return '-' + v.toLowerCase();\n  });\n});\nvar dash2camel = memoize$1(function (str) {\n  return str.replace(/(-\\w)/g, function (v) {\n    return v[1].toUpperCase();\n  });\n});\nvar prependCamel = memoize$1(function (prefix, str) {\n  return prefix + str[0].toUpperCase() + str.substring(1);\n}, function (prefix, str) {\n  return prefix + '$' + str;\n});\nvar capitalize = function capitalize(str) {\n  if (emptyString(str)) {\n    return str;\n  }\n  return str.charAt(0).toUpperCase() + str.substring(1);\n};\n\nvar number = '(?:[-+]?(?:(?:\\\\d+|\\\\d*\\\\.\\\\d+)(?:[Ee][+-]?\\\\d+)?))';\nvar rgba = 'rgb[a]?\\\\((' + number + '[%]?)\\\\s*,\\\\s*(' + number + '[%]?)\\\\s*,\\\\s*(' + number + '[%]?)(?:\\\\s*,\\\\s*(' + number + '))?\\\\)';\nvar rgbaNoBackRefs = 'rgb[a]?\\\\((?:' + number + '[%]?)\\\\s*,\\\\s*(?:' + number + '[%]?)\\\\s*,\\\\s*(?:' + number + '[%]?)(?:\\\\s*,\\\\s*(?:' + number + '))?\\\\)';\nvar hsla = 'hsl[a]?\\\\((' + number + ')\\\\s*,\\\\s*(' + number + '[%])\\\\s*,\\\\s*(' + number + '[%])(?:\\\\s*,\\\\s*(' + number + '))?\\\\)';\nvar hslaNoBackRefs = 'hsl[a]?\\\\((?:' + number + ')\\\\s*,\\\\s*(?:' + number + '[%])\\\\s*,\\\\s*(?:' + number + '[%])(?:\\\\s*,\\\\s*(?:' + number + '))?\\\\)';\nvar hex3 = '\\\\#[0-9a-fA-F]{3}';\nvar hex6 = '\\\\#[0-9a-fA-F]{6}';\n\nvar ascending = function ascending(a, b) {\n  if (a < b) {\n    return -1;\n  } else if (a > b) {\n    return 1;\n  } else {\n    return 0;\n  }\n};\nvar descending = function descending(a, b) {\n  return -1 * ascending(a, b);\n};\n\nvar extend = Object.assign != null ? Object.assign.bind(Object) : function (tgt) {\n  var args = arguments;\n  for (var i = 1; i < args.length; i++) {\n    var obj = args[i];\n    if (obj == null) {\n      continue;\n    }\n    var keys = Object.keys(obj);\n    for (var j = 0; j < keys.length; j++) {\n      var k = keys[j];\n      tgt[k] = obj[k];\n    }\n  }\n  return tgt;\n};\n\n// get [r, g, b] from #abc or #aabbcc\nvar hex2tuple = function hex2tuple(hex) {\n  if (!(hex.length === 4 || hex.length === 7) || hex[0] !== '#') {\n    return;\n  }\n  var shortHex = hex.length === 4;\n  var r, g, b;\n  var base = 16;\n  if (shortHex) {\n    r = parseInt(hex[1] + hex[1], base);\n    g = parseInt(hex[2] + hex[2], base);\n    b = parseInt(hex[3] + hex[3], base);\n  } else {\n    r = parseInt(hex[1] + hex[2], base);\n    g = parseInt(hex[3] + hex[4], base);\n    b = parseInt(hex[5] + hex[6], base);\n  }\n  return [r, g, b];\n};\n\n// get [r, g, b, a] from hsl(0, 0, 0) or hsla(0, 0, 0, 0)\nvar hsl2tuple = function hsl2tuple(hsl) {\n  var ret;\n  var h, s, l, a, r, g, b;\n  function hue2rgb(p, q, t) {\n    if (t < 0) t += 1;\n    if (t > 1) t -= 1;\n    if (t < 1 / 6) return p + (q - p) * 6 * t;\n    if (t < 1 / 2) return q;\n    if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n    return p;\n  }\n  var m = new RegExp('^' + hsla + '$').exec(hsl);\n  if (m) {\n    // get hue\n    h = parseInt(m[1]);\n    if (h < 0) {\n      h = (360 - -1 * h % 360) % 360;\n    } else if (h > 360) {\n      h = h % 360;\n    }\n    h /= 360; // normalise on [0, 1]\n\n    s = parseFloat(m[2]);\n    if (s < 0 || s > 100) {\n      return;\n    } // saturation is [0, 100]\n    s = s / 100; // normalise on [0, 1]\n\n    l = parseFloat(m[3]);\n    if (l < 0 || l > 100) {\n      return;\n    } // lightness is [0, 100]\n    l = l / 100; // normalise on [0, 1]\n\n    a = m[4];\n    if (a !== undefined) {\n      a = parseFloat(a);\n      if (a < 0 || a > 1) {\n        return;\n      } // alpha is [0, 1]\n    }\n\n    // now, convert to rgb\n    // code from http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript\n    if (s === 0) {\n      r = g = b = Math.round(l * 255); // achromatic\n    } else {\n      var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n      var p = 2 * l - q;\n      r = Math.round(255 * hue2rgb(p, q, h + 1 / 3));\n      g = Math.round(255 * hue2rgb(p, q, h));\n      b = Math.round(255 * hue2rgb(p, q, h - 1 / 3));\n    }\n    ret = [r, g, b, a];\n  }\n  return ret;\n};\n\n// get [r, g, b, a] from rgb(0, 0, 0) or rgba(0, 0, 0, 0)\nvar rgb2tuple = function rgb2tuple(rgb) {\n  var ret;\n  var m = new RegExp('^' + rgba + '$').exec(rgb);\n  if (m) {\n    ret = [];\n    var isPct = [];\n    for (var i = 1; i <= 3; i++) {\n      var channel = m[i];\n      if (channel[channel.length - 1] === '%') {\n        isPct[i] = true;\n      }\n      channel = parseFloat(channel);\n      if (isPct[i]) {\n        channel = channel / 100 * 255; // normalise to [0, 255]\n      }\n\n      if (channel < 0 || channel > 255) {\n        return;\n      } // invalid channel value\n\n      ret.push(Math.floor(channel));\n    }\n    var atLeastOneIsPct = isPct[1] || isPct[2] || isPct[3];\n    var allArePct = isPct[1] && isPct[2] && isPct[3];\n    if (atLeastOneIsPct && !allArePct) {\n      return;\n    } // must all be percent values if one is\n\n    var alpha = m[4];\n    if (alpha !== undefined) {\n      alpha = parseFloat(alpha);\n      if (alpha < 0 || alpha > 1) {\n        return;\n      } // invalid alpha value\n\n      ret.push(alpha);\n    }\n  }\n  return ret;\n};\nvar colorname2tuple = function colorname2tuple(color) {\n  return colors[color.toLowerCase()];\n};\nvar color2tuple = function color2tuple(color) {\n  return (array(color) ? color : null) || colorname2tuple(color) || hex2tuple(color) || rgb2tuple(color) || hsl2tuple(color);\n};\nvar colors = {\n  // special colour names\n  transparent: [0, 0, 0, 0],\n  // NB alpha === 0\n\n  // regular colours\n  aliceblue: [240, 248, 255],\n  antiquewhite: [250, 235, 215],\n  aqua: [0, 255, 255],\n  aquamarine: [127, 255, 212],\n  azure: [240, 255, 255],\n  beige: [245, 245, 220],\n  bisque: [255, 228, 196],\n  black: [0, 0, 0],\n  blanchedalmond: [255, 235, 205],\n  blue: [0, 0, 255],\n  blueviolet: [138, 43, 226],\n  brown: [165, 42, 42],\n  burlywood: [222, 184, 135],\n  cadetblue: [95, 158, 160],\n  chartreuse: [127, 255, 0],\n  chocolate: [210, 105, 30],\n  coral: [255, 127, 80],\n  cornflowerblue: [100, 149, 237],\n  cornsilk: [255, 248, 220],\n  crimson: [220, 20, 60],\n  cyan: [0, 255, 255],\n  darkblue: [0, 0, 139],\n  darkcyan: [0, 139, 139],\n  darkgoldenrod: [184, 134, 11],\n  darkgray: [169, 169, 169],\n  darkgreen: [0, 100, 0],\n  darkgrey: [169, 169, 169],\n  darkkhaki: [189, 183, 107],\n  darkmagenta: [139, 0, 139],\n  darkolivegreen: [85, 107, 47],\n  darkorange: [255, 140, 0],\n  darkorchid: [153, 50, 204],\n  darkred: [139, 0, 0],\n  darksalmon: [233, 150, 122],\n  darkseagreen: [143, 188, 143],\n  darkslateblue: [72, 61, 139],\n  darkslategray: [47, 79, 79],\n  darkslategrey: [47, 79, 79],\n  darkturquoise: [0, 206, 209],\n  darkviolet: [148, 0, 211],\n  deeppink: [255, 20, 147],\n  deepskyblue: [0, 191, 255],\n  dimgray: [105, 105, 105],\n  dimgrey: [105, 105, 105],\n  dodgerblue: [30, 144, 255],\n  firebrick: [178, 34, 34],\n  floralwhite: [255, 250, 240],\n  forestgreen: [34, 139, 34],\n  fuchsia: [255, 0, 255],\n  gainsboro: [220, 220, 220],\n  ghostwhite: [248, 248, 255],\n  gold: [255, 215, 0],\n  goldenrod: [218, 165, 32],\n  gray: [128, 128, 128],\n  grey: [128, 128, 128],\n  green: [0, 128, 0],\n  greenyellow: [173, 255, 47],\n  honeydew: [240, 255, 240],\n  hotpink: [255, 105, 180],\n  indianred: [205, 92, 92],\n  indigo: [75, 0, 130],\n  ivory: [255, 255, 240],\n  khaki: [240, 230, 140],\n  lavender: [230, 230, 250],\n  lavenderblush: [255, 240, 245],\n  lawngreen: [124, 252, 0],\n  lemonchiffon: [255, 250, 205],\n  lightblue: [173, 216, 230],\n  lightcoral: [240, 128, 128],\n  lightcyan: [224, 255, 255],\n  lightgoldenrodyellow: [250, 250, 210],\n  lightgray: [211, 211, 211],\n  lightgreen: [144, 238, 144],\n  lightgrey: [211, 211, 211],\n  lightpink: [255, 182, 193],\n  lightsalmon: [255, 160, 122],\n  lightseagreen: [32, 178, 170],\n  lightskyblue: [135, 206, 250],\n  lightslategray: [119, 136, 153],\n  lightslategrey: [119, 136, 153],\n  lightsteelblue: [176, 196, 222],\n  lightyellow: [255, 255, 224],\n  lime: [0, 255, 0],\n  limegreen: [50, 205, 50],\n  linen: [250, 240, 230],\n  magenta: [255, 0, 255],\n  maroon: [128, 0, 0],\n  mediumaquamarine: [102, 205, 170],\n  mediumblue: [0, 0, 205],\n  mediumorchid: [186, 85, 211],\n  mediumpurple: [147, 112, 219],\n  mediumseagreen: [60, 179, 113],\n  mediumslateblue: [123, 104, 238],\n  mediumspringgreen: [0, 250, 154],\n  mediumturquoise: [72, 209, 204],\n  mediumvioletred: [199, 21, 133],\n  midnightblue: [25, 25, 112],\n  mintcream: [245, 255, 250],\n  mistyrose: [255, 228, 225],\n  moccasin: [255, 228, 181],\n  navajowhite: [255, 222, 173],\n  navy: [0, 0, 128],\n  oldlace: [253, 245, 230],\n  olive: [128, 128, 0],\n  olivedrab: [107, 142, 35],\n  orange: [255, 165, 0],\n  orangered: [255, 69, 0],\n  orchid: [218, 112, 214],\n  palegoldenrod: [238, 232, 170],\n  palegreen: [152, 251, 152],\n  paleturquoise: [175, 238, 238],\n  palevioletred: [219, 112, 147],\n  papayawhip: [255, 239, 213],\n  peachpuff: [255, 218, 185],\n  peru: [205, 133, 63],\n  pink: [255, 192, 203],\n  plum: [221, 160, 221],\n  powderblue: [176, 224, 230],\n  purple: [128, 0, 128],\n  red: [255, 0, 0],\n  rosybrown: [188, 143, 143],\n  royalblue: [65, 105, 225],\n  saddlebrown: [139, 69, 19],\n  salmon: [250, 128, 114],\n  sandybrown: [244, 164, 96],\n  seagreen: [46, 139, 87],\n  seashell: [255, 245, 238],\n  sienna: [160, 82, 45],\n  silver: [192, 192, 192],\n  skyblue: [135, 206, 235],\n  slateblue: [106, 90, 205],\n  slategray: [112, 128, 144],\n  slategrey: [112, 128, 144],\n  snow: [255, 250, 250],\n  springgreen: [0, 255, 127],\n  steelblue: [70, 130, 180],\n  tan: [210, 180, 140],\n  teal: [0, 128, 128],\n  thistle: [216, 191, 216],\n  tomato: [255, 99, 71],\n  turquoise: [64, 224, 208],\n  violet: [238, 130, 238],\n  wheat: [245, 222, 179],\n  white: [255, 255, 255],\n  whitesmoke: [245, 245, 245],\n  yellow: [255, 255, 0],\n  yellowgreen: [154, 205, 50]\n};\n\n// sets the value in a map (map may not be built)\nvar setMap = function setMap(options) {\n  var obj = options.map;\n  var keys = options.keys;\n  var l = keys.length;\n  for (var i = 0; i < l; i++) {\n    var key = keys[i];\n    if (plainObject(key)) {\n      throw Error('Tried to set map with object key');\n    }\n    if (i < keys.length - 1) {\n      // extend the map if necessary\n      if (obj[key] == null) {\n        obj[key] = {};\n      }\n      obj = obj[key];\n    } else {\n      // set the value\n      obj[key] = options.value;\n    }\n  }\n};\n\n// gets the value in a map even if it's not built in places\nvar getMap = function getMap(options) {\n  var obj = options.map;\n  var keys = options.keys;\n  var l = keys.length;\n  for (var i = 0; i < l; i++) {\n    var key = keys[i];\n    if (plainObject(key)) {\n      throw Error('Tried to get map with object key');\n    }\n    obj = obj[key];\n    if (obj == null) {\n      return obj;\n    }\n  }\n  return obj;\n};\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nvar isObject_1 = isObject;\n\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\nfunction createCommonjsModule(fn, module) {\n\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n}\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;\n\nvar _freeGlobal = freeGlobal;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = _freeGlobal || freeSelf || Function('return this')();\n\nvar _root = root;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return _root.Date.now();\n};\n\nvar now_1 = now;\n\n/** Used to match a single whitespace character. */\nvar reWhitespace = /\\s/;\n\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n * character of `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the index of the last non-whitespace character.\n */\nfunction trimmedEndIndex(string) {\n  var index = string.length;\n\n  while (index-- && reWhitespace.test(string.charAt(index))) {}\n  return index;\n}\n\nvar _trimmedEndIndex = trimmedEndIndex;\n\n/** Used to match leading whitespace. */\nvar reTrimStart = /^\\s+/;\n\n/**\n * The base implementation of `_.trim`.\n *\n * @private\n * @param {string} string The string to trim.\n * @returns {string} Returns the trimmed string.\n */\nfunction baseTrim(string) {\n  return string\n    ? string.slice(0, _trimmedEndIndex(string) + 1).replace(reTrimStart, '')\n    : string;\n}\n\nvar _baseTrim = baseTrim;\n\n/** Built-in value references. */\nvar Symbol$1 = _root.Symbol;\n\nvar _Symbol = Symbol$1;\n\n/** Used for built-in method references. */\nvar objectProto$5 = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty$4 = objectProto$5.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString$1 = objectProto$5.toString;\n\n/** Built-in value references. */\nvar symToStringTag$1 = _Symbol ? _Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty$4.call(value, symToStringTag$1),\n      tag = value[symToStringTag$1];\n\n  try {\n    value[symToStringTag$1] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString$1.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag$1] = tag;\n    } else {\n      delete value[symToStringTag$1];\n    }\n  }\n  return result;\n}\n\nvar _getRawTag = getRawTag;\n\n/** Used for built-in method references. */\nvar objectProto$4 = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto$4.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nvar _objectToString = objectToString;\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? _getRawTag(value)\n    : _objectToString(value);\n}\n\nvar _baseGetTag = baseGetTag;\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nvar isObjectLike_1 = isObjectLike;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike_1(value) && _baseGetTag(value) == symbolTag);\n}\n\nvar isSymbol_1 = isSymbol;\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol_1(value)) {\n    return NAN;\n  }\n  if (isObject_1(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject_1(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = _baseTrim(value);\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nvar toNumber_1 = toNumber;\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT$1 = 'Expected a function';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT$1);\n  }\n  wait = toNumber_1(wait) || 0;\n  if (isObject_1(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber_1(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        timeWaiting = wait - timeSinceLastCall;\n\n    return maxing\n      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n      : timeWaiting;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now_1();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now_1());\n  }\n\n  function debounced() {\n    var time = now_1(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        clearTimeout(timerId);\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\nvar debounce_1 = debounce;\n\nvar performance = _window ? _window.performance : null;\nvar pnow = performance && performance.now ? function () {\n  return performance.now();\n} : function () {\n  return Date.now();\n};\nvar raf = function () {\n  if (_window) {\n    if (_window.requestAnimationFrame) {\n      return function (fn) {\n        _window.requestAnimationFrame(fn);\n      };\n    } else if (_window.mozRequestAnimationFrame) {\n      return function (fn) {\n        _window.mozRequestAnimationFrame(fn);\n      };\n    } else if (_window.webkitRequestAnimationFrame) {\n      return function (fn) {\n        _window.webkitRequestAnimationFrame(fn);\n      };\n    } else if (_window.msRequestAnimationFrame) {\n      return function (fn) {\n        _window.msRequestAnimationFrame(fn);\n      };\n    }\n  }\n  return function (fn) {\n    if (fn) {\n      setTimeout(function () {\n        fn(pnow());\n      }, 1000 / 60);\n    }\n  };\n}();\nvar requestAnimationFrame = function requestAnimationFrame(fn) {\n  return raf(fn);\n};\nvar performanceNow = pnow;\n\nvar DEFAULT_HASH_SEED = 9261;\nvar K = 65599; // 37 also works pretty well\nvar DEFAULT_HASH_SEED_ALT = 5381;\nvar hashIterableInts = function hashIterableInts(iterator) {\n  var seed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_HASH_SEED;\n  // sdbm/string-hash\n  var hash = seed;\n  var entry;\n  for (;;) {\n    entry = iterator.next();\n    if (entry.done) {\n      break;\n    }\n    hash = hash * K + entry.value | 0;\n  }\n  return hash;\n};\nvar hashInt = function hashInt(num) {\n  var seed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_HASH_SEED;\n  // sdbm/string-hash\n  return seed * K + num | 0;\n};\nvar hashIntAlt = function hashIntAlt(num) {\n  var seed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_HASH_SEED_ALT;\n  // djb2/string-hash\n  return (seed << 5) + seed + num | 0;\n};\nvar combineHashes = function combineHashes(hash1, hash2) {\n  return hash1 * 0x200000 + hash2;\n};\nvar combineHashesArray = function combineHashesArray(hashes) {\n  return hashes[0] * 0x200000 + hashes[1];\n};\nvar hashArrays = function hashArrays(hashes1, hashes2) {\n  return [hashInt(hashes1[0], hashes2[0]), hashIntAlt(hashes1[1], hashes2[1])];\n};\nvar hashIntsArray = function hashIntsArray(ints, seed) {\n  var entry = {\n    value: 0,\n    done: false\n  };\n  var i = 0;\n  var length = ints.length;\n  var iterator = {\n    next: function next() {\n      if (i < length) {\n        entry.value = ints[i++];\n      } else {\n        entry.done = true;\n      }\n      return entry;\n    }\n  };\n  return hashIterableInts(iterator, seed);\n};\nvar hashString = function hashString(str, seed) {\n  var entry = {\n    value: 0,\n    done: false\n  };\n  var i = 0;\n  var length = str.length;\n  var iterator = {\n    next: function next() {\n      if (i < length) {\n        entry.value = str.charCodeAt(i++);\n      } else {\n        entry.done = true;\n      }\n      return entry;\n    }\n  };\n  return hashIterableInts(iterator, seed);\n};\nvar hashStrings = function hashStrings() {\n  return hashStringsArray(arguments);\n};\nvar hashStringsArray = function hashStringsArray(strs) {\n  var hash;\n  for (var i = 0; i < strs.length; i++) {\n    var str = strs[i];\n    if (i === 0) {\n      hash = hashString(str);\n    } else {\n      hash = hashString(str, hash);\n    }\n  }\n  return hash;\n};\n\n/*global console */\nvar warningsEnabled = true;\nvar warnSupported = console.warn != null; // eslint-disable-line no-console\nvar traceSupported = console.trace != null; // eslint-disable-line no-console\n\nvar MAX_INT$1 = Number.MAX_SAFE_INTEGER || 9007199254740991;\nvar trueify = function trueify() {\n  return true;\n};\nvar falsify = function falsify() {\n  return false;\n};\nvar zeroify = function zeroify() {\n  return 0;\n};\nvar noop$1 = function noop() {};\nvar error = function error(msg) {\n  throw new Error(msg);\n};\nvar warnings = function warnings(enabled) {\n  if (enabled !== undefined) {\n    warningsEnabled = !!enabled;\n  } else {\n    return warningsEnabled;\n  }\n};\nvar warn = function warn(msg) {\n  /* eslint-disable no-console */\n  if (!warnings()) {\n    return;\n  }\n  if (warnSupported) {\n    console.warn(msg);\n  } else {\n    console.log(msg);\n    if (traceSupported) {\n      console.trace();\n    }\n  }\n}; /* eslint-enable */\n\nvar clone = function clone(obj) {\n  return extend({}, obj);\n};\n\n// gets a shallow copy of the argument\nvar copy = function copy(obj) {\n  if (obj == null) {\n    return obj;\n  }\n  if (array(obj)) {\n    return obj.slice();\n  } else if (plainObject(obj)) {\n    return clone(obj);\n  } else {\n    return obj;\n  }\n};\nvar copyArray$1 = function copyArray(arr) {\n  return arr.slice();\n};\nvar uuid = function uuid(a, b /* placeholders */) {\n  for (\n  // loop :)\n  b = a = '';\n  // b - result , a - numeric letiable\n  a++ < 36;\n  //\n  b += a * 51 & 52 // if \"a\" is not 9 or 14 or 19 or 24\n  ?\n  //  return a random number or 4\n  (a ^ 15 // if \"a\" is not 15\n  ?\n  // generate a random number from 0 to 15\n  8 ^ Math.random() * (a ^ 20 ? 16 : 4) // unless \"a\" is 20, in which case a random number from 8 to 11\n  : 4 //  otherwise 4\n  ).toString(16) : '-' //  in other cases (if \"a\" is 9,14,19,24) insert \"-\"\n  ) {\n  }\n  return b;\n};\nvar _staticEmptyObject = {};\nvar staticEmptyObject = function staticEmptyObject() {\n  return _staticEmptyObject;\n};\nvar defaults$g = function defaults(_defaults) {\n  var keys = Object.keys(_defaults);\n  return function (opts) {\n    var filledOpts = {};\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      var optVal = opts == null ? undefined : opts[key];\n      filledOpts[key] = optVal === undefined ? _defaults[key] : optVal;\n    }\n    return filledOpts;\n  };\n};\nvar removeFromArray = function removeFromArray(arr, ele, oneCopy) {\n  for (var i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] === ele) {\n      arr.splice(i, 1);\n      if (oneCopy) {\n        break;\n      }\n    }\n  }\n};\nvar clearArray = function clearArray(arr) {\n  arr.splice(0, arr.length);\n};\nvar push = function push(arr, otherArr) {\n  for (var i = 0; i < otherArr.length; i++) {\n    var el = otherArr[i];\n    arr.push(el);\n  }\n};\nvar getPrefixedProperty = function getPrefixedProperty(obj, propName, prefix) {\n  if (prefix) {\n    propName = prependCamel(prefix, propName); // e.g. (labelWidth, source) => sourceLabelWidth\n  }\n\n  return obj[propName];\n};\nvar setPrefixedProperty = function setPrefixedProperty(obj, propName, prefix, value) {\n  if (prefix) {\n    propName = prependCamel(prefix, propName); // e.g. (labelWidth, source) => sourceLabelWidth\n  }\n\n  obj[propName] = value;\n};\n\n/* global Map */\nvar ObjectMap = /*#__PURE__*/function () {\n  function ObjectMap() {\n    _classCallCheck(this, ObjectMap);\n    this._obj = {};\n  }\n  _createClass(ObjectMap, [{\n    key: \"set\",\n    value: function set(key, val) {\n      this._obj[key] = val;\n      return this;\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(key) {\n      this._obj[key] = undefined;\n      return this;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._obj = {};\n    }\n  }, {\n    key: \"has\",\n    value: function has(key) {\n      return this._obj[key] !== undefined;\n    }\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      return this._obj[key];\n    }\n  }]);\n  return ObjectMap;\n}();\nvar Map$2 = typeof Map !== 'undefined' ? Map : ObjectMap;\n\n/* global Set */\n\nvar undef = \"undefined\" ;\nvar ObjectSet = /*#__PURE__*/function () {\n  function ObjectSet(arrayOrObjectSet) {\n    _classCallCheck(this, ObjectSet);\n    this._obj = Object.create(null);\n    this.size = 0;\n    if (arrayOrObjectSet != null) {\n      var arr;\n      if (arrayOrObjectSet.instanceString != null && arrayOrObjectSet.instanceString() === this.instanceString()) {\n        arr = arrayOrObjectSet.toArray();\n      } else {\n        arr = arrayOrObjectSet;\n      }\n      for (var i = 0; i < arr.length; i++) {\n        this.add(arr[i]);\n      }\n    }\n  }\n  _createClass(ObjectSet, [{\n    key: \"instanceString\",\n    value: function instanceString() {\n      return 'set';\n    }\n  }, {\n    key: \"add\",\n    value: function add(val) {\n      var o = this._obj;\n      if (o[val] !== 1) {\n        o[val] = 1;\n        this.size++;\n      }\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(val) {\n      var o = this._obj;\n      if (o[val] === 1) {\n        o[val] = 0;\n        this.size--;\n      }\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._obj = Object.create(null);\n    }\n  }, {\n    key: \"has\",\n    value: function has(val) {\n      return this._obj[val] === 1;\n    }\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      var _this = this;\n      return Object.keys(this._obj).filter(function (key) {\n        return _this.has(key);\n      });\n    }\n  }, {\n    key: \"forEach\",\n    value: function forEach(callback, thisArg) {\n      return this.toArray().forEach(callback, thisArg);\n    }\n  }]);\n  return ObjectSet;\n}();\nvar Set$1 = (typeof Set === \"undefined\" ? \"undefined\" : _typeof(Set)) !== undef ? Set : ObjectSet;\n\n// represents a node or an edge\nvar Element = function Element(cy, params) {\n  var restore = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  if (cy === undefined || params === undefined || !core(cy)) {\n    error('An element must have a core reference and parameters set');\n    return;\n  }\n  var group = params.group;\n\n  // try to automatically infer the group if unspecified\n  if (group == null) {\n    if (params.data && params.data.source != null && params.data.target != null) {\n      group = 'edges';\n    } else {\n      group = 'nodes';\n    }\n  }\n\n  // validate group\n  if (group !== 'nodes' && group !== 'edges') {\n    error('An element must be of type `nodes` or `edges`; you specified `' + group + '`');\n    return;\n  }\n\n  // make the element array-like, just like a collection\n  this.length = 1;\n  this[0] = this;\n\n  // NOTE: when something is added here, add also to ele.json()\n  var _p = this._private = {\n    cy: cy,\n    single: true,\n    // indicates this is an element\n    data: params.data || {},\n    // data object\n    position: params.position || {\n      x: 0,\n      y: 0\n    },\n    // (x, y) position pair\n    autoWidth: undefined,\n    // width and height of nodes calculated by the renderer when set to special 'auto' value\n    autoHeight: undefined,\n    autoPadding: undefined,\n    compoundBoundsClean: false,\n    // whether the compound dimensions need to be recalculated the next time dimensions are read\n    listeners: [],\n    // array of bound listeners\n    group: group,\n    // string; 'nodes' or 'edges'\n    style: {},\n    // properties as set by the style\n    rstyle: {},\n    // properties for style sent from the renderer to the core\n    styleCxts: [],\n    // applied style contexts from the styler\n    styleKeys: {},\n    // per-group keys of style property values\n    removed: true,\n    // whether it's inside the vis; true if removed (set true here since we call restore)\n    selected: params.selected ? true : false,\n    // whether it's selected\n    selectable: params.selectable === undefined ? true : params.selectable ? true : false,\n    // whether it's selectable\n    locked: params.locked ? true : false,\n    // whether the element is locked (cannot be moved)\n    grabbed: false,\n    // whether the element is grabbed by the mouse; renderer sets this privately\n    grabbable: params.grabbable === undefined ? true : params.grabbable ? true : false,\n    // whether the element can be grabbed\n    pannable: params.pannable === undefined ? group === 'edges' ? true : false : params.pannable ? true : false,\n    // whether the element has passthrough panning enabled\n    active: false,\n    // whether the element is active from user interaction\n    classes: new Set$1(),\n    // map ( className => true )\n    animation: {\n      // object for currently-running animations\n      current: [],\n      queue: []\n    },\n    rscratch: {},\n    // object in which the renderer can store information\n    scratch: params.scratch || {},\n    // scratch objects\n    edges: [],\n    // array of connected edges\n    children: [],\n    // array of children\n    parent: params.parent && params.parent.isNode() ? params.parent : null,\n    // parent ref\n    traversalCache: {},\n    // cache of output of traversal functions\n    backgrounding: false,\n    // whether background images are loading\n    bbCache: null,\n    // cache of the current bounding box\n    bbCacheShift: {\n      x: 0,\n      y: 0\n    },\n    // shift applied to cached bb to be applied on next get\n    bodyBounds: null,\n    // bounds cache of element body, w/o overlay\n    overlayBounds: null,\n    // bounds cache of element body, including overlay\n    labelBounds: {\n      // bounds cache of labels\n      all: null,\n      source: null,\n      target: null,\n      main: null\n    },\n    arrowBounds: {\n      // bounds cache of edge arrows\n      source: null,\n      target: null,\n      'mid-source': null,\n      'mid-target': null\n    }\n  };\n  if (_p.position.x == null) {\n    _p.position.x = 0;\n  }\n  if (_p.position.y == null) {\n    _p.position.y = 0;\n  }\n\n  // renderedPosition overrides if specified\n  if (params.renderedPosition) {\n    var rpos = params.renderedPosition;\n    var pan = cy.pan();\n    var zoom = cy.zoom();\n    _p.position = {\n      x: (rpos.x - pan.x) / zoom,\n      y: (rpos.y - pan.y) / zoom\n    };\n  }\n  var classes = [];\n  if (array(params.classes)) {\n    classes = params.classes;\n  } else if (string(params.classes)) {\n    classes = params.classes.split(/\\s+/);\n  }\n  for (var i = 0, l = classes.length; i < l; i++) {\n    var cls = classes[i];\n    if (!cls || cls === '') {\n      continue;\n    }\n    _p.classes.add(cls);\n  }\n  this.createEmitter();\n  var bypass = params.style || params.css;\n  if (bypass) {\n    warn('Setting a `style` bypass at element creation should be done only when absolutely necessary.  Try to use the stylesheet instead.');\n    this.style(bypass);\n  }\n  if (restore === undefined || restore) {\n    this.restore();\n  }\n};\n\nvar defineSearch = function defineSearch(params) {\n  params = {\n    bfs: params.bfs || !params.dfs,\n    dfs: params.dfs || !params.bfs\n  };\n\n  // from pseudocode on wikipedia\n  return function searchFn(roots, fn, directed) {\n    var options;\n    if (plainObject(roots) && !elementOrCollection(roots)) {\n      options = roots;\n      roots = options.roots || options.root;\n      fn = options.visit;\n      directed = options.directed;\n    }\n    directed = arguments.length === 2 && !fn$6(fn) ? fn : directed;\n    fn = fn$6(fn) ? fn : function () {};\n    var cy = this._private.cy;\n    var v = roots = string(roots) ? this.filter(roots) : roots;\n    var Q = [];\n    var connectedNodes = [];\n    var connectedBy = {};\n    var id2depth = {};\n    var V = {};\n    var j = 0;\n    var found;\n    var _this$byGroup = this.byGroup(),\n      nodes = _this$byGroup.nodes,\n      edges = _this$byGroup.edges;\n\n    // enqueue v\n    for (var i = 0; i < v.length; i++) {\n      var vi = v[i];\n      var viId = vi.id();\n      if (vi.isNode()) {\n        Q.unshift(vi);\n        if (params.bfs) {\n          V[viId] = true;\n          connectedNodes.push(vi);\n        }\n        id2depth[viId] = 0;\n      }\n    }\n    var _loop = function _loop() {\n      var v = params.bfs ? Q.shift() : Q.pop();\n      var vId = v.id();\n      if (params.dfs) {\n        if (V[vId]) {\n          return \"continue\";\n        }\n        V[vId] = true;\n        connectedNodes.push(v);\n      }\n      var depth = id2depth[vId];\n      var prevEdge = connectedBy[vId];\n      var src = prevEdge != null ? prevEdge.source() : null;\n      var tgt = prevEdge != null ? prevEdge.target() : null;\n      var prevNode = prevEdge == null ? undefined : v.same(src) ? tgt[0] : src[0];\n      var ret = void 0;\n      ret = fn(v, prevEdge, prevNode, j++, depth);\n      if (ret === true) {\n        found = v;\n        return \"break\";\n      }\n      if (ret === false) {\n        return \"break\";\n      }\n      var vwEdges = v.connectedEdges().filter(function (e) {\n        return (!directed || e.source().same(v)) && edges.has(e);\n      });\n      for (var _i2 = 0; _i2 < vwEdges.length; _i2++) {\n        var e = vwEdges[_i2];\n        var w = e.connectedNodes().filter(function (n) {\n          return !n.same(v) && nodes.has(n);\n        });\n        var wId = w.id();\n        if (w.length !== 0 && !V[wId]) {\n          w = w[0];\n          Q.push(w);\n          if (params.bfs) {\n            V[wId] = true;\n            connectedNodes.push(w);\n          }\n          connectedBy[wId] = e;\n          id2depth[wId] = id2depth[vId] + 1;\n        }\n      }\n    };\n    while (Q.length !== 0) {\n      var _ret = _loop();\n      if (_ret === \"continue\") continue;\n      if (_ret === \"break\") break;\n    }\n    var connectedEles = cy.collection();\n    for (var _i = 0; _i < connectedNodes.length; _i++) {\n      var node = connectedNodes[_i];\n      var edge = connectedBy[node.id()];\n      if (edge != null) {\n        connectedEles.push(edge);\n      }\n      connectedEles.push(node);\n    }\n    return {\n      path: cy.collection(connectedEles),\n      found: cy.collection(found)\n    };\n  };\n};\n\n// search, spanning trees, etc\nvar elesfn$v = {\n  breadthFirstSearch: defineSearch({\n    bfs: true\n  }),\n  depthFirstSearch: defineSearch({\n    dfs: true\n  })\n};\n\n// nice, short mathematical alias\nelesfn$v.bfs = elesfn$v.breadthFirstSearch;\nelesfn$v.dfs = elesfn$v.depthFirstSearch;\n\nvar heap$1 = createCommonjsModule(function (module, exports) {\n// Generated by CoffeeScript 1.8.0\n(function() {\n  var Heap, defaultCmp, floor, heapify, heappop, heappush, heappushpop, heapreplace, insort, min, nlargest, nsmallest, updateItem, _siftdown, _siftup;\n\n  floor = Math.floor, min = Math.min;\n\n\n  /*\n  Default comparison function to be used\n   */\n\n  defaultCmp = function(x, y) {\n    if (x < y) {\n      return -1;\n    }\n    if (x > y) {\n      return 1;\n    }\n    return 0;\n  };\n\n\n  /*\n  Insert item x in list a, and keep it sorted assuming a is sorted.\n  \n  If x is already in a, insert it to the right of the rightmost x.\n  \n  Optional args lo (default 0) and hi (default a.length) bound the slice\n  of a to be searched.\n   */\n\n  insort = function(a, x, lo, hi, cmp) {\n    var mid;\n    if (lo == null) {\n      lo = 0;\n    }\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (lo < 0) {\n      throw new Error('lo must be non-negative');\n    }\n    if (hi == null) {\n      hi = a.length;\n    }\n    while (lo < hi) {\n      mid = floor((lo + hi) / 2);\n      if (cmp(x, a[mid]) < 0) {\n        hi = mid;\n      } else {\n        lo = mid + 1;\n      }\n    }\n    return ([].splice.apply(a, [lo, lo - lo].concat(x)), x);\n  };\n\n\n  /*\n  Push item onto heap, maintaining the heap invariant.\n   */\n\n  heappush = function(array, item, cmp) {\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    array.push(item);\n    return _siftdown(array, 0, array.length - 1, cmp);\n  };\n\n\n  /*\n  Pop the smallest item off the heap, maintaining the heap invariant.\n   */\n\n  heappop = function(array, cmp) {\n    var lastelt, returnitem;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    lastelt = array.pop();\n    if (array.length) {\n      returnitem = array[0];\n      array[0] = lastelt;\n      _siftup(array, 0, cmp);\n    } else {\n      returnitem = lastelt;\n    }\n    return returnitem;\n  };\n\n\n  /*\n  Pop and return the current smallest value, and add the new item.\n  \n  This is more efficient than heappop() followed by heappush(), and can be\n  more appropriate when using a fixed size heap. Note that the value\n  returned may be larger than item! That constrains reasonable use of\n  this routine unless written as part of a conditional replacement:\n      if item > array[0]\n        item = heapreplace(array, item)\n   */\n\n  heapreplace = function(array, item, cmp) {\n    var returnitem;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    returnitem = array[0];\n    array[0] = item;\n    _siftup(array, 0, cmp);\n    return returnitem;\n  };\n\n\n  /*\n  Fast version of a heappush followed by a heappop.\n   */\n\n  heappushpop = function(array, item, cmp) {\n    var _ref;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (array.length && cmp(array[0], item) < 0) {\n      _ref = [array[0], item], item = _ref[0], array[0] = _ref[1];\n      _siftup(array, 0, cmp);\n    }\n    return item;\n  };\n\n\n  /*\n  Transform list into a heap, in-place, in O(array.length) time.\n   */\n\n  heapify = function(array, cmp) {\n    var i, _i, _len, _ref1, _results, _results1;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    _ref1 = (function() {\n      _results1 = [];\n      for (var _j = 0, _ref = floor(array.length / 2); 0 <= _ref ? _j < _ref : _j > _ref; 0 <= _ref ? _j++ : _j--){ _results1.push(_j); }\n      return _results1;\n    }).apply(this).reverse();\n    _results = [];\n    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n      i = _ref1[_i];\n      _results.push(_siftup(array, i, cmp));\n    }\n    return _results;\n  };\n\n\n  /*\n  Update the position of the given item in the heap.\n  This function should be called every time the item is being modified.\n   */\n\n  updateItem = function(array, item, cmp) {\n    var pos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    pos = array.indexOf(item);\n    if (pos === -1) {\n      return;\n    }\n    _siftdown(array, 0, pos, cmp);\n    return _siftup(array, pos, cmp);\n  };\n\n\n  /*\n  Find the n largest elements in a dataset.\n   */\n\n  nlargest = function(array, n, cmp) {\n    var elem, result, _i, _len, _ref;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    result = array.slice(0, n);\n    if (!result.length) {\n      return result;\n    }\n    heapify(result, cmp);\n    _ref = array.slice(n);\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      elem = _ref[_i];\n      heappushpop(result, elem, cmp);\n    }\n    return result.sort(cmp).reverse();\n  };\n\n\n  /*\n  Find the n smallest elements in a dataset.\n   */\n\n  nsmallest = function(array, n, cmp) {\n    var elem, los, result, _i, _j, _len, _ref, _ref1, _results;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (n * 10 <= array.length) {\n      result = array.slice(0, n).sort(cmp);\n      if (!result.length) {\n        return result;\n      }\n      los = result[result.length - 1];\n      _ref = array.slice(n);\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        elem = _ref[_i];\n        if (cmp(elem, los) < 0) {\n          insort(result, elem, 0, null, cmp);\n          result.pop();\n          los = result[result.length - 1];\n        }\n      }\n      return result;\n    }\n    heapify(array, cmp);\n    _results = [];\n    for (_j = 0, _ref1 = min(n, array.length); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; 0 <= _ref1 ? ++_j : --_j) {\n      _results.push(heappop(array, cmp));\n    }\n    return _results;\n  };\n\n  _siftdown = function(array, startpos, pos, cmp) {\n    var newitem, parent, parentpos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    newitem = array[pos];\n    while (pos > startpos) {\n      parentpos = (pos - 1) >> 1;\n      parent = array[parentpos];\n      if (cmp(newitem, parent) < 0) {\n        array[pos] = parent;\n        pos = parentpos;\n        continue;\n      }\n      break;\n    }\n    return array[pos] = newitem;\n  };\n\n  _siftup = function(array, pos, cmp) {\n    var childpos, endpos, newitem, rightpos, startpos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    endpos = array.length;\n    startpos = pos;\n    newitem = array[pos];\n    childpos = 2 * pos + 1;\n    while (childpos < endpos) {\n      rightpos = childpos + 1;\n      if (rightpos < endpos && !(cmp(array[childpos], array[rightpos]) < 0)) {\n        childpos = rightpos;\n      }\n      array[pos] = array[childpos];\n      pos = childpos;\n      childpos = 2 * pos + 1;\n    }\n    array[pos] = newitem;\n    return _siftdown(array, startpos, pos, cmp);\n  };\n\n  Heap = (function() {\n    Heap.push = heappush;\n\n    Heap.pop = heappop;\n\n    Heap.replace = heapreplace;\n\n    Heap.pushpop = heappushpop;\n\n    Heap.heapify = heapify;\n\n    Heap.updateItem = updateItem;\n\n    Heap.nlargest = nlargest;\n\n    Heap.nsmallest = nsmallest;\n\n    function Heap(cmp) {\n      this.cmp = cmp != null ? cmp : defaultCmp;\n      this.nodes = [];\n    }\n\n    Heap.prototype.push = function(x) {\n      return heappush(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.pop = function() {\n      return heappop(this.nodes, this.cmp);\n    };\n\n    Heap.prototype.peek = function() {\n      return this.nodes[0];\n    };\n\n    Heap.prototype.contains = function(x) {\n      return this.nodes.indexOf(x) !== -1;\n    };\n\n    Heap.prototype.replace = function(x) {\n      return heapreplace(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.pushpop = function(x) {\n      return heappushpop(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.heapify = function() {\n      return heapify(this.nodes, this.cmp);\n    };\n\n    Heap.prototype.updateItem = function(x) {\n      return updateItem(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.clear = function() {\n      return this.nodes = [];\n    };\n\n    Heap.prototype.empty = function() {\n      return this.nodes.length === 0;\n    };\n\n    Heap.prototype.size = function() {\n      return this.nodes.length;\n    };\n\n    Heap.prototype.clone = function() {\n      var heap;\n      heap = new Heap();\n      heap.nodes = this.nodes.slice(0);\n      return heap;\n    };\n\n    Heap.prototype.toArray = function() {\n      return this.nodes.slice(0);\n    };\n\n    Heap.prototype.insert = Heap.prototype.push;\n\n    Heap.prototype.top = Heap.prototype.peek;\n\n    Heap.prototype.front = Heap.prototype.peek;\n\n    Heap.prototype.has = Heap.prototype.contains;\n\n    Heap.prototype.copy = Heap.prototype.clone;\n\n    return Heap;\n\n  })();\n\n  (function(root, factory) {\n    {\n      return module.exports = factory();\n    }\n  })(this, function() {\n    return Heap;\n  });\n\n}).call(commonjsGlobal);\n});\n\nvar heap = heap$1;\n\nvar dijkstraDefaults = defaults$g({\n  root: null,\n  weight: function weight(edge) {\n    return 1;\n  },\n  directed: false\n});\nvar elesfn$u = {\n  dijkstra: function dijkstra(options) {\n    if (!plainObject(options)) {\n      var args = arguments;\n      options = {\n        root: args[0],\n        weight: args[1],\n        directed: args[2]\n      };\n    }\n    var _dijkstraDefaults = dijkstraDefaults(options),\n      root = _dijkstraDefaults.root,\n      weight = _dijkstraDefaults.weight,\n      directed = _dijkstraDefaults.directed;\n    var eles = this;\n    var weightFn = weight;\n    var source = string(root) ? this.filter(root)[0] : root[0];\n    var dist = {};\n    var prev = {};\n    var knownDist = {};\n    var _this$byGroup = this.byGroup(),\n      nodes = _this$byGroup.nodes,\n      edges = _this$byGroup.edges;\n    edges.unmergeBy(function (ele) {\n      return ele.isLoop();\n    });\n    var getDist = function getDist(node) {\n      return dist[node.id()];\n    };\n    var setDist = function setDist(node, d) {\n      dist[node.id()] = d;\n      Q.updateItem(node);\n    };\n    var Q = new heap(function (a, b) {\n      return getDist(a) - getDist(b);\n    });\n    for (var i = 0; i < nodes.length; i++) {\n      var node = nodes[i];\n      dist[node.id()] = node.same(source) ? 0 : Infinity;\n      Q.push(node);\n    }\n    var distBetween = function distBetween(u, v) {\n      var uvs = (directed ? u.edgesTo(v) : u.edgesWith(v)).intersect(edges);\n      var smallestDistance = Infinity;\n      var smallestEdge;\n      for (var _i = 0; _i < uvs.length; _i++) {\n        var edge = uvs[_i];\n        var _weight = weightFn(edge);\n        if (_weight < smallestDistance || !smallestEdge) {\n          smallestDistance = _weight;\n          smallestEdge = edge;\n        }\n      }\n      return {\n        edge: smallestEdge,\n        dist: smallestDistance\n      };\n    };\n    while (Q.size() > 0) {\n      var u = Q.pop();\n      var smalletsDist = getDist(u);\n      var uid = u.id();\n      knownDist[uid] = smalletsDist;\n      if (smalletsDist === Infinity) {\n        continue;\n      }\n      var neighbors = u.neighborhood().intersect(nodes);\n      for (var _i2 = 0; _i2 < neighbors.length; _i2++) {\n        var v = neighbors[_i2];\n        var vid = v.id();\n        var vDist = distBetween(u, v);\n        var alt = smalletsDist + vDist.dist;\n        if (alt < getDist(v)) {\n          setDist(v, alt);\n          prev[vid] = {\n            node: u,\n            edge: vDist.edge\n          };\n        }\n      } // for\n    } // while\n\n    return {\n      distanceTo: function distanceTo(node) {\n        var target = string(node) ? nodes.filter(node)[0] : node[0];\n        return knownDist[target.id()];\n      },\n      pathTo: function pathTo(node) {\n        var target = string(node) ? nodes.filter(node)[0] : node[0];\n        var S = [];\n        var u = target;\n        var uid = u.id();\n        if (target.length > 0) {\n          S.unshift(target);\n          while (prev[uid]) {\n            var p = prev[uid];\n            S.unshift(p.edge);\n            S.unshift(p.node);\n            u = p.node;\n            uid = u.id();\n          }\n        }\n        return eles.spawn(S);\n      }\n    };\n  }\n};\n\nvar elesfn$t = {\n  // kruskal's algorithm (finds min spanning tree, assuming undirected graph)\n  // implemented from pseudocode from wikipedia\n  kruskal: function kruskal(weightFn) {\n    weightFn = weightFn || function (edge) {\n      return 1;\n    };\n    var _this$byGroup = this.byGroup(),\n      nodes = _this$byGroup.nodes,\n      edges = _this$byGroup.edges;\n    var numNodes = nodes.length;\n    var forest = new Array(numNodes);\n    var A = nodes; // assumes byGroup() creates new collections that can be safely mutated\n\n    var findSetIndex = function findSetIndex(ele) {\n      for (var i = 0; i < forest.length; i++) {\n        var eles = forest[i];\n        if (eles.has(ele)) {\n          return i;\n        }\n      }\n    };\n\n    // start with one forest per node\n    for (var i = 0; i < numNodes; i++) {\n      forest[i] = this.spawn(nodes[i]);\n    }\n    var S = edges.sort(function (a, b) {\n      return weightFn(a) - weightFn(b);\n    });\n    for (var _i = 0; _i < S.length; _i++) {\n      var edge = S[_i];\n      var u = edge.source()[0];\n      var v = edge.target()[0];\n      var setUIndex = findSetIndex(u);\n      var setVIndex = findSetIndex(v);\n      var setU = forest[setUIndex];\n      var setV = forest[setVIndex];\n      if (setUIndex !== setVIndex) {\n        A.merge(edge);\n\n        // combine forests for u and v\n        setU.merge(setV);\n        forest.splice(setVIndex, 1);\n      }\n    }\n    return A;\n  }\n};\n\nvar aStarDefaults = defaults$g({\n  root: null,\n  goal: null,\n  weight: function weight(edge) {\n    return 1;\n  },\n  heuristic: function heuristic(edge) {\n    return 0;\n  },\n  directed: false\n});\nvar elesfn$s = {\n  // Implemented from pseudocode from wikipedia\n  aStar: function aStar(options) {\n    var cy = this.cy();\n    var _aStarDefaults = aStarDefaults(options),\n      root = _aStarDefaults.root,\n      goal = _aStarDefaults.goal,\n      heuristic = _aStarDefaults.heuristic,\n      directed = _aStarDefaults.directed,\n      weight = _aStarDefaults.weight;\n    root = cy.collection(root)[0];\n    goal = cy.collection(goal)[0];\n    var sid = root.id();\n    var tid = goal.id();\n    var gScore = {};\n    var fScore = {};\n    var closedSetIds = {};\n    var openSet = new heap(function (a, b) {\n      return fScore[a.id()] - fScore[b.id()];\n    });\n    var openSetIds = new Set$1();\n    var cameFrom = {};\n    var cameFromEdge = {};\n    var addToOpenSet = function addToOpenSet(ele, id) {\n      openSet.push(ele);\n      openSetIds.add(id);\n    };\n    var cMin, cMinId;\n    var popFromOpenSet = function popFromOpenSet() {\n      cMin = openSet.pop();\n      cMinId = cMin.id();\n      openSetIds[\"delete\"](cMinId);\n    };\n    var isInOpenSet = function isInOpenSet(id) {\n      return openSetIds.has(id);\n    };\n    addToOpenSet(root, sid);\n    gScore[sid] = 0;\n    fScore[sid] = heuristic(root);\n\n    // Counter\n    var steps = 0;\n\n    // Main loop\n    while (openSet.size() > 0) {\n      popFromOpenSet();\n      steps++;\n\n      // If we've found our goal, then we are done\n      if (cMinId === tid) {\n        var path = [];\n        var pathNode = goal;\n        var pathNodeId = tid;\n        var pathEdge = cameFromEdge[pathNodeId];\n        for (;;) {\n          path.unshift(pathNode);\n          if (pathEdge != null) {\n            path.unshift(pathEdge);\n          }\n          pathNode = cameFrom[pathNodeId];\n          if (pathNode == null) {\n            break;\n          }\n          pathNodeId = pathNode.id();\n          pathEdge = cameFromEdge[pathNodeId];\n        }\n        return {\n          found: true,\n          distance: gScore[cMinId],\n          path: this.spawn(path),\n          steps: steps\n        };\n      }\n\n      // Add cMin to processed nodes\n      closedSetIds[cMinId] = true;\n\n      // Update scores for neighbors of cMin\n      // Take into account if graph is directed or not\n      var vwEdges = cMin._private.edges;\n      for (var i = 0; i < vwEdges.length; i++) {\n        var e = vwEdges[i];\n\n        // edge must be in set of calling eles\n        if (!this.hasElementWithId(e.id())) {\n          continue;\n        }\n\n        // cMin must be the source of edge if directed\n        if (directed && e.data('source') !== cMinId) {\n          continue;\n        }\n        var wSrc = e.source();\n        var wTgt = e.target();\n        var w = wSrc.id() !== cMinId ? wSrc : wTgt;\n        var wid = w.id();\n\n        // node must be in set of calling eles\n        if (!this.hasElementWithId(wid)) {\n          continue;\n        }\n\n        // if node is in closedSet, ignore it\n        if (closedSetIds[wid]) {\n          continue;\n        }\n\n        // New tentative score for node w\n        var tempScore = gScore[cMinId] + weight(e);\n\n        // Update gScore for node w if:\n        //   w not present in openSet\n        // OR\n        //   tentative gScore is less than previous value\n\n        // w not in openSet\n        if (!isInOpenSet(wid)) {\n          gScore[wid] = tempScore;\n          fScore[wid] = tempScore + heuristic(w);\n          addToOpenSet(w, wid);\n          cameFrom[wid] = cMin;\n          cameFromEdge[wid] = e;\n          continue;\n        }\n\n        // w already in openSet, but with greater gScore\n        if (tempScore < gScore[wid]) {\n          gScore[wid] = tempScore;\n          fScore[wid] = tempScore + heuristic(w);\n          cameFrom[wid] = cMin;\n          cameFromEdge[wid] = e;\n        }\n      } // End of neighbors update\n    } // End of main loop\n\n    // If we've reached here, then we've not reached our goal\n    return {\n      found: false,\n      distance: undefined,\n      path: undefined,\n      steps: steps\n    };\n  }\n}; // elesfn\n\nvar floydWarshallDefaults = defaults$g({\n  weight: function weight(edge) {\n    return 1;\n  },\n  directed: false\n});\nvar elesfn$r = {\n  // Implemented from pseudocode from wikipedia\n  floydWarshall: function floydWarshall(options) {\n    var cy = this.cy();\n    var _floydWarshallDefault = floydWarshallDefaults(options),\n      weight = _floydWarshallDefault.weight,\n      directed = _floydWarshallDefault.directed;\n    var weightFn = weight;\n    var _this$byGroup = this.byGroup(),\n      nodes = _this$byGroup.nodes,\n      edges = _this$byGroup.edges;\n    var N = nodes.length;\n    var Nsq = N * N;\n    var indexOf = function indexOf(node) {\n      return nodes.indexOf(node);\n    };\n    var atIndex = function atIndex(i) {\n      return nodes[i];\n    };\n\n    // Initialize distance matrix\n    var dist = new Array(Nsq);\n    for (var n = 0; n < Nsq; n++) {\n      var j = n % N;\n      var i = (n - j) / N;\n      if (i === j) {\n        dist[n] = 0;\n      } else {\n        dist[n] = Infinity;\n      }\n    }\n\n    // Initialize matrix used for path reconstruction\n    // Initialize distance matrix\n    var next = new Array(Nsq);\n    var edgeNext = new Array(Nsq);\n\n    // Process edges\n    for (var _i = 0; _i < edges.length; _i++) {\n      var edge = edges[_i];\n      var src = edge.source()[0];\n      var tgt = edge.target()[0];\n      if (src === tgt) {\n        continue;\n      } // exclude loops\n\n      var s = indexOf(src);\n      var t = indexOf(tgt);\n      var st = s * N + t; // source to target index\n      var _weight = weightFn(edge);\n\n      // Check if already process another edge between same 2 nodes\n      if (dist[st] > _weight) {\n        dist[st] = _weight;\n        next[st] = t;\n        edgeNext[st] = edge;\n      }\n\n      // If undirected graph, process 'reversed' edge\n      if (!directed) {\n        var ts = t * N + s; // target to source index\n\n        if (!directed && dist[ts] > _weight) {\n          dist[ts] = _weight;\n          next[ts] = s;\n          edgeNext[ts] = edge;\n        }\n      }\n    }\n\n    // Main loop\n    for (var k = 0; k < N; k++) {\n      for (var _i2 = 0; _i2 < N; _i2++) {\n        var ik = _i2 * N + k;\n        for (var _j = 0; _j < N; _j++) {\n          var ij = _i2 * N + _j;\n          var kj = k * N + _j;\n          if (dist[ik] + dist[kj] < dist[ij]) {\n            dist[ij] = dist[ik] + dist[kj];\n            next[ij] = next[ik];\n          }\n        }\n      }\n    }\n    var getArgEle = function getArgEle(ele) {\n      return (string(ele) ? cy.filter(ele) : ele)[0];\n    };\n    var indexOfArgEle = function indexOfArgEle(ele) {\n      return indexOf(getArgEle(ele));\n    };\n    var res = {\n      distance: function distance(from, to) {\n        var i = indexOfArgEle(from);\n        var j = indexOfArgEle(to);\n        return dist[i * N + j];\n      },\n      path: function path(from, to) {\n        var i = indexOfArgEle(from);\n        var j = indexOfArgEle(to);\n        var fromNode = atIndex(i);\n        if (i === j) {\n          return fromNode.collection();\n        }\n        if (next[i * N + j] == null) {\n          return cy.collection();\n        }\n        var path = cy.collection();\n        var prev = i;\n        var edge;\n        path.merge(fromNode);\n        while (i !== j) {\n          prev = i;\n          i = next[i * N + j];\n          edge = edgeNext[prev * N + i];\n          path.merge(edge);\n          path.merge(atIndex(i));\n        }\n        return path;\n      }\n    };\n    return res;\n  } // floydWarshall\n}; // elesfn\n\nvar bellmanFordDefaults = defaults$g({\n  weight: function weight(edge) {\n    return 1;\n  },\n  directed: false,\n  root: null\n});\nvar elesfn$q = {\n  // Implemented from pseudocode from wikipedia\n  bellmanFord: function bellmanFord(options) {\n    var _this = this;\n    var _bellmanFordDefaults = bellmanFordDefaults(options),\n      weight = _bellmanFordDefaults.weight,\n      directed = _bellmanFordDefaults.directed,\n      root = _bellmanFordDefaults.root;\n    var weightFn = weight;\n    var eles = this;\n    var cy = this.cy();\n    var _this$byGroup = this.byGroup(),\n      edges = _this$byGroup.edges,\n      nodes = _this$byGroup.nodes;\n    var numNodes = nodes.length;\n    var infoMap = new Map$2();\n    var hasNegativeWeightCycle = false;\n    var negativeWeightCycles = [];\n    root = cy.collection(root)[0]; // in case selector passed\n\n    edges.unmergeBy(function (edge) {\n      return edge.isLoop();\n    });\n    var numEdges = edges.length;\n    var getInfo = function getInfo(node) {\n      var obj = infoMap.get(node.id());\n      if (!obj) {\n        obj = {};\n        infoMap.set(node.id(), obj);\n      }\n      return obj;\n    };\n    var getNodeFromTo = function getNodeFromTo(to) {\n      return (string(to) ? cy.$(to) : to)[0];\n    };\n    var distanceTo = function distanceTo(to) {\n      return getInfo(getNodeFromTo(to)).dist;\n    };\n    var pathTo = function pathTo(to) {\n      var thisStart = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : root;\n      var end = getNodeFromTo(to);\n      var path = [];\n      var node = end;\n      for (;;) {\n        if (node == null) {\n          return _this.spawn();\n        }\n        var _getInfo = getInfo(node),\n          edge = _getInfo.edge,\n          pred = _getInfo.pred;\n        path.unshift(node[0]);\n        if (node.same(thisStart) && path.length > 0) {\n          break;\n        }\n        if (edge != null) {\n          path.unshift(edge);\n        }\n        node = pred;\n      }\n      return eles.spawn(path);\n    };\n\n    // Initializations { dist, pred, edge }\n    for (var i = 0; i < numNodes; i++) {\n      var node = nodes[i];\n      var info = getInfo(node);\n      if (node.same(root)) {\n        info.dist = 0;\n      } else {\n        info.dist = Infinity;\n      }\n      info.pred = null;\n      info.edge = null;\n    }\n\n    // Edges relaxation\n    var replacedEdge = false;\n    var checkForEdgeReplacement = function checkForEdgeReplacement(node1, node2, edge, info1, info2, weight) {\n      var dist = info1.dist + weight;\n      if (dist < info2.dist && !edge.same(info1.edge)) {\n        info2.dist = dist;\n        info2.pred = node1;\n        info2.edge = edge;\n        replacedEdge = true;\n      }\n    };\n    for (var _i = 1; _i < numNodes; _i++) {\n      replacedEdge = false;\n      for (var e = 0; e < numEdges; e++) {\n        var edge = edges[e];\n        var src = edge.source();\n        var tgt = edge.target();\n        var _weight = weightFn(edge);\n        var srcInfo = getInfo(src);\n        var tgtInfo = getInfo(tgt);\n        checkForEdgeReplacement(src, tgt, edge, srcInfo, tgtInfo, _weight);\n\n        // If undirected graph, we need to take into account the 'reverse' edge\n        if (!directed) {\n          checkForEdgeReplacement(tgt, src, edge, tgtInfo, srcInfo, _weight);\n        }\n      }\n      if (!replacedEdge) {\n        break;\n      }\n    }\n    if (replacedEdge) {\n      // Check for negative weight cycles\n      var negativeWeightCycleIds = [];\n      for (var _e = 0; _e < numEdges; _e++) {\n        var _edge = edges[_e];\n        var _src = _edge.source();\n        var _tgt = _edge.target();\n        var _weight2 = weightFn(_edge);\n        var srcDist = getInfo(_src).dist;\n        var tgtDist = getInfo(_tgt).dist;\n        if (srcDist + _weight2 < tgtDist || !directed && tgtDist + _weight2 < srcDist) {\n          if (!hasNegativeWeightCycle) {\n            warn('Graph contains a negative weight cycle for Bellman-Ford');\n            hasNegativeWeightCycle = true;\n          }\n          if (options.findNegativeWeightCycles !== false) {\n            var negativeNodes = [];\n            if (srcDist + _weight2 < tgtDist) {\n              negativeNodes.push(_src);\n            }\n            if (!directed && tgtDist + _weight2 < srcDist) {\n              negativeNodes.push(_tgt);\n            }\n            var numNegativeNodes = negativeNodes.length;\n            for (var n = 0; n < numNegativeNodes; n++) {\n              var start = negativeNodes[n];\n              var cycle = [start];\n              cycle.push(getInfo(start).edge);\n              var _node = getInfo(start).pred;\n              while (cycle.indexOf(_node) === -1) {\n                cycle.push(_node);\n                cycle.push(getInfo(_node).edge);\n                _node = getInfo(_node).pred;\n              }\n              cycle = cycle.slice(cycle.indexOf(_node));\n              var smallestId = cycle[0].id();\n              var smallestIndex = 0;\n              for (var c = 2; c < cycle.length; c += 2) {\n                if (cycle[c].id() < smallestId) {\n                  smallestId = cycle[c].id();\n                  smallestIndex = c;\n                }\n              }\n              cycle = cycle.slice(smallestIndex).concat(cycle.slice(0, smallestIndex));\n              cycle.push(cycle[0]);\n              var cycleId = cycle.map(function (el) {\n                return el.id();\n              }).join(\",\");\n              if (negativeWeightCycleIds.indexOf(cycleId) === -1) {\n                negativeWeightCycles.push(eles.spawn(cycle));\n                negativeWeightCycleIds.push(cycleId);\n              }\n            }\n          } else {\n            break;\n          }\n        }\n      }\n    }\n    return {\n      distanceTo: distanceTo,\n      pathTo: pathTo,\n      hasNegativeWeightCycle: hasNegativeWeightCycle,\n      negativeWeightCycles: negativeWeightCycles\n    };\n  } // bellmanFord\n}; // elesfn\n\nvar sqrt2 = Math.sqrt(2);\n\n// Function which colapses 2 (meta) nodes into one\n// Updates the remaining edge lists\n// Receives as a paramater the edge which causes the collapse\nvar collapse = function collapse(edgeIndex, nodeMap, remainingEdges) {\n  if (remainingEdges.length === 0) {\n    error(\"Karger-Stein must be run on a connected (sub)graph\");\n  }\n  var edgeInfo = remainingEdges[edgeIndex];\n  var sourceIn = edgeInfo[1];\n  var targetIn = edgeInfo[2];\n  var partition1 = nodeMap[sourceIn];\n  var partition2 = nodeMap[targetIn];\n  var newEdges = remainingEdges; // re-use array\n\n  // Delete all edges between partition1 and partition2\n  for (var i = newEdges.length - 1; i >= 0; i--) {\n    var edge = newEdges[i];\n    var src = edge[1];\n    var tgt = edge[2];\n    if (nodeMap[src] === partition1 && nodeMap[tgt] === partition2 || nodeMap[src] === partition2 && nodeMap[tgt] === partition1) {\n      newEdges.splice(i, 1);\n    }\n  }\n\n  // All edges pointing to partition2 should now point to partition1\n  for (var _i = 0; _i < newEdges.length; _i++) {\n    var _edge = newEdges[_i];\n    if (_edge[1] === partition2) {\n      // Check source\n      newEdges[_i] = _edge.slice(); // copy\n      newEdges[_i][1] = partition1;\n    } else if (_edge[2] === partition2) {\n      // Check target\n      newEdges[_i] = _edge.slice(); // copy\n      newEdges[_i][2] = partition1;\n    }\n  }\n\n  // Move all nodes from partition2 to partition1\n  for (var _i2 = 0; _i2 < nodeMap.length; _i2++) {\n    if (nodeMap[_i2] === partition2) {\n      nodeMap[_i2] = partition1;\n    }\n  }\n  return newEdges;\n};\n\n// Contracts a graph until we reach a certain number of meta nodes\nvar contractUntil = function contractUntil(metaNodeMap, remainingEdges, size, sizeLimit) {\n  while (size > sizeLimit) {\n    // Choose an edge randomly\n    var edgeIndex = Math.floor(Math.random() * remainingEdges.length);\n\n    // Collapse graph based on edge\n    remainingEdges = collapse(edgeIndex, metaNodeMap, remainingEdges);\n    size--;\n  }\n  return remainingEdges;\n};\nvar elesfn$p = {\n  // Computes the minimum cut of an undirected graph\n  // Returns the correct answer with high probability\n  kargerStein: function kargerStein() {\n    var _this = this;\n    var _this$byGroup = this.byGroup(),\n      nodes = _this$byGroup.nodes,\n      edges = _this$byGroup.edges;\n    edges.unmergeBy(function (edge) {\n      return edge.isLoop();\n    });\n    var numNodes = nodes.length;\n    var numEdges = edges.length;\n    var numIter = Math.ceil(Math.pow(Math.log(numNodes) / Math.LN2, 2));\n    var stopSize = Math.floor(numNodes / sqrt2);\n    if (numNodes < 2) {\n      error('At least 2 nodes are required for Karger-Stein algorithm');\n      return undefined;\n    }\n\n    // Now store edge destination as indexes\n    // Format for each edge (edge index, source node index, target node index)\n    var edgeIndexes = [];\n    for (var i = 0; i < numEdges; i++) {\n      var e = edges[i];\n      edgeIndexes.push([i, nodes.indexOf(e.source()), nodes.indexOf(e.target())]);\n    }\n\n    // We will store the best cut found here\n    var minCutSize = Infinity;\n    var minCutEdgeIndexes = [];\n    var minCutNodeMap = new Array(numNodes);\n\n    // Initial meta node partition\n    var metaNodeMap = new Array(numNodes);\n    var metaNodeMap2 = new Array(numNodes);\n    var copyNodesMap = function copyNodesMap(from, to) {\n      for (var _i3 = 0; _i3 < numNodes; _i3++) {\n        to[_i3] = from[_i3];\n      }\n    };\n\n    // Main loop\n    for (var iter = 0; iter <= numIter; iter++) {\n      // Reset meta node partition\n      for (var _i4 = 0; _i4 < numNodes; _i4++) {\n        metaNodeMap[_i4] = _i4;\n      }\n\n      // Contract until stop point (stopSize nodes)\n      var edgesState = contractUntil(metaNodeMap, edgeIndexes.slice(), numNodes, stopSize);\n      var edgesState2 = edgesState.slice(); // copy\n\n      // Create a copy of the colapsed nodes state\n      copyNodesMap(metaNodeMap, metaNodeMap2);\n\n      // Run 2 iterations starting in the stop state\n      var res1 = contractUntil(metaNodeMap, edgesState, stopSize, 2);\n      var res2 = contractUntil(metaNodeMap2, edgesState2, stopSize, 2);\n\n      // Is any of the 2 results the best cut so far?\n      if (res1.length <= res2.length && res1.length < minCutSize) {\n        minCutSize = res1.length;\n        minCutEdgeIndexes = res1;\n        copyNodesMap(metaNodeMap, minCutNodeMap);\n      } else if (res2.length <= res1.length && res2.length < minCutSize) {\n        minCutSize = res2.length;\n        minCutEdgeIndexes = res2;\n        copyNodesMap(metaNodeMap2, minCutNodeMap);\n      }\n    } // end of main loop\n\n    // Construct result\n    var cut = this.spawn(minCutEdgeIndexes.map(function (e) {\n      return edges[e[0]];\n    }));\n    var partition1 = this.spawn();\n    var partition2 = this.spawn();\n\n    // traverse metaNodeMap for best cut\n    var witnessNodePartition = minCutNodeMap[0];\n    for (var _i5 = 0; _i5 < minCutNodeMap.length; _i5++) {\n      var partitionId = minCutNodeMap[_i5];\n      var node = nodes[_i5];\n      if (partitionId === witnessNodePartition) {\n        partition1.merge(node);\n      } else {\n        partition2.merge(node);\n      }\n    }\n\n    // construct components corresponding to each disjoint subset of nodes\n    var constructComponent = function constructComponent(subset) {\n      var component = _this.spawn();\n      subset.forEach(function (node) {\n        component.merge(node);\n        node.connectedEdges().forEach(function (edge) {\n          // ensure edge is within calling collection and edge is not in cut\n          if (_this.contains(edge) && !cut.contains(edge)) {\n            component.merge(edge);\n          }\n        });\n      });\n      return component;\n    };\n    var components = [constructComponent(partition1), constructComponent(partition2)];\n    var ret = {\n      cut: cut,\n      components: components,\n      // n.b. partitions are included to be compatible with the old api spec\n      // (could be removed in a future major version)\n      partition1: partition1,\n      partition2: partition2\n    };\n    return ret;\n  }\n}; // elesfn\n\nvar copyPosition = function copyPosition(p) {\n  return {\n    x: p.x,\n    y: p.y\n  };\n};\nvar modelToRenderedPosition = function modelToRenderedPosition(p, zoom, pan) {\n  return {\n    x: p.x * zoom + pan.x,\n    y: p.y * zoom + pan.y\n  };\n};\nvar renderedToModelPosition = function renderedToModelPosition(p, zoom, pan) {\n  return {\n    x: (p.x - pan.x) / zoom,\n    y: (p.y - pan.y) / zoom\n  };\n};\nvar array2point = function array2point(arr) {\n  return {\n    x: arr[0],\n    y: arr[1]\n  };\n};\nvar min = function min(arr) {\n  var begin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : arr.length;\n  var min = Infinity;\n  for (var i = begin; i < end; i++) {\n    var val = arr[i];\n    if (isFinite(val)) {\n      min = Math.min(val, min);\n    }\n  }\n  return min;\n};\nvar max = function max(arr) {\n  var begin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : arr.length;\n  var max = -Infinity;\n  for (var i = begin; i < end; i++) {\n    var val = arr[i];\n    if (isFinite(val)) {\n      max = Math.max(val, max);\n    }\n  }\n  return max;\n};\nvar mean = function mean(arr) {\n  var begin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : arr.length;\n  var total = 0;\n  var n = 0;\n  for (var i = begin; i < end; i++) {\n    var val = arr[i];\n    if (isFinite(val)) {\n      total += val;\n      n++;\n    }\n  }\n  return total / n;\n};\nvar median = function median(arr) {\n  var begin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : arr.length;\n  var copy = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  var sort = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n  var includeHoles = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n  if (copy) {\n    arr = arr.slice(begin, end);\n  } else {\n    if (end < arr.length) {\n      arr.splice(end, arr.length - end);\n    }\n    if (begin > 0) {\n      arr.splice(0, begin);\n    }\n  }\n\n  // all non finite (e.g. Infinity, NaN) elements must be -Infinity so they go to the start\n  var off = 0; // offset from non-finite values\n  for (var i = arr.length - 1; i >= 0; i--) {\n    var v = arr[i];\n    if (includeHoles) {\n      if (!isFinite(v)) {\n        arr[i] = -Infinity;\n        off++;\n      }\n    } else {\n      // just remove it if we don't want to consider holes\n      arr.splice(i, 1);\n    }\n  }\n  if (sort) {\n    arr.sort(function (a, b) {\n      return a - b;\n    }); // requires copy = true if you don't want to change the orig\n  }\n\n  var len = arr.length;\n  var mid = Math.floor(len / 2);\n  if (len % 2 !== 0) {\n    return arr[mid + 1 + off];\n  } else {\n    return (arr[mid - 1 + off] + arr[mid + off]) / 2;\n  }\n};\nvar deg2rad = function deg2rad(deg) {\n  return Math.PI * deg / 180;\n};\nvar getAngleFromDisp = function getAngleFromDisp(dispX, dispY) {\n  return Math.atan2(dispY, dispX) - Math.PI / 2;\n};\nvar log2 = Math.log2 || function (n) {\n  return Math.log(n) / Math.log(2);\n};\nvar signum = function signum(x) {\n  if (x > 0) {\n    return 1;\n  } else if (x < 0) {\n    return -1;\n  } else {\n    return 0;\n  }\n};\nvar dist = function dist(p1, p2) {\n  return Math.sqrt(sqdist(p1, p2));\n};\nvar sqdist = function sqdist(p1, p2) {\n  var dx = p2.x - p1.x;\n  var dy = p2.y - p1.y;\n  return dx * dx + dy * dy;\n};\nvar inPlaceSumNormalize = function inPlaceSumNormalize(v) {\n  var length = v.length;\n\n  // First, get sum of all elements\n  var total = 0;\n  for (var i = 0; i < length; i++) {\n    total += v[i];\n  }\n\n  // Now, divide each by the sum of all elements\n  for (var _i = 0; _i < length; _i++) {\n    v[_i] = v[_i] / total;\n  }\n  return v;\n};\n\n// from http://en.wikipedia.org/wiki/Bézier_curve#Quadratic_curves\nvar qbezierAt = function qbezierAt(p0, p1, p2, t) {\n  return (1 - t) * (1 - t) * p0 + 2 * (1 - t) * t * p1 + t * t * p2;\n};\nvar qbezierPtAt = function qbezierPtAt(p0, p1, p2, t) {\n  return {\n    x: qbezierAt(p0.x, p1.x, p2.x, t),\n    y: qbezierAt(p0.y, p1.y, p2.y, t)\n  };\n};\nvar lineAt = function lineAt(p0, p1, t, d) {\n  var vec = {\n    x: p1.x - p0.x,\n    y: p1.y - p0.y\n  };\n  var vecDist = dist(p0, p1);\n  var normVec = {\n    x: vec.x / vecDist,\n    y: vec.y / vecDist\n  };\n  t = t == null ? 0 : t;\n  d = d != null ? d : t * vecDist;\n  return {\n    x: p0.x + normVec.x * d,\n    y: p0.y + normVec.y * d\n  };\n};\nvar bound = function bound(min, val, max) {\n  return Math.max(min, Math.min(max, val));\n};\n\n// makes a full bb (x1, y1, x2, y2, w, h) from implicit params\nvar makeBoundingBox = function makeBoundingBox(bb) {\n  if (bb == null) {\n    return {\n      x1: Infinity,\n      y1: Infinity,\n      x2: -Infinity,\n      y2: -Infinity,\n      w: 0,\n      h: 0\n    };\n  } else if (bb.x1 != null && bb.y1 != null) {\n    if (bb.x2 != null && bb.y2 != null && bb.x2 >= bb.x1 && bb.y2 >= bb.y1) {\n      return {\n        x1: bb.x1,\n        y1: bb.y1,\n        x2: bb.x2,\n        y2: bb.y2,\n        w: bb.x2 - bb.x1,\n        h: bb.y2 - bb.y1\n      };\n    } else if (bb.w != null && bb.h != null && bb.w >= 0 && bb.h >= 0) {\n      return {\n        x1: bb.x1,\n        y1: bb.y1,\n        x2: bb.x1 + bb.w,\n        y2: bb.y1 + bb.h,\n        w: bb.w,\n        h: bb.h\n      };\n    }\n  }\n};\nvar copyBoundingBox = function copyBoundingBox(bb) {\n  return {\n    x1: bb.x1,\n    x2: bb.x2,\n    w: bb.w,\n    y1: bb.y1,\n    y2: bb.y2,\n    h: bb.h\n  };\n};\nvar clearBoundingBox = function clearBoundingBox(bb) {\n  bb.x1 = Infinity;\n  bb.y1 = Infinity;\n  bb.x2 = -Infinity;\n  bb.y2 = -Infinity;\n  bb.w = 0;\n  bb.h = 0;\n};\nvar shiftBoundingBox = function shiftBoundingBox(bb, dx, dy) {\n  return {\n    x1: bb.x1 + dx,\n    x2: bb.x2 + dx,\n    y1: bb.y1 + dy,\n    y2: bb.y2 + dy,\n    w: bb.w,\n    h: bb.h\n  };\n};\nvar updateBoundingBox = function updateBoundingBox(bb1, bb2) {\n  // update bb1 with bb2 bounds\n\n  bb1.x1 = Math.min(bb1.x1, bb2.x1);\n  bb1.x2 = Math.max(bb1.x2, bb2.x2);\n  bb1.w = bb1.x2 - bb1.x1;\n  bb1.y1 = Math.min(bb1.y1, bb2.y1);\n  bb1.y2 = Math.max(bb1.y2, bb2.y2);\n  bb1.h = bb1.y2 - bb1.y1;\n};\nvar expandBoundingBoxByPoint = function expandBoundingBoxByPoint(bb, x, y) {\n  bb.x1 = Math.min(bb.x1, x);\n  bb.x2 = Math.max(bb.x2, x);\n  bb.w = bb.x2 - bb.x1;\n  bb.y1 = Math.min(bb.y1, y);\n  bb.y2 = Math.max(bb.y2, y);\n  bb.h = bb.y2 - bb.y1;\n};\nvar expandBoundingBox = function expandBoundingBox(bb) {\n  var padding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  bb.x1 -= padding;\n  bb.x2 += padding;\n  bb.y1 -= padding;\n  bb.y2 += padding;\n  bb.w = bb.x2 - bb.x1;\n  bb.h = bb.y2 - bb.y1;\n  return bb;\n};\nvar expandBoundingBoxSides = function expandBoundingBoxSides(bb) {\n  var padding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0];\n  var top, right, bottom, left;\n  if (padding.length === 1) {\n    top = right = bottom = left = padding[0];\n  } else if (padding.length === 2) {\n    top = bottom = padding[0];\n    left = right = padding[1];\n  } else if (padding.length === 4) {\n    var _padding = _slicedToArray(padding, 4);\n    top = _padding[0];\n    right = _padding[1];\n    bottom = _padding[2];\n    left = _padding[3];\n  }\n  bb.x1 -= left;\n  bb.x2 += right;\n  bb.y1 -= top;\n  bb.y2 += bottom;\n  bb.w = bb.x2 - bb.x1;\n  bb.h = bb.y2 - bb.y1;\n  return bb;\n};\n\n// assign the values of bb2 into bb1\nvar assignBoundingBox = function assignBoundingBox(bb1, bb2) {\n  bb1.x1 = bb2.x1;\n  bb1.y1 = bb2.y1;\n  bb1.x2 = bb2.x2;\n  bb1.y2 = bb2.y2;\n  bb1.w = bb1.x2 - bb1.x1;\n  bb1.h = bb1.y2 - bb1.y1;\n};\nvar boundingBoxesIntersect = function boundingBoxesIntersect(bb1, bb2) {\n  // case: one bb to right of other\n  if (bb1.x1 > bb2.x2) {\n    return false;\n  }\n  if (bb2.x1 > bb1.x2) {\n    return false;\n  }\n\n  // case: one bb to left of other\n  if (bb1.x2 < bb2.x1) {\n    return false;\n  }\n  if (bb2.x2 < bb1.x1) {\n    return false;\n  }\n\n  // case: one bb above other\n  if (bb1.y2 < bb2.y1) {\n    return false;\n  }\n  if (bb2.y2 < bb1.y1) {\n    return false;\n  }\n\n  // case: one bb below other\n  if (bb1.y1 > bb2.y2) {\n    return false;\n  }\n  if (bb2.y1 > bb1.y2) {\n    return false;\n  }\n\n  // otherwise, must have some overlap\n  return true;\n};\nvar inBoundingBox = function inBoundingBox(bb, x, y) {\n  return bb.x1 <= x && x <= bb.x2 && bb.y1 <= y && y <= bb.y2;\n};\nvar pointInBoundingBox = function pointInBoundingBox(bb, pt) {\n  return inBoundingBox(bb, pt.x, pt.y);\n};\nvar boundingBoxInBoundingBox = function boundingBoxInBoundingBox(bb1, bb2) {\n  return inBoundingBox(bb1, bb2.x1, bb2.y1) && inBoundingBox(bb1, bb2.x2, bb2.y2);\n};\nvar roundRectangleIntersectLine = function roundRectangleIntersectLine(x, y, nodeX, nodeY, width, height, padding) {\n  var radius = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 'auto';\n  var cornerRadius = radius === 'auto' ? getRoundRectangleRadius(width, height) : radius;\n  var halfWidth = width / 2;\n  var halfHeight = height / 2;\n  cornerRadius = Math.min(cornerRadius, halfWidth, halfHeight);\n  var doWidth = cornerRadius !== halfWidth,\n    doHeight = cornerRadius !== halfHeight;\n\n  // Check intersections with straight line segments\n  var straightLineIntersections;\n\n  // Top segment, left to right\n  if (doWidth) {\n    var topStartX = nodeX - halfWidth + cornerRadius - padding;\n    var topStartY = nodeY - halfHeight - padding;\n    var topEndX = nodeX + halfWidth - cornerRadius + padding;\n    var topEndY = topStartY;\n    straightLineIntersections = finiteLinesIntersect(x, y, nodeX, nodeY, topStartX, topStartY, topEndX, topEndY, false);\n    if (straightLineIntersections.length > 0) {\n      return straightLineIntersections;\n    }\n  }\n\n  // Right segment, top to bottom\n  if (doHeight) {\n    var rightStartX = nodeX + halfWidth + padding;\n    var rightStartY = nodeY - halfHeight + cornerRadius - padding;\n    var rightEndX = rightStartX;\n    var rightEndY = nodeY + halfHeight - cornerRadius + padding;\n    straightLineIntersections = finiteLinesIntersect(x, y, nodeX, nodeY, rightStartX, rightStartY, rightEndX, rightEndY, false);\n    if (straightLineIntersections.length > 0) {\n      return straightLineIntersections;\n    }\n  }\n\n  // Bottom segment, left to right\n  if (doWidth) {\n    var bottomStartX = nodeX - halfWidth + cornerRadius - padding;\n    var bottomStartY = nodeY + halfHeight + padding;\n    var bottomEndX = nodeX + halfWidth - cornerRadius + padding;\n    var bottomEndY = bottomStartY;\n    straightLineIntersections = finiteLinesIntersect(x, y, nodeX, nodeY, bottomStartX, bottomStartY, bottomEndX, bottomEndY, false);\n    if (straightLineIntersections.length > 0) {\n      return straightLineIntersections;\n    }\n  }\n\n  // Left segment, top to bottom\n  if (doHeight) {\n    var leftStartX = nodeX - halfWidth - padding;\n    var leftStartY = nodeY - halfHeight + cornerRadius - padding;\n    var leftEndX = leftStartX;\n    var leftEndY = nodeY + halfHeight - cornerRadius + padding;\n    straightLineIntersections = finiteLinesIntersect(x, y, nodeX, nodeY, leftStartX, leftStartY, leftEndX, leftEndY, false);\n    if (straightLineIntersections.length > 0) {\n      return straightLineIntersections;\n    }\n  }\n\n  // Check intersections with arc segments\n  var arcIntersections;\n\n  // Top Left\n  {\n    var topLeftCenterX = nodeX - halfWidth + cornerRadius;\n    var topLeftCenterY = nodeY - halfHeight + cornerRadius;\n    arcIntersections = intersectLineCircle(x, y, nodeX, nodeY, topLeftCenterX, topLeftCenterY, cornerRadius + padding);\n\n    // Ensure the intersection is on the desired quarter of the circle\n    if (arcIntersections.length > 0 && arcIntersections[0] <= topLeftCenterX && arcIntersections[1] <= topLeftCenterY) {\n      return [arcIntersections[0], arcIntersections[1]];\n    }\n  }\n\n  // Top Right\n  {\n    var topRightCenterX = nodeX + halfWidth - cornerRadius;\n    var topRightCenterY = nodeY - halfHeight + cornerRadius;\n    arcIntersections = intersectLineCircle(x, y, nodeX, nodeY, topRightCenterX, topRightCenterY, cornerRadius + padding);\n\n    // Ensure the intersection is on the desired quarter of the circle\n    if (arcIntersections.length > 0 && arcIntersections[0] >= topRightCenterX && arcIntersections[1] <= topRightCenterY) {\n      return [arcIntersections[0], arcIntersections[1]];\n    }\n  }\n\n  // Bottom Right\n  {\n    var bottomRightCenterX = nodeX + halfWidth - cornerRadius;\n    var bottomRightCenterY = nodeY + halfHeight - cornerRadius;\n    arcIntersections = intersectLineCircle(x, y, nodeX, nodeY, bottomRightCenterX, bottomRightCenterY, cornerRadius + padding);\n\n    // Ensure the intersection is on the desired quarter of the circle\n    if (arcIntersections.length > 0 && arcIntersections[0] >= bottomRightCenterX && arcIntersections[1] >= bottomRightCenterY) {\n      return [arcIntersections[0], arcIntersections[1]];\n    }\n  }\n\n  // Bottom Left\n  {\n    var bottomLeftCenterX = nodeX - halfWidth + cornerRadius;\n    var bottomLeftCenterY = nodeY + halfHeight - cornerRadius;\n    arcIntersections = intersectLineCircle(x, y, nodeX, nodeY, bottomLeftCenterX, bottomLeftCenterY, cornerRadius + padding);\n\n    // Ensure the intersection is on the desired quarter of the circle\n    if (arcIntersections.length > 0 && arcIntersections[0] <= bottomLeftCenterX && arcIntersections[1] >= bottomLeftCenterY) {\n      return [arcIntersections[0], arcIntersections[1]];\n    }\n  }\n  return []; // if nothing\n};\n\nvar inLineVicinity = function inLineVicinity(x, y, lx1, ly1, lx2, ly2, tolerance) {\n  var t = tolerance;\n  var x1 = Math.min(lx1, lx2);\n  var x2 = Math.max(lx1, lx2);\n  var y1 = Math.min(ly1, ly2);\n  var y2 = Math.max(ly1, ly2);\n  return x1 - t <= x && x <= x2 + t && y1 - t <= y && y <= y2 + t;\n};\nvar inBezierVicinity = function inBezierVicinity(x, y, x1, y1, x2, y2, x3, y3, tolerance) {\n  var bb = {\n    x1: Math.min(x1, x3, x2) - tolerance,\n    x2: Math.max(x1, x3, x2) + tolerance,\n    y1: Math.min(y1, y3, y2) - tolerance,\n    y2: Math.max(y1, y3, y2) + tolerance\n  };\n\n  // if outside the rough bounding box for the bezier, then it can't be a hit\n  if (x < bb.x1 || x > bb.x2 || y < bb.y1 || y > bb.y2) {\n    // console.log('bezier out of rough bb')\n    return false;\n  } else {\n    // console.log('do more expensive check');\n    return true;\n  }\n};\nvar solveQuadratic = function solveQuadratic(a, b, c, val) {\n  c -= val;\n  var r = b * b - 4 * a * c;\n  if (r < 0) {\n    return [];\n  }\n  var sqrtR = Math.sqrt(r);\n  var denom = 2 * a;\n  var root1 = (-b + sqrtR) / denom;\n  var root2 = (-b - sqrtR) / denom;\n  return [root1, root2];\n};\nvar solveCubic = function solveCubic(a, b, c, d, result) {\n  // Solves a cubic function, returns root in form [r1, i1, r2, i2, r3, i3], where\n  // r is the real component, i is the imaginary component\n\n  // An implementation of the Cardano method from the year 1545\n  // http://en.wikipedia.org/wiki/Cubic_function#The_nature_of_the_roots\n\n  var epsilon = 0.00001;\n\n  // avoid division by zero while keeping the overall expression close in value\n  if (a === 0) {\n    a = epsilon;\n  }\n  b /= a;\n  c /= a;\n  d /= a;\n  var discriminant, q, r, dum1, s, t, term1, r13;\n  q = (3.0 * c - b * b) / 9.0;\n  r = -(27.0 * d) + b * (9.0 * c - 2.0 * (b * b));\n  r /= 54.0;\n  discriminant = q * q * q + r * r;\n  result[1] = 0;\n  term1 = b / 3.0;\n  if (discriminant > 0) {\n    s = r + Math.sqrt(discriminant);\n    s = s < 0 ? -Math.pow(-s, 1.0 / 3.0) : Math.pow(s, 1.0 / 3.0);\n    t = r - Math.sqrt(discriminant);\n    t = t < 0 ? -Math.pow(-t, 1.0 / 3.0) : Math.pow(t, 1.0 / 3.0);\n    result[0] = -term1 + s + t;\n    term1 += (s + t) / 2.0;\n    result[4] = result[2] = -term1;\n    term1 = Math.sqrt(3.0) * (-t + s) / 2;\n    result[3] = term1;\n    result[5] = -term1;\n    return;\n  }\n  result[5] = result[3] = 0;\n  if (discriminant === 0) {\n    r13 = r < 0 ? -Math.pow(-r, 1.0 / 3.0) : Math.pow(r, 1.0 / 3.0);\n    result[0] = -term1 + 2.0 * r13;\n    result[4] = result[2] = -(r13 + term1);\n    return;\n  }\n  q = -q;\n  dum1 = q * q * q;\n  dum1 = Math.acos(r / Math.sqrt(dum1));\n  r13 = 2.0 * Math.sqrt(q);\n  result[0] = -term1 + r13 * Math.cos(dum1 / 3.0);\n  result[2] = -term1 + r13 * Math.cos((dum1 + 2.0 * Math.PI) / 3.0);\n  result[4] = -term1 + r13 * Math.cos((dum1 + 4.0 * Math.PI) / 3.0);\n  return;\n};\nvar sqdistToQuadraticBezier = function sqdistToQuadraticBezier(x, y, x1, y1, x2, y2, x3, y3) {\n  // Find minimum distance by using the minimum of the distance\n  // function between the given point and the curve\n\n  // This gives the coefficients of the resulting cubic equation\n  // whose roots tell us where a possible minimum is\n  // (Coefficients are divided by 4)\n\n  var a = 1.0 * x1 * x1 - 4 * x1 * x2 + 2 * x1 * x3 + 4 * x2 * x2 - 4 * x2 * x3 + x3 * x3 + y1 * y1 - 4 * y1 * y2 + 2 * y1 * y3 + 4 * y2 * y2 - 4 * y2 * y3 + y3 * y3;\n  var b = 1.0 * 9 * x1 * x2 - 3 * x1 * x1 - 3 * x1 * x3 - 6 * x2 * x2 + 3 * x2 * x3 + 9 * y1 * y2 - 3 * y1 * y1 - 3 * y1 * y3 - 6 * y2 * y2 + 3 * y2 * y3;\n  var c = 1.0 * 3 * x1 * x1 - 6 * x1 * x2 + x1 * x3 - x1 * x + 2 * x2 * x2 + 2 * x2 * x - x3 * x + 3 * y1 * y1 - 6 * y1 * y2 + y1 * y3 - y1 * y + 2 * y2 * y2 + 2 * y2 * y - y3 * y;\n  var d = 1.0 * x1 * x2 - x1 * x1 + x1 * x - x2 * x + y1 * y2 - y1 * y1 + y1 * y - y2 * y;\n\n  // debug(\"coefficients: \" + a / a + \", \" + b / a + \", \" + c / a + \", \" + d / a);\n\n  var roots = [];\n\n  // Use the cubic solving algorithm\n  solveCubic(a, b, c, d, roots);\n  var zeroThreshold = 0.0000001;\n  var params = [];\n  for (var index = 0; index < 6; index += 2) {\n    if (Math.abs(roots[index + 1]) < zeroThreshold && roots[index] >= 0 && roots[index] <= 1.0) {\n      params.push(roots[index]);\n    }\n  }\n  params.push(1.0);\n  params.push(0.0);\n  var minDistanceSquared = -1;\n  var curX, curY, distSquared;\n  for (var i = 0; i < params.length; i++) {\n    curX = Math.pow(1.0 - params[i], 2.0) * x1 + 2.0 * (1 - params[i]) * params[i] * x2 + params[i] * params[i] * x3;\n    curY = Math.pow(1 - params[i], 2.0) * y1 + 2 * (1.0 - params[i]) * params[i] * y2 + params[i] * params[i] * y3;\n    distSquared = Math.pow(curX - x, 2) + Math.pow(curY - y, 2);\n    // debug('distance for param ' + params[i] + \": \" + Math.sqrt(distSquared));\n    if (minDistanceSquared >= 0) {\n      if (distSquared < minDistanceSquared) {\n        minDistanceSquared = distSquared;\n      }\n    } else {\n      minDistanceSquared = distSquared;\n    }\n  }\n  return minDistanceSquared;\n};\nvar sqdistToFiniteLine = function sqdistToFiniteLine(x, y, x1, y1, x2, y2) {\n  var offset = [x - x1, y - y1];\n  var line = [x2 - x1, y2 - y1];\n  var lineSq = line[0] * line[0] + line[1] * line[1];\n  var hypSq = offset[0] * offset[0] + offset[1] * offset[1];\n  var dotProduct = offset[0] * line[0] + offset[1] * line[1];\n  var adjSq = dotProduct * dotProduct / lineSq;\n  if (dotProduct < 0) {\n    return hypSq;\n  }\n  if (adjSq > lineSq) {\n    return (x - x2) * (x - x2) + (y - y2) * (y - y2);\n  }\n  return hypSq - adjSq;\n};\nvar pointInsidePolygonPoints = function pointInsidePolygonPoints(x, y, points) {\n  var x1, y1, x2, y2;\n  var y3;\n\n  // Intersect with vertical line through (x, y)\n  var up = 0;\n  // let down = 0;\n  for (var i = 0; i < points.length / 2; i++) {\n    x1 = points[i * 2];\n    y1 = points[i * 2 + 1];\n    if (i + 1 < points.length / 2) {\n      x2 = points[(i + 1) * 2];\n      y2 = points[(i + 1) * 2 + 1];\n    } else {\n      x2 = points[(i + 1 - points.length / 2) * 2];\n      y2 = points[(i + 1 - points.length / 2) * 2 + 1];\n    }\n    if (x1 == x && x2 == x) ; else if (x1 >= x && x >= x2 || x1 <= x && x <= x2) {\n      y3 = (x - x1) / (x2 - x1) * (y2 - y1) + y1;\n      if (y3 > y) {\n        up++;\n      }\n\n      // if( y3 < y ){\n      // down++;\n      // }\n    } else {\n      continue;\n    }\n  }\n  if (up % 2 === 0) {\n    return false;\n  } else {\n    return true;\n  }\n};\nvar pointInsidePolygon = function pointInsidePolygon(x, y, basePoints, centerX, centerY, width, height, direction, padding) {\n  var transformedPoints = new Array(basePoints.length);\n\n  // Gives negative angle\n  var angle;\n  if (direction[0] != null) {\n    angle = Math.atan(direction[1] / direction[0]);\n    if (direction[0] < 0) {\n      angle = angle + Math.PI / 2;\n    } else {\n      angle = -angle - Math.PI / 2;\n    }\n  } else {\n    angle = direction;\n  }\n  var cos = Math.cos(-angle);\n  var sin = Math.sin(-angle);\n\n  //    console.log(\"base: \" + basePoints);\n  for (var i = 0; i < transformedPoints.length / 2; i++) {\n    transformedPoints[i * 2] = width / 2 * (basePoints[i * 2] * cos - basePoints[i * 2 + 1] * sin);\n    transformedPoints[i * 2 + 1] = height / 2 * (basePoints[i * 2 + 1] * cos + basePoints[i * 2] * sin);\n    transformedPoints[i * 2] += centerX;\n    transformedPoints[i * 2 + 1] += centerY;\n  }\n  var points;\n  if (padding > 0) {\n    var expandedLineSet = expandPolygon(transformedPoints, -padding);\n    points = joinLines(expandedLineSet);\n  } else {\n    points = transformedPoints;\n  }\n  return pointInsidePolygonPoints(x, y, points);\n};\nvar pointInsideRoundPolygon = function pointInsideRoundPolygon(x, y, basePoints, centerX, centerY, width, height, corners) {\n  var cutPolygonPoints = new Array(basePoints.length * 2);\n  for (var i = 0; i < corners.length; i++) {\n    var corner = corners[i];\n    cutPolygonPoints[i * 4 + 0] = corner.startX;\n    cutPolygonPoints[i * 4 + 1] = corner.startY;\n    cutPolygonPoints[i * 4 + 2] = corner.stopX;\n    cutPolygonPoints[i * 4 + 3] = corner.stopY;\n    var squaredDistance = Math.pow(corner.cx - x, 2) + Math.pow(corner.cy - y, 2);\n    if (squaredDistance <= Math.pow(corner.radius, 2)) {\n      return true;\n    }\n  }\n  return pointInsidePolygonPoints(x, y, cutPolygonPoints);\n};\nvar joinLines = function joinLines(lineSet) {\n  var vertices = new Array(lineSet.length / 2);\n  var currentLineStartX, currentLineStartY, currentLineEndX, currentLineEndY;\n  var nextLineStartX, nextLineStartY, nextLineEndX, nextLineEndY;\n  for (var i = 0; i < lineSet.length / 4; i++) {\n    currentLineStartX = lineSet[i * 4];\n    currentLineStartY = lineSet[i * 4 + 1];\n    currentLineEndX = lineSet[i * 4 + 2];\n    currentLineEndY = lineSet[i * 4 + 3];\n    if (i < lineSet.length / 4 - 1) {\n      nextLineStartX = lineSet[(i + 1) * 4];\n      nextLineStartY = lineSet[(i + 1) * 4 + 1];\n      nextLineEndX = lineSet[(i + 1) * 4 + 2];\n      nextLineEndY = lineSet[(i + 1) * 4 + 3];\n    } else {\n      nextLineStartX = lineSet[0];\n      nextLineStartY = lineSet[1];\n      nextLineEndX = lineSet[2];\n      nextLineEndY = lineSet[3];\n    }\n    var intersection = finiteLinesIntersect(currentLineStartX, currentLineStartY, currentLineEndX, currentLineEndY, nextLineStartX, nextLineStartY, nextLineEndX, nextLineEndY, true);\n    vertices[i * 2] = intersection[0];\n    vertices[i * 2 + 1] = intersection[1];\n  }\n  return vertices;\n};\nvar expandPolygon = function expandPolygon(points, pad) {\n  var expandedLineSet = new Array(points.length * 2);\n  var currentPointX, currentPointY, nextPointX, nextPointY;\n  for (var i = 0; i < points.length / 2; i++) {\n    currentPointX = points[i * 2];\n    currentPointY = points[i * 2 + 1];\n    if (i < points.length / 2 - 1) {\n      nextPointX = points[(i + 1) * 2];\n      nextPointY = points[(i + 1) * 2 + 1];\n    } else {\n      nextPointX = points[0];\n      nextPointY = points[1];\n    }\n\n    // Current line: [currentPointX, currentPointY] to [nextPointX, nextPointY]\n\n    // Assume CCW polygon winding\n\n    var offsetX = nextPointY - currentPointY;\n    var offsetY = -(nextPointX - currentPointX);\n\n    // Normalize\n    var offsetLength = Math.sqrt(offsetX * offsetX + offsetY * offsetY);\n    var normalizedOffsetX = offsetX / offsetLength;\n    var normalizedOffsetY = offsetY / offsetLength;\n    expandedLineSet[i * 4] = currentPointX + normalizedOffsetX * pad;\n    expandedLineSet[i * 4 + 1] = currentPointY + normalizedOffsetY * pad;\n    expandedLineSet[i * 4 + 2] = nextPointX + normalizedOffsetX * pad;\n    expandedLineSet[i * 4 + 3] = nextPointY + normalizedOffsetY * pad;\n  }\n  return expandedLineSet;\n};\nvar intersectLineEllipse = function intersectLineEllipse(x, y, centerX, centerY, ellipseWradius, ellipseHradius) {\n  var dispX = centerX - x;\n  var dispY = centerY - y;\n  dispX /= ellipseWradius;\n  dispY /= ellipseHradius;\n  var len = Math.sqrt(dispX * dispX + dispY * dispY);\n  var newLength = len - 1;\n  if (newLength < 0) {\n    return [];\n  }\n  var lenProportion = newLength / len;\n  return [(centerX - x) * lenProportion + x, (centerY - y) * lenProportion + y];\n};\nvar checkInEllipse = function checkInEllipse(x, y, width, height, centerX, centerY, padding) {\n  x -= centerX;\n  y -= centerY;\n  x /= width / 2 + padding;\n  y /= height / 2 + padding;\n  return x * x + y * y <= 1;\n};\n\n// Returns intersections of increasing distance from line's start point\nvar intersectLineCircle = function intersectLineCircle(x1, y1, x2, y2, centerX, centerY, radius) {\n  // Calculate d, direction vector of line\n  var d = [x2 - x1, y2 - y1]; // Direction vector of line\n  var f = [x1 - centerX, y1 - centerY];\n  var a = d[0] * d[0] + d[1] * d[1];\n  var b = 2 * (f[0] * d[0] + f[1] * d[1]);\n  var c = f[0] * f[0] + f[1] * f[1] - radius * radius;\n  var discriminant = b * b - 4 * a * c;\n  if (discriminant < 0) {\n    return [];\n  }\n  var t1 = (-b + Math.sqrt(discriminant)) / (2 * a);\n  var t2 = (-b - Math.sqrt(discriminant)) / (2 * a);\n  var tMin = Math.min(t1, t2);\n  var tMax = Math.max(t1, t2);\n  var inRangeParams = [];\n  if (tMin >= 0 && tMin <= 1) {\n    inRangeParams.push(tMin);\n  }\n  if (tMax >= 0 && tMax <= 1) {\n    inRangeParams.push(tMax);\n  }\n  if (inRangeParams.length === 0) {\n    return [];\n  }\n  var nearIntersectionX = inRangeParams[0] * d[0] + x1;\n  var nearIntersectionY = inRangeParams[0] * d[1] + y1;\n  if (inRangeParams.length > 1) {\n    if (inRangeParams[0] == inRangeParams[1]) {\n      return [nearIntersectionX, nearIntersectionY];\n    } else {\n      var farIntersectionX = inRangeParams[1] * d[0] + x1;\n      var farIntersectionY = inRangeParams[1] * d[1] + y1;\n      return [nearIntersectionX, nearIntersectionY, farIntersectionX, farIntersectionY];\n    }\n  } else {\n    return [nearIntersectionX, nearIntersectionY];\n  }\n};\nvar midOfThree = function midOfThree(a, b, c) {\n  if (b <= a && a <= c || c <= a && a <= b) {\n    return a;\n  } else if (a <= b && b <= c || c <= b && b <= a) {\n    return b;\n  } else {\n    return c;\n  }\n};\n\n// (x1,y1)=>(x2,y2) intersect with (x3,y3)=>(x4,y4)\nvar finiteLinesIntersect = function finiteLinesIntersect(x1, y1, x2, y2, x3, y3, x4, y4, infiniteLines) {\n  var dx13 = x1 - x3;\n  var dx21 = x2 - x1;\n  var dx43 = x4 - x3;\n  var dy13 = y1 - y3;\n  var dy21 = y2 - y1;\n  var dy43 = y4 - y3;\n  var ua_t = dx43 * dy13 - dy43 * dx13;\n  var ub_t = dx21 * dy13 - dy21 * dx13;\n  var u_b = dy43 * dx21 - dx43 * dy21;\n  if (u_b !== 0) {\n    var ua = ua_t / u_b;\n    var ub = ub_t / u_b;\n    var flptThreshold = 0.001;\n    var _min = 0 - flptThreshold;\n    var _max = 1 + flptThreshold;\n    if (_min <= ua && ua <= _max && _min <= ub && ub <= _max) {\n      return [x1 + ua * dx21, y1 + ua * dy21];\n    } else {\n      if (!infiniteLines) {\n        return [];\n      } else {\n        return [x1 + ua * dx21, y1 + ua * dy21];\n      }\n    }\n  } else {\n    if (ua_t === 0 || ub_t === 0) {\n      // Parallel, coincident lines. Check if overlap\n\n      // Check endpoint of second line\n      if (midOfThree(x1, x2, x4) === x4) {\n        return [x4, y4];\n      }\n\n      // Check start point of second line\n      if (midOfThree(x1, x2, x3) === x3) {\n        return [x3, y3];\n      }\n\n      // Endpoint of first line\n      if (midOfThree(x3, x4, x2) === x2) {\n        return [x2, y2];\n      }\n      return [];\n    } else {\n      // Parallel, non-coincident\n      return [];\n    }\n  }\n};\n\n// math.polygonIntersectLine( x, y, basePoints, centerX, centerY, width, height, padding )\n// intersect a node polygon (pts transformed)\n//\n// math.polygonIntersectLine( x, y, basePoints, centerX, centerY )\n// intersect the points (no transform)\nvar polygonIntersectLine = function polygonIntersectLine(x, y, basePoints, centerX, centerY, width, height, padding) {\n  var intersections = [];\n  var intersection;\n  var transformedPoints = new Array(basePoints.length);\n  var doTransform = true;\n  if (width == null) {\n    doTransform = false;\n  }\n  var points;\n  if (doTransform) {\n    for (var i = 0; i < transformedPoints.length / 2; i++) {\n      transformedPoints[i * 2] = basePoints[i * 2] * width + centerX;\n      transformedPoints[i * 2 + 1] = basePoints[i * 2 + 1] * height + centerY;\n    }\n    if (padding > 0) {\n      var expandedLineSet = expandPolygon(transformedPoints, -padding);\n      points = joinLines(expandedLineSet);\n    } else {\n      points = transformedPoints;\n    }\n  } else {\n    points = basePoints;\n  }\n  var currentX, currentY, nextX, nextY;\n  for (var _i2 = 0; _i2 < points.length / 2; _i2++) {\n    currentX = points[_i2 * 2];\n    currentY = points[_i2 * 2 + 1];\n    if (_i2 < points.length / 2 - 1) {\n      nextX = points[(_i2 + 1) * 2];\n      nextY = points[(_i2 + 1) * 2 + 1];\n    } else {\n      nextX = points[0];\n      nextY = points[1];\n    }\n    intersection = finiteLinesIntersect(x, y, centerX, centerY, currentX, currentY, nextX, nextY);\n    if (intersection.length !== 0) {\n      intersections.push(intersection[0], intersection[1]);\n    }\n  }\n  return intersections;\n};\nvar roundPolygonIntersectLine = function roundPolygonIntersectLine(x, y, basePoints, centerX, centerY, width, height, padding, corners) {\n  var intersections = [];\n  var intersection;\n  var lines = new Array(basePoints.length * 2);\n  corners.forEach(function (corner, i) {\n    if (i === 0) {\n      lines[lines.length - 2] = corner.startX;\n      lines[lines.length - 1] = corner.startY;\n    } else {\n      lines[i * 4 - 2] = corner.startX;\n      lines[i * 4 - 1] = corner.startY;\n    }\n    lines[i * 4] = corner.stopX;\n    lines[i * 4 + 1] = corner.stopY;\n    intersection = intersectLineCircle(x, y, centerX, centerY, corner.cx, corner.cy, corner.radius);\n    if (intersection.length !== 0) {\n      intersections.push(intersection[0], intersection[1]);\n    }\n  });\n  for (var i = 0; i < lines.length / 4; i++) {\n    intersection = finiteLinesIntersect(x, y, centerX, centerY, lines[i * 4], lines[i * 4 + 1], lines[i * 4 + 2], lines[i * 4 + 3], false);\n    if (intersection.length !== 0) {\n      intersections.push(intersection[0], intersection[1]);\n    }\n  }\n  if (intersections.length > 2) {\n    var lowestIntersection = [intersections[0], intersections[1]];\n    var lowestSquaredDistance = Math.pow(lowestIntersection[0] - x, 2) + Math.pow(lowestIntersection[1] - y, 2);\n    for (var _i3 = 1; _i3 < intersections.length / 2; _i3++) {\n      var squaredDistance = Math.pow(intersections[_i3 * 2] - x, 2) + Math.pow(intersections[_i3 * 2 + 1] - y, 2);\n      if (squaredDistance <= lowestSquaredDistance) {\n        lowestIntersection[0] = intersections[_i3 * 2];\n        lowestIntersection[1] = intersections[_i3 * 2 + 1];\n        lowestSquaredDistance = squaredDistance;\n      }\n    }\n    return lowestIntersection;\n  }\n  return intersections;\n};\nvar shortenIntersection = function shortenIntersection(intersection, offset, amount) {\n  var disp = [intersection[0] - offset[0], intersection[1] - offset[1]];\n  var length = Math.sqrt(disp[0] * disp[0] + disp[1] * disp[1]);\n  var lenRatio = (length - amount) / length;\n  if (lenRatio < 0) {\n    lenRatio = 0.00001;\n  }\n  return [offset[0] + lenRatio * disp[0], offset[1] + lenRatio * disp[1]];\n};\nvar generateUnitNgonPointsFitToSquare = function generateUnitNgonPointsFitToSquare(sides, rotationRadians) {\n  var points = generateUnitNgonPoints(sides, rotationRadians);\n  points = fitPolygonToSquare(points);\n  return points;\n};\nvar fitPolygonToSquare = function fitPolygonToSquare(points) {\n  var x, y;\n  var sides = points.length / 2;\n  var minX = Infinity,\n    minY = Infinity,\n    maxX = -Infinity,\n    maxY = -Infinity;\n  for (var i = 0; i < sides; i++) {\n    x = points[2 * i];\n    y = points[2 * i + 1];\n    minX = Math.min(minX, x);\n    maxX = Math.max(maxX, x);\n    minY = Math.min(minY, y);\n    maxY = Math.max(maxY, y);\n  }\n\n  // stretch factors\n  var sx = 2 / (maxX - minX);\n  var sy = 2 / (maxY - minY);\n  for (var _i4 = 0; _i4 < sides; _i4++) {\n    x = points[2 * _i4] = points[2 * _i4] * sx;\n    y = points[2 * _i4 + 1] = points[2 * _i4 + 1] * sy;\n    minX = Math.min(minX, x);\n    maxX = Math.max(maxX, x);\n    minY = Math.min(minY, y);\n    maxY = Math.max(maxY, y);\n  }\n  if (minY < -1) {\n    for (var _i5 = 0; _i5 < sides; _i5++) {\n      y = points[2 * _i5 + 1] = points[2 * _i5 + 1] + (-1 - minY);\n    }\n  }\n  return points;\n};\nvar generateUnitNgonPoints = function generateUnitNgonPoints(sides, rotationRadians) {\n  var increment = 1.0 / sides * 2 * Math.PI;\n  var startAngle = sides % 2 === 0 ? Math.PI / 2.0 + increment / 2.0 : Math.PI / 2.0;\n  startAngle += rotationRadians;\n  var points = new Array(sides * 2);\n  var currentAngle;\n  for (var i = 0; i < sides; i++) {\n    currentAngle = i * increment + startAngle;\n    points[2 * i] = Math.cos(currentAngle); // x\n    points[2 * i + 1] = Math.sin(-currentAngle); // y\n  }\n\n  return points;\n};\n\n// Set the default radius, unless half of width or height is smaller than default\nvar getRoundRectangleRadius = function getRoundRectangleRadius(width, height) {\n  return Math.min(width / 4, height / 4, 8);\n};\n\n// Set the default radius\nvar getRoundPolygonRadius = function getRoundPolygonRadius(width, height) {\n  return Math.min(width / 10, height / 10, 8);\n};\nvar getCutRectangleCornerLength = function getCutRectangleCornerLength() {\n  return 8;\n};\nvar bezierPtsToQuadCoeff = function bezierPtsToQuadCoeff(p0, p1, p2) {\n  return [p0 - 2 * p1 + p2, 2 * (p1 - p0), p0];\n};\n\n// get curve width, height, and control point position offsets as a percentage of node height / width\nvar getBarrelCurveConstants = function getBarrelCurveConstants(width, height) {\n  return {\n    heightOffset: Math.min(15, 0.05 * height),\n    widthOffset: Math.min(100, 0.25 * width),\n    ctrlPtOffsetPct: 0.05\n  };\n};\n\nvar pageRankDefaults = defaults$g({\n  dampingFactor: 0.8,\n  precision: 0.000001,\n  iterations: 200,\n  weight: function weight(edge) {\n    return 1;\n  }\n});\nvar elesfn$o = {\n  pageRank: function pageRank(options) {\n    var _pageRankDefaults = pageRankDefaults(options),\n      dampingFactor = _pageRankDefaults.dampingFactor,\n      precision = _pageRankDefaults.precision,\n      iterations = _pageRankDefaults.iterations,\n      weight = _pageRankDefaults.weight;\n    var cy = this._private.cy;\n    var _this$byGroup = this.byGroup(),\n      nodes = _this$byGroup.nodes,\n      edges = _this$byGroup.edges;\n    var numNodes = nodes.length;\n    var numNodesSqd = numNodes * numNodes;\n    var numEdges = edges.length;\n\n    // Construct transposed adjacency matrix\n    // First lets have a zeroed matrix of the right size\n    // We'll also keep track of the sum of each column\n    var matrix = new Array(numNodesSqd);\n    var columnSum = new Array(numNodes);\n    var additionalProb = (1 - dampingFactor) / numNodes;\n\n    // Create null matrix\n    for (var i = 0; i < numNodes; i++) {\n      for (var j = 0; j < numNodes; j++) {\n        var n = i * numNodes + j;\n        matrix[n] = 0;\n      }\n      columnSum[i] = 0;\n    }\n\n    // Now, process edges\n    for (var _i = 0; _i < numEdges; _i++) {\n      var edge = edges[_i];\n      var srcId = edge.data('source');\n      var tgtId = edge.data('target');\n\n      // Don't include loops in the matrix\n      if (srcId === tgtId) {\n        continue;\n      }\n      var s = nodes.indexOfId(srcId);\n      var t = nodes.indexOfId(tgtId);\n      var w = weight(edge);\n      var _n = t * numNodes + s;\n\n      // Update matrix\n      matrix[_n] += w;\n\n      // Update column sum\n      columnSum[s] += w;\n    }\n\n    // Add additional probability based on damping factor\n    // Also, take into account columns that have sum = 0\n    var p = 1.0 / numNodes + additionalProb; // Shorthand\n\n    // Traverse matrix, column by column\n    for (var _j = 0; _j < numNodes; _j++) {\n      if (columnSum[_j] === 0) {\n        // No 'links' out from node jth, assume equal probability for each possible node\n        for (var _i2 = 0; _i2 < numNodes; _i2++) {\n          var _n2 = _i2 * numNodes + _j;\n          matrix[_n2] = p;\n        }\n      } else {\n        // Node jth has outgoing link, compute normalized probabilities\n        for (var _i3 = 0; _i3 < numNodes; _i3++) {\n          var _n3 = _i3 * numNodes + _j;\n          matrix[_n3] = matrix[_n3] / columnSum[_j] + additionalProb;\n        }\n      }\n    }\n\n    // Compute dominant eigenvector using power method\n    var eigenvector = new Array(numNodes);\n    var temp = new Array(numNodes);\n    var previous;\n\n    // Start with a vector of all 1's\n    // Also, initialize a null vector which will be used as shorthand\n    for (var _i4 = 0; _i4 < numNodes; _i4++) {\n      eigenvector[_i4] = 1;\n    }\n    for (var iter = 0; iter < iterations; iter++) {\n      // Temp array with all 0's\n      for (var _i5 = 0; _i5 < numNodes; _i5++) {\n        temp[_i5] = 0;\n      }\n\n      // Multiply matrix with previous result\n      for (var _i6 = 0; _i6 < numNodes; _i6++) {\n        for (var _j2 = 0; _j2 < numNodes; _j2++) {\n          var _n4 = _i6 * numNodes + _j2;\n          temp[_i6] += matrix[_n4] * eigenvector[_j2];\n        }\n      }\n      inPlaceSumNormalize(temp);\n      previous = eigenvector;\n      eigenvector = temp;\n      temp = previous;\n      var diff = 0;\n      // Compute difference (squared module) of both vectors\n      for (var _i7 = 0; _i7 < numNodes; _i7++) {\n        var delta = previous[_i7] - eigenvector[_i7];\n        diff += delta * delta;\n      }\n\n      // If difference is less than the desired threshold, stop iterating\n      if (diff < precision) {\n        break;\n      }\n    }\n\n    // Construct result\n    var res = {\n      rank: function rank(node) {\n        node = cy.collection(node)[0];\n        return eigenvector[nodes.indexOf(node)];\n      }\n    };\n    return res;\n  } // pageRank\n}; // elesfn\n\nvar defaults$f = defaults$g({\n  root: null,\n  weight: function weight(edge) {\n    return 1;\n  },\n  directed: false,\n  alpha: 0\n});\nvar elesfn$n = {\n  degreeCentralityNormalized: function degreeCentralityNormalized(options) {\n    options = defaults$f(options);\n    var cy = this.cy();\n    var nodes = this.nodes();\n    var numNodes = nodes.length;\n    if (!options.directed) {\n      var degrees = {};\n      var maxDegree = 0;\n      for (var i = 0; i < numNodes; i++) {\n        var node = nodes[i];\n\n        // add current node to the current options object and call degreeCentrality\n        options.root = node;\n        var currDegree = this.degreeCentrality(options);\n        if (maxDegree < currDegree.degree) {\n          maxDegree = currDegree.degree;\n        }\n        degrees[node.id()] = currDegree.degree;\n      }\n      return {\n        degree: function degree(node) {\n          if (maxDegree === 0) {\n            return 0;\n          }\n          if (string(node)) {\n            // from is a selector string\n            node = cy.filter(node);\n          }\n          return degrees[node.id()] / maxDegree;\n        }\n      };\n    } else {\n      var indegrees = {};\n      var outdegrees = {};\n      var maxIndegree = 0;\n      var maxOutdegree = 0;\n      for (var _i = 0; _i < numNodes; _i++) {\n        var _node = nodes[_i];\n        var id = _node.id();\n\n        // add current node to the current options object and call degreeCentrality\n        options.root = _node;\n        var _currDegree = this.degreeCentrality(options);\n        if (maxIndegree < _currDegree.indegree) maxIndegree = _currDegree.indegree;\n        if (maxOutdegree < _currDegree.outdegree) maxOutdegree = _currDegree.outdegree;\n        indegrees[id] = _currDegree.indegree;\n        outdegrees[id] = _currDegree.outdegree;\n      }\n      return {\n        indegree: function indegree(node) {\n          if (maxIndegree == 0) {\n            return 0;\n          }\n          if (string(node)) {\n            // from is a selector string\n            node = cy.filter(node);\n          }\n          return indegrees[node.id()] / maxIndegree;\n        },\n        outdegree: function outdegree(node) {\n          if (maxOutdegree === 0) {\n            return 0;\n          }\n          if (string(node)) {\n            // from is a selector string\n            node = cy.filter(node);\n          }\n          return outdegrees[node.id()] / maxOutdegree;\n        }\n      };\n    }\n  },\n  // degreeCentralityNormalized\n\n  // Implemented from the algorithm in Opsahl's paper\n  // \"Node centrality in weighted networks: Generalizing degree and shortest paths\"\n  // check the heading 2 \"Degree\"\n  degreeCentrality: function degreeCentrality(options) {\n    options = defaults$f(options);\n    var cy = this.cy();\n    var callingEles = this;\n    var _options = options,\n      root = _options.root,\n      weight = _options.weight,\n      directed = _options.directed,\n      alpha = _options.alpha;\n    root = cy.collection(root)[0];\n    if (!directed) {\n      var connEdges = root.connectedEdges().intersection(callingEles);\n      var k = connEdges.length;\n      var s = 0;\n\n      // Now, sum edge weights\n      for (var i = 0; i < connEdges.length; i++) {\n        s += weight(connEdges[i]);\n      }\n      return {\n        degree: Math.pow(k, 1 - alpha) * Math.pow(s, alpha)\n      };\n    } else {\n      var edges = root.connectedEdges();\n      var incoming = edges.filter(function (edge) {\n        return edge.target().same(root) && callingEles.has(edge);\n      });\n      var outgoing = edges.filter(function (edge) {\n        return edge.source().same(root) && callingEles.has(edge);\n      });\n      var k_in = incoming.length;\n      var k_out = outgoing.length;\n      var s_in = 0;\n      var s_out = 0;\n\n      // Now, sum incoming edge weights\n      for (var _i2 = 0; _i2 < incoming.length; _i2++) {\n        s_in += weight(incoming[_i2]);\n      }\n\n      // Now, sum outgoing edge weights\n      for (var _i3 = 0; _i3 < outgoing.length; _i3++) {\n        s_out += weight(outgoing[_i3]);\n      }\n      return {\n        indegree: Math.pow(k_in, 1 - alpha) * Math.pow(s_in, alpha),\n        outdegree: Math.pow(k_out, 1 - alpha) * Math.pow(s_out, alpha)\n      };\n    }\n  } // degreeCentrality\n}; // elesfn\n\n// nice, short mathematical alias\nelesfn$n.dc = elesfn$n.degreeCentrality;\nelesfn$n.dcn = elesfn$n.degreeCentralityNormalised = elesfn$n.degreeCentralityNormalized;\n\nvar defaults$e = defaults$g({\n  harmonic: true,\n  weight: function weight() {\n    return 1;\n  },\n  directed: false,\n  root: null\n});\nvar elesfn$m = {\n  closenessCentralityNormalized: function closenessCentralityNormalized(options) {\n    var _defaults = defaults$e(options),\n      harmonic = _defaults.harmonic,\n      weight = _defaults.weight,\n      directed = _defaults.directed;\n    var cy = this.cy();\n    var closenesses = {};\n    var maxCloseness = 0;\n    var nodes = this.nodes();\n    var fw = this.floydWarshall({\n      weight: weight,\n      directed: directed\n    });\n\n    // Compute closeness for every node and find the maximum closeness\n    for (var i = 0; i < nodes.length; i++) {\n      var currCloseness = 0;\n      var node_i = nodes[i];\n      for (var j = 0; j < nodes.length; j++) {\n        if (i !== j) {\n          var d = fw.distance(node_i, nodes[j]);\n          if (harmonic) {\n            currCloseness += 1 / d;\n          } else {\n            currCloseness += d;\n          }\n        }\n      }\n      if (!harmonic) {\n        currCloseness = 1 / currCloseness;\n      }\n      if (maxCloseness < currCloseness) {\n        maxCloseness = currCloseness;\n      }\n      closenesses[node_i.id()] = currCloseness;\n    }\n    return {\n      closeness: function closeness(node) {\n        if (maxCloseness == 0) {\n          return 0;\n        }\n        if (string(node)) {\n          // from is a selector string\n          node = cy.filter(node)[0].id();\n        } else {\n          // from is a node\n          node = node.id();\n        }\n        return closenesses[node] / maxCloseness;\n      }\n    };\n  },\n  // Implemented from pseudocode from wikipedia\n  closenessCentrality: function closenessCentrality(options) {\n    var _defaults2 = defaults$e(options),\n      root = _defaults2.root,\n      weight = _defaults2.weight,\n      directed = _defaults2.directed,\n      harmonic = _defaults2.harmonic;\n    root = this.filter(root)[0];\n\n    // we need distance from this node to every other node\n    var dijkstra = this.dijkstra({\n      root: root,\n      weight: weight,\n      directed: directed\n    });\n    var totalDistance = 0;\n    var nodes = this.nodes();\n    for (var i = 0; i < nodes.length; i++) {\n      var n = nodes[i];\n      if (!n.same(root)) {\n        var d = dijkstra.distanceTo(n);\n        if (harmonic) {\n          totalDistance += 1 / d;\n        } else {\n          totalDistance += d;\n        }\n      }\n    }\n    return harmonic ? totalDistance : 1 / totalDistance;\n  } // closenessCentrality\n}; // elesfn\n\n// nice, short mathematical alias\nelesfn$m.cc = elesfn$m.closenessCentrality;\nelesfn$m.ccn = elesfn$m.closenessCentralityNormalised = elesfn$m.closenessCentralityNormalized;\n\nvar defaults$d = defaults$g({\n  weight: null,\n  directed: false\n});\nvar elesfn$l = {\n  // Implemented from the algorithm in the paper \"On Variants of Shortest-Path Betweenness Centrality and their Generic Computation\" by Ulrik Brandes\n  betweennessCentrality: function betweennessCentrality(options) {\n    var _defaults = defaults$d(options),\n      directed = _defaults.directed,\n      weight = _defaults.weight;\n    var weighted = weight != null;\n    var cy = this.cy();\n\n    // starting\n    var V = this.nodes();\n    var A = {};\n    var _C = {};\n    var max = 0;\n    var C = {\n      set: function set(key, val) {\n        _C[key] = val;\n        if (val > max) {\n          max = val;\n        }\n      },\n      get: function get(key) {\n        return _C[key];\n      }\n    };\n\n    // A contains the neighborhoods of every node\n    for (var i = 0; i < V.length; i++) {\n      var v = V[i];\n      var vid = v.id();\n      if (directed) {\n        A[vid] = v.outgoers().nodes(); // get outgoers of every node\n      } else {\n        A[vid] = v.openNeighborhood().nodes(); // get neighbors of every node\n      }\n\n      C.set(vid, 0);\n    }\n    var _loop = function _loop(s) {\n      var sid = V[s].id();\n      var S = []; // stack\n      var P = {};\n      var g = {};\n      var d = {};\n      var Q = new heap(function (a, b) {\n        return d[a] - d[b];\n      }); // queue\n\n      // init dictionaries\n      for (var _i = 0; _i < V.length; _i++) {\n        var _vid = V[_i].id();\n        P[_vid] = [];\n        g[_vid] = 0;\n        d[_vid] = Infinity;\n      }\n      g[sid] = 1; // sigma\n      d[sid] = 0; // distance to s\n\n      Q.push(sid);\n      while (!Q.empty()) {\n        var _v = Q.pop();\n        S.push(_v);\n        if (weighted) {\n          for (var j = 0; j < A[_v].length; j++) {\n            var w = A[_v][j];\n            var vEle = cy.getElementById(_v);\n            var edge = void 0;\n            if (vEle.edgesTo(w).length > 0) {\n              edge = vEle.edgesTo(w)[0];\n            } else {\n              edge = w.edgesTo(vEle)[0];\n            }\n            var edgeWeight = weight(edge);\n            w = w.id();\n            if (d[w] > d[_v] + edgeWeight) {\n              d[w] = d[_v] + edgeWeight;\n              if (Q.nodes.indexOf(w) < 0) {\n                //if w is not in Q\n                Q.push(w);\n              } else {\n                // update position if w is in Q\n                Q.updateItem(w);\n              }\n              g[w] = 0;\n              P[w] = [];\n            }\n            if (d[w] == d[_v] + edgeWeight) {\n              g[w] = g[w] + g[_v];\n              P[w].push(_v);\n            }\n          }\n        } else {\n          for (var _j = 0; _j < A[_v].length; _j++) {\n            var _w = A[_v][_j].id();\n            if (d[_w] == Infinity) {\n              Q.push(_w);\n              d[_w] = d[_v] + 1;\n            }\n            if (d[_w] == d[_v] + 1) {\n              g[_w] = g[_w] + g[_v];\n              P[_w].push(_v);\n            }\n          }\n        }\n      }\n      var e = {};\n      for (var _i2 = 0; _i2 < V.length; _i2++) {\n        e[V[_i2].id()] = 0;\n      }\n      while (S.length > 0) {\n        var _w2 = S.pop();\n        for (var _j2 = 0; _j2 < P[_w2].length; _j2++) {\n          var _v2 = P[_w2][_j2];\n          e[_v2] = e[_v2] + g[_v2] / g[_w2] * (1 + e[_w2]);\n        }\n        if (_w2 != V[s].id()) {\n          C.set(_w2, C.get(_w2) + e[_w2]);\n        }\n      }\n    };\n    for (var s = 0; s < V.length; s++) {\n      _loop(s);\n    }\n    var ret = {\n      betweenness: function betweenness(node) {\n        var id = cy.collection(node).id();\n        return C.get(id);\n      },\n      betweennessNormalized: function betweennessNormalized(node) {\n        if (max == 0) {\n          return 0;\n        }\n        var id = cy.collection(node).id();\n        return C.get(id) / max;\n      }\n    };\n\n    // alias\n    ret.betweennessNormalised = ret.betweennessNormalized;\n    return ret;\n  } // betweennessCentrality\n}; // elesfn\n\n// nice, short mathematical alias\nelesfn$l.bc = elesfn$l.betweennessCentrality;\n\n// Implemented by Zoe Xi @zoexi for GSOC 2016\n\n/* eslint-disable no-unused-vars */\nvar defaults$c = defaults$g({\n  expandFactor: 2,\n  // affects time of computation and cluster granularity to some extent: M * M\n  inflateFactor: 2,\n  // affects cluster granularity (the greater the value, the more clusters): M(i,j) / E(j)\n  multFactor: 1,\n  // optional self loops for each node. Use a neutral value to improve cluster computations.\n  maxIterations: 20,\n  // maximum number of iterations of the MCL algorithm in a single run\n  attributes: [\n  // attributes/features used to group nodes, ie. similarity values between nodes\n  function (edge) {\n    return 1;\n  }]\n});\n/* eslint-enable */\n\nvar setOptions$3 = function setOptions(options) {\n  return defaults$c(options);\n};\n/* eslint-enable */\n\nvar getSimilarity$1 = function getSimilarity(edge, attributes) {\n  var total = 0;\n  for (var i = 0; i < attributes.length; i++) {\n    total += attributes[i](edge);\n  }\n  return total;\n};\nvar addLoops = function addLoops(M, n, val) {\n  for (var i = 0; i < n; i++) {\n    M[i * n + i] = val;\n  }\n};\nvar normalize = function normalize(M, n) {\n  var sum;\n  for (var col = 0; col < n; col++) {\n    sum = 0;\n    for (var row = 0; row < n; row++) {\n      sum += M[row * n + col];\n    }\n    for (var _row = 0; _row < n; _row++) {\n      M[_row * n + col] = M[_row * n + col] / sum;\n    }\n  }\n};\n\n// TODO: blocked matrix multiplication?\nvar mmult = function mmult(A, B, n) {\n  var C = new Array(n * n);\n  for (var i = 0; i < n; i++) {\n    for (var j = 0; j < n; j++) {\n      C[i * n + j] = 0;\n    }\n    for (var k = 0; k < n; k++) {\n      for (var _j = 0; _j < n; _j++) {\n        C[i * n + _j] += A[i * n + k] * B[k * n + _j];\n      }\n    }\n  }\n  return C;\n};\nvar expand = function expand(M, n, expandFactor /** power **/) {\n  var _M = M.slice(0);\n  for (var p = 1; p < expandFactor; p++) {\n    M = mmult(M, _M, n);\n  }\n  return M;\n};\nvar inflate = function inflate(M, n, inflateFactor /** r **/) {\n  var _M = new Array(n * n);\n\n  // M(i,j) ^ inflatePower\n  for (var i = 0; i < n * n; i++) {\n    _M[i] = Math.pow(M[i], inflateFactor);\n  }\n  normalize(_M, n);\n  return _M;\n};\nvar hasConverged = function hasConverged(M, _M, n2, roundFactor) {\n  // Check that both matrices have the same elements (i,j)\n  for (var i = 0; i < n2; i++) {\n    var v1 = Math.round(M[i] * Math.pow(10, roundFactor)) / Math.pow(10, roundFactor); // truncate to 'roundFactor' decimal places\n    var v2 = Math.round(_M[i] * Math.pow(10, roundFactor)) / Math.pow(10, roundFactor);\n    if (v1 !== v2) {\n      return false;\n    }\n  }\n  return true;\n};\nvar assign$2 = function assign(M, n, nodes, cy) {\n  var clusters = [];\n  for (var i = 0; i < n; i++) {\n    var cluster = [];\n    for (var j = 0; j < n; j++) {\n      // Row-wise attractors and elements that they attract belong in same cluster\n      if (Math.round(M[i * n + j] * 1000) / 1000 > 0) {\n        cluster.push(nodes[j]);\n      }\n    }\n    if (cluster.length !== 0) {\n      clusters.push(cy.collection(cluster));\n    }\n  }\n  return clusters;\n};\nvar isDuplicate = function isDuplicate(c1, c2) {\n  for (var i = 0; i < c1.length; i++) {\n    if (!c2[i] || c1[i].id() !== c2[i].id()) {\n      return false;\n    }\n  }\n  return true;\n};\nvar removeDuplicates = function removeDuplicates(clusters) {\n  for (var i = 0; i < clusters.length; i++) {\n    for (var j = 0; j < clusters.length; j++) {\n      if (i != j && isDuplicate(clusters[i], clusters[j])) {\n        clusters.splice(j, 1);\n      }\n    }\n  }\n  return clusters;\n};\nvar markovClustering = function markovClustering(options) {\n  var nodes = this.nodes();\n  var edges = this.edges();\n  var cy = this.cy();\n\n  // Set parameters of algorithm:\n  var opts = setOptions$3(options);\n\n  // Map each node to its position in node array\n  var id2position = {};\n  for (var i = 0; i < nodes.length; i++) {\n    id2position[nodes[i].id()] = i;\n  }\n\n  // Generate stochastic matrix M from input graph G (should be symmetric/undirected)\n  var n = nodes.length,\n    n2 = n * n;\n  var M = new Array(n2),\n    _M;\n  for (var _i = 0; _i < n2; _i++) {\n    M[_i] = 0;\n  }\n  for (var e = 0; e < edges.length; e++) {\n    var edge = edges[e];\n    var _i2 = id2position[edge.source().id()];\n    var j = id2position[edge.target().id()];\n    var sim = getSimilarity$1(edge, opts.attributes);\n    M[_i2 * n + j] += sim; // G should be symmetric and undirected\n    M[j * n + _i2] += sim;\n  }\n\n  // Begin Markov cluster algorithm\n\n  // Step 1: Add self loops to each node, ie. add multFactor to matrix diagonal\n  addLoops(M, n, opts.multFactor);\n\n  // Step 2: M = normalize( M );\n  normalize(M, n);\n  var isStillMoving = true;\n  var iterations = 0;\n  while (isStillMoving && iterations < opts.maxIterations) {\n    isStillMoving = false;\n\n    // Step 3:\n    _M = expand(M, n, opts.expandFactor);\n\n    // Step 4:\n    M = inflate(_M, n, opts.inflateFactor);\n\n    // Step 5: check to see if ~steady state has been reached\n    if (!hasConverged(M, _M, n2, 4)) {\n      isStillMoving = true;\n    }\n    iterations++;\n  }\n\n  // Build clusters from matrix\n  var clusters = assign$2(M, n, nodes, cy);\n\n  // Remove duplicate clusters due to symmetry of graph and M matrix\n  clusters = removeDuplicates(clusters);\n  return clusters;\n};\nvar markovClustering$1 = {\n  markovClustering: markovClustering,\n  mcl: markovClustering\n};\n\n// Common distance metrics for clustering algorithms\nvar identity = function identity(x) {\n  return x;\n};\nvar absDiff = function absDiff(p, q) {\n  return Math.abs(q - p);\n};\nvar addAbsDiff = function addAbsDiff(total, p, q) {\n  return total + absDiff(p, q);\n};\nvar addSquaredDiff = function addSquaredDiff(total, p, q) {\n  return total + Math.pow(q - p, 2);\n};\nvar sqrt = function sqrt(x) {\n  return Math.sqrt(x);\n};\nvar maxAbsDiff = function maxAbsDiff(currentMax, p, q) {\n  return Math.max(currentMax, absDiff(p, q));\n};\nvar getDistance = function getDistance(length, getP, getQ, init, visit) {\n  var post = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : identity;\n  var ret = init;\n  var p, q;\n  for (var dim = 0; dim < length; dim++) {\n    p = getP(dim);\n    q = getQ(dim);\n    ret = visit(ret, p, q);\n  }\n  return post(ret);\n};\nvar distances = {\n  euclidean: function euclidean(length, getP, getQ) {\n    if (length >= 2) {\n      return getDistance(length, getP, getQ, 0, addSquaredDiff, sqrt);\n    } else {\n      // for single attr case, more efficient to avoid sqrt\n      return getDistance(length, getP, getQ, 0, addAbsDiff);\n    }\n  },\n  squaredEuclidean: function squaredEuclidean(length, getP, getQ) {\n    return getDistance(length, getP, getQ, 0, addSquaredDiff);\n  },\n  manhattan: function manhattan(length, getP, getQ) {\n    return getDistance(length, getP, getQ, 0, addAbsDiff);\n  },\n  max: function max(length, getP, getQ) {\n    return getDistance(length, getP, getQ, -Infinity, maxAbsDiff);\n  }\n};\n\n// in case the user accidentally doesn't use camel case\ndistances['squared-euclidean'] = distances['squaredEuclidean'];\ndistances['squaredeuclidean'] = distances['squaredEuclidean'];\nfunction clusteringDistance (method, length, getP, getQ, nodeP, nodeQ) {\n  var impl;\n  if (fn$6(method)) {\n    impl = method;\n  } else {\n    impl = distances[method] || distances.euclidean;\n  }\n  if (length === 0 && fn$6(method)) {\n    return impl(nodeP, nodeQ);\n  } else {\n    return impl(length, getP, getQ, nodeP, nodeQ);\n  }\n}\n\nvar defaults$b = defaults$g({\n  k: 2,\n  m: 2,\n  sensitivityThreshold: 0.0001,\n  distance: 'euclidean',\n  maxIterations: 10,\n  attributes: [],\n  testMode: false,\n  testCentroids: null\n});\nvar setOptions$2 = function setOptions(options) {\n  return defaults$b(options);\n};\n\nvar getDist = function getDist(type, node, centroid, attributes, mode) {\n  var noNodeP = mode !== 'kMedoids';\n  var getP = noNodeP ? function (i) {\n    return centroid[i];\n  } : function (i) {\n    return attributes[i](centroid);\n  };\n  var getQ = function getQ(i) {\n    return attributes[i](node);\n  };\n  var nodeP = centroid;\n  var nodeQ = node;\n  return clusteringDistance(type, attributes.length, getP, getQ, nodeP, nodeQ);\n};\nvar randomCentroids = function randomCentroids(nodes, k, attributes) {\n  var ndim = attributes.length;\n  var min = new Array(ndim);\n  var max = new Array(ndim);\n  var centroids = new Array(k);\n  var centroid = null;\n\n  // Find min, max values for each attribute dimension\n  for (var i = 0; i < ndim; i++) {\n    min[i] = nodes.min(attributes[i]).value;\n    max[i] = nodes.max(attributes[i]).value;\n  }\n\n  // Build k centroids, each represented as an n-dim feature vector\n  for (var c = 0; c < k; c++) {\n    centroid = [];\n    for (var _i = 0; _i < ndim; _i++) {\n      centroid[_i] = Math.random() * (max[_i] - min[_i]) + min[_i]; // random initial value\n    }\n\n    centroids[c] = centroid;\n  }\n  return centroids;\n};\nvar classify = function classify(node, centroids, distance, attributes, type) {\n  var min = Infinity;\n  var index = 0;\n  for (var i = 0; i < centroids.length; i++) {\n    var dist = getDist(distance, node, centroids[i], attributes, type);\n    if (dist < min) {\n      min = dist;\n      index = i;\n    }\n  }\n  return index;\n};\nvar buildCluster = function buildCluster(centroid, nodes, assignment) {\n  var cluster = [];\n  var node = null;\n  for (var n = 0; n < nodes.length; n++) {\n    node = nodes[n];\n    if (assignment[node.id()] === centroid) {\n      //console.log(\"Node \" + node.id() + \" is associated with medoid #: \" + m);\n      cluster.push(node);\n    }\n  }\n  return cluster;\n};\nvar haveValuesConverged = function haveValuesConverged(v1, v2, sensitivityThreshold) {\n  return Math.abs(v2 - v1) <= sensitivityThreshold;\n};\nvar haveMatricesConverged = function haveMatricesConverged(v1, v2, sensitivityThreshold) {\n  for (var i = 0; i < v1.length; i++) {\n    for (var j = 0; j < v1[i].length; j++) {\n      var diff = Math.abs(v1[i][j] - v2[i][j]);\n      if (diff > sensitivityThreshold) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\nvar seenBefore = function seenBefore(node, medoids, n) {\n  for (var i = 0; i < n; i++) {\n    if (node === medoids[i]) return true;\n  }\n  return false;\n};\nvar randomMedoids = function randomMedoids(nodes, k) {\n  var medoids = new Array(k);\n\n  // For small data sets, the probability of medoid conflict is greater,\n  // so we need to check to see if we've already seen or chose this node before.\n  if (nodes.length < 50) {\n    // Randomly select k medoids from the n nodes\n    for (var i = 0; i < k; i++) {\n      var node = nodes[Math.floor(Math.random() * nodes.length)];\n\n      // If we've already chosen this node to be a medoid, don't choose it again (for small data sets).\n      // Instead choose a different random node.\n      while (seenBefore(node, medoids, i)) {\n        node = nodes[Math.floor(Math.random() * nodes.length)];\n      }\n      medoids[i] = node;\n    }\n  } else {\n    // Relatively large data set, so pretty safe to not check and just select random nodes\n    for (var _i2 = 0; _i2 < k; _i2++) {\n      medoids[_i2] = nodes[Math.floor(Math.random() * nodes.length)];\n    }\n  }\n  return medoids;\n};\nvar findCost = function findCost(potentialNewMedoid, cluster, attributes) {\n  var cost = 0;\n  for (var n = 0; n < cluster.length; n++) {\n    cost += getDist('manhattan', cluster[n], potentialNewMedoid, attributes, 'kMedoids');\n  }\n  return cost;\n};\nvar kMeans = function kMeans(options) {\n  var cy = this.cy();\n  var nodes = this.nodes();\n  var node = null;\n\n  // Set parameters of algorithm: # of clusters, distance metric, etc.\n  var opts = setOptions$2(options);\n\n  // Begin k-means algorithm\n  var clusters = new Array(opts.k);\n  var assignment = {};\n  var centroids;\n\n  // Step 1: Initialize centroid positions\n  if (opts.testMode) {\n    if (typeof opts.testCentroids === 'number') {\n      // TODO: implement a seeded random number generator.\n      opts.testCentroids;\n      centroids = randomCentroids(nodes, opts.k, opts.attributes);\n    } else if (_typeof(opts.testCentroids) === 'object') {\n      centroids = opts.testCentroids;\n    } else {\n      centroids = randomCentroids(nodes, opts.k, opts.attributes);\n    }\n  } else {\n    centroids = randomCentroids(nodes, opts.k, opts.attributes);\n  }\n  var isStillMoving = true;\n  var iterations = 0;\n  while (isStillMoving && iterations < opts.maxIterations) {\n    // Step 2: Assign nodes to the nearest centroid\n    for (var n = 0; n < nodes.length; n++) {\n      node = nodes[n];\n      // Determine which cluster this node belongs to: node id => cluster #\n      assignment[node.id()] = classify(node, centroids, opts.distance, opts.attributes, 'kMeans');\n    }\n\n    // Step 3: For each of the k clusters, update its centroid\n    isStillMoving = false;\n    for (var c = 0; c < opts.k; c++) {\n      // Get all nodes that belong to this cluster\n      var cluster = buildCluster(c, nodes, assignment);\n      if (cluster.length === 0) {\n        // If cluster is empty, break out early & move to next cluster\n        continue;\n      }\n\n      // Update centroids by calculating avg of all nodes within the cluster.\n      var ndim = opts.attributes.length;\n      var centroid = centroids[c]; // [ dim_1, dim_2, dim_3, ... , dim_n ]\n      var newCentroid = new Array(ndim);\n      var sum = new Array(ndim);\n      for (var d = 0; d < ndim; d++) {\n        sum[d] = 0.0;\n        for (var i = 0; i < cluster.length; i++) {\n          node = cluster[i];\n          sum[d] += opts.attributes[d](node);\n        }\n        newCentroid[d] = sum[d] / cluster.length;\n\n        // Check to see if algorithm has converged, i.e. when centroids no longer change\n        if (!haveValuesConverged(newCentroid[d], centroid[d], opts.sensitivityThreshold)) {\n          isStillMoving = true;\n        }\n      }\n      centroids[c] = newCentroid;\n      clusters[c] = cy.collection(cluster);\n    }\n    iterations++;\n  }\n  return clusters;\n};\nvar kMedoids = function kMedoids(options) {\n  var cy = this.cy();\n  var nodes = this.nodes();\n  var node = null;\n  var opts = setOptions$2(options);\n\n  // Begin k-medoids algorithm\n  var clusters = new Array(opts.k);\n  var medoids;\n  var assignment = {};\n  var curCost;\n  var minCosts = new Array(opts.k); // minimum cost configuration for each cluster\n\n  // Step 1: Initialize k medoids\n  if (opts.testMode) {\n    if (typeof opts.testCentroids === 'number') ; else if (_typeof(opts.testCentroids) === 'object') {\n      medoids = opts.testCentroids;\n    } else {\n      medoids = randomMedoids(nodes, opts.k);\n    }\n  } else {\n    medoids = randomMedoids(nodes, opts.k);\n  }\n  var isStillMoving = true;\n  var iterations = 0;\n  while (isStillMoving && iterations < opts.maxIterations) {\n    // Step 2: Assign nodes to the nearest medoid\n    for (var n = 0; n < nodes.length; n++) {\n      node = nodes[n];\n      // Determine which cluster this node belongs to: node id => cluster #\n      assignment[node.id()] = classify(node, medoids, opts.distance, opts.attributes, 'kMedoids');\n    }\n    isStillMoving = false;\n    // Step 3: For each medoid m, and for each node associated with mediod m,\n    // select the node with the lowest configuration cost as new medoid.\n    for (var m = 0; m < medoids.length; m++) {\n      // Get all nodes that belong to this medoid\n      var cluster = buildCluster(m, nodes, assignment);\n      if (cluster.length === 0) {\n        // If cluster is empty, break out early & move to next cluster\n        continue;\n      }\n      minCosts[m] = findCost(medoids[m], cluster, opts.attributes); // original cost\n\n      // Select different medoid if its configuration has the lowest cost\n      for (var _n = 0; _n < cluster.length; _n++) {\n        curCost = findCost(cluster[_n], cluster, opts.attributes);\n        if (curCost < minCosts[m]) {\n          minCosts[m] = curCost;\n          medoids[m] = cluster[_n];\n          isStillMoving = true;\n        }\n      }\n      clusters[m] = cy.collection(cluster);\n    }\n    iterations++;\n  }\n  return clusters;\n};\nvar updateCentroids = function updateCentroids(centroids, nodes, U, weight, opts) {\n  var numerator, denominator;\n  for (var n = 0; n < nodes.length; n++) {\n    for (var c = 0; c < centroids.length; c++) {\n      weight[n][c] = Math.pow(U[n][c], opts.m);\n    }\n  }\n  for (var _c = 0; _c < centroids.length; _c++) {\n    for (var dim = 0; dim < opts.attributes.length; dim++) {\n      numerator = 0;\n      denominator = 0;\n      for (var _n2 = 0; _n2 < nodes.length; _n2++) {\n        numerator += weight[_n2][_c] * opts.attributes[dim](nodes[_n2]);\n        denominator += weight[_n2][_c];\n      }\n      centroids[_c][dim] = numerator / denominator;\n    }\n  }\n};\nvar updateMembership = function updateMembership(U, _U, centroids, nodes, opts) {\n  // Save previous step\n  for (var i = 0; i < U.length; i++) {\n    _U[i] = U[i].slice();\n  }\n  var sum, numerator, denominator;\n  var pow = 2 / (opts.m - 1);\n  for (var c = 0; c < centroids.length; c++) {\n    for (var n = 0; n < nodes.length; n++) {\n      sum = 0;\n      for (var k = 0; k < centroids.length; k++) {\n        // against all other centroids\n        numerator = getDist(opts.distance, nodes[n], centroids[c], opts.attributes, 'cmeans');\n        denominator = getDist(opts.distance, nodes[n], centroids[k], opts.attributes, 'cmeans');\n        sum += Math.pow(numerator / denominator, pow);\n      }\n      U[n][c] = 1 / sum;\n    }\n  }\n};\nvar assign$1 = function assign(nodes, U, opts, cy) {\n  var clusters = new Array(opts.k);\n  for (var c = 0; c < clusters.length; c++) {\n    clusters[c] = [];\n  }\n  var max;\n  var index;\n  for (var n = 0; n < U.length; n++) {\n    // for each node (U is N x C matrix)\n    max = -Infinity;\n    index = -1;\n    // Determine which cluster the node is most likely to belong in\n    for (var _c2 = 0; _c2 < U[0].length; _c2++) {\n      if (U[n][_c2] > max) {\n        max = U[n][_c2];\n        index = _c2;\n      }\n    }\n    clusters[index].push(nodes[n]);\n  }\n\n  // Turn every array into a collection of nodes\n  for (var _c3 = 0; _c3 < clusters.length; _c3++) {\n    clusters[_c3] = cy.collection(clusters[_c3]);\n  }\n  return clusters;\n};\nvar fuzzyCMeans = function fuzzyCMeans(options) {\n  var cy = this.cy();\n  var nodes = this.nodes();\n  var opts = setOptions$2(options);\n\n  // Begin fuzzy c-means algorithm\n  var clusters;\n  var centroids;\n  var U;\n  var _U;\n  var weight;\n\n  // Step 1: Initialize letiables.\n  _U = new Array(nodes.length);\n  for (var i = 0; i < nodes.length; i++) {\n    // N x C matrix\n    _U[i] = new Array(opts.k);\n  }\n  U = new Array(nodes.length);\n  for (var _i3 = 0; _i3 < nodes.length; _i3++) {\n    // N x C matrix\n    U[_i3] = new Array(opts.k);\n  }\n  for (var _i4 = 0; _i4 < nodes.length; _i4++) {\n    var total = 0;\n    for (var j = 0; j < opts.k; j++) {\n      U[_i4][j] = Math.random();\n      total += U[_i4][j];\n    }\n    for (var _j = 0; _j < opts.k; _j++) {\n      U[_i4][_j] = U[_i4][_j] / total;\n    }\n  }\n  centroids = new Array(opts.k);\n  for (var _i5 = 0; _i5 < opts.k; _i5++) {\n    centroids[_i5] = new Array(opts.attributes.length);\n  }\n  weight = new Array(nodes.length);\n  for (var _i6 = 0; _i6 < nodes.length; _i6++) {\n    // N x C matrix\n    weight[_i6] = new Array(opts.k);\n  }\n  // end init FCM\n\n  var isStillMoving = true;\n  var iterations = 0;\n  while (isStillMoving && iterations < opts.maxIterations) {\n    isStillMoving = false;\n\n    // Step 2: Calculate the centroids for each step.\n    updateCentroids(centroids, nodes, U, weight, opts);\n\n    // Step 3: Update the partition matrix U.\n    updateMembership(U, _U, centroids, nodes, opts);\n\n    // Step 4: Check for convergence.\n    if (!haveMatricesConverged(U, _U, opts.sensitivityThreshold)) {\n      isStillMoving = true;\n    }\n    iterations++;\n  }\n\n  // Assign nodes to clusters with highest probability.\n  clusters = assign$1(nodes, U, opts, cy);\n  return {\n    clusters: clusters,\n    degreeOfMembership: U\n  };\n};\nvar kClustering = {\n  kMeans: kMeans,\n  kMedoids: kMedoids,\n  fuzzyCMeans: fuzzyCMeans,\n  fcm: fuzzyCMeans\n};\n\n// Implemented by Zoe Xi @zoexi for GSOC 2016\nvar defaults$a = defaults$g({\n  distance: 'euclidean',\n  // distance metric to compare nodes\n  linkage: 'min',\n  // linkage criterion : how to determine the distance between clusters of nodes\n  mode: 'threshold',\n  // mode:'threshold' => clusters must be threshold distance apart\n  threshold: Infinity,\n  // the distance threshold\n  // mode:'dendrogram' => the nodes are organised as leaves in a tree (siblings are close), merging makes clusters\n  addDendrogram: false,\n  // whether to add the dendrogram to the graph for viz\n  dendrogramDepth: 0,\n  // depth at which dendrogram branches are merged into the returned clusters\n  attributes: [] // array of attr functions\n});\n\nvar linkageAliases = {\n  'single': 'min',\n  'complete': 'max'\n};\nvar setOptions$1 = function setOptions(options) {\n  var opts = defaults$a(options);\n  var preferredAlias = linkageAliases[opts.linkage];\n  if (preferredAlias != null) {\n    opts.linkage = preferredAlias;\n  }\n  return opts;\n};\nvar mergeClosest = function mergeClosest(clusters, index, dists, mins, opts) {\n  // Find two closest clusters from cached mins\n  var minKey = 0;\n  var min = Infinity;\n  var dist;\n  var attrs = opts.attributes;\n  var getDist = function getDist(n1, n2) {\n    return clusteringDistance(opts.distance, attrs.length, function (i) {\n      return attrs[i](n1);\n    }, function (i) {\n      return attrs[i](n2);\n    }, n1, n2);\n  };\n  for (var i = 0; i < clusters.length; i++) {\n    var key = clusters[i].key;\n    var _dist = dists[key][mins[key]];\n    if (_dist < min) {\n      minKey = key;\n      min = _dist;\n    }\n  }\n  if (opts.mode === 'threshold' && min >= opts.threshold || opts.mode === 'dendrogram' && clusters.length === 1) {\n    return false;\n  }\n  var c1 = index[minKey];\n  var c2 = index[mins[minKey]];\n  var merged;\n\n  // Merge two closest clusters\n  if (opts.mode === 'dendrogram') {\n    merged = {\n      left: c1,\n      right: c2,\n      key: c1.key\n    };\n  } else {\n    merged = {\n      value: c1.value.concat(c2.value),\n      key: c1.key\n    };\n  }\n  clusters[c1.index] = merged;\n  clusters.splice(c2.index, 1);\n  index[c1.key] = merged;\n\n  // Update distances with new merged cluster\n  for (var _i = 0; _i < clusters.length; _i++) {\n    var cur = clusters[_i];\n    if (c1.key === cur.key) {\n      dist = Infinity;\n    } else if (opts.linkage === 'min') {\n      dist = dists[c1.key][cur.key];\n      if (dists[c1.key][cur.key] > dists[c2.key][cur.key]) {\n        dist = dists[c2.key][cur.key];\n      }\n    } else if (opts.linkage === 'max') {\n      dist = dists[c1.key][cur.key];\n      if (dists[c1.key][cur.key] < dists[c2.key][cur.key]) {\n        dist = dists[c2.key][cur.key];\n      }\n    } else if (opts.linkage === 'mean') {\n      dist = (dists[c1.key][cur.key] * c1.size + dists[c2.key][cur.key] * c2.size) / (c1.size + c2.size);\n    } else {\n      if (opts.mode === 'dendrogram') dist = getDist(cur.value, c1.value);else dist = getDist(cur.value[0], c1.value[0]);\n    }\n    dists[c1.key][cur.key] = dists[cur.key][c1.key] = dist; // distance matrix is symmetric\n  }\n\n  // Update cached mins\n  for (var _i2 = 0; _i2 < clusters.length; _i2++) {\n    var key1 = clusters[_i2].key;\n    if (mins[key1] === c1.key || mins[key1] === c2.key) {\n      var _min = key1;\n      for (var j = 0; j < clusters.length; j++) {\n        var key2 = clusters[j].key;\n        if (dists[key1][key2] < dists[key1][_min]) {\n          _min = key2;\n        }\n      }\n      mins[key1] = _min;\n    }\n    clusters[_i2].index = _i2;\n  }\n\n  // Clean up meta data used for clustering\n  c1.key = c2.key = c1.index = c2.index = null;\n  return true;\n};\nvar getAllChildren = function getAllChildren(root, arr, cy) {\n  if (!root) return;\n  if (root.value) {\n    arr.push(root.value);\n  } else {\n    if (root.left) getAllChildren(root.left, arr);\n    if (root.right) getAllChildren(root.right, arr);\n  }\n};\nvar buildDendrogram = function buildDendrogram(root, cy) {\n  if (!root) return '';\n  if (root.left && root.right) {\n    var leftStr = buildDendrogram(root.left, cy);\n    var rightStr = buildDendrogram(root.right, cy);\n    var node = cy.add({\n      group: 'nodes',\n      data: {\n        id: leftStr + ',' + rightStr\n      }\n    });\n    cy.add({\n      group: 'edges',\n      data: {\n        source: leftStr,\n        target: node.id()\n      }\n    });\n    cy.add({\n      group: 'edges',\n      data: {\n        source: rightStr,\n        target: node.id()\n      }\n    });\n    return node.id();\n  } else if (root.value) {\n    return root.value.id();\n  }\n};\nvar buildClustersFromTree = function buildClustersFromTree(root, k, cy) {\n  if (!root) return [];\n  var left = [],\n    right = [],\n    leaves = [];\n  if (k === 0) {\n    // don't cut tree, simply return all nodes as 1 single cluster\n    if (root.left) getAllChildren(root.left, left);\n    if (root.right) getAllChildren(root.right, right);\n    leaves = left.concat(right);\n    return [cy.collection(leaves)];\n  } else if (k === 1) {\n    // cut at root\n\n    if (root.value) {\n      // leaf node\n      return [cy.collection(root.value)];\n    } else {\n      if (root.left) getAllChildren(root.left, left);\n      if (root.right) getAllChildren(root.right, right);\n      return [cy.collection(left), cy.collection(right)];\n    }\n  } else {\n    if (root.value) {\n      return [cy.collection(root.value)];\n    } else {\n      if (root.left) left = buildClustersFromTree(root.left, k - 1, cy);\n      if (root.right) right = buildClustersFromTree(root.right, k - 1, cy);\n      return left.concat(right);\n    }\n  }\n};\n\nvar hierarchicalClustering = function hierarchicalClustering(options) {\n  var cy = this.cy();\n  var nodes = this.nodes();\n\n  // Set parameters of algorithm: linkage type, distance metric, etc.\n  var opts = setOptions$1(options);\n  var attrs = opts.attributes;\n  var getDist = function getDist(n1, n2) {\n    return clusteringDistance(opts.distance, attrs.length, function (i) {\n      return attrs[i](n1);\n    }, function (i) {\n      return attrs[i](n2);\n    }, n1, n2);\n  };\n\n  // Begin hierarchical algorithm\n  var clusters = [];\n  var dists = []; // distances between each pair of clusters\n  var mins = []; // closest cluster for each cluster\n  var index = []; // hash of all clusters by key\n\n  // In agglomerative (bottom-up) clustering, each node starts as its own cluster\n  for (var n = 0; n < nodes.length; n++) {\n    var cluster = {\n      value: opts.mode === 'dendrogram' ? nodes[n] : [nodes[n]],\n      key: n,\n      index: n\n    };\n    clusters[n] = cluster;\n    index[n] = cluster;\n    dists[n] = [];\n    mins[n] = 0;\n  }\n\n  // Calculate the distance between each pair of clusters\n  for (var i = 0; i < clusters.length; i++) {\n    for (var j = 0; j <= i; j++) {\n      var dist = void 0;\n      if (opts.mode === 'dendrogram') {\n        // modes store cluster values differently\n        dist = i === j ? Infinity : getDist(clusters[i].value, clusters[j].value);\n      } else {\n        dist = i === j ? Infinity : getDist(clusters[i].value[0], clusters[j].value[0]);\n      }\n      dists[i][j] = dist;\n      dists[j][i] = dist;\n      if (dist < dists[i][mins[i]]) {\n        mins[i] = j; // Cache mins: closest cluster to cluster i is cluster j\n      }\n    }\n  }\n\n  // Find the closest pair of clusters and merge them into a single cluster.\n  // Update distances between new cluster and each of the old clusters, and loop until threshold reached.\n  var merged = mergeClosest(clusters, index, dists, mins, opts);\n  while (merged) {\n    merged = mergeClosest(clusters, index, dists, mins, opts);\n  }\n  var retClusters;\n\n  // Dendrogram mode builds the hierarchy and adds intermediary nodes + edges\n  // in addition to returning the clusters.\n  if (opts.mode === 'dendrogram') {\n    retClusters = buildClustersFromTree(clusters[0], opts.dendrogramDepth, cy);\n    if (opts.addDendrogram) buildDendrogram(clusters[0], cy);\n  } else {\n    // Regular mode simply returns the clusters\n\n    retClusters = new Array(clusters.length);\n    clusters.forEach(function (cluster, i) {\n      // Clean up meta data used for clustering\n      cluster.key = cluster.index = null;\n      retClusters[i] = cy.collection(cluster.value);\n    });\n  }\n  return retClusters;\n};\nvar hierarchicalClustering$1 = {\n  hierarchicalClustering: hierarchicalClustering,\n  hca: hierarchicalClustering\n};\n\n// Implemented by Zoe Xi @zoexi for GSOC 2016\nvar defaults$9 = defaults$g({\n  distance: 'euclidean',\n  // distance metric to compare attributes between two nodes\n  preference: 'median',\n  // suitability of a data point to serve as an exemplar\n  damping: 0.8,\n  // damping factor between [0.5, 1)\n  maxIterations: 1000,\n  // max number of iterations to run\n  minIterations: 100,\n  // min number of iterations to run in order for clustering to stop\n  attributes: [// functions to quantify the similarity between any two points\n    // e.g. node => node.data('weight')\n  ]\n});\nvar setOptions = function setOptions(options) {\n  var dmp = options.damping;\n  var pref = options.preference;\n  if (!(0.5 <= dmp && dmp < 1)) {\n    error(\"Damping must range on [0.5, 1).  Got: \".concat(dmp));\n  }\n  var validPrefs = ['median', 'mean', 'min', 'max'];\n  if (!(validPrefs.some(function (v) {\n    return v === pref;\n  }) || number$1(pref))) {\n    error(\"Preference must be one of [\".concat(validPrefs.map(function (p) {\n      return \"'\".concat(p, \"'\");\n    }).join(', '), \"] or a number.  Got: \").concat(pref));\n  }\n  return defaults$9(options);\n};\n\nvar getSimilarity = function getSimilarity(type, n1, n2, attributes) {\n  var attr = function attr(n, i) {\n    return attributes[i](n);\n  };\n\n  // nb negative because similarity should have an inverse relationship to distance\n  return -clusteringDistance(type, attributes.length, function (i) {\n    return attr(n1, i);\n  }, function (i) {\n    return attr(n2, i);\n  }, n1, n2);\n};\nvar getPreference = function getPreference(S, preference) {\n  // larger preference = greater # of clusters\n  var p = null;\n  if (preference === 'median') {\n    p = median(S);\n  } else if (preference === 'mean') {\n    p = mean(S);\n  } else if (preference === 'min') {\n    p = min(S);\n  } else if (preference === 'max') {\n    p = max(S);\n  } else {\n    // Custom preference number, as set by user\n    p = preference;\n  }\n  return p;\n};\nvar findExemplars = function findExemplars(n, R, A) {\n  var indices = [];\n  for (var i = 0; i < n; i++) {\n    if (R[i * n + i] + A[i * n + i] > 0) {\n      indices.push(i);\n    }\n  }\n  return indices;\n};\nvar assignClusters = function assignClusters(n, S, exemplars) {\n  var clusters = [];\n  for (var i = 0; i < n; i++) {\n    var index = -1;\n    var max = -Infinity;\n    for (var ei = 0; ei < exemplars.length; ei++) {\n      var e = exemplars[ei];\n      if (S[i * n + e] > max) {\n        index = e;\n        max = S[i * n + e];\n      }\n    }\n    if (index > 0) {\n      clusters.push(index);\n    }\n  }\n  for (var _ei = 0; _ei < exemplars.length; _ei++) {\n    clusters[exemplars[_ei]] = exemplars[_ei];\n  }\n  return clusters;\n};\nvar assign = function assign(n, S, exemplars) {\n  var clusters = assignClusters(n, S, exemplars);\n  for (var ei = 0; ei < exemplars.length; ei++) {\n    var ii = [];\n    for (var c = 0; c < clusters.length; c++) {\n      if (clusters[c] === exemplars[ei]) {\n        ii.push(c);\n      }\n    }\n    var maxI = -1;\n    var maxSum = -Infinity;\n    for (var i = 0; i < ii.length; i++) {\n      var sum = 0;\n      for (var j = 0; j < ii.length; j++) {\n        sum += S[ii[j] * n + ii[i]];\n      }\n      if (sum > maxSum) {\n        maxI = i;\n        maxSum = sum;\n      }\n    }\n    exemplars[ei] = ii[maxI];\n  }\n  clusters = assignClusters(n, S, exemplars);\n  return clusters;\n};\nvar affinityPropagation = function affinityPropagation(options) {\n  var cy = this.cy();\n  var nodes = this.nodes();\n  var opts = setOptions(options);\n\n  // Map each node to its position in node array\n  var id2position = {};\n  for (var i = 0; i < nodes.length; i++) {\n    id2position[nodes[i].id()] = i;\n  }\n\n  // Begin affinity propagation algorithm\n\n  var n; // number of data points\n  var n2; // size of matrices\n  var S; // similarity matrix (1D array)\n  var p; // preference/suitability of a data point to serve as an exemplar\n  var R; // responsibility matrix (1D array)\n  var A; // availability matrix (1D array)\n\n  n = nodes.length;\n  n2 = n * n;\n\n  // Initialize and build S similarity matrix\n  S = new Array(n2);\n  for (var _i = 0; _i < n2; _i++) {\n    S[_i] = -Infinity; // for cases where two data points shouldn't be linked together\n  }\n\n  for (var _i2 = 0; _i2 < n; _i2++) {\n    for (var j = 0; j < n; j++) {\n      if (_i2 !== j) {\n        S[_i2 * n + j] = getSimilarity(opts.distance, nodes[_i2], nodes[j], opts.attributes);\n      }\n    }\n  }\n\n  // Place preferences on the diagonal of S\n  p = getPreference(S, opts.preference);\n  for (var _i3 = 0; _i3 < n; _i3++) {\n    S[_i3 * n + _i3] = p;\n  }\n\n  // Initialize R responsibility matrix\n  R = new Array(n2);\n  for (var _i4 = 0; _i4 < n2; _i4++) {\n    R[_i4] = 0.0;\n  }\n\n  // Initialize A availability matrix\n  A = new Array(n2);\n  for (var _i5 = 0; _i5 < n2; _i5++) {\n    A[_i5] = 0.0;\n  }\n  var old = new Array(n);\n  var Rp = new Array(n);\n  var se = new Array(n);\n  for (var _i6 = 0; _i6 < n; _i6++) {\n    old[_i6] = 0.0;\n    Rp[_i6] = 0.0;\n    se[_i6] = 0;\n  }\n  var e = new Array(n * opts.minIterations);\n  for (var _i7 = 0; _i7 < e.length; _i7++) {\n    e[_i7] = 0;\n  }\n  var iter;\n  for (iter = 0; iter < opts.maxIterations; iter++) {\n    // main algorithmic loop\n\n    // Update R responsibility matrix\n    for (var _i8 = 0; _i8 < n; _i8++) {\n      var max = -Infinity,\n        max2 = -Infinity,\n        maxI = -1,\n        AS = 0.0;\n      for (var _j = 0; _j < n; _j++) {\n        old[_j] = R[_i8 * n + _j];\n        AS = A[_i8 * n + _j] + S[_i8 * n + _j];\n        if (AS >= max) {\n          max2 = max;\n          max = AS;\n          maxI = _j;\n        } else if (AS > max2) {\n          max2 = AS;\n        }\n      }\n      for (var _j2 = 0; _j2 < n; _j2++) {\n        R[_i8 * n + _j2] = (1 - opts.damping) * (S[_i8 * n + _j2] - max) + opts.damping * old[_j2];\n      }\n      R[_i8 * n + maxI] = (1 - opts.damping) * (S[_i8 * n + maxI] - max2) + opts.damping * old[maxI];\n    }\n\n    // Update A availability matrix\n    for (var _i9 = 0; _i9 < n; _i9++) {\n      var sum = 0;\n      for (var _j3 = 0; _j3 < n; _j3++) {\n        old[_j3] = A[_j3 * n + _i9];\n        Rp[_j3] = Math.max(0, R[_j3 * n + _i9]);\n        sum += Rp[_j3];\n      }\n      sum -= Rp[_i9];\n      Rp[_i9] = R[_i9 * n + _i9];\n      sum += Rp[_i9];\n      for (var _j4 = 0; _j4 < n; _j4++) {\n        A[_j4 * n + _i9] = (1 - opts.damping) * Math.min(0, sum - Rp[_j4]) + opts.damping * old[_j4];\n      }\n      A[_i9 * n + _i9] = (1 - opts.damping) * (sum - Rp[_i9]) + opts.damping * old[_i9];\n    }\n\n    // Check for convergence\n    var K = 0;\n    for (var _i10 = 0; _i10 < n; _i10++) {\n      var E = A[_i10 * n + _i10] + R[_i10 * n + _i10] > 0 ? 1 : 0;\n      e[iter % opts.minIterations * n + _i10] = E;\n      K += E;\n    }\n    if (K > 0 && (iter >= opts.minIterations - 1 || iter == opts.maxIterations - 1)) {\n      var _sum = 0;\n      for (var _i11 = 0; _i11 < n; _i11++) {\n        se[_i11] = 0;\n        for (var _j5 = 0; _j5 < opts.minIterations; _j5++) {\n          se[_i11] += e[_j5 * n + _i11];\n        }\n        if (se[_i11] === 0 || se[_i11] === opts.minIterations) {\n          _sum++;\n        }\n      }\n      if (_sum === n) {\n        // then we have convergence\n        break;\n      }\n    }\n  }\n\n  // Identify exemplars (cluster centers)\n  var exemplarsIndices = findExemplars(n, R, A);\n\n  // Assign nodes to clusters\n  var clusterIndices = assign(n, S, exemplarsIndices);\n  var clusters = {};\n  for (var c = 0; c < exemplarsIndices.length; c++) {\n    clusters[exemplarsIndices[c]] = [];\n  }\n  for (var _i12 = 0; _i12 < nodes.length; _i12++) {\n    var pos = id2position[nodes[_i12].id()];\n    var clusterIndex = clusterIndices[pos];\n    if (clusterIndex != null) {\n      // the node may have not been assigned a cluster if no valid attributes were specified\n      clusters[clusterIndex].push(nodes[_i12]);\n    }\n  }\n  var retClusters = new Array(exemplarsIndices.length);\n  for (var _c = 0; _c < exemplarsIndices.length; _c++) {\n    retClusters[_c] = cy.collection(clusters[exemplarsIndices[_c]]);\n  }\n  return retClusters;\n};\nvar affinityPropagation$1 = {\n  affinityPropagation: affinityPropagation,\n  ap: affinityPropagation\n};\n\nvar hierholzerDefaults = defaults$g({\n  root: undefined,\n  directed: false\n});\nvar elesfn$k = {\n  hierholzer: function hierholzer(options) {\n    if (!plainObject(options)) {\n      var args = arguments;\n      options = {\n        root: args[0],\n        directed: args[1]\n      };\n    }\n    var _hierholzerDefaults = hierholzerDefaults(options),\n      root = _hierholzerDefaults.root,\n      directed = _hierholzerDefaults.directed;\n    var eles = this;\n    var dflag = false;\n    var oddIn;\n    var oddOut;\n    var startVertex;\n    if (root) startVertex = string(root) ? this.filter(root)[0].id() : root[0].id();\n    var nodes = {};\n    var edges = {};\n    if (directed) {\n      eles.forEach(function (ele) {\n        var id = ele.id();\n        if (ele.isNode()) {\n          var ind = ele.indegree(true);\n          var outd = ele.outdegree(true);\n          var d1 = ind - outd;\n          var d2 = outd - ind;\n          if (d1 == 1) {\n            if (oddIn) dflag = true;else oddIn = id;\n          } else if (d2 == 1) {\n            if (oddOut) dflag = true;else oddOut = id;\n          } else if (d2 > 1 || d1 > 1) {\n            dflag = true;\n          }\n          nodes[id] = [];\n          ele.outgoers().forEach(function (e) {\n            if (e.isEdge()) nodes[id].push(e.id());\n          });\n        } else {\n          edges[id] = [undefined, ele.target().id()];\n        }\n      });\n    } else {\n      eles.forEach(function (ele) {\n        var id = ele.id();\n        if (ele.isNode()) {\n          var d = ele.degree(true);\n          if (d % 2) {\n            if (!oddIn) oddIn = id;else if (!oddOut) oddOut = id;else dflag = true;\n          }\n          nodes[id] = [];\n          ele.connectedEdges().forEach(function (e) {\n            return nodes[id].push(e.id());\n          });\n        } else {\n          edges[id] = [ele.source().id(), ele.target().id()];\n        }\n      });\n    }\n    var result = {\n      found: false,\n      trail: undefined\n    };\n    if (dflag) return result;else if (oddOut && oddIn) {\n      if (directed) {\n        if (startVertex && oddOut != startVertex) {\n          return result;\n        }\n        startVertex = oddOut;\n      } else {\n        if (startVertex && oddOut != startVertex && oddIn != startVertex) {\n          return result;\n        } else if (!startVertex) {\n          startVertex = oddOut;\n        }\n      }\n    } else {\n      if (!startVertex) startVertex = eles[0].id();\n    }\n    var walk = function walk(v) {\n      var currentNode = v;\n      var subtour = [v];\n      var adj, adjTail, adjHead;\n      while (nodes[currentNode].length) {\n        adj = nodes[currentNode].shift();\n        adjTail = edges[adj][0];\n        adjHead = edges[adj][1];\n        if (currentNode != adjHead) {\n          nodes[adjHead] = nodes[adjHead].filter(function (e) {\n            return e != adj;\n          });\n          currentNode = adjHead;\n        } else if (!directed && currentNode != adjTail) {\n          nodes[adjTail] = nodes[adjTail].filter(function (e) {\n            return e != adj;\n          });\n          currentNode = adjTail;\n        }\n        subtour.unshift(adj);\n        subtour.unshift(currentNode);\n      }\n      return subtour;\n    };\n    var trail = [];\n    var subtour = [];\n    subtour = walk(startVertex);\n    while (subtour.length != 1) {\n      if (nodes[subtour[0]].length == 0) {\n        trail.unshift(eles.getElementById(subtour.shift()));\n        trail.unshift(eles.getElementById(subtour.shift()));\n      } else {\n        subtour = walk(subtour.shift()).concat(subtour);\n      }\n    }\n    trail.unshift(eles.getElementById(subtour.shift())); // final node\n\n    for (var d in nodes) {\n      if (nodes[d].length) {\n        return result;\n      }\n    }\n    result.found = true;\n    result.trail = this.spawn(trail, true);\n    return result;\n  }\n};\n\nvar hopcroftTarjanBiconnected = function hopcroftTarjanBiconnected() {\n  var eles = this;\n  var nodes = {};\n  var id = 0;\n  var edgeCount = 0;\n  var components = [];\n  var stack = [];\n  var visitedEdges = {};\n  var buildComponent = function buildComponent(x, y) {\n    var i = stack.length - 1;\n    var cutset = [];\n    var component = eles.spawn();\n    while (stack[i].x != x || stack[i].y != y) {\n      cutset.push(stack.pop().edge);\n      i--;\n    }\n    cutset.push(stack.pop().edge);\n    cutset.forEach(function (edge) {\n      var connectedNodes = edge.connectedNodes().intersection(eles);\n      component.merge(edge);\n      connectedNodes.forEach(function (node) {\n        var nodeId = node.id();\n        var connectedEdges = node.connectedEdges().intersection(eles);\n        component.merge(node);\n        if (!nodes[nodeId].cutVertex) {\n          component.merge(connectedEdges);\n        } else {\n          component.merge(connectedEdges.filter(function (edge) {\n            return edge.isLoop();\n          }));\n        }\n      });\n    });\n    components.push(component);\n  };\n  var biconnectedSearch = function biconnectedSearch(root, currentNode, parent) {\n    if (root === parent) edgeCount += 1;\n    nodes[currentNode] = {\n      id: id,\n      low: id++,\n      cutVertex: false\n    };\n    var edges = eles.getElementById(currentNode).connectedEdges().intersection(eles);\n    if (edges.size() === 0) {\n      components.push(eles.spawn(eles.getElementById(currentNode)));\n    } else {\n      var sourceId, targetId, otherNodeId, edgeId;\n      edges.forEach(function (edge) {\n        sourceId = edge.source().id();\n        targetId = edge.target().id();\n        otherNodeId = sourceId === currentNode ? targetId : sourceId;\n        if (otherNodeId !== parent) {\n          edgeId = edge.id();\n          if (!visitedEdges[edgeId]) {\n            visitedEdges[edgeId] = true;\n            stack.push({\n              x: currentNode,\n              y: otherNodeId,\n              edge: edge\n            });\n          }\n          if (!(otherNodeId in nodes)) {\n            biconnectedSearch(root, otherNodeId, currentNode);\n            nodes[currentNode].low = Math.min(nodes[currentNode].low, nodes[otherNodeId].low);\n            if (nodes[currentNode].id <= nodes[otherNodeId].low) {\n              nodes[currentNode].cutVertex = true;\n              buildComponent(currentNode, otherNodeId);\n            }\n          } else {\n            nodes[currentNode].low = Math.min(nodes[currentNode].low, nodes[otherNodeId].id);\n          }\n        }\n      });\n    }\n  };\n  eles.forEach(function (ele) {\n    if (ele.isNode()) {\n      var nodeId = ele.id();\n      if (!(nodeId in nodes)) {\n        edgeCount = 0;\n        biconnectedSearch(nodeId, nodeId);\n        nodes[nodeId].cutVertex = edgeCount > 1;\n      }\n    }\n  });\n  var cutVertices = Object.keys(nodes).filter(function (id) {\n    return nodes[id].cutVertex;\n  }).map(function (id) {\n    return eles.getElementById(id);\n  });\n  return {\n    cut: eles.spawn(cutVertices),\n    components: components\n  };\n};\nvar hopcroftTarjanBiconnected$1 = {\n  hopcroftTarjanBiconnected: hopcroftTarjanBiconnected,\n  htbc: hopcroftTarjanBiconnected,\n  htb: hopcroftTarjanBiconnected,\n  hopcroftTarjanBiconnectedComponents: hopcroftTarjanBiconnected\n};\n\nvar tarjanStronglyConnected = function tarjanStronglyConnected() {\n  var eles = this;\n  var nodes = {};\n  var index = 0;\n  var components = [];\n  var stack = [];\n  var cut = eles.spawn(eles);\n  var stronglyConnectedSearch = function stronglyConnectedSearch(sourceNodeId) {\n    stack.push(sourceNodeId);\n    nodes[sourceNodeId] = {\n      index: index,\n      low: index++,\n      explored: false\n    };\n    var connectedEdges = eles.getElementById(sourceNodeId).connectedEdges().intersection(eles);\n    connectedEdges.forEach(function (edge) {\n      var targetNodeId = edge.target().id();\n      if (targetNodeId !== sourceNodeId) {\n        if (!(targetNodeId in nodes)) {\n          stronglyConnectedSearch(targetNodeId);\n        }\n        if (!nodes[targetNodeId].explored) {\n          nodes[sourceNodeId].low = Math.min(nodes[sourceNodeId].low, nodes[targetNodeId].low);\n        }\n      }\n    });\n    if (nodes[sourceNodeId].index === nodes[sourceNodeId].low) {\n      var componentNodes = eles.spawn();\n      for (;;) {\n        var nodeId = stack.pop();\n        componentNodes.merge(eles.getElementById(nodeId));\n        nodes[nodeId].low = nodes[sourceNodeId].index;\n        nodes[nodeId].explored = true;\n        if (nodeId === sourceNodeId) {\n          break;\n        }\n      }\n      var componentEdges = componentNodes.edgesWith(componentNodes);\n      var component = componentNodes.merge(componentEdges);\n      components.push(component);\n      cut = cut.difference(component);\n    }\n  };\n  eles.forEach(function (ele) {\n    if (ele.isNode()) {\n      var nodeId = ele.id();\n      if (!(nodeId in nodes)) {\n        stronglyConnectedSearch(nodeId);\n      }\n    }\n  });\n  return {\n    cut: cut,\n    components: components\n  };\n};\nvar tarjanStronglyConnected$1 = {\n  tarjanStronglyConnected: tarjanStronglyConnected,\n  tsc: tarjanStronglyConnected,\n  tscc: tarjanStronglyConnected,\n  tarjanStronglyConnectedComponents: tarjanStronglyConnected\n};\n\nvar elesfn$j = {};\n[elesfn$v, elesfn$u, elesfn$t, elesfn$s, elesfn$r, elesfn$q, elesfn$p, elesfn$o, elesfn$n, elesfn$m, elesfn$l, markovClustering$1, kClustering, hierarchicalClustering$1, affinityPropagation$1, elesfn$k, hopcroftTarjanBiconnected$1, tarjanStronglyConnected$1].forEach(function (props) {\n  extend(elesfn$j, props);\n});\n\n/*!\nEmbeddable Minimum Strictly-Compliant Promises/A+ 1.1.1 Thenable\nCopyright (c) 2013-2014 Ralf S. Engelschall (http://engelschall.com)\nLicensed under The MIT License (http://opensource.org/licenses/MIT)\n*/\n\n/*  promise states [Promises/A+ 2.1]  */\nvar STATE_PENDING = 0; /*  [Promises/A+ 2.1.1]  */\nvar STATE_FULFILLED = 1; /*  [Promises/A+ 2.1.2]  */\nvar STATE_REJECTED = 2; /*  [Promises/A+ 2.1.3]  */\n\n/*  promise object constructor  */\nvar api = function api(executor) {\n  /*  optionally support non-constructor/plain-function call  */\n  if (!(this instanceof api)) return new api(executor);\n\n  /*  initialize object  */\n  this.id = 'Thenable/1.0.7';\n  this.state = STATE_PENDING; /*  initial state  */\n  this.fulfillValue = undefined; /*  initial value  */ /*  [Promises/A+ 1.3, 2.1.2.2]  */\n  this.rejectReason = undefined; /*  initial reason */ /*  [Promises/A+ 1.5, 2.1.3.2]  */\n  this.onFulfilled = []; /*  initial handlers  */\n  this.onRejected = []; /*  initial handlers  */\n\n  /*  provide optional information-hiding proxy  */\n  this.proxy = {\n    then: this.then.bind(this)\n  };\n\n  /*  support optional executor function  */\n  if (typeof executor === 'function') executor.call(this, this.fulfill.bind(this), this.reject.bind(this));\n};\n\n/*  promise API methods  */\napi.prototype = {\n  /*  promise resolving methods  */\n  fulfill: function fulfill(value) {\n    return deliver(this, STATE_FULFILLED, 'fulfillValue', value);\n  },\n  reject: function reject(value) {\n    return deliver(this, STATE_REJECTED, 'rejectReason', value);\n  },\n  /*  \"The then Method\" [Promises/A+ 1.1, 1.2, 2.2]  */\n  then: function then(onFulfilled, onRejected) {\n    var curr = this;\n    var next = new api(); /*  [Promises/A+ 2.2.7]  */\n    curr.onFulfilled.push(resolver(onFulfilled, next, 'fulfill')); /*  [Promises/A+ 2.2.2/2.2.6]  */\n    curr.onRejected.push(resolver(onRejected, next, 'reject')); /*  [Promises/A+ 2.2.3/2.2.6]  */\n    execute(curr);\n    return next.proxy; /*  [Promises/A+ 2.2.7, 3.3]  */\n  }\n};\n\n/*  deliver an action  */\nvar deliver = function deliver(curr, state, name, value) {\n  if (curr.state === STATE_PENDING) {\n    curr.state = state; /*  [Promises/A+ 2.1.2.1, 2.1.3.1]  */\n    curr[name] = value; /*  [Promises/A+ 2.1.2.2, 2.1.3.2]  */\n    execute(curr);\n  }\n  return curr;\n};\n\n/*  execute all handlers  */\nvar execute = function execute(curr) {\n  if (curr.state === STATE_FULFILLED) execute_handlers(curr, 'onFulfilled', curr.fulfillValue);else if (curr.state === STATE_REJECTED) execute_handlers(curr, 'onRejected', curr.rejectReason);\n};\n\n/*  execute particular set of handlers  */\nvar execute_handlers = function execute_handlers(curr, name, value) {\n  /* global setImmediate: true */\n  /* global setTimeout: true */\n\n  /*  short-circuit processing  */\n  if (curr[name].length === 0) return;\n\n  /*  iterate over all handlers, exactly once  */\n  var handlers = curr[name];\n  curr[name] = []; /*  [Promises/A+ 2.2.2.3, 2.2.3.3]  */\n  var func = function func() {\n    for (var i = 0; i < handlers.length; i++) {\n      handlers[i](value);\n    } /*  [Promises/A+ 2.2.5]  */\n  };\n\n  /*  execute procedure asynchronously  */ /*  [Promises/A+ 2.2.4, 3.1]  */\n  if (typeof setImmediate === 'function') setImmediate(func);else setTimeout(func, 0);\n};\n\n/*  generate a resolver function  */\nvar resolver = function resolver(cb, next, method) {\n  return function (value) {\n    if (typeof cb !== 'function') /*  [Promises/A+ 2.2.1, 2.2.7.3, 2.2.7.4]  */\n      next[method].call(next, value); /*  [Promises/A+ 2.2.7.3, 2.2.7.4]  */else {\n      var result;\n      try {\n        result = cb(value);\n      } /*  [Promises/A+ 2.2.2.1, 2.2.3.1, 2.2.5, 3.2]  */ catch (e) {\n        next.reject(e); /*  [Promises/A+ 2.2.7.2]  */\n        return;\n      }\n      resolve(next, result); /*  [Promises/A+ 2.2.7.1]  */\n    }\n  };\n};\n\n/*  \"Promise Resolution Procedure\"  */ /*  [Promises/A+ 2.3]  */\nvar resolve = function resolve(promise, x) {\n  /*  sanity check arguments  */ /*  [Promises/A+ 2.3.1]  */\n  if (promise === x || promise.proxy === x) {\n    promise.reject(new TypeError('cannot resolve promise with itself'));\n    return;\n  }\n\n  /*  surgically check for a \"then\" method\n    (mainly to just call the \"getter\" of \"then\" only once)  */\n  var then;\n  if (_typeof(x) === 'object' && x !== null || typeof x === 'function') {\n    try {\n      then = x.then;\n    } /*  [Promises/A+ 2.3.3.1, 3.5]  */ catch (e) {\n      promise.reject(e); /*  [Promises/A+ 2.3.3.2]  */\n      return;\n    }\n  }\n\n  /*  handle own Thenables    [Promises/A+ 2.3.2]\n    and similar \"thenables\" [Promises/A+ 2.3.3]  */\n  if (typeof then === 'function') {\n    var resolved = false;\n    try {\n      /*  call retrieved \"then\" method */ /*  [Promises/A+ 2.3.3.3]  */\n      then.call(x, /*  resolvePromise  */ /*  [Promises/A+ 2.3.3.3.1]  */\n      function (y) {\n        if (resolved) return;\n        resolved = true; /*  [Promises/A+ 2.3.3.3.3]  */\n        if (y === x) /*  [Promises/A+ 3.6]  */\n          promise.reject(new TypeError('circular thenable chain'));else resolve(promise, y);\n      }, /*  rejectPromise  */ /*  [Promises/A+ 2.3.3.3.2]  */\n      function (r) {\n        if (resolved) return;\n        resolved = true; /*  [Promises/A+ 2.3.3.3.3]  */\n        promise.reject(r);\n      });\n    } catch (e) {\n      if (!resolved) /*  [Promises/A+ 2.3.3.3.3]  */\n        promise.reject(e); /*  [Promises/A+ 2.3.3.3.4]  */\n    }\n\n    return;\n  }\n\n  /*  handle other values  */\n  promise.fulfill(x); /*  [Promises/A+ 2.3.4, 2.3.3.4]  */\n};\n\n// so we always have Promise.all()\napi.all = function (ps) {\n  return new api(function (resolveAll, rejectAll) {\n    var vals = new Array(ps.length);\n    var doneCount = 0;\n    var fulfill = function fulfill(i, val) {\n      vals[i] = val;\n      doneCount++;\n      if (doneCount === ps.length) {\n        resolveAll(vals);\n      }\n    };\n    for (var i = 0; i < ps.length; i++) {\n      (function (i) {\n        var p = ps[i];\n        var isPromise = p != null && p.then != null;\n        if (isPromise) {\n          p.then(function (val) {\n            fulfill(i, val);\n          }, function (err) {\n            rejectAll(err);\n          });\n        } else {\n          var val = p;\n          fulfill(i, val);\n        }\n      })(i);\n    }\n  });\n};\napi.resolve = function (val) {\n  return new api(function (resolve, reject) {\n    resolve(val);\n  });\n};\napi.reject = function (val) {\n  return new api(function (resolve, reject) {\n    reject(val);\n  });\n};\nvar Promise$1 = typeof Promise !== 'undefined' ? Promise : api; // eslint-disable-line no-undef\n\nvar Animation = function Animation(target, opts, opts2) {\n  var isCore = core(target);\n  var isEle = !isCore;\n  var _p = this._private = extend({\n    duration: 1000\n  }, opts, opts2);\n  _p.target = target;\n  _p.style = _p.style || _p.css;\n  _p.started = false;\n  _p.playing = false;\n  _p.hooked = false;\n  _p.applying = false;\n  _p.progress = 0;\n  _p.completes = [];\n  _p.frames = [];\n  if (_p.complete && fn$6(_p.complete)) {\n    _p.completes.push(_p.complete);\n  }\n  if (isEle) {\n    var pos = target.position();\n    _p.startPosition = _p.startPosition || {\n      x: pos.x,\n      y: pos.y\n    };\n    _p.startStyle = _p.startStyle || target.cy().style().getAnimationStartStyle(target, _p.style);\n  }\n  if (isCore) {\n    var pan = target.pan();\n    _p.startPan = {\n      x: pan.x,\n      y: pan.y\n    };\n    _p.startZoom = target.zoom();\n  }\n\n  // for future timeline/animations impl\n  this.length = 1;\n  this[0] = this;\n};\nvar anifn = Animation.prototype;\nextend(anifn, {\n  instanceString: function instanceString() {\n    return 'animation';\n  },\n  hook: function hook() {\n    var _p = this._private;\n    if (!_p.hooked) {\n      // add to target's animation queue\n      var q;\n      var tAni = _p.target._private.animation;\n      if (_p.queue) {\n        q = tAni.queue;\n      } else {\n        q = tAni.current;\n      }\n      q.push(this);\n\n      // add to the animation loop pool\n      if (elementOrCollection(_p.target)) {\n        _p.target.cy().addToAnimationPool(_p.target);\n      }\n      _p.hooked = true;\n    }\n    return this;\n  },\n  play: function play() {\n    var _p = this._private;\n\n    // autorewind\n    if (_p.progress === 1) {\n      _p.progress = 0;\n    }\n    _p.playing = true;\n    _p.started = false; // needs to be started by animation loop\n    _p.stopped = false;\n    this.hook();\n\n    // the animation loop will start the animation...\n\n    return this;\n  },\n  playing: function playing() {\n    return this._private.playing;\n  },\n  apply: function apply() {\n    var _p = this._private;\n    _p.applying = true;\n    _p.started = false; // needs to be started by animation loop\n    _p.stopped = false;\n    this.hook();\n\n    // the animation loop will apply the animation at this progress\n\n    return this;\n  },\n  applying: function applying() {\n    return this._private.applying;\n  },\n  pause: function pause() {\n    var _p = this._private;\n    _p.playing = false;\n    _p.started = false;\n    return this;\n  },\n  stop: function stop() {\n    var _p = this._private;\n    _p.playing = false;\n    _p.started = false;\n    _p.stopped = true; // to be removed from animation queues\n\n    return this;\n  },\n  rewind: function rewind() {\n    return this.progress(0);\n  },\n  fastforward: function fastforward() {\n    return this.progress(1);\n  },\n  time: function time(t) {\n    var _p = this._private;\n    if (t === undefined) {\n      return _p.progress * _p.duration;\n    } else {\n      return this.progress(t / _p.duration);\n    }\n  },\n  progress: function progress(p) {\n    var _p = this._private;\n    var wasPlaying = _p.playing;\n    if (p === undefined) {\n      return _p.progress;\n    } else {\n      if (wasPlaying) {\n        this.pause();\n      }\n      _p.progress = p;\n      _p.started = false;\n      if (wasPlaying) {\n        this.play();\n      }\n    }\n    return this;\n  },\n  completed: function completed() {\n    return this._private.progress === 1;\n  },\n  reverse: function reverse() {\n    var _p = this._private;\n    var wasPlaying = _p.playing;\n    if (wasPlaying) {\n      this.pause();\n    }\n    _p.progress = 1 - _p.progress;\n    _p.started = false;\n    var swap = function swap(a, b) {\n      var _pa = _p[a];\n      if (_pa == null) {\n        return;\n      }\n      _p[a] = _p[b];\n      _p[b] = _pa;\n    };\n    swap('zoom', 'startZoom');\n    swap('pan', 'startPan');\n    swap('position', 'startPosition');\n\n    // swap styles\n    if (_p.style) {\n      for (var i = 0; i < _p.style.length; i++) {\n        var prop = _p.style[i];\n        var name = prop.name;\n        var startStyleProp = _p.startStyle[name];\n        _p.startStyle[name] = prop;\n        _p.style[i] = startStyleProp;\n      }\n    }\n    if (wasPlaying) {\n      this.play();\n    }\n    return this;\n  },\n  promise: function promise(type) {\n    var _p = this._private;\n    var arr;\n    switch (type) {\n      case 'frame':\n        arr = _p.frames;\n        break;\n      default:\n      case 'complete':\n      case 'completed':\n        arr = _p.completes;\n    }\n    return new Promise$1(function (resolve, reject) {\n      arr.push(function () {\n        resolve();\n      });\n    });\n  }\n});\nanifn.complete = anifn.completed;\nanifn.run = anifn.play;\nanifn.running = anifn.playing;\n\nvar define$3 = {\n  animated: function animated() {\n    return function animatedImpl() {\n      var self = this;\n      var selfIsArrayLike = self.length !== undefined;\n      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like\n      var cy = this._private.cy || this;\n      if (!cy.styleEnabled()) {\n        return false;\n      }\n      var ele = all[0];\n      if (ele) {\n        return ele._private.animation.current.length > 0;\n      }\n    };\n  },\n  // animated\n\n  clearQueue: function clearQueue() {\n    return function clearQueueImpl() {\n      var self = this;\n      var selfIsArrayLike = self.length !== undefined;\n      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like\n      var cy = this._private.cy || this;\n      if (!cy.styleEnabled()) {\n        return this;\n      }\n      for (var i = 0; i < all.length; i++) {\n        var ele = all[i];\n        ele._private.animation.queue = [];\n      }\n      return this;\n    };\n  },\n  // clearQueue\n\n  delay: function delay() {\n    return function delayImpl(time, complete) {\n      var cy = this._private.cy || this;\n      if (!cy.styleEnabled()) {\n        return this;\n      }\n      return this.animate({\n        delay: time,\n        duration: time,\n        complete: complete\n      });\n    };\n  },\n  // delay\n\n  delayAnimation: function delayAnimation() {\n    return function delayAnimationImpl(time, complete) {\n      var cy = this._private.cy || this;\n      if (!cy.styleEnabled()) {\n        return this;\n      }\n      return this.animation({\n        delay: time,\n        duration: time,\n        complete: complete\n      });\n    };\n  },\n  // delay\n\n  animation: function animation() {\n    return function animationImpl(properties, params) {\n      var self = this;\n      var selfIsArrayLike = self.length !== undefined;\n      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like\n      var cy = this._private.cy || this;\n      var isCore = !selfIsArrayLike;\n      var isEles = !isCore;\n      if (!cy.styleEnabled()) {\n        return this;\n      }\n      var style = cy.style();\n      properties = extend({}, properties, params);\n      var propertiesEmpty = Object.keys(properties).length === 0;\n      if (propertiesEmpty) {\n        return new Animation(all[0], properties); // nothing to animate\n      }\n\n      if (properties.duration === undefined) {\n        properties.duration = 400;\n      }\n      switch (properties.duration) {\n        case 'slow':\n          properties.duration = 600;\n          break;\n        case 'fast':\n          properties.duration = 200;\n          break;\n      }\n      if (isEles) {\n        properties.style = style.getPropsList(properties.style || properties.css);\n        properties.css = undefined;\n      }\n      if (isEles && properties.renderedPosition != null) {\n        var rpos = properties.renderedPosition;\n        var pan = cy.pan();\n        var zoom = cy.zoom();\n        properties.position = renderedToModelPosition(rpos, zoom, pan);\n      }\n\n      // override pan w/ panBy if set\n      if (isCore && properties.panBy != null) {\n        var panBy = properties.panBy;\n        var cyPan = cy.pan();\n        properties.pan = {\n          x: cyPan.x + panBy.x,\n          y: cyPan.y + panBy.y\n        };\n      }\n\n      // override pan w/ center if set\n      var center = properties.center || properties.centre;\n      if (isCore && center != null) {\n        var centerPan = cy.getCenterPan(center.eles, properties.zoom);\n        if (centerPan != null) {\n          properties.pan = centerPan;\n        }\n      }\n\n      // override pan & zoom w/ fit if set\n      if (isCore && properties.fit != null) {\n        var fit = properties.fit;\n        var fitVp = cy.getFitViewport(fit.eles || fit.boundingBox, fit.padding);\n        if (fitVp != null) {\n          properties.pan = fitVp.pan;\n          properties.zoom = fitVp.zoom;\n        }\n      }\n\n      // override zoom (& potentially pan) w/ zoom obj if set\n      if (isCore && plainObject(properties.zoom)) {\n        var vp = cy.getZoomedViewport(properties.zoom);\n        if (vp != null) {\n          if (vp.zoomed) {\n            properties.zoom = vp.zoom;\n          }\n          if (vp.panned) {\n            properties.pan = vp.pan;\n          }\n        } else {\n          properties.zoom = null; // an inavalid zoom (e.g. no delta) gets automatically destroyed\n        }\n      }\n\n      return new Animation(all[0], properties);\n    };\n  },\n  // animate\n\n  animate: function animate() {\n    return function animateImpl(properties, params) {\n      var self = this;\n      var selfIsArrayLike = self.length !== undefined;\n      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like\n      var cy = this._private.cy || this;\n      if (!cy.styleEnabled()) {\n        return this;\n      }\n      if (params) {\n        properties = extend({}, properties, params);\n      }\n\n      // manually hook and run the animation\n      for (var i = 0; i < all.length; i++) {\n        var ele = all[i];\n        var queue = ele.animated() && (properties.queue === undefined || properties.queue);\n        var ani = ele.animation(properties, queue ? {\n          queue: true\n        } : undefined);\n        ani.play();\n      }\n      return this; // chaining\n    };\n  },\n\n  // animate\n\n  stop: function stop() {\n    return function stopImpl(clearQueue, jumpToEnd) {\n      var self = this;\n      var selfIsArrayLike = self.length !== undefined;\n      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like\n      var cy = this._private.cy || this;\n      if (!cy.styleEnabled()) {\n        return this;\n      }\n      for (var i = 0; i < all.length; i++) {\n        var ele = all[i];\n        var _p = ele._private;\n        var anis = _p.animation.current;\n        for (var j = 0; j < anis.length; j++) {\n          var ani = anis[j];\n          var ani_p = ani._private;\n          if (jumpToEnd) {\n            // next iteration of the animation loop, the animation\n            // will go straight to the end and be removed\n            ani_p.duration = 0;\n          }\n        }\n\n        // clear the queue of future animations\n        if (clearQueue) {\n          _p.animation.queue = [];\n        }\n        if (!jumpToEnd) {\n          _p.animation.current = [];\n        }\n      }\n\n      // we have to notify (the animation loop doesn't do it for us on `stop`)\n      cy.notify('draw');\n      return this;\n    };\n  } // stop\n}; // define\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nvar isArray_1 = isArray;\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/;\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray_1(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol_1(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\nvar _isKey = isKey;\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject_1(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = _baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nvar isFunction_1 = isFunction;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = _root['__core-js_shared__'];\n\nvar _coreJsData = coreJsData;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(_coreJsData && _coreJsData.keys && _coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\nvar _isMasked = isMasked;\n\n/** Used for built-in method references. */\nvar funcProto$1 = Function.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString$1 = funcProto$1.toString;\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString$1.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\nvar _toSource = toSource;\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto$3 = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty$3 = objectProto$3.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty$3).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject_1(value) || _isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction_1(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(_toSource(value));\n}\n\nvar _baseIsNative = baseIsNative;\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue$1(object, key) {\n  return object == null ? undefined : object[key];\n}\n\nvar _getValue = getValue$1;\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = _getValue(object, key);\n  return _baseIsNative(value) ? value : undefined;\n}\n\nvar _getNative = getNative;\n\n/* Built-in method references that are verified to be native. */\nvar nativeCreate = _getNative(Object, 'create');\n\nvar _nativeCreate = nativeCreate;\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = _nativeCreate ? _nativeCreate(null) : {};\n  this.size = 0;\n}\n\nvar _hashClear = hashClear;\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nvar _hashDelete = hashDelete;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED$1 = '__lodash_hash_undefined__';\n\n/** Used for built-in method references. */\nvar objectProto$2 = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty$2 = objectProto$2.hasOwnProperty;\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (_nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED$1 ? undefined : result;\n  }\n  return hasOwnProperty$2.call(data, key) ? data[key] : undefined;\n}\n\nvar _hashGet = hashGet;\n\n/** Used for built-in method references. */\nvar objectProto$1 = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty$1 = objectProto$1.hasOwnProperty;\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return _nativeCreate ? (data[key] !== undefined) : hasOwnProperty$1.call(data, key);\n}\n\nvar _hashHas = hashHas;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (_nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\nvar _hashSet = hashSet;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = _hashClear;\nHash.prototype['delete'] = _hashDelete;\nHash.prototype.get = _hashGet;\nHash.prototype.has = _hashHas;\nHash.prototype.set = _hashSet;\n\nvar _Hash = Hash;\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\nvar _listCacheClear = listCacheClear;\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\nvar eq_1 = eq;\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq_1(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\nvar _assocIndexOf = assocIndexOf;\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype;\n\n/** Built-in value references. */\nvar splice = arrayProto.splice;\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = _assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\nvar _listCacheDelete = listCacheDelete;\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = _assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\nvar _listCacheGet = listCacheGet;\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return _assocIndexOf(this.__data__, key) > -1;\n}\n\nvar _listCacheHas = listCacheHas;\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = _assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\nvar _listCacheSet = listCacheSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = _listCacheClear;\nListCache.prototype['delete'] = _listCacheDelete;\nListCache.prototype.get = _listCacheGet;\nListCache.prototype.has = _listCacheHas;\nListCache.prototype.set = _listCacheSet;\n\nvar _ListCache = ListCache;\n\n/* Built-in method references that are verified to be native. */\nvar Map$1 = _getNative(_root, 'Map');\n\nvar _Map = Map$1;\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new _Hash,\n    'map': new (_Map || _ListCache),\n    'string': new _Hash\n  };\n}\n\nvar _mapCacheClear = mapCacheClear;\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\nvar _isKeyable = isKeyable;\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return _isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\nvar _getMapData = getMapData;\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = _getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nvar _mapCacheDelete = mapCacheDelete;\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return _getMapData(this, key).get(key);\n}\n\nvar _mapCacheGet = mapCacheGet;\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return _getMapData(this, key).has(key);\n}\n\nvar _mapCacheHas = mapCacheHas;\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = _getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\nvar _mapCacheSet = mapCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = _mapCacheClear;\nMapCache.prototype['delete'] = _mapCacheDelete;\nMapCache.prototype.get = _mapCacheGet;\nMapCache.prototype.has = _mapCacheHas;\nMapCache.prototype.set = _mapCacheSet;\n\nvar _MapCache = MapCache;\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result) || cache;\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || _MapCache);\n  return memoized;\n}\n\n// Expose `MapCache`.\nmemoize.Cache = _MapCache;\n\nvar memoize_1 = memoize;\n\n/** Used as the maximum memoize cache size. */\nvar MAX_MEMOIZE_SIZE = 500;\n\n/**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */\nfunction memoizeCapped(func) {\n  var result = memoize_1(func, function(key) {\n    if (cache.size === MAX_MEMOIZE_SIZE) {\n      cache.clear();\n    }\n    return key;\n  });\n\n  var cache = result.cache;\n  return result;\n}\n\nvar _memoizeCapped = memoizeCapped;\n\n/** Used to match property names within property paths. */\nvar rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = _memoizeCapped(function(string) {\n  var result = [];\n  if (string.charCodeAt(0) === 46 /* . */) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, subString) {\n    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\nvar _stringToPath = stringToPath;\n\n/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\nvar _arrayMap = arrayMap;\n\n/** Used as references for various `Number` constants. */\nvar INFINITY$1 = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = _Symbol ? _Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray_1(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return _arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol_1(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY$1) ? '-0' : result;\n}\n\nvar _baseToString = baseToString;\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString$1(value) {\n  return value == null ? '' : _baseToString(value);\n}\n\nvar toString_1 = toString$1;\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {Object} [object] The object to query keys on.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value, object) {\n  if (isArray_1(value)) {\n    return value;\n  }\n  return _isKey(value, object) ? [value] : _stringToPath(toString_1(value));\n}\n\nvar _castPath = castPath;\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol_1(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nvar _toKey = toKey;\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = _castPath(path, object);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[_toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\nvar _baseGet = baseGet;\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : _baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\nvar get_1 = get;\n\nvar defineProperty = (function() {\n  try {\n    var func = _getNative(Object, 'defineProperty');\n    func({}, '', {});\n    return func;\n  } catch (e) {}\n}());\n\nvar _defineProperty = defineProperty;\n\n/**\n * The base implementation of `assignValue` and `assignMergeValue` without\n * value checks.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction baseAssignValue(object, key, value) {\n  if (key == '__proto__' && _defineProperty) {\n    _defineProperty(object, key, {\n      'configurable': true,\n      'enumerable': true,\n      'value': value,\n      'writable': true\n    });\n  } else {\n    object[key] = value;\n  }\n}\n\nvar _baseAssignValue = baseAssignValue;\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq_1(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    _baseAssignValue(object, key, value);\n  }\n}\n\nvar _assignValue = assignValue;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\nvar _isIndex = isIndex;\n\n/**\n * The base implementation of `_.set`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @param {Function} [customizer] The function to customize path creation.\n * @returns {Object} Returns `object`.\n */\nfunction baseSet(object, path, value, customizer) {\n  if (!isObject_1(object)) {\n    return object;\n  }\n  path = _castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      lastIndex = length - 1,\n      nested = object;\n\n  while (nested != null && ++index < length) {\n    var key = _toKey(path[index]),\n        newValue = value;\n\n    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n      return object;\n    }\n\n    if (index != lastIndex) {\n      var objValue = nested[key];\n      newValue = customizer ? customizer(objValue, key, nested) : undefined;\n      if (newValue === undefined) {\n        newValue = isObject_1(objValue)\n          ? objValue\n          : (_isIndex(path[index + 1]) ? [] : {});\n      }\n    }\n    _assignValue(nested, key, newValue);\n    nested = nested[key];\n  }\n  return object;\n}\n\nvar _baseSet = baseSet;\n\n/**\n * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,\n * it's created. Arrays are created for missing index properties while objects\n * are created for all other missing properties. Use `_.setWith` to customize\n * `path` creation.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns `object`.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.set(object, 'a[0].b.c', 4);\n * console.log(object.a[0].b.c);\n * // => 4\n *\n * _.set(object, ['x', '0', 'y', 'z'], 5);\n * console.log(object.x[0].y.z);\n * // => 5\n */\nfunction set(object, path, value) {\n  return object == null ? object : _baseSet(object, path, value);\n}\n\nvar set_1 = set;\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\nvar _copyArray = copyArray;\n\n/**\n * Converts `value` to a property path array.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Util\n * @param {*} value The value to convert.\n * @returns {Array} Returns the new property path array.\n * @example\n *\n * _.toPath('a.b.c');\n * // => ['a', 'b', 'c']\n *\n * _.toPath('a[0].b.c');\n * // => ['a', '0', 'b', 'c']\n */\nfunction toPath(value) {\n  if (isArray_1(value)) {\n    return _arrayMap(value, _toKey);\n  }\n  return isSymbol_1(value) ? [value] : _copyArray(_stringToPath(toString_1(value)));\n}\n\nvar toPath_1 = toPath;\n\nvar define$2 = {\n  // access data field\n  data: function data(params) {\n    var defaults = {\n      field: 'data',\n      bindingEvent: 'data',\n      allowBinding: false,\n      allowSetting: false,\n      allowGetting: false,\n      settingEvent: 'data',\n      settingTriggersEvent: false,\n      triggerFnName: 'trigger',\n      immutableKeys: {},\n      // key => true if immutable\n      updateStyle: false,\n      beforeGet: function beforeGet(self) {},\n      beforeSet: function beforeSet(self, obj) {},\n      onSet: function onSet(self) {},\n      canSet: function canSet(self) {\n        return true;\n      }\n    };\n    params = extend({}, defaults, params);\n    return function dataImpl(name, value) {\n      var p = params;\n      var self = this;\n      var selfIsArrayLike = self.length !== undefined;\n      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like\n      var single = selfIsArrayLike ? self[0] : self;\n\n      // .data('foo', ...)\n      if (string(name)) {\n        // set or get property\n        var isPathLike = name.indexOf('.') !== -1; // there might be a normal field with a dot \n        var path = isPathLike && toPath_1(name);\n\n        // .data('foo')\n        if (p.allowGetting && value === undefined) {\n          // get\n\n          var ret;\n          if (single) {\n            p.beforeGet(single);\n\n            // check if it's path and a field with the same name doesn't exist\n            if (path && single._private[p.field][name] === undefined) {\n              ret = get_1(single._private[p.field], path);\n            } else {\n              ret = single._private[p.field][name];\n            }\n          }\n          return ret;\n\n          // .data('foo', 'bar')\n        } else if (p.allowSetting && value !== undefined) {\n          // set\n          var valid = !p.immutableKeys[name];\n          if (valid) {\n            var change = _defineProperty$1({}, name, value);\n            p.beforeSet(self, change);\n            for (var i = 0, l = all.length; i < l; i++) {\n              var ele = all[i];\n              if (p.canSet(ele)) {\n                if (path && single._private[p.field][name] === undefined) {\n                  set_1(ele._private[p.field], path, value);\n                } else {\n                  ele._private[p.field][name] = value;\n                }\n              }\n            }\n\n            // update mappers if asked\n            if (p.updateStyle) {\n              self.updateStyle();\n            }\n\n            // call onSet callback\n            p.onSet(self);\n            if (p.settingTriggersEvent) {\n              self[p.triggerFnName](p.settingEvent);\n            }\n          }\n        }\n\n        // .data({ 'foo': 'bar' })\n      } else if (p.allowSetting && plainObject(name)) {\n        // extend\n        var obj = name;\n        var k, v;\n        var keys = Object.keys(obj);\n        p.beforeSet(self, obj);\n        for (var _i = 0; _i < keys.length; _i++) {\n          k = keys[_i];\n          v = obj[k];\n          var _valid = !p.immutableKeys[k];\n          if (_valid) {\n            for (var j = 0; j < all.length; j++) {\n              var _ele = all[j];\n              if (p.canSet(_ele)) {\n                _ele._private[p.field][k] = v;\n              }\n            }\n          }\n        }\n\n        // update mappers if asked\n        if (p.updateStyle) {\n          self.updateStyle();\n        }\n\n        // call onSet callback\n        p.onSet(self);\n        if (p.settingTriggersEvent) {\n          self[p.triggerFnName](p.settingEvent);\n        }\n\n        // .data(function(){ ... })\n      } else if (p.allowBinding && fn$6(name)) {\n        // bind to event\n        var fn = name;\n        self.on(p.bindingEvent, fn);\n\n        // .data()\n      } else if (p.allowGetting && name === undefined) {\n        // get whole object\n        var _ret;\n        if (single) {\n          p.beforeGet(single);\n          _ret = single._private[p.field];\n        }\n        return _ret;\n      }\n      return self; // maintain chainability\n    }; // function\n  },\n\n  // data\n\n  // remove data field\n  removeData: function removeData(params) {\n    var defaults = {\n      field: 'data',\n      event: 'data',\n      triggerFnName: 'trigger',\n      triggerEvent: false,\n      immutableKeys: {} // key => true if immutable\n    };\n\n    params = extend({}, defaults, params);\n    return function removeDataImpl(names) {\n      var p = params;\n      var self = this;\n      var selfIsArrayLike = self.length !== undefined;\n      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like\n\n      // .removeData('foo bar')\n      if (string(names)) {\n        // then get the list of keys, and delete them\n        var keys = names.split(/\\s+/);\n        var l = keys.length;\n        for (var i = 0; i < l; i++) {\n          // delete each non-empty key\n          var key = keys[i];\n          if (emptyString(key)) {\n            continue;\n          }\n          var valid = !p.immutableKeys[key]; // not valid if immutable\n          if (valid) {\n            for (var i_a = 0, l_a = all.length; i_a < l_a; i_a++) {\n              all[i_a]._private[p.field][key] = undefined;\n            }\n          }\n        }\n        if (p.triggerEvent) {\n          self[p.triggerFnName](p.event);\n        }\n\n        // .removeData()\n      } else if (names === undefined) {\n        // then delete all keys\n\n        for (var _i_a = 0, _l_a = all.length; _i_a < _l_a; _i_a++) {\n          var _privateFields = all[_i_a]._private[p.field];\n          var _keys = Object.keys(_privateFields);\n          for (var _i2 = 0; _i2 < _keys.length; _i2++) {\n            var _key = _keys[_i2];\n            var validKeyToDelete = !p.immutableKeys[_key];\n            if (validKeyToDelete) {\n              _privateFields[_key] = undefined;\n            }\n          }\n        }\n        if (p.triggerEvent) {\n          self[p.triggerFnName](p.event);\n        }\n      }\n      return self; // maintain chaining\n    }; // function\n  } // removeData\n}; // define\n\nvar define$1 = {\n  eventAliasesOn: function eventAliasesOn(proto) {\n    var p = proto;\n    p.addListener = p.listen = p.bind = p.on;\n    p.unlisten = p.unbind = p.off = p.removeListener;\n    p.trigger = p.emit;\n\n    // this is just a wrapper alias of .on()\n    p.pon = p.promiseOn = function (events, selector) {\n      var self = this;\n      var args = Array.prototype.slice.call(arguments, 0);\n      return new Promise$1(function (resolve, reject) {\n        var callback = function callback(e) {\n          self.off.apply(self, offArgs);\n          resolve(e);\n        };\n        var onArgs = args.concat([callback]);\n        var offArgs = onArgs.concat([]);\n        self.on.apply(self, onArgs);\n      });\n    };\n  }\n}; // define\n\n// use this module to cherry pick functions into your prototype\nvar define = {};\n[define$3, define$2, define$1].forEach(function (m) {\n  extend(define, m);\n});\n\nvar elesfn$i = {\n  animate: define.animate(),\n  animation: define.animation(),\n  animated: define.animated(),\n  clearQueue: define.clearQueue(),\n  delay: define.delay(),\n  delayAnimation: define.delayAnimation(),\n  stop: define.stop()\n};\n\nvar elesfn$h = {\n  classes: function classes(_classes) {\n    var self = this;\n    if (_classes === undefined) {\n      var ret = [];\n      self[0]._private.classes.forEach(function (cls) {\n        return ret.push(cls);\n      });\n      return ret;\n    } else if (!array(_classes)) {\n      // extract classes from string\n      _classes = (_classes || '').match(/\\S+/g) || [];\n    }\n    var changed = [];\n    var classesSet = new Set$1(_classes);\n\n    // check and update each ele\n    for (var j = 0; j < self.length; j++) {\n      var ele = self[j];\n      var _p = ele._private;\n      var eleClasses = _p.classes;\n      var changedEle = false;\n\n      // check if ele has all of the passed classes\n      for (var i = 0; i < _classes.length; i++) {\n        var cls = _classes[i];\n        var eleHasClass = eleClasses.has(cls);\n        if (!eleHasClass) {\n          changedEle = true;\n          break;\n        }\n      }\n\n      // check if ele has classes outside of those passed\n      if (!changedEle) {\n        changedEle = eleClasses.size !== _classes.length;\n      }\n      if (changedEle) {\n        _p.classes = classesSet;\n        changed.push(ele);\n      }\n    }\n\n    // trigger update style on those eles that had class changes\n    if (changed.length > 0) {\n      this.spawn(changed).updateStyle().emit('class');\n    }\n    return self;\n  },\n  addClass: function addClass(classes) {\n    return this.toggleClass(classes, true);\n  },\n  hasClass: function hasClass(className) {\n    var ele = this[0];\n    return ele != null && ele._private.classes.has(className);\n  },\n  toggleClass: function toggleClass(classes, toggle) {\n    if (!array(classes)) {\n      // extract classes from string\n      classes = classes.match(/\\S+/g) || [];\n    }\n    var self = this;\n    var toggleUndefd = toggle === undefined;\n    var changed = []; // eles who had classes changed\n\n    for (var i = 0, il = self.length; i < il; i++) {\n      var ele = self[i];\n      var eleClasses = ele._private.classes;\n      var changedEle = false;\n      for (var j = 0; j < classes.length; j++) {\n        var cls = classes[j];\n        var hasClass = eleClasses.has(cls);\n        var changedNow = false;\n        if (toggle || toggleUndefd && !hasClass) {\n          eleClasses.add(cls);\n          changedNow = true;\n        } else if (!toggle || toggleUndefd && hasClass) {\n          eleClasses[\"delete\"](cls);\n          changedNow = true;\n        }\n        if (!changedEle && changedNow) {\n          changed.push(ele);\n          changedEle = true;\n        }\n      } // for j classes\n    } // for i eles\n\n    // trigger update style on those eles that had class changes\n    if (changed.length > 0) {\n      this.spawn(changed).updateStyle().emit('class');\n    }\n    return self;\n  },\n  removeClass: function removeClass(classes) {\n    return this.toggleClass(classes, false);\n  },\n  flashClass: function flashClass(classes, duration) {\n    var self = this;\n    if (duration == null) {\n      duration = 250;\n    } else if (duration === 0) {\n      return self; // nothing to do really\n    }\n\n    self.addClass(classes);\n    setTimeout(function () {\n      self.removeClass(classes);\n    }, duration);\n    return self;\n  }\n};\nelesfn$h.className = elesfn$h.classNames = elesfn$h.classes;\n\n// tokens in the query language\nvar tokens = {\n  metaChar: '[\\\\!\\\\\"\\\\#\\\\$\\\\%\\\\&\\\\\\'\\\\(\\\\)\\\\*\\\\+\\\\,\\\\.\\\\/\\\\:\\\\;\\\\<\\\\=\\\\>\\\\?\\\\@\\\\[\\\\]\\\\^\\\\`\\\\{\\\\|\\\\}\\\\~]',\n  // chars we need to escape in let names, etc\n  comparatorOp: '=|\\\\!=|>|>=|<|<=|\\\\$=|\\\\^=|\\\\*=',\n  // binary comparison op (used in data selectors)\n  boolOp: '\\\\?|\\\\!|\\\\^',\n  // boolean (unary) operators (used in data selectors)\n  string: '\"(?:\\\\\\\\\"|[^\"])*\"' + '|' + \"'(?:\\\\\\\\'|[^'])*'\",\n  // string literals (used in data selectors) -- doublequotes | singlequotes\n  number: number,\n  // number literal (used in data selectors) --- e.g. 0.1234, 1234, 12e123\n  meta: 'degree|indegree|outdegree',\n  // allowed metadata fields (i.e. allowed functions to use from Collection)\n  separator: '\\\\s*,\\\\s*',\n  // queries are separated by commas, e.g. edge[foo = 'bar'], node.someClass\n  descendant: '\\\\s+',\n  child: '\\\\s+>\\\\s+',\n  subject: '\\\\$',\n  group: 'node|edge|\\\\*',\n  directedEdge: '\\\\s+->\\\\s+',\n  undirectedEdge: '\\\\s+<->\\\\s+'\n};\ntokens.variable = '(?:[\\\\w-.]|(?:\\\\\\\\' + tokens.metaChar + '))+'; // a variable name can have letters, numbers, dashes, and periods\ntokens.className = '(?:[\\\\w-]|(?:\\\\\\\\' + tokens.metaChar + '))+'; // a class name has the same rules as a variable except it can't have a '.' in the name\ntokens.value = tokens.string + '|' + tokens.number; // a value literal, either a string or number\ntokens.id = tokens.variable; // an element id (follows variable conventions)\n\n(function () {\n  var ops, op, i;\n\n  // add @ variants to comparatorOp\n  ops = tokens.comparatorOp.split('|');\n  for (i = 0; i < ops.length; i++) {\n    op = ops[i];\n    tokens.comparatorOp += '|@' + op;\n  }\n\n  // add ! variants to comparatorOp\n  ops = tokens.comparatorOp.split('|');\n  for (i = 0; i < ops.length; i++) {\n    op = ops[i];\n    if (op.indexOf('!') >= 0) {\n      continue;\n    } // skip ops that explicitly contain !\n    if (op === '=') {\n      continue;\n    } // skip = b/c != is explicitly defined\n\n    tokens.comparatorOp += '|\\\\!' + op;\n  }\n})();\n\n/**\n * Make a new query object\n *\n * @prop type {Type} The type enum (int) of the query\n * @prop checks List of checks to make against an ele to test for a match\n */\nvar newQuery = function newQuery() {\n  return {\n    checks: []\n  };\n};\n\n/**\n * A check type enum-like object.  Uses integer values for fast match() lookup.\n * The ordering does not matter as long as the ints are unique.\n */\nvar Type = {\n  /** E.g. node */\n  GROUP: 0,\n  /** A collection of elements */\n  COLLECTION: 1,\n  /** A filter(ele) function */\n  FILTER: 2,\n  /** E.g. [foo > 1] */\n  DATA_COMPARE: 3,\n  /** E.g. [foo] */\n  DATA_EXIST: 4,\n  /** E.g. [?foo] */\n  DATA_BOOL: 5,\n  /** E.g. [[degree > 2]] */\n  META_COMPARE: 6,\n  /** E.g. :selected */\n  STATE: 7,\n  /** E.g. #foo */\n  ID: 8,\n  /** E.g. .foo */\n  CLASS: 9,\n  /** E.g. #foo <-> #bar */\n  UNDIRECTED_EDGE: 10,\n  /** E.g. #foo -> #bar */\n  DIRECTED_EDGE: 11,\n  /** E.g. $#foo -> #bar */\n  NODE_SOURCE: 12,\n  /** E.g. #foo -> $#bar */\n  NODE_TARGET: 13,\n  /** E.g. $#foo <-> #bar */\n  NODE_NEIGHBOR: 14,\n  /** E.g. #foo > #bar */\n  CHILD: 15,\n  /** E.g. #foo #bar */\n  DESCENDANT: 16,\n  /** E.g. $#foo > #bar */\n  PARENT: 17,\n  /** E.g. $#foo #bar */\n  ANCESTOR: 18,\n  /** E.g. #foo > $bar > #baz */\n  COMPOUND_SPLIT: 19,\n  /** Always matches, useful placeholder for subject in `COMPOUND_SPLIT` */\n  TRUE: 20\n};\n\nvar stateSelectors = [{\n  selector: ':selected',\n  matches: function matches(ele) {\n    return ele.selected();\n  }\n}, {\n  selector: ':unselected',\n  matches: function matches(ele) {\n    return !ele.selected();\n  }\n}, {\n  selector: ':selectable',\n  matches: function matches(ele) {\n    return ele.selectable();\n  }\n}, {\n  selector: ':unselectable',\n  matches: function matches(ele) {\n    return !ele.selectable();\n  }\n}, {\n  selector: ':locked',\n  matches: function matches(ele) {\n    return ele.locked();\n  }\n}, {\n  selector: ':unlocked',\n  matches: function matches(ele) {\n    return !ele.locked();\n  }\n}, {\n  selector: ':visible',\n  matches: function matches(ele) {\n    return ele.visible();\n  }\n}, {\n  selector: ':hidden',\n  matches: function matches(ele) {\n    return !ele.visible();\n  }\n}, {\n  selector: ':transparent',\n  matches: function matches(ele) {\n    return ele.transparent();\n  }\n}, {\n  selector: ':grabbed',\n  matches: function matches(ele) {\n    return ele.grabbed();\n  }\n}, {\n  selector: ':free',\n  matches: function matches(ele) {\n    return !ele.grabbed();\n  }\n}, {\n  selector: ':removed',\n  matches: function matches(ele) {\n    return ele.removed();\n  }\n}, {\n  selector: ':inside',\n  matches: function matches(ele) {\n    return !ele.removed();\n  }\n}, {\n  selector: ':grabbable',\n  matches: function matches(ele) {\n    return ele.grabbable();\n  }\n}, {\n  selector: ':ungrabbable',\n  matches: function matches(ele) {\n    return !ele.grabbable();\n  }\n}, {\n  selector: ':animated',\n  matches: function matches(ele) {\n    return ele.animated();\n  }\n}, {\n  selector: ':unanimated',\n  matches: function matches(ele) {\n    return !ele.animated();\n  }\n}, {\n  selector: ':parent',\n  matches: function matches(ele) {\n    return ele.isParent();\n  }\n}, {\n  selector: ':childless',\n  matches: function matches(ele) {\n    return ele.isChildless();\n  }\n}, {\n  selector: ':child',\n  matches: function matches(ele) {\n    return ele.isChild();\n  }\n}, {\n  selector: ':orphan',\n  matches: function matches(ele) {\n    return ele.isOrphan();\n  }\n}, {\n  selector: ':nonorphan',\n  matches: function matches(ele) {\n    return ele.isChild();\n  }\n}, {\n  selector: ':compound',\n  matches: function matches(ele) {\n    if (ele.isNode()) {\n      return ele.isParent();\n    } else {\n      return ele.source().isParent() || ele.target().isParent();\n    }\n  }\n}, {\n  selector: ':loop',\n  matches: function matches(ele) {\n    return ele.isLoop();\n  }\n}, {\n  selector: ':simple',\n  matches: function matches(ele) {\n    return ele.isSimple();\n  }\n}, {\n  selector: ':active',\n  matches: function matches(ele) {\n    return ele.active();\n  }\n}, {\n  selector: ':inactive',\n  matches: function matches(ele) {\n    return !ele.active();\n  }\n}, {\n  selector: ':backgrounding',\n  matches: function matches(ele) {\n    return ele.backgrounding();\n  }\n}, {\n  selector: ':nonbackgrounding',\n  matches: function matches(ele) {\n    return !ele.backgrounding();\n  }\n}].sort(function (a, b) {\n  // n.b. selectors that are starting substrings of others must have the longer ones first\n  return descending(a.selector, b.selector);\n});\nvar lookup = function () {\n  var selToFn = {};\n  var s;\n  for (var i = 0; i < stateSelectors.length; i++) {\n    s = stateSelectors[i];\n    selToFn[s.selector] = s.matches;\n  }\n  return selToFn;\n}();\nvar stateSelectorMatches = function stateSelectorMatches(sel, ele) {\n  return lookup[sel](ele);\n};\nvar stateSelectorRegex = '(' + stateSelectors.map(function (s) {\n  return s.selector;\n}).join('|') + ')';\n\n// when a token like a variable has escaped meta characters, we need to clean the backslashes out\n// so that values get compared properly in Selector.filter()\nvar cleanMetaChars = function cleanMetaChars(str) {\n  return str.replace(new RegExp('\\\\\\\\(' + tokens.metaChar + ')', 'g'), function (match, $1) {\n    return $1;\n  });\n};\nvar replaceLastQuery = function replaceLastQuery(selector, examiningQuery, replacementQuery) {\n  selector[selector.length - 1] = replacementQuery;\n};\n\n// NOTE: add new expression syntax here to have it recognised by the parser;\n// - a query contains all adjacent (i.e. no separator in between) expressions;\n// - the current query is stored in selector[i]\n// - you need to check the query objects in match() for it actually filter properly, but that's pretty straight forward\nvar exprs = [{\n  name: 'group',\n  // just used for identifying when debugging\n  query: true,\n  regex: '(' + tokens.group + ')',\n  populate: function populate(selector, query, _ref) {\n    var _ref2 = _slicedToArray(_ref, 1),\n      group = _ref2[0];\n    query.checks.push({\n      type: Type.GROUP,\n      value: group === '*' ? group : group + 's'\n    });\n  }\n}, {\n  name: 'state',\n  query: true,\n  regex: stateSelectorRegex,\n  populate: function populate(selector, query, _ref3) {\n    var _ref4 = _slicedToArray(_ref3, 1),\n      state = _ref4[0];\n    query.checks.push({\n      type: Type.STATE,\n      value: state\n    });\n  }\n}, {\n  name: 'id',\n  query: true,\n  regex: '\\\\#(' + tokens.id + ')',\n  populate: function populate(selector, query, _ref5) {\n    var _ref6 = _slicedToArray(_ref5, 1),\n      id = _ref6[0];\n    query.checks.push({\n      type: Type.ID,\n      value: cleanMetaChars(id)\n    });\n  }\n}, {\n  name: 'className',\n  query: true,\n  regex: '\\\\.(' + tokens.className + ')',\n  populate: function populate(selector, query, _ref7) {\n    var _ref8 = _slicedToArray(_ref7, 1),\n      className = _ref8[0];\n    query.checks.push({\n      type: Type.CLASS,\n      value: cleanMetaChars(className)\n    });\n  }\n}, {\n  name: 'dataExists',\n  query: true,\n  regex: '\\\\[\\\\s*(' + tokens.variable + ')\\\\s*\\\\]',\n  populate: function populate(selector, query, _ref9) {\n    var _ref10 = _slicedToArray(_ref9, 1),\n      variable = _ref10[0];\n    query.checks.push({\n      type: Type.DATA_EXIST,\n      field: cleanMetaChars(variable)\n    });\n  }\n}, {\n  name: 'dataCompare',\n  query: true,\n  regex: '\\\\[\\\\s*(' + tokens.variable + ')\\\\s*(' + tokens.comparatorOp + ')\\\\s*(' + tokens.value + ')\\\\s*\\\\]',\n  populate: function populate(selector, query, _ref11) {\n    var _ref12 = _slicedToArray(_ref11, 3),\n      variable = _ref12[0],\n      comparatorOp = _ref12[1],\n      value = _ref12[2];\n    var valueIsString = new RegExp('^' + tokens.string + '$').exec(value) != null;\n    if (valueIsString) {\n      value = value.substring(1, value.length - 1);\n    } else {\n      value = parseFloat(value);\n    }\n    query.checks.push({\n      type: Type.DATA_COMPARE,\n      field: cleanMetaChars(variable),\n      operator: comparatorOp,\n      value: value\n    });\n  }\n}, {\n  name: 'dataBool',\n  query: true,\n  regex: '\\\\[\\\\s*(' + tokens.boolOp + ')\\\\s*(' + tokens.variable + ')\\\\s*\\\\]',\n  populate: function populate(selector, query, _ref13) {\n    var _ref14 = _slicedToArray(_ref13, 2),\n      boolOp = _ref14[0],\n      variable = _ref14[1];\n    query.checks.push({\n      type: Type.DATA_BOOL,\n      field: cleanMetaChars(variable),\n      operator: boolOp\n    });\n  }\n}, {\n  name: 'metaCompare',\n  query: true,\n  regex: '\\\\[\\\\[\\\\s*(' + tokens.meta + ')\\\\s*(' + tokens.comparatorOp + ')\\\\s*(' + tokens.number + ')\\\\s*\\\\]\\\\]',\n  populate: function populate(selector, query, _ref15) {\n    var _ref16 = _slicedToArray(_ref15, 3),\n      meta = _ref16[0],\n      comparatorOp = _ref16[1],\n      number = _ref16[2];\n    query.checks.push({\n      type: Type.META_COMPARE,\n      field: cleanMetaChars(meta),\n      operator: comparatorOp,\n      value: parseFloat(number)\n    });\n  }\n}, {\n  name: 'nextQuery',\n  separator: true,\n  regex: tokens.separator,\n  populate: function populate(selector, query) {\n    var currentSubject = selector.currentSubject;\n    var edgeCount = selector.edgeCount;\n    var compoundCount = selector.compoundCount;\n    var lastQ = selector[selector.length - 1];\n    if (currentSubject != null) {\n      lastQ.subject = currentSubject;\n      selector.currentSubject = null;\n    }\n    lastQ.edgeCount = edgeCount;\n    lastQ.compoundCount = compoundCount;\n    selector.edgeCount = 0;\n    selector.compoundCount = 0;\n\n    // go on to next query\n    var nextQuery = selector[selector.length++] = newQuery();\n    return nextQuery; // this is the new query to be filled by the following exprs\n  }\n}, {\n  name: 'directedEdge',\n  separator: true,\n  regex: tokens.directedEdge,\n  populate: function populate(selector, query) {\n    if (selector.currentSubject == null) {\n      // undirected edge\n      var edgeQuery = newQuery();\n      var source = query;\n      var target = newQuery();\n      edgeQuery.checks.push({\n        type: Type.DIRECTED_EDGE,\n        source: source,\n        target: target\n      });\n\n      // the query in the selector should be the edge rather than the source\n      replaceLastQuery(selector, query, edgeQuery);\n      selector.edgeCount++;\n\n      // we're now populating the target query with expressions that follow\n      return target;\n    } else {\n      // source/target\n      var srcTgtQ = newQuery();\n      var _source = query;\n      var _target = newQuery();\n      srcTgtQ.checks.push({\n        type: Type.NODE_SOURCE,\n        source: _source,\n        target: _target\n      });\n\n      // the query in the selector should be the neighbourhood rather than the node\n      replaceLastQuery(selector, query, srcTgtQ);\n      selector.edgeCount++;\n      return _target; // now populating the target with the following expressions\n    }\n  }\n}, {\n  name: 'undirectedEdge',\n  separator: true,\n  regex: tokens.undirectedEdge,\n  populate: function populate(selector, query) {\n    if (selector.currentSubject == null) {\n      // undirected edge\n      var edgeQuery = newQuery();\n      var source = query;\n      var target = newQuery();\n      edgeQuery.checks.push({\n        type: Type.UNDIRECTED_EDGE,\n        nodes: [source, target]\n      });\n\n      // the query in the selector should be the edge rather than the source\n      replaceLastQuery(selector, query, edgeQuery);\n      selector.edgeCount++;\n\n      // we're now populating the target query with expressions that follow\n      return target;\n    } else {\n      // neighbourhood\n      var nhoodQ = newQuery();\n      var node = query;\n      var neighbor = newQuery();\n      nhoodQ.checks.push({\n        type: Type.NODE_NEIGHBOR,\n        node: node,\n        neighbor: neighbor\n      });\n\n      // the query in the selector should be the neighbourhood rather than the node\n      replaceLastQuery(selector, query, nhoodQ);\n      return neighbor; // now populating the neighbor with following expressions\n    }\n  }\n}, {\n  name: 'child',\n  separator: true,\n  regex: tokens.child,\n  populate: function populate(selector, query) {\n    if (selector.currentSubject == null) {\n      // default: child query\n      var parentChildQuery = newQuery();\n      var child = newQuery();\n      var parent = selector[selector.length - 1];\n      parentChildQuery.checks.push({\n        type: Type.CHILD,\n        parent: parent,\n        child: child\n      });\n\n      // the query in the selector should be the '>' itself\n      replaceLastQuery(selector, query, parentChildQuery);\n      selector.compoundCount++;\n\n      // we're now populating the child query with expressions that follow\n      return child;\n    } else if (selector.currentSubject === query) {\n      // compound split query\n      var compound = newQuery();\n      var left = selector[selector.length - 1];\n      var right = newQuery();\n      var subject = newQuery();\n      var _child = newQuery();\n      var _parent = newQuery();\n\n      // set up the root compound q\n      compound.checks.push({\n        type: Type.COMPOUND_SPLIT,\n        left: left,\n        right: right,\n        subject: subject\n      });\n\n      // populate the subject and replace the q at the old spot (within left) with TRUE\n      subject.checks = query.checks; // take the checks from the left\n      query.checks = [{\n        type: Type.TRUE\n      }]; // checks under left refs the subject implicitly\n\n      // set up the right q\n      _parent.checks.push({\n        type: Type.TRUE\n      }); // parent implicitly refs the subject\n      right.checks.push({\n        type: Type.PARENT,\n        // type is swapped on right side queries\n        parent: _parent,\n        child: _child // empty for now\n      });\n\n      replaceLastQuery(selector, left, compound);\n\n      // update the ref since we moved things around for `query`\n      selector.currentSubject = subject;\n      selector.compoundCount++;\n      return _child; // now populating the right side's child\n    } else {\n      // parent query\n      // info for parent query\n      var _parent2 = newQuery();\n      var _child2 = newQuery();\n      var pcQChecks = [{\n        type: Type.PARENT,\n        parent: _parent2,\n        child: _child2\n      }];\n\n      // the parent-child query takes the place of the query previously being populated\n      _parent2.checks = query.checks; // the previous query contains the checks for the parent\n      query.checks = pcQChecks; // pc query takes over\n\n      selector.compoundCount++;\n      return _child2; // we're now populating the child\n    }\n  }\n}, {\n  name: 'descendant',\n  separator: true,\n  regex: tokens.descendant,\n  populate: function populate(selector, query) {\n    if (selector.currentSubject == null) {\n      // default: descendant query\n      var ancChQuery = newQuery();\n      var descendant = newQuery();\n      var ancestor = selector[selector.length - 1];\n      ancChQuery.checks.push({\n        type: Type.DESCENDANT,\n        ancestor: ancestor,\n        descendant: descendant\n      });\n\n      // the query in the selector should be the '>' itself\n      replaceLastQuery(selector, query, ancChQuery);\n      selector.compoundCount++;\n\n      // we're now populating the descendant query with expressions that follow\n      return descendant;\n    } else if (selector.currentSubject === query) {\n      // compound split query\n      var compound = newQuery();\n      var left = selector[selector.length - 1];\n      var right = newQuery();\n      var subject = newQuery();\n      var _descendant = newQuery();\n      var _ancestor = newQuery();\n\n      // set up the root compound q\n      compound.checks.push({\n        type: Type.COMPOUND_SPLIT,\n        left: left,\n        right: right,\n        subject: subject\n      });\n\n      // populate the subject and replace the q at the old spot (within left) with TRUE\n      subject.checks = query.checks; // take the checks from the left\n      query.checks = [{\n        type: Type.TRUE\n      }]; // checks under left refs the subject implicitly\n\n      // set up the right q\n      _ancestor.checks.push({\n        type: Type.TRUE\n      }); // ancestor implicitly refs the subject\n      right.checks.push({\n        type: Type.ANCESTOR,\n        // type is swapped on right side queries\n        ancestor: _ancestor,\n        descendant: _descendant // empty for now\n      });\n\n      replaceLastQuery(selector, left, compound);\n\n      // update the ref since we moved things around for `query`\n      selector.currentSubject = subject;\n      selector.compoundCount++;\n      return _descendant; // now populating the right side's descendant\n    } else {\n      // ancestor query\n      // info for parent query\n      var _ancestor2 = newQuery();\n      var _descendant2 = newQuery();\n      var adQChecks = [{\n        type: Type.ANCESTOR,\n        ancestor: _ancestor2,\n        descendant: _descendant2\n      }];\n\n      // the parent-child query takes the place of the query previously being populated\n      _ancestor2.checks = query.checks; // the previous query contains the checks for the parent\n      query.checks = adQChecks; // pc query takes over\n\n      selector.compoundCount++;\n      return _descendant2; // we're now populating the child\n    }\n  }\n}, {\n  name: 'subject',\n  modifier: true,\n  regex: tokens.subject,\n  populate: function populate(selector, query) {\n    if (selector.currentSubject != null && selector.currentSubject !== query) {\n      warn('Redefinition of subject in selector `' + selector.toString() + '`');\n      return false;\n    }\n    selector.currentSubject = query;\n    var topQ = selector[selector.length - 1];\n    var topChk = topQ.checks[0];\n    var topType = topChk == null ? null : topChk.type;\n    if (topType === Type.DIRECTED_EDGE) {\n      // directed edge with subject on the target\n\n      // change to target node check\n      topChk.type = Type.NODE_TARGET;\n    } else if (topType === Type.UNDIRECTED_EDGE) {\n      // undirected edge with subject on the second node\n\n      // change to neighbor check\n      topChk.type = Type.NODE_NEIGHBOR;\n      topChk.node = topChk.nodes[1]; // second node is subject\n      topChk.neighbor = topChk.nodes[0];\n\n      // clean up unused fields for new type\n      topChk.nodes = null;\n    }\n  }\n}];\nexprs.forEach(function (e) {\n  return e.regexObj = new RegExp('^' + e.regex);\n});\n\n/**\n * Of all the expressions, find the first match in the remaining text.\n * @param {string} remaining The remaining text to parse\n * @returns The matched expression and the newly remaining text `{ expr, match, name, remaining }`\n */\nvar consumeExpr = function consumeExpr(remaining) {\n  var expr;\n  var match;\n  var name;\n  for (var j = 0; j < exprs.length; j++) {\n    var e = exprs[j];\n    var n = e.name;\n    var m = remaining.match(e.regexObj);\n    if (m != null) {\n      match = m;\n      expr = e;\n      name = n;\n      var consumed = m[0];\n      remaining = remaining.substring(consumed.length);\n      break; // we've consumed one expr, so we can return now\n    }\n  }\n\n  return {\n    expr: expr,\n    match: match,\n    name: name,\n    remaining: remaining\n  };\n};\n\n/**\n * Consume all the leading whitespace\n * @param {string} remaining The text to consume\n * @returns The text with the leading whitespace removed\n */\nvar consumeWhitespace = function consumeWhitespace(remaining) {\n  var match = remaining.match(/^\\s+/);\n  if (match) {\n    var consumed = match[0];\n    remaining = remaining.substring(consumed.length);\n  }\n  return remaining;\n};\n\n/**\n * Parse the string and store the parsed representation in the Selector.\n * @param {string} selector The selector string\n * @returns `true` if the selector was successfully parsed, `false` otherwise\n */\nvar parse = function parse(selector) {\n  var self = this;\n  var remaining = self.inputText = selector;\n  var currentQuery = self[0] = newQuery();\n  self.length = 1;\n  remaining = consumeWhitespace(remaining); // get rid of leading whitespace\n\n  for (;;) {\n    var exprInfo = consumeExpr(remaining);\n    if (exprInfo.expr == null) {\n      warn('The selector `' + selector + '`is invalid');\n      return false;\n    } else {\n      var args = exprInfo.match.slice(1);\n\n      // let the token populate the selector object in currentQuery\n      var ret = exprInfo.expr.populate(self, currentQuery, args);\n      if (ret === false) {\n        return false; // exit if population failed\n      } else if (ret != null) {\n        currentQuery = ret; // change the current query to be filled if the expr specifies\n      }\n    }\n\n    remaining = exprInfo.remaining;\n\n    // we're done when there's nothing left to parse\n    if (remaining.match(/^\\s*$/)) {\n      break;\n    }\n  }\n  var lastQ = self[self.length - 1];\n  if (self.currentSubject != null) {\n    lastQ.subject = self.currentSubject;\n  }\n  lastQ.edgeCount = self.edgeCount;\n  lastQ.compoundCount = self.compoundCount;\n  for (var i = 0; i < self.length; i++) {\n    var q = self[i];\n\n    // in future, this could potentially be allowed if there were operator precedence and detection of invalid combinations\n    if (q.compoundCount > 0 && q.edgeCount > 0) {\n      warn('The selector `' + selector + '` is invalid because it uses both a compound selector and an edge selector');\n      return false;\n    }\n    if (q.edgeCount > 1) {\n      warn('The selector `' + selector + '` is invalid because it uses multiple edge selectors');\n      return false;\n    } else if (q.edgeCount === 1) {\n      warn('The selector `' + selector + '` is deprecated.  Edge selectors do not take effect on changes to source and target nodes after an edge is added, for performance reasons.  Use a class or data selector on edges instead, updating the class or data of an edge when your app detects a change in source or target nodes.');\n    }\n  }\n  return true; // success\n};\n\n/**\n * Get the selector represented as a string.  This value uses default formatting,\n * so things like spacing may differ from the input text passed to the constructor.\n * @returns {string} The selector string\n */\nvar toString = function toString() {\n  if (this.toStringCache != null) {\n    return this.toStringCache;\n  }\n  var clean = function clean(obj) {\n    if (obj == null) {\n      return '';\n    } else {\n      return obj;\n    }\n  };\n  var cleanVal = function cleanVal(val) {\n    if (string(val)) {\n      return '\"' + val + '\"';\n    } else {\n      return clean(val);\n    }\n  };\n  var space = function space(val) {\n    return ' ' + val + ' ';\n  };\n  var checkToString = function checkToString(check, subject) {\n    var type = check.type,\n      value = check.value;\n    switch (type) {\n      case Type.GROUP:\n        {\n          var group = clean(value);\n          return group.substring(0, group.length - 1);\n        }\n      case Type.DATA_COMPARE:\n        {\n          var field = check.field,\n            operator = check.operator;\n          return '[' + field + space(clean(operator)) + cleanVal(value) + ']';\n        }\n      case Type.DATA_BOOL:\n        {\n          var _operator = check.operator,\n            _field = check.field;\n          return '[' + clean(_operator) + _field + ']';\n        }\n      case Type.DATA_EXIST:\n        {\n          var _field2 = check.field;\n          return '[' + _field2 + ']';\n        }\n      case Type.META_COMPARE:\n        {\n          var _operator2 = check.operator,\n            _field3 = check.field;\n          return '[[' + _field3 + space(clean(_operator2)) + cleanVal(value) + ']]';\n        }\n      case Type.STATE:\n        {\n          return value;\n        }\n      case Type.ID:\n        {\n          return '#' + value;\n        }\n      case Type.CLASS:\n        {\n          return '.' + value;\n        }\n      case Type.PARENT:\n      case Type.CHILD:\n        {\n          return queryToString(check.parent, subject) + space('>') + queryToString(check.child, subject);\n        }\n      case Type.ANCESTOR:\n      case Type.DESCENDANT:\n        {\n          return queryToString(check.ancestor, subject) + ' ' + queryToString(check.descendant, subject);\n        }\n      case Type.COMPOUND_SPLIT:\n        {\n          var lhs = queryToString(check.left, subject);\n          var sub = queryToString(check.subject, subject);\n          var rhs = queryToString(check.right, subject);\n          return lhs + (lhs.length > 0 ? ' ' : '') + sub + rhs;\n        }\n      case Type.TRUE:\n        {\n          return '';\n        }\n    }\n  };\n  var queryToString = function queryToString(query, subject) {\n    return query.checks.reduce(function (str, chk, i) {\n      return str + (subject === query && i === 0 ? '$' : '') + checkToString(chk, subject);\n    }, '');\n  };\n  var str = '';\n  for (var i = 0; i < this.length; i++) {\n    var query = this[i];\n    str += queryToString(query, query.subject);\n    if (this.length > 1 && i < this.length - 1) {\n      str += ', ';\n    }\n  }\n  this.toStringCache = str;\n  return str;\n};\nvar parse$1 = {\n  parse: parse,\n  toString: toString\n};\n\nvar valCmp = function valCmp(fieldVal, operator, value) {\n  var matches;\n  var isFieldStr = string(fieldVal);\n  var isFieldNum = number$1(fieldVal);\n  var isValStr = string(value);\n  var fieldStr, valStr;\n  var caseInsensitive = false;\n  var notExpr = false;\n  var isIneqCmp = false;\n  if (operator.indexOf('!') >= 0) {\n    operator = operator.replace('!', '');\n    notExpr = true;\n  }\n  if (operator.indexOf('@') >= 0) {\n    operator = operator.replace('@', '');\n    caseInsensitive = true;\n  }\n  if (isFieldStr || isValStr || caseInsensitive) {\n    fieldStr = !isFieldStr && !isFieldNum ? '' : '' + fieldVal;\n    valStr = '' + value;\n  }\n\n  // if we're doing a case insensitive comparison, then we're using a STRING comparison\n  // even if we're comparing numbers\n  if (caseInsensitive) {\n    fieldVal = fieldStr = fieldStr.toLowerCase();\n    value = valStr = valStr.toLowerCase();\n  }\n  switch (operator) {\n    case '*=':\n      matches = fieldStr.indexOf(valStr) >= 0;\n      break;\n    case '$=':\n      matches = fieldStr.indexOf(valStr, fieldStr.length - valStr.length) >= 0;\n      break;\n    case '^=':\n      matches = fieldStr.indexOf(valStr) === 0;\n      break;\n    case '=':\n      matches = fieldVal === value;\n      break;\n    case '>':\n      isIneqCmp = true;\n      matches = fieldVal > value;\n      break;\n    case '>=':\n      isIneqCmp = true;\n      matches = fieldVal >= value;\n      break;\n    case '<':\n      isIneqCmp = true;\n      matches = fieldVal < value;\n      break;\n    case '<=':\n      isIneqCmp = true;\n      matches = fieldVal <= value;\n      break;\n    default:\n      matches = false;\n      break;\n  }\n\n  // apply the not op, but null vals for inequalities should always stay non-matching\n  if (notExpr && (fieldVal != null || !isIneqCmp)) {\n    matches = !matches;\n  }\n  return matches;\n};\nvar boolCmp = function boolCmp(fieldVal, operator) {\n  switch (operator) {\n    case '?':\n      return fieldVal ? true : false;\n    case '!':\n      return fieldVal ? false : true;\n    case '^':\n      return fieldVal === undefined;\n  }\n};\nvar existCmp = function existCmp(fieldVal) {\n  return fieldVal !== undefined;\n};\nvar data$1 = function data(ele, field) {\n  return ele.data(field);\n};\nvar meta = function meta(ele, field) {\n  return ele[field]();\n};\n\n/** A lookup of `match(check, ele)` functions by `Type` int */\nvar match = [];\n\n/**\n * Returns whether the query matches for the element\n * @param query The `{ type, value, ... }` query object\n * @param ele The element to compare against\n*/\nvar matches$1 = function matches(query, ele) {\n  return query.checks.every(function (chk) {\n    return match[chk.type](chk, ele);\n  });\n};\nmatch[Type.GROUP] = function (check, ele) {\n  var group = check.value;\n  return group === '*' || group === ele.group();\n};\nmatch[Type.STATE] = function (check, ele) {\n  var stateSelector = check.value;\n  return stateSelectorMatches(stateSelector, ele);\n};\nmatch[Type.ID] = function (check, ele) {\n  var id = check.value;\n  return ele.id() === id;\n};\nmatch[Type.CLASS] = function (check, ele) {\n  var cls = check.value;\n  return ele.hasClass(cls);\n};\nmatch[Type.META_COMPARE] = function (check, ele) {\n  var field = check.field,\n    operator = check.operator,\n    value = check.value;\n  return valCmp(meta(ele, field), operator, value);\n};\nmatch[Type.DATA_COMPARE] = function (check, ele) {\n  var field = check.field,\n    operator = check.operator,\n    value = check.value;\n  return valCmp(data$1(ele, field), operator, value);\n};\nmatch[Type.DATA_BOOL] = function (check, ele) {\n  var field = check.field,\n    operator = check.operator;\n  return boolCmp(data$1(ele, field), operator);\n};\nmatch[Type.DATA_EXIST] = function (check, ele) {\n  var field = check.field;\n    check.operator;\n  return existCmp(data$1(ele, field));\n};\nmatch[Type.UNDIRECTED_EDGE] = function (check, ele) {\n  var qA = check.nodes[0];\n  var qB = check.nodes[1];\n  var src = ele.source();\n  var tgt = ele.target();\n  return matches$1(qA, src) && matches$1(qB, tgt) || matches$1(qB, src) && matches$1(qA, tgt);\n};\nmatch[Type.NODE_NEIGHBOR] = function (check, ele) {\n  return matches$1(check.node, ele) && ele.neighborhood().some(function (n) {\n    return n.isNode() && matches$1(check.neighbor, n);\n  });\n};\nmatch[Type.DIRECTED_EDGE] = function (check, ele) {\n  return matches$1(check.source, ele.source()) && matches$1(check.target, ele.target());\n};\nmatch[Type.NODE_SOURCE] = function (check, ele) {\n  return matches$1(check.source, ele) && ele.outgoers().some(function (n) {\n    return n.isNode() && matches$1(check.target, n);\n  });\n};\nmatch[Type.NODE_TARGET] = function (check, ele) {\n  return matches$1(check.target, ele) && ele.incomers().some(function (n) {\n    return n.isNode() && matches$1(check.source, n);\n  });\n};\nmatch[Type.CHILD] = function (check, ele) {\n  return matches$1(check.child, ele) && matches$1(check.parent, ele.parent());\n};\nmatch[Type.PARENT] = function (check, ele) {\n  return matches$1(check.parent, ele) && ele.children().some(function (c) {\n    return matches$1(check.child, c);\n  });\n};\nmatch[Type.DESCENDANT] = function (check, ele) {\n  return matches$1(check.descendant, ele) && ele.ancestors().some(function (a) {\n    return matches$1(check.ancestor, a);\n  });\n};\nmatch[Type.ANCESTOR] = function (check, ele) {\n  return matches$1(check.ancestor, ele) && ele.descendants().some(function (d) {\n    return matches$1(check.descendant, d);\n  });\n};\nmatch[Type.COMPOUND_SPLIT] = function (check, ele) {\n  return matches$1(check.subject, ele) && matches$1(check.left, ele) && matches$1(check.right, ele);\n};\nmatch[Type.TRUE] = function () {\n  return true;\n};\nmatch[Type.COLLECTION] = function (check, ele) {\n  var collection = check.value;\n  return collection.has(ele);\n};\nmatch[Type.FILTER] = function (check, ele) {\n  var filter = check.value;\n  return filter(ele);\n};\n\n// filter an existing collection\nvar filter = function filter(collection) {\n  var self = this;\n\n  // for 1 id #foo queries, just get the element\n  if (self.length === 1 && self[0].checks.length === 1 && self[0].checks[0].type === Type.ID) {\n    return collection.getElementById(self[0].checks[0].value).collection();\n  }\n  var selectorFunction = function selectorFunction(element) {\n    for (var j = 0; j < self.length; j++) {\n      var query = self[j];\n      if (matches$1(query, element)) {\n        return true;\n      }\n    }\n    return false;\n  };\n  if (self.text() == null) {\n    selectorFunction = function selectorFunction() {\n      return true;\n    };\n  }\n  return collection.filter(selectorFunction);\n}; // filter\n\n// does selector match a single element?\nvar matches = function matches(ele) {\n  var self = this;\n  for (var j = 0; j < self.length; j++) {\n    var query = self[j];\n    if (matches$1(query, ele)) {\n      return true;\n    }\n  }\n  return false;\n}; // matches\n\nvar matching = {\n  matches: matches,\n  filter: filter\n};\n\nvar Selector = function Selector(selector) {\n  this.inputText = selector;\n  this.currentSubject = null;\n  this.compoundCount = 0;\n  this.edgeCount = 0;\n  this.length = 0;\n  if (selector == null || string(selector) && selector.match(/^\\s*$/)) ; else if (elementOrCollection(selector)) {\n    this.addQuery({\n      checks: [{\n        type: Type.COLLECTION,\n        value: selector.collection()\n      }]\n    });\n  } else if (fn$6(selector)) {\n    this.addQuery({\n      checks: [{\n        type: Type.FILTER,\n        value: selector\n      }]\n    });\n  } else if (string(selector)) {\n    if (!this.parse(selector)) {\n      this.invalid = true;\n    }\n  } else {\n    error('A selector must be created from a string; found ');\n  }\n};\nvar selfn = Selector.prototype;\n[parse$1, matching].forEach(function (p) {\n  return extend(selfn, p);\n});\nselfn.text = function () {\n  return this.inputText;\n};\nselfn.size = function () {\n  return this.length;\n};\nselfn.eq = function (i) {\n  return this[i];\n};\nselfn.sameText = function (otherSel) {\n  return !this.invalid && !otherSel.invalid && this.text() === otherSel.text();\n};\nselfn.addQuery = function (q) {\n  this[this.length++] = q;\n};\nselfn.selector = selfn.toString;\n\nvar elesfn$g = {\n  allAre: function allAre(selector) {\n    var selObj = new Selector(selector);\n    return this.every(function (ele) {\n      return selObj.matches(ele);\n    });\n  },\n  is: function is(selector) {\n    var selObj = new Selector(selector);\n    return this.some(function (ele) {\n      return selObj.matches(ele);\n    });\n  },\n  some: function some(fn, thisArg) {\n    for (var i = 0; i < this.length; i++) {\n      var ret = !thisArg ? fn(this[i], i, this) : fn.apply(thisArg, [this[i], i, this]);\n      if (ret) {\n        return true;\n      }\n    }\n    return false;\n  },\n  every: function every(fn, thisArg) {\n    for (var i = 0; i < this.length; i++) {\n      var ret = !thisArg ? fn(this[i], i, this) : fn.apply(thisArg, [this[i], i, this]);\n      if (!ret) {\n        return false;\n      }\n    }\n    return true;\n  },\n  same: function same(collection) {\n    // cheap collection ref check\n    if (this === collection) {\n      return true;\n    }\n    collection = this.cy().collection(collection);\n    var thisLength = this.length;\n    var collectionLength = collection.length;\n\n    // cheap length check\n    if (thisLength !== collectionLength) {\n      return false;\n    }\n\n    // cheap element ref check\n    if (thisLength === 1) {\n      return this[0] === collection[0];\n    }\n    return this.every(function (ele) {\n      return collection.hasElementWithId(ele.id());\n    });\n  },\n  anySame: function anySame(collection) {\n    collection = this.cy().collection(collection);\n    return this.some(function (ele) {\n      return collection.hasElementWithId(ele.id());\n    });\n  },\n  allAreNeighbors: function allAreNeighbors(collection) {\n    collection = this.cy().collection(collection);\n    var nhood = this.neighborhood();\n    return collection.every(function (ele) {\n      return nhood.hasElementWithId(ele.id());\n    });\n  },\n  contains: function contains(collection) {\n    collection = this.cy().collection(collection);\n    var self = this;\n    return collection.every(function (ele) {\n      return self.hasElementWithId(ele.id());\n    });\n  }\n};\nelesfn$g.allAreNeighbours = elesfn$g.allAreNeighbors;\nelesfn$g.has = elesfn$g.contains;\nelesfn$g.equal = elesfn$g.equals = elesfn$g.same;\n\nvar cache = function cache(fn, name) {\n  return function traversalCache(arg1, arg2, arg3, arg4) {\n    var selectorOrEles = arg1;\n    var eles = this;\n    var key;\n    if (selectorOrEles == null) {\n      key = '';\n    } else if (elementOrCollection(selectorOrEles) && selectorOrEles.length === 1) {\n      key = selectorOrEles.id();\n    }\n    if (eles.length === 1 && key) {\n      var _p = eles[0]._private;\n      var tch = _p.traversalCache = _p.traversalCache || {};\n      var ch = tch[name] = tch[name] || [];\n      var hash = hashString(key);\n      var cacheHit = ch[hash];\n      if (cacheHit) {\n        return cacheHit;\n      } else {\n        return ch[hash] = fn.call(eles, arg1, arg2, arg3, arg4);\n      }\n    } else {\n      return fn.call(eles, arg1, arg2, arg3, arg4);\n    }\n  };\n};\n\nvar elesfn$f = {\n  parent: function parent(selector) {\n    var parents = [];\n\n    // optimisation for single ele call\n    if (this.length === 1) {\n      var parent = this[0]._private.parent;\n      if (parent) {\n        return parent;\n      }\n    }\n    for (var i = 0; i < this.length; i++) {\n      var ele = this[i];\n      var _parent = ele._private.parent;\n      if (_parent) {\n        parents.push(_parent);\n      }\n    }\n    return this.spawn(parents, true).filter(selector);\n  },\n  parents: function parents(selector) {\n    var parents = [];\n    var eles = this.parent();\n    while (eles.nonempty()) {\n      for (var i = 0; i < eles.length; i++) {\n        var ele = eles[i];\n        parents.push(ele);\n      }\n      eles = eles.parent();\n    }\n    return this.spawn(parents, true).filter(selector);\n  },\n  commonAncestors: function commonAncestors(selector) {\n    var ancestors;\n    for (var i = 0; i < this.length; i++) {\n      var ele = this[i];\n      var parents = ele.parents();\n      ancestors = ancestors || parents;\n      ancestors = ancestors.intersect(parents); // current list must be common with current ele parents set\n    }\n\n    return ancestors.filter(selector);\n  },\n  orphans: function orphans(selector) {\n    return this.stdFilter(function (ele) {\n      return ele.isOrphan();\n    }).filter(selector);\n  },\n  nonorphans: function nonorphans(selector) {\n    return this.stdFilter(function (ele) {\n      return ele.isChild();\n    }).filter(selector);\n  },\n  children: cache(function (selector) {\n    var children = [];\n    for (var i = 0; i < this.length; i++) {\n      var ele = this[i];\n      var eleChildren = ele._private.children;\n      for (var j = 0; j < eleChildren.length; j++) {\n        children.push(eleChildren[j]);\n      }\n    }\n    return this.spawn(children, true).filter(selector);\n  }, 'children'),\n  siblings: function siblings(selector) {\n    return this.parent().children().not(this).filter(selector);\n  },\n  isParent: function isParent() {\n    var ele = this[0];\n    if (ele) {\n      return ele.isNode() && ele._private.children.length !== 0;\n    }\n  },\n  isChildless: function isChildless() {\n    var ele = this[0];\n    if (ele) {\n      return ele.isNode() && ele._private.children.length === 0;\n    }\n  },\n  isChild: function isChild() {\n    var ele = this[0];\n    if (ele) {\n      return ele.isNode() && ele._private.parent != null;\n    }\n  },\n  isOrphan: function isOrphan() {\n    var ele = this[0];\n    if (ele) {\n      return ele.isNode() && ele._private.parent == null;\n    }\n  },\n  descendants: function descendants(selector) {\n    var elements = [];\n    function add(eles) {\n      for (var i = 0; i < eles.length; i++) {\n        var ele = eles[i];\n        elements.push(ele);\n        if (ele.children().nonempty()) {\n          add(ele.children());\n        }\n      }\n    }\n    add(this.children());\n    return this.spawn(elements, true).filter(selector);\n  }\n};\nfunction forEachCompound(eles, fn, includeSelf, recursiveStep) {\n  var q = [];\n  var did = new Set$1();\n  var cy = eles.cy();\n  var hasCompounds = cy.hasCompoundNodes();\n  for (var i = 0; i < eles.length; i++) {\n    var ele = eles[i];\n    if (includeSelf) {\n      q.push(ele);\n    } else if (hasCompounds) {\n      recursiveStep(q, did, ele);\n    }\n  }\n  while (q.length > 0) {\n    var _ele = q.shift();\n    fn(_ele);\n    did.add(_ele.id());\n    if (hasCompounds) {\n      recursiveStep(q, did, _ele);\n    }\n  }\n  return eles;\n}\nfunction addChildren(q, did, ele) {\n  if (ele.isParent()) {\n    var children = ele._private.children;\n    for (var i = 0; i < children.length; i++) {\n      var child = children[i];\n      if (!did.has(child.id())) {\n        q.push(child);\n      }\n    }\n  }\n}\n\n// very efficient version of eles.add( eles.descendants() ).forEach()\n// for internal use\nelesfn$f.forEachDown = function (fn) {\n  var includeSelf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  return forEachCompound(this, fn, includeSelf, addChildren);\n};\nfunction addParent(q, did, ele) {\n  if (ele.isChild()) {\n    var parent = ele._private.parent;\n    if (!did.has(parent.id())) {\n      q.push(parent);\n    }\n  }\n}\nelesfn$f.forEachUp = function (fn) {\n  var includeSelf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  return forEachCompound(this, fn, includeSelf, addParent);\n};\nfunction addParentAndChildren(q, did, ele) {\n  addParent(q, did, ele);\n  addChildren(q, did, ele);\n}\nelesfn$f.forEachUpAndDown = function (fn) {\n  var includeSelf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  return forEachCompound(this, fn, includeSelf, addParentAndChildren);\n};\n\n// aliases\nelesfn$f.ancestors = elesfn$f.parents;\n\nvar fn$5, elesfn$e;\nfn$5 = elesfn$e = {\n  data: define.data({\n    field: 'data',\n    bindingEvent: 'data',\n    allowBinding: true,\n    allowSetting: true,\n    settingEvent: 'data',\n    settingTriggersEvent: true,\n    triggerFnName: 'trigger',\n    allowGetting: true,\n    immutableKeys: {\n      'id': true,\n      'source': true,\n      'target': true,\n      'parent': true\n    },\n    updateStyle: true\n  }),\n  removeData: define.removeData({\n    field: 'data',\n    event: 'data',\n    triggerFnName: 'trigger',\n    triggerEvent: true,\n    immutableKeys: {\n      'id': true,\n      'source': true,\n      'target': true,\n      'parent': true\n    },\n    updateStyle: true\n  }),\n  scratch: define.data({\n    field: 'scratch',\n    bindingEvent: 'scratch',\n    allowBinding: true,\n    allowSetting: true,\n    settingEvent: 'scratch',\n    settingTriggersEvent: true,\n    triggerFnName: 'trigger',\n    allowGetting: true,\n    updateStyle: true\n  }),\n  removeScratch: define.removeData({\n    field: 'scratch',\n    event: 'scratch',\n    triggerFnName: 'trigger',\n    triggerEvent: true,\n    updateStyle: true\n  }),\n  rscratch: define.data({\n    field: 'rscratch',\n    allowBinding: false,\n    allowSetting: true,\n    settingTriggersEvent: false,\n    allowGetting: true\n  }),\n  removeRscratch: define.removeData({\n    field: 'rscratch',\n    triggerEvent: false\n  }),\n  id: function id() {\n    var ele = this[0];\n    if (ele) {\n      return ele._private.data.id;\n    }\n  }\n};\n\n// aliases\nfn$5.attr = fn$5.data;\nfn$5.removeAttr = fn$5.removeData;\nvar data = elesfn$e;\n\nvar elesfn$d = {};\nfunction defineDegreeFunction(callback) {\n  return function (includeLoops) {\n    var self = this;\n    if (includeLoops === undefined) {\n      includeLoops = true;\n    }\n    if (self.length === 0) {\n      return;\n    }\n    if (self.isNode() && !self.removed()) {\n      var degree = 0;\n      var node = self[0];\n      var connectedEdges = node._private.edges;\n      for (var i = 0; i < connectedEdges.length; i++) {\n        var edge = connectedEdges[i];\n        if (!includeLoops && edge.isLoop()) {\n          continue;\n        }\n        degree += callback(node, edge);\n      }\n      return degree;\n    } else {\n      return;\n    }\n  };\n}\nextend(elesfn$d, {\n  degree: defineDegreeFunction(function (node, edge) {\n    if (edge.source().same(edge.target())) {\n      return 2;\n    } else {\n      return 1;\n    }\n  }),\n  indegree: defineDegreeFunction(function (node, edge) {\n    if (edge.target().same(node)) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }),\n  outdegree: defineDegreeFunction(function (node, edge) {\n    if (edge.source().same(node)) {\n      return 1;\n    } else {\n      return 0;\n    }\n  })\n});\nfunction defineDegreeBoundsFunction(degreeFn, callback) {\n  return function (includeLoops) {\n    var ret;\n    var nodes = this.nodes();\n    for (var i = 0; i < nodes.length; i++) {\n      var ele = nodes[i];\n      var degree = ele[degreeFn](includeLoops);\n      if (degree !== undefined && (ret === undefined || callback(degree, ret))) {\n        ret = degree;\n      }\n    }\n    return ret;\n  };\n}\nextend(elesfn$d, {\n  minDegree: defineDegreeBoundsFunction('degree', function (degree, min) {\n    return degree < min;\n  }),\n  maxDegree: defineDegreeBoundsFunction('degree', function (degree, max) {\n    return degree > max;\n  }),\n  minIndegree: defineDegreeBoundsFunction('indegree', function (degree, min) {\n    return degree < min;\n  }),\n  maxIndegree: defineDegreeBoundsFunction('indegree', function (degree, max) {\n    return degree > max;\n  }),\n  minOutdegree: defineDegreeBoundsFunction('outdegree', function (degree, min) {\n    return degree < min;\n  }),\n  maxOutdegree: defineDegreeBoundsFunction('outdegree', function (degree, max) {\n    return degree > max;\n  })\n});\nextend(elesfn$d, {\n  totalDegree: function totalDegree(includeLoops) {\n    var total = 0;\n    var nodes = this.nodes();\n    for (var i = 0; i < nodes.length; i++) {\n      total += nodes[i].degree(includeLoops);\n    }\n    return total;\n  }\n});\n\nvar fn$4, elesfn$c;\nvar beforePositionSet = function beforePositionSet(eles, newPos, silent) {\n  for (var i = 0; i < eles.length; i++) {\n    var ele = eles[i];\n    if (!ele.locked()) {\n      var oldPos = ele._private.position;\n      var delta = {\n        x: newPos.x != null ? newPos.x - oldPos.x : 0,\n        y: newPos.y != null ? newPos.y - oldPos.y : 0\n      };\n      if (ele.isParent() && !(delta.x === 0 && delta.y === 0)) {\n        ele.children().shift(delta, silent);\n      }\n      ele.dirtyBoundingBoxCache();\n    }\n  }\n};\nvar positionDef = {\n  field: 'position',\n  bindingEvent: 'position',\n  allowBinding: true,\n  allowSetting: true,\n  settingEvent: 'position',\n  settingTriggersEvent: true,\n  triggerFnName: 'emitAndNotify',\n  allowGetting: true,\n  validKeys: ['x', 'y'],\n  beforeGet: function beforeGet(ele) {\n    ele.updateCompoundBounds();\n  },\n  beforeSet: function beforeSet(eles, newPos) {\n    beforePositionSet(eles, newPos, false);\n  },\n  onSet: function onSet(eles) {\n    eles.dirtyCompoundBoundsCache();\n  },\n  canSet: function canSet(ele) {\n    return !ele.locked();\n  }\n};\nfn$4 = elesfn$c = {\n  position: define.data(positionDef),\n  // position but no notification to renderer\n  silentPosition: define.data(extend({}, positionDef, {\n    allowBinding: false,\n    allowSetting: true,\n    settingTriggersEvent: false,\n    allowGetting: false,\n    beforeSet: function beforeSet(eles, newPos) {\n      beforePositionSet(eles, newPos, true);\n    },\n    onSet: function onSet(eles) {\n      eles.dirtyCompoundBoundsCache();\n    }\n  })),\n  positions: function positions(pos, silent) {\n    if (plainObject(pos)) {\n      if (silent) {\n        this.silentPosition(pos);\n      } else {\n        this.position(pos);\n      }\n    } else if (fn$6(pos)) {\n      var _fn = pos;\n      var cy = this.cy();\n      cy.startBatch();\n      for (var i = 0; i < this.length; i++) {\n        var ele = this[i];\n        var _pos = void 0;\n        if (_pos = _fn(ele, i)) {\n          if (silent) {\n            ele.silentPosition(_pos);\n          } else {\n            ele.position(_pos);\n          }\n        }\n      }\n      cy.endBatch();\n    }\n    return this; // chaining\n  },\n\n  silentPositions: function silentPositions(pos) {\n    return this.positions(pos, true);\n  },\n  shift: function shift(dim, val, silent) {\n    var delta;\n    if (plainObject(dim)) {\n      delta = {\n        x: number$1(dim.x) ? dim.x : 0,\n        y: number$1(dim.y) ? dim.y : 0\n      };\n      silent = val;\n    } else if (string(dim) && number$1(val)) {\n      delta = {\n        x: 0,\n        y: 0\n      };\n      delta[dim] = val;\n    }\n    if (delta != null) {\n      var cy = this.cy();\n      cy.startBatch();\n      for (var i = 0; i < this.length; i++) {\n        var ele = this[i];\n\n        // exclude any node that is a descendant of the calling collection\n        if (cy.hasCompoundNodes() && ele.isChild() && ele.ancestors().anySame(this)) {\n          continue;\n        }\n        var pos = ele.position();\n        var newPos = {\n          x: pos.x + delta.x,\n          y: pos.y + delta.y\n        };\n        if (silent) {\n          ele.silentPosition(newPos);\n        } else {\n          ele.position(newPos);\n        }\n      }\n      cy.endBatch();\n    }\n    return this;\n  },\n  silentShift: function silentShift(dim, val) {\n    if (plainObject(dim)) {\n      this.shift(dim, true);\n    } else if (string(dim) && number$1(val)) {\n      this.shift(dim, val, true);\n    }\n    return this;\n  },\n  // get/set the rendered (i.e. on screen) positon of the element\n  renderedPosition: function renderedPosition(dim, val) {\n    var ele = this[0];\n    var cy = this.cy();\n    var zoom = cy.zoom();\n    var pan = cy.pan();\n    var rpos = plainObject(dim) ? dim : undefined;\n    var setting = rpos !== undefined || val !== undefined && string(dim);\n    if (ele && ele.isNode()) {\n      // must have an element and must be a node to return position\n      if (setting) {\n        for (var i = 0; i < this.length; i++) {\n          var _ele = this[i];\n          if (val !== undefined) {\n            // set one dimension\n            _ele.position(dim, (val - pan[dim]) / zoom);\n          } else if (rpos !== undefined) {\n            // set whole position\n            _ele.position(renderedToModelPosition(rpos, zoom, pan));\n          }\n        }\n      } else {\n        // getting\n        var pos = ele.position();\n        rpos = modelToRenderedPosition(pos, zoom, pan);\n        if (dim === undefined) {\n          // then return the whole rendered position\n          return rpos;\n        } else {\n          // then return the specified dimension\n          return rpos[dim];\n        }\n      }\n    } else if (!setting) {\n      return undefined; // for empty collection case\n    }\n\n    return this; // chaining\n  },\n\n  // get/set the position relative to the parent\n  relativePosition: function relativePosition(dim, val) {\n    var ele = this[0];\n    var cy = this.cy();\n    var ppos = plainObject(dim) ? dim : undefined;\n    var setting = ppos !== undefined || val !== undefined && string(dim);\n    var hasCompoundNodes = cy.hasCompoundNodes();\n    if (ele && ele.isNode()) {\n      // must have an element and must be a node to return position\n      if (setting) {\n        for (var i = 0; i < this.length; i++) {\n          var _ele2 = this[i];\n          var parent = hasCompoundNodes ? _ele2.parent() : null;\n          var hasParent = parent && parent.length > 0;\n          var relativeToParent = hasParent;\n          if (hasParent) {\n            parent = parent[0];\n          }\n          var origin = relativeToParent ? parent.position() : {\n            x: 0,\n            y: 0\n          };\n          if (val !== undefined) {\n            // set one dimension\n            _ele2.position(dim, val + origin[dim]);\n          } else if (ppos !== undefined) {\n            // set whole position\n            _ele2.position({\n              x: ppos.x + origin.x,\n              y: ppos.y + origin.y\n            });\n          }\n        }\n      } else {\n        // getting\n        var pos = ele.position();\n        var _parent = hasCompoundNodes ? ele.parent() : null;\n        var _hasParent = _parent && _parent.length > 0;\n        var _relativeToParent = _hasParent;\n        if (_hasParent) {\n          _parent = _parent[0];\n        }\n        var _origin = _relativeToParent ? _parent.position() : {\n          x: 0,\n          y: 0\n        };\n        ppos = {\n          x: pos.x - _origin.x,\n          y: pos.y - _origin.y\n        };\n        if (dim === undefined) {\n          // then return the whole rendered position\n          return ppos;\n        } else {\n          // then return the specified dimension\n          return ppos[dim];\n        }\n      }\n    } else if (!setting) {\n      return undefined; // for empty collection case\n    }\n\n    return this; // chaining\n  }\n};\n\n// aliases\nfn$4.modelPosition = fn$4.point = fn$4.position;\nfn$4.modelPositions = fn$4.points = fn$4.positions;\nfn$4.renderedPoint = fn$4.renderedPosition;\nfn$4.relativePoint = fn$4.relativePosition;\nvar position = elesfn$c;\n\nvar fn$3, elesfn$b;\nfn$3 = elesfn$b = {};\nelesfn$b.renderedBoundingBox = function (options) {\n  var bb = this.boundingBox(options);\n  var cy = this.cy();\n  var zoom = cy.zoom();\n  var pan = cy.pan();\n  var x1 = bb.x1 * zoom + pan.x;\n  var x2 = bb.x2 * zoom + pan.x;\n  var y1 = bb.y1 * zoom + pan.y;\n  var y2 = bb.y2 * zoom + pan.y;\n  return {\n    x1: x1,\n    x2: x2,\n    y1: y1,\n    y2: y2,\n    w: x2 - x1,\n    h: y2 - y1\n  };\n};\nelesfn$b.dirtyCompoundBoundsCache = function () {\n  var silent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var cy = this.cy();\n  if (!cy.styleEnabled() || !cy.hasCompoundNodes()) {\n    return this;\n  }\n  this.forEachUp(function (ele) {\n    if (ele.isParent()) {\n      var _p = ele._private;\n      _p.compoundBoundsClean = false;\n      _p.bbCache = null;\n      if (!silent) {\n        ele.emitAndNotify('bounds');\n      }\n    }\n  });\n  return this;\n};\nelesfn$b.updateCompoundBounds = function () {\n  var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var cy = this.cy();\n\n  // not possible to do on non-compound graphs or with the style disabled\n  if (!cy.styleEnabled() || !cy.hasCompoundNodes()) {\n    return this;\n  }\n\n  // save cycles when batching -- but bounds will be stale (or not exist yet)\n  if (!force && cy.batching()) {\n    return this;\n  }\n  function update(parent) {\n    if (!parent.isParent()) {\n      return;\n    }\n    var _p = parent._private;\n    var children = parent.children();\n    var includeLabels = parent.pstyle('compound-sizing-wrt-labels').value === 'include';\n    var min = {\n      width: {\n        val: parent.pstyle('min-width').pfValue,\n        left: parent.pstyle('min-width-bias-left'),\n        right: parent.pstyle('min-width-bias-right')\n      },\n      height: {\n        val: parent.pstyle('min-height').pfValue,\n        top: parent.pstyle('min-height-bias-top'),\n        bottom: parent.pstyle('min-height-bias-bottom')\n      }\n    };\n    var bb = children.boundingBox({\n      includeLabels: includeLabels,\n      includeOverlays: false,\n      // updating the compound bounds happens outside of the regular\n      // cache cycle (i.e. before fired events)\n      useCache: false\n    });\n    var pos = _p.position;\n\n    // if children take up zero area then keep position and fall back on stylesheet w/h\n    if (bb.w === 0 || bb.h === 0) {\n      bb = {\n        w: parent.pstyle('width').pfValue,\n        h: parent.pstyle('height').pfValue\n      };\n      bb.x1 = pos.x - bb.w / 2;\n      bb.x2 = pos.x + bb.w / 2;\n      bb.y1 = pos.y - bb.h / 2;\n      bb.y2 = pos.y + bb.h / 2;\n    }\n    function computeBiasValues(propDiff, propBias, propBiasComplement) {\n      var biasDiff = 0;\n      var biasComplementDiff = 0;\n      var biasTotal = propBias + propBiasComplement;\n      if (propDiff > 0 && biasTotal > 0) {\n        biasDiff = propBias / biasTotal * propDiff;\n        biasComplementDiff = propBiasComplement / biasTotal * propDiff;\n      }\n      return {\n        biasDiff: biasDiff,\n        biasComplementDiff: biasComplementDiff\n      };\n    }\n    function computePaddingValues(width, height, paddingObject, relativeTo) {\n      // Assuming percentage is number from 0 to 1\n      if (paddingObject.units === '%') {\n        switch (relativeTo) {\n          case 'width':\n            return width > 0 ? paddingObject.pfValue * width : 0;\n          case 'height':\n            return height > 0 ? paddingObject.pfValue * height : 0;\n          case 'average':\n            return width > 0 && height > 0 ? paddingObject.pfValue * (width + height) / 2 : 0;\n          case 'min':\n            return width > 0 && height > 0 ? width > height ? paddingObject.pfValue * height : paddingObject.pfValue * width : 0;\n          case 'max':\n            return width > 0 && height > 0 ? width > height ? paddingObject.pfValue * width : paddingObject.pfValue * height : 0;\n          default:\n            return 0;\n        }\n      } else if (paddingObject.units === 'px') {\n        return paddingObject.pfValue;\n      } else {\n        return 0;\n      }\n    }\n    var leftVal = min.width.left.value;\n    if (min.width.left.units === 'px' && min.width.val > 0) {\n      leftVal = leftVal * 100 / min.width.val;\n    }\n    var rightVal = min.width.right.value;\n    if (min.width.right.units === 'px' && min.width.val > 0) {\n      rightVal = rightVal * 100 / min.width.val;\n    }\n    var topVal = min.height.top.value;\n    if (min.height.top.units === 'px' && min.height.val > 0) {\n      topVal = topVal * 100 / min.height.val;\n    }\n    var bottomVal = min.height.bottom.value;\n    if (min.height.bottom.units === 'px' && min.height.val > 0) {\n      bottomVal = bottomVal * 100 / min.height.val;\n    }\n    var widthBiasDiffs = computeBiasValues(min.width.val - bb.w, leftVal, rightVal);\n    var diffLeft = widthBiasDiffs.biasDiff;\n    var diffRight = widthBiasDiffs.biasComplementDiff;\n    var heightBiasDiffs = computeBiasValues(min.height.val - bb.h, topVal, bottomVal);\n    var diffTop = heightBiasDiffs.biasDiff;\n    var diffBottom = heightBiasDiffs.biasComplementDiff;\n    _p.autoPadding = computePaddingValues(bb.w, bb.h, parent.pstyle('padding'), parent.pstyle('padding-relative-to').value);\n    _p.autoWidth = Math.max(bb.w, min.width.val);\n    pos.x = (-diffLeft + bb.x1 + bb.x2 + diffRight) / 2;\n    _p.autoHeight = Math.max(bb.h, min.height.val);\n    pos.y = (-diffTop + bb.y1 + bb.y2 + diffBottom) / 2;\n  }\n  for (var i = 0; i < this.length; i++) {\n    var ele = this[i];\n    var _p = ele._private;\n    if (!_p.compoundBoundsClean || force) {\n      update(ele);\n      if (!cy.batching()) {\n        _p.compoundBoundsClean = true;\n      }\n    }\n  }\n  return this;\n};\nvar noninf = function noninf(x) {\n  if (x === Infinity || x === -Infinity) {\n    return 0;\n  }\n  return x;\n};\nvar updateBounds = function updateBounds(b, x1, y1, x2, y2) {\n  // don't update with zero area boxes\n  if (x2 - x1 === 0 || y2 - y1 === 0) {\n    return;\n  }\n\n  // don't update with null dim\n  if (x1 == null || y1 == null || x2 == null || y2 == null) {\n    return;\n  }\n  b.x1 = x1 < b.x1 ? x1 : b.x1;\n  b.x2 = x2 > b.x2 ? x2 : b.x2;\n  b.y1 = y1 < b.y1 ? y1 : b.y1;\n  b.y2 = y2 > b.y2 ? y2 : b.y2;\n  b.w = b.x2 - b.x1;\n  b.h = b.y2 - b.y1;\n};\nvar updateBoundsFromBox = function updateBoundsFromBox(b, b2) {\n  if (b2 == null) {\n    return b;\n  }\n  return updateBounds(b, b2.x1, b2.y1, b2.x2, b2.y2);\n};\nvar prefixedProperty = function prefixedProperty(obj, field, prefix) {\n  return getPrefixedProperty(obj, field, prefix);\n};\nvar updateBoundsFromArrow = function updateBoundsFromArrow(bounds, ele, prefix) {\n  if (ele.cy().headless()) {\n    return;\n  }\n  var _p = ele._private;\n  var rstyle = _p.rstyle;\n  var halfArW = rstyle.arrowWidth / 2;\n  var arrowType = ele.pstyle(prefix + '-arrow-shape').value;\n  var x;\n  var y;\n  if (arrowType !== 'none') {\n    if (prefix === 'source') {\n      x = rstyle.srcX;\n      y = rstyle.srcY;\n    } else if (prefix === 'target') {\n      x = rstyle.tgtX;\n      y = rstyle.tgtY;\n    } else {\n      x = rstyle.midX;\n      y = rstyle.midY;\n    }\n\n    // always store the individual arrow bounds\n    var bbs = _p.arrowBounds = _p.arrowBounds || {};\n    var bb = bbs[prefix] = bbs[prefix] || {};\n    bb.x1 = x - halfArW;\n    bb.y1 = y - halfArW;\n    bb.x2 = x + halfArW;\n    bb.y2 = y + halfArW;\n    bb.w = bb.x2 - bb.x1;\n    bb.h = bb.y2 - bb.y1;\n    expandBoundingBox(bb, 1);\n    updateBounds(bounds, bb.x1, bb.y1, bb.x2, bb.y2);\n  }\n};\nvar updateBoundsFromLabel = function updateBoundsFromLabel(bounds, ele, prefix) {\n  if (ele.cy().headless()) {\n    return;\n  }\n  var prefixDash;\n  if (prefix) {\n    prefixDash = prefix + '-';\n  } else {\n    prefixDash = '';\n  }\n  var _p = ele._private;\n  var rstyle = _p.rstyle;\n  var label = ele.pstyle(prefixDash + 'label').strValue;\n  if (label) {\n    var halign = ele.pstyle('text-halign');\n    var valign = ele.pstyle('text-valign');\n    var labelWidth = prefixedProperty(rstyle, 'labelWidth', prefix);\n    var labelHeight = prefixedProperty(rstyle, 'labelHeight', prefix);\n    var labelX = prefixedProperty(rstyle, 'labelX', prefix);\n    var labelY = prefixedProperty(rstyle, 'labelY', prefix);\n    var marginX = ele.pstyle(prefixDash + 'text-margin-x').pfValue;\n    var marginY = ele.pstyle(prefixDash + 'text-margin-y').pfValue;\n    var isEdge = ele.isEdge();\n    var rotation = ele.pstyle(prefixDash + 'text-rotation');\n    var outlineWidth = ele.pstyle('text-outline-width').pfValue;\n    var borderWidth = ele.pstyle('text-border-width').pfValue;\n    var halfBorderWidth = borderWidth / 2;\n    var padding = ele.pstyle('text-background-padding').pfValue;\n    var marginOfError = 2; // expand to work around browser dimension inaccuracies\n\n    var lh = labelHeight;\n    var lw = labelWidth;\n    var lw_2 = lw / 2;\n    var lh_2 = lh / 2;\n    var lx1, lx2, ly1, ly2;\n    if (isEdge) {\n      lx1 = labelX - lw_2;\n      lx2 = labelX + lw_2;\n      ly1 = labelY - lh_2;\n      ly2 = labelY + lh_2;\n    } else {\n      switch (halign.value) {\n        case 'left':\n          lx1 = labelX - lw;\n          lx2 = labelX;\n          break;\n        case 'center':\n          lx1 = labelX - lw_2;\n          lx2 = labelX + lw_2;\n          break;\n        case 'right':\n          lx1 = labelX;\n          lx2 = labelX + lw;\n          break;\n      }\n      switch (valign.value) {\n        case 'top':\n          ly1 = labelY - lh;\n          ly2 = labelY;\n          break;\n        case 'center':\n          ly1 = labelY - lh_2;\n          ly2 = labelY + lh_2;\n          break;\n        case 'bottom':\n          ly1 = labelY;\n          ly2 = labelY + lh;\n          break;\n      }\n    }\n\n    // shift by margin and expand by outline and border\n    var leftPad = marginX - Math.max(outlineWidth, halfBorderWidth) - padding - marginOfError;\n    var rightPad = marginX + Math.max(outlineWidth, halfBorderWidth) + padding + marginOfError;\n    var topPad = marginY - Math.max(outlineWidth, halfBorderWidth) - padding - marginOfError;\n    var botPad = marginY + Math.max(outlineWidth, halfBorderWidth) + padding + marginOfError;\n    lx1 += leftPad;\n    lx2 += rightPad;\n    ly1 += topPad;\n    ly2 += botPad;\n\n    // always store the unrotated label bounds separately\n    var bbPrefix = prefix || 'main';\n    var bbs = _p.labelBounds;\n    var bb = bbs[bbPrefix] = bbs[bbPrefix] || {};\n    bb.x1 = lx1;\n    bb.y1 = ly1;\n    bb.x2 = lx2;\n    bb.y2 = ly2;\n    bb.w = lx2 - lx1;\n    bb.h = ly2 - ly1;\n    bb.leftPad = leftPad;\n    bb.rightPad = rightPad;\n    bb.topPad = topPad;\n    bb.botPad = botPad;\n    var isAutorotate = isEdge && rotation.strValue === 'autorotate';\n    var isPfValue = rotation.pfValue != null && rotation.pfValue !== 0;\n    if (isAutorotate || isPfValue) {\n      var theta = isAutorotate ? prefixedProperty(_p.rstyle, 'labelAngle', prefix) : rotation.pfValue;\n      var cos = Math.cos(theta);\n      var sin = Math.sin(theta);\n\n      // rotation point (default value for center-center)\n      var xo = (lx1 + lx2) / 2;\n      var yo = (ly1 + ly2) / 2;\n      if (!isEdge) {\n        switch (halign.value) {\n          case 'left':\n            xo = lx2;\n            break;\n          case 'right':\n            xo = lx1;\n            break;\n        }\n        switch (valign.value) {\n          case 'top':\n            yo = ly2;\n            break;\n          case 'bottom':\n            yo = ly1;\n            break;\n        }\n      }\n      var rotate = function rotate(x, y) {\n        x = x - xo;\n        y = y - yo;\n        return {\n          x: x * cos - y * sin + xo,\n          y: x * sin + y * cos + yo\n        };\n      };\n      var px1y1 = rotate(lx1, ly1);\n      var px1y2 = rotate(lx1, ly2);\n      var px2y1 = rotate(lx2, ly1);\n      var px2y2 = rotate(lx2, ly2);\n      lx1 = Math.min(px1y1.x, px1y2.x, px2y1.x, px2y2.x);\n      lx2 = Math.max(px1y1.x, px1y2.x, px2y1.x, px2y2.x);\n      ly1 = Math.min(px1y1.y, px1y2.y, px2y1.y, px2y2.y);\n      ly2 = Math.max(px1y1.y, px1y2.y, px2y1.y, px2y2.y);\n    }\n    var bbPrefixRot = bbPrefix + 'Rot';\n    var bbRot = bbs[bbPrefixRot] = bbs[bbPrefixRot] || {};\n    bbRot.x1 = lx1;\n    bbRot.y1 = ly1;\n    bbRot.x2 = lx2;\n    bbRot.y2 = ly2;\n    bbRot.w = lx2 - lx1;\n    bbRot.h = ly2 - ly1;\n    updateBounds(bounds, lx1, ly1, lx2, ly2);\n    updateBounds(_p.labelBounds.all, lx1, ly1, lx2, ly2);\n  }\n  return bounds;\n};\nvar updateBoundsFromOutline = function updateBoundsFromOutline(bounds, ele) {\n  if (ele.cy().headless()) {\n    return;\n  }\n  var outlineOpacity = ele.pstyle('outline-opacity').value;\n  var outlineWidth = ele.pstyle('outline-width').value;\n  if (outlineOpacity > 0 && outlineWidth > 0) {\n    var outlineOffset = ele.pstyle('outline-offset').value;\n    var nodeShape = ele.pstyle('shape').value;\n    var outlineSize = outlineWidth + outlineOffset;\n    var scaleX = (bounds.w + outlineSize * 2) / bounds.w;\n    var scaleY = (bounds.h + outlineSize * 2) / bounds.h;\n    var xOffset = 0;\n    var yOffset = 0;\n    if ([\"diamond\", \"pentagon\", \"round-triangle\"].includes(nodeShape)) {\n      scaleX = (bounds.w + outlineSize * 2.4) / bounds.w;\n      yOffset = -outlineSize / 3.6;\n    } else if ([\"concave-hexagon\", \"rhomboid\", \"right-rhomboid\"].includes(nodeShape)) {\n      scaleX = (bounds.w + outlineSize * 2.4) / bounds.w;\n    } else if (nodeShape === \"star\") {\n      scaleX = (bounds.w + outlineSize * 2.8) / bounds.w;\n      scaleY = (bounds.h + outlineSize * 2.6) / bounds.h;\n      yOffset = -outlineSize / 3.8;\n    } else if (nodeShape === \"triangle\") {\n      scaleX = (bounds.w + outlineSize * 2.8) / bounds.w;\n      scaleY = (bounds.h + outlineSize * 2.4) / bounds.h;\n      yOffset = -outlineSize / 1.4;\n    } else if (nodeShape === \"vee\") {\n      scaleX = (bounds.w + outlineSize * 4.4) / bounds.w;\n      scaleY = (bounds.h + outlineSize * 3.8) / bounds.h;\n      yOffset = -outlineSize * .5;\n    }\n    var hDelta = bounds.h * scaleY - bounds.h;\n    var wDelta = bounds.w * scaleX - bounds.w;\n    expandBoundingBoxSides(bounds, [Math.ceil(hDelta / 2), Math.ceil(wDelta / 2)]);\n    if (xOffset != 0 || yOffset !== 0) {\n      var oBounds = shiftBoundingBox(bounds, xOffset, yOffset);\n      updateBoundingBox(bounds, oBounds);\n    }\n  }\n};\n\n// get the bounding box of the elements (in raw model position)\nvar boundingBoxImpl = function boundingBoxImpl(ele, options) {\n  var cy = ele._private.cy;\n  var styleEnabled = cy.styleEnabled();\n  var headless = cy.headless();\n  var bounds = makeBoundingBox();\n  var _p = ele._private;\n  var isNode = ele.isNode();\n  var isEdge = ele.isEdge();\n  var ex1, ex2, ey1, ey2; // extrema of body / lines\n  var x, y; // node pos\n  var rstyle = _p.rstyle;\n  var manualExpansion = isNode && styleEnabled ? ele.pstyle('bounds-expansion').pfValue : [0];\n\n  // must use `display` prop only, as reading `compound.width()` causes recursion\n  // (other factors like width values will be considered later in this function anyway)\n  var isDisplayed = function isDisplayed(ele) {\n    return ele.pstyle('display').value !== 'none';\n  };\n  var displayed = !styleEnabled || isDisplayed(ele)\n\n  // must take into account connected nodes b/c of implicit edge hiding on display:none node\n  && (!isEdge || isDisplayed(ele.source()) && isDisplayed(ele.target()));\n  if (displayed) {\n    // displayed suffices, since we will find zero area eles anyway\n    var overlayOpacity = 0;\n    var overlayPadding = 0;\n    if (styleEnabled && options.includeOverlays) {\n      overlayOpacity = ele.pstyle('overlay-opacity').value;\n      if (overlayOpacity !== 0) {\n        overlayPadding = ele.pstyle('overlay-padding').value;\n      }\n    }\n    var underlayOpacity = 0;\n    var underlayPadding = 0;\n    if (styleEnabled && options.includeUnderlays) {\n      underlayOpacity = ele.pstyle('underlay-opacity').value;\n      if (underlayOpacity !== 0) {\n        underlayPadding = ele.pstyle('underlay-padding').value;\n      }\n    }\n    var padding = Math.max(overlayPadding, underlayPadding);\n    var w = 0;\n    var wHalf = 0;\n    if (styleEnabled) {\n      w = ele.pstyle('width').pfValue;\n      wHalf = w / 2;\n    }\n    if (isNode && options.includeNodes) {\n      var pos = ele.position();\n      x = pos.x;\n      y = pos.y;\n      var _w = ele.outerWidth();\n      var halfW = _w / 2;\n      var h = ele.outerHeight();\n      var halfH = h / 2;\n\n      // handle node dimensions\n      /////////////////////////\n\n      ex1 = x - halfW;\n      ex2 = x + halfW;\n      ey1 = y - halfH;\n      ey2 = y + halfH;\n      updateBounds(bounds, ex1, ey1, ex2, ey2);\n      if (styleEnabled && options.includeOutlines) {\n        updateBoundsFromOutline(bounds, ele);\n      }\n    } else if (isEdge && options.includeEdges) {\n      if (styleEnabled && !headless) {\n        var curveStyle = ele.pstyle('curve-style').strValue;\n\n        // handle edge dimensions (rough box estimate)\n        //////////////////////////////////////////////\n\n        ex1 = Math.min(rstyle.srcX, rstyle.midX, rstyle.tgtX);\n        ex2 = Math.max(rstyle.srcX, rstyle.midX, rstyle.tgtX);\n        ey1 = Math.min(rstyle.srcY, rstyle.midY, rstyle.tgtY);\n        ey2 = Math.max(rstyle.srcY, rstyle.midY, rstyle.tgtY);\n\n        // take into account edge width\n        ex1 -= wHalf;\n        ex2 += wHalf;\n        ey1 -= wHalf;\n        ey2 += wHalf;\n        updateBounds(bounds, ex1, ey1, ex2, ey2);\n\n        // precise edges\n        ////////////////\n\n        if (curveStyle === 'haystack') {\n          var hpts = rstyle.haystackPts;\n          if (hpts && hpts.length === 2) {\n            ex1 = hpts[0].x;\n            ey1 = hpts[0].y;\n            ex2 = hpts[1].x;\n            ey2 = hpts[1].y;\n            if (ex1 > ex2) {\n              var temp = ex1;\n              ex1 = ex2;\n              ex2 = temp;\n            }\n            if (ey1 > ey2) {\n              var _temp = ey1;\n              ey1 = ey2;\n              ey2 = _temp;\n            }\n            updateBounds(bounds, ex1 - wHalf, ey1 - wHalf, ex2 + wHalf, ey2 + wHalf);\n          }\n        } else if (curveStyle === 'bezier' || curveStyle === 'unbundled-bezier' || curveStyle.endsWith('segments') || curveStyle.endsWith('taxi')) {\n          var pts;\n          switch (curveStyle) {\n            case 'bezier':\n            case 'unbundled-bezier':\n              pts = rstyle.bezierPts;\n              break;\n            case 'segments':\n            case 'taxi':\n            case 'round-segments':\n            case 'round-taxi':\n              pts = rstyle.linePts;\n              break;\n          }\n          if (pts != null) {\n            for (var j = 0; j < pts.length; j++) {\n              var pt = pts[j];\n              ex1 = pt.x - wHalf;\n              ex2 = pt.x + wHalf;\n              ey1 = pt.y - wHalf;\n              ey2 = pt.y + wHalf;\n              updateBounds(bounds, ex1, ey1, ex2, ey2);\n            }\n          }\n        } // bezier-like or segment-like edge\n      } else {\n        // headless or style disabled\n\n        // fallback on source and target positions\n        //////////////////////////////////////////\n\n        var n1 = ele.source();\n        var n1pos = n1.position();\n        var n2 = ele.target();\n        var n2pos = n2.position();\n        ex1 = n1pos.x;\n        ex2 = n2pos.x;\n        ey1 = n1pos.y;\n        ey2 = n2pos.y;\n        if (ex1 > ex2) {\n          var _temp2 = ex1;\n          ex1 = ex2;\n          ex2 = _temp2;\n        }\n        if (ey1 > ey2) {\n          var _temp3 = ey1;\n          ey1 = ey2;\n          ey2 = _temp3;\n        }\n\n        // take into account edge width\n        ex1 -= wHalf;\n        ex2 += wHalf;\n        ey1 -= wHalf;\n        ey2 += wHalf;\n        updateBounds(bounds, ex1, ey1, ex2, ey2);\n      } // headless or style disabled\n    } // edges\n\n    // handle edge arrow size\n    /////////////////////////\n\n    if (styleEnabled && options.includeEdges && isEdge) {\n      updateBoundsFromArrow(bounds, ele, 'mid-source');\n      updateBoundsFromArrow(bounds, ele, 'mid-target');\n      updateBoundsFromArrow(bounds, ele, 'source');\n      updateBoundsFromArrow(bounds, ele, 'target');\n    }\n\n    // ghost\n    ////////\n\n    if (styleEnabled) {\n      var ghost = ele.pstyle('ghost').value === 'yes';\n      if (ghost) {\n        var gx = ele.pstyle('ghost-offset-x').pfValue;\n        var gy = ele.pstyle('ghost-offset-y').pfValue;\n        updateBounds(bounds, bounds.x1 + gx, bounds.y1 + gy, bounds.x2 + gx, bounds.y2 + gy);\n      }\n    }\n\n    // always store the body bounds separately from the labels\n    var bbBody = _p.bodyBounds = _p.bodyBounds || {};\n    assignBoundingBox(bbBody, bounds);\n    expandBoundingBoxSides(bbBody, manualExpansion);\n    expandBoundingBox(bbBody, 1); // expand to work around browser dimension inaccuracies\n\n    // overlay\n    //////////\n\n    if (styleEnabled) {\n      ex1 = bounds.x1;\n      ex2 = bounds.x2;\n      ey1 = bounds.y1;\n      ey2 = bounds.y2;\n      updateBounds(bounds, ex1 - padding, ey1 - padding, ex2 + padding, ey2 + padding);\n    }\n\n    // always store the body bounds separately from the labels\n    var bbOverlay = _p.overlayBounds = _p.overlayBounds || {};\n    assignBoundingBox(bbOverlay, bounds);\n    expandBoundingBoxSides(bbOverlay, manualExpansion);\n    expandBoundingBox(bbOverlay, 1); // expand to work around browser dimension inaccuracies\n\n    // handle label dimensions\n    //////////////////////////\n\n    var bbLabels = _p.labelBounds = _p.labelBounds || {};\n    if (bbLabels.all != null) {\n      clearBoundingBox(bbLabels.all);\n    } else {\n      bbLabels.all = makeBoundingBox();\n    }\n    if (styleEnabled && options.includeLabels) {\n      if (options.includeMainLabels) {\n        updateBoundsFromLabel(bounds, ele, null);\n      }\n      if (isEdge) {\n        if (options.includeSourceLabels) {\n          updateBoundsFromLabel(bounds, ele, 'source');\n        }\n        if (options.includeTargetLabels) {\n          updateBoundsFromLabel(bounds, ele, 'target');\n        }\n      }\n    } // style enabled for labels\n  } // if displayed\n\n  bounds.x1 = noninf(bounds.x1);\n  bounds.y1 = noninf(bounds.y1);\n  bounds.x2 = noninf(bounds.x2);\n  bounds.y2 = noninf(bounds.y2);\n  bounds.w = noninf(bounds.x2 - bounds.x1);\n  bounds.h = noninf(bounds.y2 - bounds.y1);\n  if (bounds.w > 0 && bounds.h > 0 && displayed) {\n    expandBoundingBoxSides(bounds, manualExpansion);\n\n    // expand bounds by 1 because antialiasing can increase the visual/effective size by 1 on all sides\n    expandBoundingBox(bounds, 1);\n  }\n  return bounds;\n};\nvar getKey = function getKey(opts) {\n  var i = 0;\n  var tf = function tf(val) {\n    return (val ? 1 : 0) << i++;\n  };\n  var key = 0;\n  key += tf(opts.incudeNodes);\n  key += tf(opts.includeEdges);\n  key += tf(opts.includeLabels);\n  key += tf(opts.includeMainLabels);\n  key += tf(opts.includeSourceLabels);\n  key += tf(opts.includeTargetLabels);\n  key += tf(opts.includeOverlays);\n  key += tf(opts.includeOutlines);\n  return key;\n};\nvar getBoundingBoxPosKey = function getBoundingBoxPosKey(ele) {\n  if (ele.isEdge()) {\n    var p1 = ele.source().position();\n    var p2 = ele.target().position();\n    var r = function r(x) {\n      return Math.round(x);\n    };\n    return hashIntsArray([r(p1.x), r(p1.y), r(p2.x), r(p2.y)]);\n  } else {\n    return 0;\n  }\n};\nvar cachedBoundingBoxImpl = function cachedBoundingBoxImpl(ele, opts) {\n  var _p = ele._private;\n  var bb;\n  var isEdge = ele.isEdge();\n  var key = opts == null ? defBbOptsKey : getKey(opts);\n  var usingDefOpts = key === defBbOptsKey;\n  var currPosKey = getBoundingBoxPosKey(ele);\n  var isPosKeySame = _p.bbCachePosKey === currPosKey;\n  var useCache = opts.useCache && isPosKeySame;\n  var isDirty = function isDirty(ele) {\n    return ele._private.bbCache == null || ele._private.styleDirty;\n  };\n  var needRecalc = !useCache || isDirty(ele) || isEdge && (isDirty(ele.source()) || isDirty(ele.target()));\n  if (needRecalc) {\n    if (!isPosKeySame) {\n      ele.recalculateRenderedStyle(useCache);\n    }\n    bb = boundingBoxImpl(ele, defBbOpts);\n    _p.bbCache = bb;\n    _p.bbCachePosKey = currPosKey;\n  } else {\n    bb = _p.bbCache;\n  }\n\n  // not using def opts => need to build up bb from combination of sub bbs\n  if (!usingDefOpts) {\n    var isNode = ele.isNode();\n    bb = makeBoundingBox();\n    if (opts.includeNodes && isNode || opts.includeEdges && !isNode) {\n      if (opts.includeOverlays) {\n        updateBoundsFromBox(bb, _p.overlayBounds);\n      } else {\n        updateBoundsFromBox(bb, _p.bodyBounds);\n      }\n    }\n    if (opts.includeLabels) {\n      if (opts.includeMainLabels && (!isEdge || opts.includeSourceLabels && opts.includeTargetLabels)) {\n        updateBoundsFromBox(bb, _p.labelBounds.all);\n      } else {\n        if (opts.includeMainLabels) {\n          updateBoundsFromBox(bb, _p.labelBounds.mainRot);\n        }\n        if (opts.includeSourceLabels) {\n          updateBoundsFromBox(bb, _p.labelBounds.sourceRot);\n        }\n        if (opts.includeTargetLabels) {\n          updateBoundsFromBox(bb, _p.labelBounds.targetRot);\n        }\n      }\n    }\n    bb.w = bb.x2 - bb.x1;\n    bb.h = bb.y2 - bb.y1;\n  }\n  return bb;\n};\nvar defBbOpts = {\n  includeNodes: true,\n  includeEdges: true,\n  includeLabels: true,\n  includeMainLabels: true,\n  includeSourceLabels: true,\n  includeTargetLabels: true,\n  includeOverlays: true,\n  includeUnderlays: true,\n  includeOutlines: true,\n  useCache: true\n};\nvar defBbOptsKey = getKey(defBbOpts);\nvar filledBbOpts = defaults$g(defBbOpts);\nelesfn$b.boundingBox = function (options) {\n  var bounds;\n\n  // the main usecase is ele.boundingBox() for a single element with no/def options\n  // specified s.t. the cache is used, so check for this case to make it faster by\n  // avoiding the overhead of the rest of the function\n  if (this.length === 1 && this[0]._private.bbCache != null && !this[0]._private.styleDirty && (options === undefined || options.useCache === undefined || options.useCache === true)) {\n    if (options === undefined) {\n      options = defBbOpts;\n    } else {\n      options = filledBbOpts(options);\n    }\n    bounds = cachedBoundingBoxImpl(this[0], options);\n  } else {\n    bounds = makeBoundingBox();\n    options = options || defBbOpts;\n    var opts = filledBbOpts(options);\n    var eles = this;\n    var cy = eles.cy();\n    var styleEnabled = cy.styleEnabled();\n    if (styleEnabled) {\n      for (var i = 0; i < eles.length; i++) {\n        var ele = eles[i];\n        var _p = ele._private;\n        var currPosKey = getBoundingBoxPosKey(ele);\n        var isPosKeySame = _p.bbCachePosKey === currPosKey;\n        var useCache = opts.useCache && isPosKeySame && !_p.styleDirty;\n        ele.recalculateRenderedStyle(useCache);\n      }\n    }\n    this.updateCompoundBounds(!options.useCache);\n    for (var _i = 0; _i < eles.length; _i++) {\n      var _ele = eles[_i];\n      updateBoundsFromBox(bounds, cachedBoundingBoxImpl(_ele, opts));\n    }\n  }\n  bounds.x1 = noninf(bounds.x1);\n  bounds.y1 = noninf(bounds.y1);\n  bounds.x2 = noninf(bounds.x2);\n  bounds.y2 = noninf(bounds.y2);\n  bounds.w = noninf(bounds.x2 - bounds.x1);\n  bounds.h = noninf(bounds.y2 - bounds.y1);\n  return bounds;\n};\nelesfn$b.dirtyBoundingBoxCache = function () {\n  for (var i = 0; i < this.length; i++) {\n    var _p = this[i]._private;\n    _p.bbCache = null;\n    _p.bbCachePosKey = null;\n    _p.bodyBounds = null;\n    _p.overlayBounds = null;\n    _p.labelBounds.all = null;\n    _p.labelBounds.source = null;\n    _p.labelBounds.target = null;\n    _p.labelBounds.main = null;\n    _p.labelBounds.sourceRot = null;\n    _p.labelBounds.targetRot = null;\n    _p.labelBounds.mainRot = null;\n    _p.arrowBounds.source = null;\n    _p.arrowBounds.target = null;\n    _p.arrowBounds['mid-source'] = null;\n    _p.arrowBounds['mid-target'] = null;\n  }\n  this.emitAndNotify('bounds');\n  return this;\n};\n\n// private helper to get bounding box for custom node positions\n// - good for perf in certain cases but currently requires dirtying the rendered style\n// - would be better to not modify the nodes but the nodes are read directly everywhere in the renderer...\n// - try to use for only things like discrete layouts where the node position would change anyway\nelesfn$b.boundingBoxAt = function (fn) {\n  var nodes = this.nodes();\n  var cy = this.cy();\n  var hasCompoundNodes = cy.hasCompoundNodes();\n  var parents = cy.collection();\n  if (hasCompoundNodes) {\n    parents = nodes.filter(function (node) {\n      return node.isParent();\n    });\n    nodes = nodes.not(parents);\n  }\n  if (plainObject(fn)) {\n    var obj = fn;\n    fn = function fn() {\n      return obj;\n    };\n  }\n  var storeOldPos = function storeOldPos(node, i) {\n    return node._private.bbAtOldPos = fn(node, i);\n  };\n  var getOldPos = function getOldPos(node) {\n    return node._private.bbAtOldPos;\n  };\n  cy.startBatch();\n  nodes.forEach(storeOldPos).silentPositions(fn);\n  if (hasCompoundNodes) {\n    parents.dirtyCompoundBoundsCache();\n    parents.dirtyBoundingBoxCache();\n    parents.updateCompoundBounds(true); // force update b/c we're inside a batch cycle\n  }\n\n  var bb = copyBoundingBox(this.boundingBox({\n    useCache: false\n  }));\n  nodes.silentPositions(getOldPos);\n  if (hasCompoundNodes) {\n    parents.dirtyCompoundBoundsCache();\n    parents.dirtyBoundingBoxCache();\n    parents.updateCompoundBounds(true); // force update b/c we're inside a batch cycle\n  }\n\n  cy.endBatch();\n  return bb;\n};\nfn$3.boundingbox = fn$3.bb = fn$3.boundingBox;\nfn$3.renderedBoundingbox = fn$3.renderedBoundingBox;\nvar bounds = elesfn$b;\n\nvar fn$2, elesfn$a;\nfn$2 = elesfn$a = {};\nvar defineDimFns = function defineDimFns(opts) {\n  opts.uppercaseName = capitalize(opts.name);\n  opts.autoName = 'auto' + opts.uppercaseName;\n  opts.labelName = 'label' + opts.uppercaseName;\n  opts.outerName = 'outer' + opts.uppercaseName;\n  opts.uppercaseOuterName = capitalize(opts.outerName);\n  fn$2[opts.name] = function dimImpl() {\n    var ele = this[0];\n    var _p = ele._private;\n    var cy = _p.cy;\n    var styleEnabled = cy._private.styleEnabled;\n    if (ele) {\n      if (styleEnabled) {\n        if (ele.isParent()) {\n          ele.updateCompoundBounds();\n          return _p[opts.autoName] || 0;\n        }\n        var d = ele.pstyle(opts.name);\n        switch (d.strValue) {\n          case 'label':\n            ele.recalculateRenderedStyle();\n            return _p.rstyle[opts.labelName] || 0;\n          default:\n            return d.pfValue;\n        }\n      } else {\n        return 1;\n      }\n    }\n  };\n  fn$2['outer' + opts.uppercaseName] = function outerDimImpl() {\n    var ele = this[0];\n    var _p = ele._private;\n    var cy = _p.cy;\n    var styleEnabled = cy._private.styleEnabled;\n    if (ele) {\n      if (styleEnabled) {\n        var dim = ele[opts.name]();\n        var border = ele.pstyle('border-width').pfValue; // n.b. 1/2 each side\n        var padding = 2 * ele.padding();\n        return dim + border + padding;\n      } else {\n        return 1;\n      }\n    }\n  };\n  fn$2['rendered' + opts.uppercaseName] = function renderedDimImpl() {\n    var ele = this[0];\n    if (ele) {\n      var d = ele[opts.name]();\n      return d * this.cy().zoom();\n    }\n  };\n  fn$2['rendered' + opts.uppercaseOuterName] = function renderedOuterDimImpl() {\n    var ele = this[0];\n    if (ele) {\n      var od = ele[opts.outerName]();\n      return od * this.cy().zoom();\n    }\n  };\n};\ndefineDimFns({\n  name: 'width'\n});\ndefineDimFns({\n  name: 'height'\n});\nelesfn$a.padding = function () {\n  var ele = this[0];\n  var _p = ele._private;\n  if (ele.isParent()) {\n    ele.updateCompoundBounds();\n    if (_p.autoPadding !== undefined) {\n      return _p.autoPadding;\n    } else {\n      return ele.pstyle('padding').pfValue;\n    }\n  } else {\n    return ele.pstyle('padding').pfValue;\n  }\n};\nelesfn$a.paddedHeight = function () {\n  var ele = this[0];\n  return ele.height() + 2 * ele.padding();\n};\nelesfn$a.paddedWidth = function () {\n  var ele = this[0];\n  return ele.width() + 2 * ele.padding();\n};\nvar widthHeight = elesfn$a;\n\nvar ifEdge = function ifEdge(ele, getValue) {\n  if (ele.isEdge()) {\n    return getValue(ele);\n  }\n};\nvar ifEdgeRenderedPosition = function ifEdgeRenderedPosition(ele, getPoint) {\n  if (ele.isEdge()) {\n    var cy = ele.cy();\n    return modelToRenderedPosition(getPoint(ele), cy.zoom(), cy.pan());\n  }\n};\nvar ifEdgeRenderedPositions = function ifEdgeRenderedPositions(ele, getPoints) {\n  if (ele.isEdge()) {\n    var cy = ele.cy();\n    var pan = cy.pan();\n    var zoom = cy.zoom();\n    return getPoints(ele).map(function (p) {\n      return modelToRenderedPosition(p, zoom, pan);\n    });\n  }\n};\nvar controlPoints = function controlPoints(ele) {\n  return ele.renderer().getControlPoints(ele);\n};\nvar segmentPoints = function segmentPoints(ele) {\n  return ele.renderer().getSegmentPoints(ele);\n};\nvar sourceEndpoint = function sourceEndpoint(ele) {\n  return ele.renderer().getSourceEndpoint(ele);\n};\nvar targetEndpoint = function targetEndpoint(ele) {\n  return ele.renderer().getTargetEndpoint(ele);\n};\nvar midpoint = function midpoint(ele) {\n  return ele.renderer().getEdgeMidpoint(ele);\n};\nvar pts = {\n  controlPoints: {\n    get: controlPoints,\n    mult: true\n  },\n  segmentPoints: {\n    get: segmentPoints,\n    mult: true\n  },\n  sourceEndpoint: {\n    get: sourceEndpoint\n  },\n  targetEndpoint: {\n    get: targetEndpoint\n  },\n  midpoint: {\n    get: midpoint\n  }\n};\nvar renderedName = function renderedName(name) {\n  return 'rendered' + name[0].toUpperCase() + name.substr(1);\n};\nvar edgePoints = Object.keys(pts).reduce(function (obj, name) {\n  var spec = pts[name];\n  var rName = renderedName(name);\n  obj[name] = function () {\n    return ifEdge(this, spec.get);\n  };\n  if (spec.mult) {\n    obj[rName] = function () {\n      return ifEdgeRenderedPositions(this, spec.get);\n    };\n  } else {\n    obj[rName] = function () {\n      return ifEdgeRenderedPosition(this, spec.get);\n    };\n  }\n  return obj;\n}, {});\n\nvar dimensions = extend({}, position, bounds, widthHeight, edgePoints);\n\n/*!\nEvent object based on jQuery events, MIT license\n\nhttps://jquery.org/license/\nhttps://tldrlegal.com/license/mit-license\nhttps://github.com/jquery/jquery/blob/master/src/event.js\n*/\n\nvar Event = function Event(src, props) {\n  this.recycle(src, props);\n};\nfunction returnFalse() {\n  return false;\n}\nfunction returnTrue() {\n  return true;\n}\n\n// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\nEvent.prototype = {\n  instanceString: function instanceString() {\n    return 'event';\n  },\n  recycle: function recycle(src, props) {\n    this.isImmediatePropagationStopped = this.isPropagationStopped = this.isDefaultPrevented = returnFalse;\n    if (src != null && src.preventDefault) {\n      // Browser Event object\n      this.type = src.type;\n\n      // Events bubbling up the document may have been marked as prevented\n      // by a handler lower down the tree; reflect the correct value.\n      this.isDefaultPrevented = src.defaultPrevented ? returnTrue : returnFalse;\n    } else if (src != null && src.type) {\n      // Plain object containing all event details\n      props = src;\n    } else {\n      // Event string\n      this.type = src;\n    }\n\n    // Put explicitly provided properties onto the event object\n    if (props != null) {\n      // more efficient to manually copy fields we use\n      this.originalEvent = props.originalEvent;\n      this.type = props.type != null ? props.type : this.type;\n      this.cy = props.cy;\n      this.target = props.target;\n      this.position = props.position;\n      this.renderedPosition = props.renderedPosition;\n      this.namespace = props.namespace;\n      this.layout = props.layout;\n    }\n    if (this.cy != null && this.position != null && this.renderedPosition == null) {\n      // create a rendered position based on the passed position\n      var pos = this.position;\n      var zoom = this.cy.zoom();\n      var pan = this.cy.pan();\n      this.renderedPosition = {\n        x: pos.x * zoom + pan.x,\n        y: pos.y * zoom + pan.y\n      };\n    }\n\n    // Create a timestamp if incoming event doesn't have one\n    this.timeStamp = src && src.timeStamp || Date.now();\n  },\n  preventDefault: function preventDefault() {\n    this.isDefaultPrevented = returnTrue;\n    var e = this.originalEvent;\n    if (!e) {\n      return;\n    }\n\n    // if preventDefault exists run it on the original event\n    if (e.preventDefault) {\n      e.preventDefault();\n    }\n  },\n  stopPropagation: function stopPropagation() {\n    this.isPropagationStopped = returnTrue;\n    var e = this.originalEvent;\n    if (!e) {\n      return;\n    }\n\n    // if stopPropagation exists run it on the original event\n    if (e.stopPropagation) {\n      e.stopPropagation();\n    }\n  },\n  stopImmediatePropagation: function stopImmediatePropagation() {\n    this.isImmediatePropagationStopped = returnTrue;\n    this.stopPropagation();\n  },\n  isDefaultPrevented: returnFalse,\n  isPropagationStopped: returnFalse,\n  isImmediatePropagationStopped: returnFalse\n};\n\nvar eventRegex = /^([^.]+)(\\.(?:[^.]+))?$/; // regex for matching event strings (e.g. \"click.namespace\")\nvar universalNamespace = '.*'; // matches as if no namespace specified and prevents users from unbinding accidentally\n\nvar defaults$8 = {\n  qualifierCompare: function qualifierCompare(q1, q2) {\n    return q1 === q2;\n  },\n  eventMatches: function eventMatches( /*context, listener, eventObj*/\n  ) {\n    return true;\n  },\n  addEventFields: function addEventFields( /*context, evt*/\n  ) {},\n  callbackContext: function callbackContext(context /*, listener, eventObj*/) {\n    return context;\n  },\n  beforeEmit: function beforeEmit( /* context, listener, eventObj */\n  ) {},\n  afterEmit: function afterEmit( /* context, listener, eventObj */\n  ) {},\n  bubble: function bubble( /*context*/\n  ) {\n    return false;\n  },\n  parent: function parent( /*context*/\n  ) {\n    return null;\n  },\n  context: null\n};\nvar defaultsKeys = Object.keys(defaults$8);\nvar emptyOpts = {};\nfunction Emitter() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : emptyOpts;\n  var context = arguments.length > 1 ? arguments[1] : undefined;\n  // micro-optimisation vs Object.assign() -- reduces Element instantiation time\n  for (var i = 0; i < defaultsKeys.length; i++) {\n    var key = defaultsKeys[i];\n    this[key] = opts[key] || defaults$8[key];\n  }\n  this.context = context || this.context;\n  this.listeners = [];\n  this.emitting = 0;\n}\nvar p = Emitter.prototype;\nvar forEachEvent = function forEachEvent(self, handler, events, qualifier, callback, conf, confOverrides) {\n  if (fn$6(qualifier)) {\n    callback = qualifier;\n    qualifier = null;\n  }\n  if (confOverrides) {\n    if (conf == null) {\n      conf = confOverrides;\n    } else {\n      conf = extend({}, conf, confOverrides);\n    }\n  }\n  var eventList = array(events) ? events : events.split(/\\s+/);\n  for (var i = 0; i < eventList.length; i++) {\n    var evt = eventList[i];\n    if (emptyString(evt)) {\n      continue;\n    }\n    var match = evt.match(eventRegex); // type[.namespace]\n\n    if (match) {\n      var type = match[1];\n      var namespace = match[2] ? match[2] : null;\n      var ret = handler(self, evt, type, namespace, qualifier, callback, conf);\n      if (ret === false) {\n        break;\n      } // allow exiting early\n    }\n  }\n};\n\nvar makeEventObj = function makeEventObj(self, obj) {\n  self.addEventFields(self.context, obj);\n  return new Event(obj.type, obj);\n};\nvar forEachEventObj = function forEachEventObj(self, handler, events) {\n  if (event(events)) {\n    handler(self, events);\n    return;\n  } else if (plainObject(events)) {\n    handler(self, makeEventObj(self, events));\n    return;\n  }\n  var eventList = array(events) ? events : events.split(/\\s+/);\n  for (var i = 0; i < eventList.length; i++) {\n    var evt = eventList[i];\n    if (emptyString(evt)) {\n      continue;\n    }\n    var match = evt.match(eventRegex); // type[.namespace]\n\n    if (match) {\n      var type = match[1];\n      var namespace = match[2] ? match[2] : null;\n      var eventObj = makeEventObj(self, {\n        type: type,\n        namespace: namespace,\n        target: self.context\n      });\n      handler(self, eventObj);\n    }\n  }\n};\np.on = p.addListener = function (events, qualifier, callback, conf, confOverrides) {\n  forEachEvent(this, function (self, event, type, namespace, qualifier, callback, conf) {\n    if (fn$6(callback)) {\n      self.listeners.push({\n        event: event,\n        // full event string\n        callback: callback,\n        // callback to run\n        type: type,\n        // the event type (e.g. 'click')\n        namespace: namespace,\n        // the event namespace (e.g. \".foo\")\n        qualifier: qualifier,\n        // a restriction on whether to match this emitter\n        conf: conf // additional configuration\n      });\n    }\n  }, events, qualifier, callback, conf, confOverrides);\n  return this;\n};\np.one = function (events, qualifier, callback, conf) {\n  return this.on(events, qualifier, callback, conf, {\n    one: true\n  });\n};\np.removeListener = p.off = function (events, qualifier, callback, conf) {\n  var _this = this;\n  if (this.emitting !== 0) {\n    this.listeners = copyArray$1(this.listeners);\n  }\n  var listeners = this.listeners;\n  var _loop = function _loop(i) {\n    var listener = listeners[i];\n    forEachEvent(_this, function (self, event, type, namespace, qualifier, callback /*, conf*/) {\n      if ((listener.type === type || events === '*') && (!namespace && listener.namespace !== '.*' || listener.namespace === namespace) && (!qualifier || self.qualifierCompare(listener.qualifier, qualifier)) && (!callback || listener.callback === callback)) {\n        listeners.splice(i, 1);\n        return false;\n      }\n    }, events, qualifier, callback, conf);\n  };\n  for (var i = listeners.length - 1; i >= 0; i--) {\n    _loop(i);\n  }\n  return this;\n};\np.removeAllListeners = function () {\n  return this.removeListener('*');\n};\np.emit = p.trigger = function (events, extraParams, manualCallback) {\n  var listeners = this.listeners;\n  var numListenersBeforeEmit = listeners.length;\n  this.emitting++;\n  if (!array(extraParams)) {\n    extraParams = [extraParams];\n  }\n  forEachEventObj(this, function (self, eventObj) {\n    if (manualCallback != null) {\n      listeners = [{\n        event: eventObj.event,\n        type: eventObj.type,\n        namespace: eventObj.namespace,\n        callback: manualCallback\n      }];\n      numListenersBeforeEmit = listeners.length;\n    }\n    var _loop2 = function _loop2(i) {\n      var listener = listeners[i];\n      if (listener.type === eventObj.type && (!listener.namespace || listener.namespace === eventObj.namespace || listener.namespace === universalNamespace) && self.eventMatches(self.context, listener, eventObj)) {\n        var args = [eventObj];\n        if (extraParams != null) {\n          push(args, extraParams);\n        }\n        self.beforeEmit(self.context, listener, eventObj);\n        if (listener.conf && listener.conf.one) {\n          self.listeners = self.listeners.filter(function (l) {\n            return l !== listener;\n          });\n        }\n        var context = self.callbackContext(self.context, listener, eventObj);\n        var ret = listener.callback.apply(context, args);\n        self.afterEmit(self.context, listener, eventObj);\n        if (ret === false) {\n          eventObj.stopPropagation();\n          eventObj.preventDefault();\n        }\n      } // if listener matches\n    };\n    for (var i = 0; i < numListenersBeforeEmit; i++) {\n      _loop2(i);\n    } // for listener\n\n    if (self.bubble(self.context) && !eventObj.isPropagationStopped()) {\n      self.parent(self.context).emit(eventObj, extraParams);\n    }\n  }, events);\n  this.emitting--;\n  return this;\n};\n\nvar emitterOptions$1 = {\n  qualifierCompare: function qualifierCompare(selector1, selector2) {\n    if (selector1 == null || selector2 == null) {\n      return selector1 == null && selector2 == null;\n    } else {\n      return selector1.sameText(selector2);\n    }\n  },\n  eventMatches: function eventMatches(ele, listener, eventObj) {\n    var selector = listener.qualifier;\n    if (selector != null) {\n      return ele !== eventObj.target && element(eventObj.target) && selector.matches(eventObj.target);\n    }\n    return true;\n  },\n  addEventFields: function addEventFields(ele, evt) {\n    evt.cy = ele.cy();\n    evt.target = ele;\n  },\n  callbackContext: function callbackContext(ele, listener, eventObj) {\n    return listener.qualifier != null ? eventObj.target : ele;\n  },\n  beforeEmit: function beforeEmit(context, listener /*, eventObj*/) {\n    if (listener.conf && listener.conf.once) {\n      listener.conf.onceCollection.removeListener(listener.event, listener.qualifier, listener.callback);\n    }\n  },\n  bubble: function bubble() {\n    return true;\n  },\n  parent: function parent(ele) {\n    return ele.isChild() ? ele.parent() : ele.cy();\n  }\n};\nvar argSelector$1 = function argSelector(arg) {\n  if (string(arg)) {\n    return new Selector(arg);\n  } else {\n    return arg;\n  }\n};\nvar elesfn$9 = {\n  createEmitter: function createEmitter() {\n    for (var i = 0; i < this.length; i++) {\n      var ele = this[i];\n      var _p = ele._private;\n      if (!_p.emitter) {\n        _p.emitter = new Emitter(emitterOptions$1, ele);\n      }\n    }\n    return this;\n  },\n  emitter: function emitter() {\n    return this._private.emitter;\n  },\n  on: function on(events, selector, callback) {\n    var argSel = argSelector$1(selector);\n    for (var i = 0; i < this.length; i++) {\n      var ele = this[i];\n      ele.emitter().on(events, argSel, callback);\n    }\n    return this;\n  },\n  removeListener: function removeListener(events, selector, callback) {\n    var argSel = argSelector$1(selector);\n    for (var i = 0; i < this.length; i++) {\n      var ele = this[i];\n      ele.emitter().removeListener(events, argSel, callback);\n    }\n    return this;\n  },\n  removeAllListeners: function removeAllListeners() {\n    for (var i = 0; i < this.length; i++) {\n      var ele = this[i];\n      ele.emitter().removeAllListeners();\n    }\n    return this;\n  },\n  one: function one(events, selector, callback) {\n    var argSel = argSelector$1(selector);\n    for (var i = 0; i < this.length; i++) {\n      var ele = this[i];\n      ele.emitter().one(events, argSel, callback);\n    }\n    return this;\n  },\n  once: function once(events, selector, callback) {\n    var argSel = argSelector$1(selector);\n    for (var i = 0; i < this.length; i++) {\n      var ele = this[i];\n      ele.emitter().on(events, argSel, callback, {\n        once: true,\n        onceCollection: this\n      });\n    }\n  },\n  emit: function emit(events, extraParams) {\n    for (var i = 0; i < this.length; i++) {\n      var ele = this[i];\n      ele.emitter().emit(events, extraParams);\n    }\n    return this;\n  },\n  emitAndNotify: function emitAndNotify(event, extraParams) {\n    // for internal use only\n    if (this.length === 0) {\n      return;\n    } // empty collections don't need to notify anything\n\n    // notify renderer\n    this.cy().notify(event, this);\n    this.emit(event, extraParams);\n    return this;\n  }\n};\ndefine.eventAliasesOn(elesfn$9);\n\nvar elesfn$8 = {\n  nodes: function nodes(selector) {\n    return this.filter(function (ele) {\n      return ele.isNode();\n    }).filter(selector);\n  },\n  edges: function edges(selector) {\n    return this.filter(function (ele) {\n      return ele.isEdge();\n    }).filter(selector);\n  },\n  // internal helper to get nodes and edges as separate collections with single iteration over elements\n  byGroup: function byGroup() {\n    var nodes = this.spawn();\n    var edges = this.spawn();\n    for (var i = 0; i < this.length; i++) {\n      var ele = this[i];\n      if (ele.isNode()) {\n        nodes.push(ele);\n      } else {\n        edges.push(ele);\n      }\n    }\n    return {\n      nodes: nodes,\n      edges: edges\n    };\n  },\n  filter: function filter(_filter, thisArg) {\n    if (_filter === undefined) {\n      // check this first b/c it's the most common/performant case\n      return this;\n    } else if (string(_filter) || elementOrCollection(_filter)) {\n      return new Selector(_filter).filter(this);\n    } else if (fn$6(_filter)) {\n      var filterEles = this.spawn();\n      var eles = this;\n      for (var i = 0; i < eles.length; i++) {\n        var ele = eles[i];\n        var include = thisArg ? _filter.apply(thisArg, [ele, i, eles]) : _filter(ele, i, eles);\n        if (include) {\n          filterEles.push(ele);\n        }\n      }\n      return filterEles;\n    }\n    return this.spawn(); // if not handled by above, give 'em an empty collection\n  },\n\n  not: function not(toRemove) {\n    if (!toRemove) {\n      return this;\n    } else {\n      if (string(toRemove)) {\n        toRemove = this.filter(toRemove);\n      }\n      var elements = this.spawn();\n      for (var i = 0; i < this.length; i++) {\n        var element = this[i];\n        var remove = toRemove.has(element);\n        if (!remove) {\n          elements.push(element);\n        }\n      }\n      return elements;\n    }\n  },\n  absoluteComplement: function absoluteComplement() {\n    var cy = this.cy();\n    return cy.mutableElements().not(this);\n  },\n  intersect: function intersect(other) {\n    // if a selector is specified, then filter by it instead\n    if (string(other)) {\n      var selector = other;\n      return this.filter(selector);\n    }\n    var elements = this.spawn();\n    var col1 = this;\n    var col2 = other;\n    var col1Smaller = this.length < other.length;\n    var colS = col1Smaller ? col1 : col2;\n    var colL = col1Smaller ? col2 : col1;\n    for (var i = 0; i < colS.length; i++) {\n      var ele = colS[i];\n      if (colL.has(ele)) {\n        elements.push(ele);\n      }\n    }\n    return elements;\n  },\n  xor: function xor(other) {\n    var cy = this._private.cy;\n    if (string(other)) {\n      other = cy.$(other);\n    }\n    var elements = this.spawn();\n    var col1 = this;\n    var col2 = other;\n    var add = function add(col, other) {\n      for (var i = 0; i < col.length; i++) {\n        var ele = col[i];\n        var id = ele._private.data.id;\n        var inOther = other.hasElementWithId(id);\n        if (!inOther) {\n          elements.push(ele);\n        }\n      }\n    };\n    add(col1, col2);\n    add(col2, col1);\n    return elements;\n  },\n  diff: function diff(other) {\n    var cy = this._private.cy;\n    if (string(other)) {\n      other = cy.$(other);\n    }\n    var left = this.spawn();\n    var right = this.spawn();\n    var both = this.spawn();\n    var col1 = this;\n    var col2 = other;\n    var add = function add(col, other, retEles) {\n      for (var i = 0; i < col.length; i++) {\n        var ele = col[i];\n        var id = ele._private.data.id;\n        var inOther = other.hasElementWithId(id);\n        if (inOther) {\n          both.merge(ele);\n        } else {\n          retEles.push(ele);\n        }\n      }\n    };\n    add(col1, col2, left);\n    add(col2, col1, right);\n    return {\n      left: left,\n      right: right,\n      both: both\n    };\n  },\n  add: function add(toAdd) {\n    var cy = this._private.cy;\n    if (!toAdd) {\n      return this;\n    }\n    if (string(toAdd)) {\n      var selector = toAdd;\n      toAdd = cy.mutableElements().filter(selector);\n    }\n    var elements = this.spawnSelf();\n    for (var i = 0; i < toAdd.length; i++) {\n      var ele = toAdd[i];\n      var add = !this.has(ele);\n      if (add) {\n        elements.push(ele);\n      }\n    }\n    return elements;\n  },\n  // in place merge on calling collection\n  merge: function merge(toAdd) {\n    var _p = this._private;\n    var cy = _p.cy;\n    if (!toAdd) {\n      return this;\n    }\n    if (toAdd && string(toAdd)) {\n      var selector = toAdd;\n      toAdd = cy.mutableElements().filter(selector);\n    }\n    var map = _p.map;\n    for (var i = 0; i < toAdd.length; i++) {\n      var toAddEle = toAdd[i];\n      var id = toAddEle._private.data.id;\n      var add = !map.has(id);\n      if (add) {\n        var index = this.length++;\n        this[index] = toAddEle;\n        map.set(id, {\n          ele: toAddEle,\n          index: index\n        });\n      }\n    }\n    return this; // chaining\n  },\n\n  unmergeAt: function unmergeAt(i) {\n    var ele = this[i];\n    var id = ele.id();\n    var _p = this._private;\n    var map = _p.map;\n\n    // remove ele\n    this[i] = undefined;\n    map[\"delete\"](id);\n    var unmergedLastEle = i === this.length - 1;\n\n    // replace empty spot with last ele in collection\n    if (this.length > 1 && !unmergedLastEle) {\n      var lastEleI = this.length - 1;\n      var lastEle = this[lastEleI];\n      var lastEleId = lastEle._private.data.id;\n      this[lastEleI] = undefined;\n      this[i] = lastEle;\n      map.set(lastEleId, {\n        ele: lastEle,\n        index: i\n      });\n    }\n\n    // the collection is now 1 ele smaller\n    this.length--;\n    return this;\n  },\n  // remove single ele in place in calling collection\n  unmergeOne: function unmergeOne(ele) {\n    ele = ele[0];\n    var _p = this._private;\n    var id = ele._private.data.id;\n    var map = _p.map;\n    var entry = map.get(id);\n    if (!entry) {\n      return this; // no need to remove\n    }\n\n    var i = entry.index;\n    this.unmergeAt(i);\n    return this;\n  },\n  // remove eles in place on calling collection\n  unmerge: function unmerge(toRemove) {\n    var cy = this._private.cy;\n    if (!toRemove) {\n      return this;\n    }\n    if (toRemove && string(toRemove)) {\n      var selector = toRemove;\n      toRemove = cy.mutableElements().filter(selector);\n    }\n    for (var i = 0; i < toRemove.length; i++) {\n      this.unmergeOne(toRemove[i]);\n    }\n    return this; // chaining\n  },\n\n  unmergeBy: function unmergeBy(toRmFn) {\n    for (var i = this.length - 1; i >= 0; i--) {\n      var ele = this[i];\n      if (toRmFn(ele)) {\n        this.unmergeAt(i);\n      }\n    }\n    return this;\n  },\n  map: function map(mapFn, thisArg) {\n    var arr = [];\n    var eles = this;\n    for (var i = 0; i < eles.length; i++) {\n      var ele = eles[i];\n      var ret = thisArg ? mapFn.apply(thisArg, [ele, i, eles]) : mapFn(ele, i, eles);\n      arr.push(ret);\n    }\n    return arr;\n  },\n  reduce: function reduce(fn, initialValue) {\n    var val = initialValue;\n    var eles = this;\n    for (var i = 0; i < eles.length; i++) {\n      val = fn(val, eles[i], i, eles);\n    }\n    return val;\n  },\n  max: function max(valFn, thisArg) {\n    var max = -Infinity;\n    var maxEle;\n    var eles = this;\n    for (var i = 0; i < eles.length; i++) {\n      var ele = eles[i];\n      var val = thisArg ? valFn.apply(thisArg, [ele, i, eles]) : valFn(ele, i, eles);\n      if (val > max) {\n        max = val;\n        maxEle = ele;\n      }\n    }\n    return {\n      value: max,\n      ele: maxEle\n    };\n  },\n  min: function min(valFn, thisArg) {\n    var min = Infinity;\n    var minEle;\n    var eles = this;\n    for (var i = 0; i < eles.length; i++) {\n      var ele = eles[i];\n      var val = thisArg ? valFn.apply(thisArg, [ele, i, eles]) : valFn(ele, i, eles);\n      if (val < min) {\n        min = val;\n        minEle = ele;\n      }\n    }\n    return {\n      value: min,\n      ele: minEle\n    };\n  }\n};\n\n// aliases\nvar fn$1 = elesfn$8;\nfn$1['u'] = fn$1['|'] = fn$1['+'] = fn$1.union = fn$1.or = fn$1.add;\nfn$1['\\\\'] = fn$1['!'] = fn$1['-'] = fn$1.difference = fn$1.relativeComplement = fn$1.subtract = fn$1.not;\nfn$1['n'] = fn$1['&'] = fn$1['.'] = fn$1.and = fn$1.intersection = fn$1.intersect;\nfn$1['^'] = fn$1['(+)'] = fn$1['(-)'] = fn$1.symmetricDifference = fn$1.symdiff = fn$1.xor;\nfn$1.fnFilter = fn$1.filterFn = fn$1.stdFilter = fn$1.filter;\nfn$1.complement = fn$1.abscomp = fn$1.absoluteComplement;\n\nvar elesfn$7 = {\n  isNode: function isNode() {\n    return this.group() === 'nodes';\n  },\n  isEdge: function isEdge() {\n    return this.group() === 'edges';\n  },\n  isLoop: function isLoop() {\n    return this.isEdge() && this.source()[0] === this.target()[0];\n  },\n  isSimple: function isSimple() {\n    return this.isEdge() && this.source()[0] !== this.target()[0];\n  },\n  group: function group() {\n    var ele = this[0];\n    if (ele) {\n      return ele._private.group;\n    }\n  }\n};\n\n/**\n *  Elements are drawn in a specific order based on compound depth (low to high), the element type (nodes above edges),\n *  and z-index (low to high).  These styles affect how this applies:\n *\n *  z-compound-depth: May be `bottom | orphan | auto | top`.  The first drawn is `bottom`, then `orphan` which is the\n *      same depth as the root of the compound graph, followed by the default value `auto` which draws in order from\n *      root to leaves of the compound graph.  The last drawn is `top`.\n *  z-index-compare: May be `auto | manual`.  The default value is `auto` which always draws edges under nodes.\n *      `manual` ignores this convention and draws based on the `z-index` value setting.\n *  z-index: An integer value that affects the relative draw order of elements.  In general, an element with a higher\n *      `z-index` will be drawn on top of an element with a lower `z-index`.\n */\nvar zIndexSort = function zIndexSort(a, b) {\n  var cy = a.cy();\n  var hasCompoundNodes = cy.hasCompoundNodes();\n  function getDepth(ele) {\n    var style = ele.pstyle('z-compound-depth');\n    if (style.value === 'auto') {\n      return hasCompoundNodes ? ele.zDepth() : 0;\n    } else if (style.value === 'bottom') {\n      return -1;\n    } else if (style.value === 'top') {\n      return MAX_INT$1;\n    }\n    // 'orphan'\n    return 0;\n  }\n  var depthDiff = getDepth(a) - getDepth(b);\n  if (depthDiff !== 0) {\n    return depthDiff;\n  }\n  function getEleDepth(ele) {\n    var style = ele.pstyle('z-index-compare');\n    if (style.value === 'auto') {\n      return ele.isNode() ? 1 : 0;\n    }\n    // 'manual'\n    return 0;\n  }\n  var eleDiff = getEleDepth(a) - getEleDepth(b);\n  if (eleDiff !== 0) {\n    return eleDiff;\n  }\n  var zDiff = a.pstyle('z-index').value - b.pstyle('z-index').value;\n  if (zDiff !== 0) {\n    return zDiff;\n  }\n  // compare indices in the core (order added to graph w/ last on top)\n  return a.poolIndex() - b.poolIndex();\n};\n\nvar elesfn$6 = {\n  forEach: function forEach(fn, thisArg) {\n    if (fn$6(fn)) {\n      var N = this.length;\n      for (var i = 0; i < N; i++) {\n        var ele = this[i];\n        var ret = thisArg ? fn.apply(thisArg, [ele, i, this]) : fn(ele, i, this);\n        if (ret === false) {\n          break;\n        } // exit each early on return false\n      }\n    }\n\n    return this;\n  },\n  toArray: function toArray() {\n    var array = [];\n    for (var i = 0; i < this.length; i++) {\n      array.push(this[i]);\n    }\n    return array;\n  },\n  slice: function slice(start, end) {\n    var array = [];\n    var thisSize = this.length;\n    if (end == null) {\n      end = thisSize;\n    }\n    if (start == null) {\n      start = 0;\n    }\n    if (start < 0) {\n      start = thisSize + start;\n    }\n    if (end < 0) {\n      end = thisSize + end;\n    }\n    for (var i = start; i >= 0 && i < end && i < thisSize; i++) {\n      array.push(this[i]);\n    }\n    return this.spawn(array);\n  },\n  size: function size() {\n    return this.length;\n  },\n  eq: function eq(i) {\n    return this[i] || this.spawn();\n  },\n  first: function first() {\n    return this[0] || this.spawn();\n  },\n  last: function last() {\n    return this[this.length - 1] || this.spawn();\n  },\n  empty: function empty() {\n    return this.length === 0;\n  },\n  nonempty: function nonempty() {\n    return !this.empty();\n  },\n  sort: function sort(sortFn) {\n    if (!fn$6(sortFn)) {\n      return this;\n    }\n    var sorted = this.toArray().sort(sortFn);\n    return this.spawn(sorted);\n  },\n  sortByZIndex: function sortByZIndex() {\n    return this.sort(zIndexSort);\n  },\n  zDepth: function zDepth() {\n    var ele = this[0];\n    if (!ele) {\n      return undefined;\n    }\n\n    // let cy = ele.cy();\n    var _p = ele._private;\n    var group = _p.group;\n    if (group === 'nodes') {\n      var depth = _p.data.parent ? ele.parents().size() : 0;\n      if (!ele.isParent()) {\n        return MAX_INT$1 - 1; // childless nodes always on top\n      }\n\n      return depth;\n    } else {\n      var src = _p.source;\n      var tgt = _p.target;\n      var srcDepth = src.zDepth();\n      var tgtDepth = tgt.zDepth();\n      return Math.max(srcDepth, tgtDepth, 0); // depth of deepest parent\n    }\n  }\n};\n\nelesfn$6.each = elesfn$6.forEach;\nvar defineSymbolIterator = function defineSymbolIterator() {\n  var typeofUndef = \"undefined\" ;\n  var isIteratorSupported = (typeof Symbol === \"undefined\" ? \"undefined\" : _typeof(Symbol)) != typeofUndef && _typeof(Symbol.iterator) != typeofUndef; // eslint-disable-line no-undef\n\n  if (isIteratorSupported) {\n    elesfn$6[Symbol.iterator] = function () {\n      var _this = this;\n      // eslint-disable-line no-undef\n      var entry = {\n        value: undefined,\n        done: false\n      };\n      var i = 0;\n      var length = this.length;\n      return _defineProperty$1({\n        next: function next() {\n          if (i < length) {\n            entry.value = _this[i++];\n          } else {\n            entry.value = undefined;\n            entry.done = true;\n          }\n          return entry;\n        }\n      }, Symbol.iterator, function () {\n        // eslint-disable-line no-undef\n        return this;\n      });\n    };\n  }\n};\ndefineSymbolIterator();\n\nvar getLayoutDimensionOptions = defaults$g({\n  nodeDimensionsIncludeLabels: false\n});\nvar elesfn$5 = {\n  // Calculates and returns node dimensions { x, y } based on options given\n  layoutDimensions: function layoutDimensions(options) {\n    options = getLayoutDimensionOptions(options);\n    var dims;\n    if (!this.takesUpSpace()) {\n      dims = {\n        w: 0,\n        h: 0\n      };\n    } else if (options.nodeDimensionsIncludeLabels) {\n      var bbDim = this.boundingBox();\n      dims = {\n        w: bbDim.w,\n        h: bbDim.h\n      };\n    } else {\n      dims = {\n        w: this.outerWidth(),\n        h: this.outerHeight()\n      };\n    }\n\n    // sanitise the dimensions for external layouts (avoid division by zero)\n    if (dims.w === 0 || dims.h === 0) {\n      dims.w = dims.h = 1;\n    }\n    return dims;\n  },\n  // using standard layout options, apply position function (w/ or w/o animation)\n  layoutPositions: function layoutPositions(layout, options, fn) {\n    var nodes = this.nodes().filter(function (n) {\n      return !n.isParent();\n    });\n    var cy = this.cy();\n    var layoutEles = options.eles; // nodes & edges\n    var getMemoizeKey = function getMemoizeKey(node) {\n      return node.id();\n    };\n    var fnMem = memoize$1(fn, getMemoizeKey); // memoized version of position function\n\n    layout.emit({\n      type: 'layoutstart',\n      layout: layout\n    });\n    layout.animations = [];\n    var calculateSpacing = function calculateSpacing(spacing, nodesBb, pos) {\n      var center = {\n        x: nodesBb.x1 + nodesBb.w / 2,\n        y: nodesBb.y1 + nodesBb.h / 2\n      };\n      var spacingVector = {\n        // scale from center of bounding box (not necessarily 0,0)\n        x: (pos.x - center.x) * spacing,\n        y: (pos.y - center.y) * spacing\n      };\n      return {\n        x: center.x + spacingVector.x,\n        y: center.y + spacingVector.y\n      };\n    };\n    var useSpacingFactor = options.spacingFactor && options.spacingFactor !== 1;\n    var spacingBb = function spacingBb() {\n      if (!useSpacingFactor) {\n        return null;\n      }\n      var bb = makeBoundingBox();\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var pos = fnMem(node, i);\n        expandBoundingBoxByPoint(bb, pos.x, pos.y);\n      }\n      return bb;\n    };\n    var bb = spacingBb();\n    var getFinalPos = memoize$1(function (node, i) {\n      var newPos = fnMem(node, i);\n      if (useSpacingFactor) {\n        var spacing = Math.abs(options.spacingFactor);\n        newPos = calculateSpacing(spacing, bb, newPos);\n      }\n      if (options.transform != null) {\n        newPos = options.transform(node, newPos);\n      }\n      return newPos;\n    }, getMemoizeKey);\n    if (options.animate) {\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var newPos = getFinalPos(node, i);\n        var animateNode = options.animateFilter == null || options.animateFilter(node, i);\n        if (animateNode) {\n          var ani = node.animation({\n            position: newPos,\n            duration: options.animationDuration,\n            easing: options.animationEasing\n          });\n          layout.animations.push(ani);\n        } else {\n          node.position(newPos);\n        }\n      }\n      if (options.fit) {\n        var fitAni = cy.animation({\n          fit: {\n            boundingBox: layoutEles.boundingBoxAt(getFinalPos),\n            padding: options.padding\n          },\n          duration: options.animationDuration,\n          easing: options.animationEasing\n        });\n        layout.animations.push(fitAni);\n      } else if (options.zoom !== undefined && options.pan !== undefined) {\n        var zoomPanAni = cy.animation({\n          zoom: options.zoom,\n          pan: options.pan,\n          duration: options.animationDuration,\n          easing: options.animationEasing\n        });\n        layout.animations.push(zoomPanAni);\n      }\n      layout.animations.forEach(function (ani) {\n        return ani.play();\n      });\n      layout.one('layoutready', options.ready);\n      layout.emit({\n        type: 'layoutready',\n        layout: layout\n      });\n      Promise$1.all(layout.animations.map(function (ani) {\n        return ani.promise();\n      })).then(function () {\n        layout.one('layoutstop', options.stop);\n        layout.emit({\n          type: 'layoutstop',\n          layout: layout\n        });\n      });\n    } else {\n      nodes.positions(getFinalPos);\n      if (options.fit) {\n        cy.fit(options.eles, options.padding);\n      }\n      if (options.zoom != null) {\n        cy.zoom(options.zoom);\n      }\n      if (options.pan) {\n        cy.pan(options.pan);\n      }\n      layout.one('layoutready', options.ready);\n      layout.emit({\n        type: 'layoutready',\n        layout: layout\n      });\n      layout.one('layoutstop', options.stop);\n      layout.emit({\n        type: 'layoutstop',\n        layout: layout\n      });\n    }\n    return this; // chaining\n  },\n\n  layout: function layout(options) {\n    var cy = this.cy();\n    return cy.makeLayout(extend({}, options, {\n      eles: this\n    }));\n  }\n};\n\n// aliases:\nelesfn$5.createLayout = elesfn$5.makeLayout = elesfn$5.layout;\n\nfunction styleCache(key, fn, ele) {\n  var _p = ele._private;\n  var cache = _p.styleCache = _p.styleCache || [];\n  var val;\n  if ((val = cache[key]) != null) {\n    return val;\n  } else {\n    val = cache[key] = fn(ele);\n    return val;\n  }\n}\nfunction cacheStyleFunction(key, fn) {\n  key = hashString(key);\n  return function cachedStyleFunction(ele) {\n    return styleCache(key, fn, ele);\n  };\n}\nfunction cachePrototypeStyleFunction(key, fn) {\n  key = hashString(key);\n  var selfFn = function selfFn(ele) {\n    return fn.call(ele);\n  };\n  return function cachedPrototypeStyleFunction() {\n    var ele = this[0];\n    if (ele) {\n      return styleCache(key, selfFn, ele);\n    }\n  };\n}\nvar elesfn$4 = {\n  recalculateRenderedStyle: function recalculateRenderedStyle(useCache) {\n    var cy = this.cy();\n    var renderer = cy.renderer();\n    var styleEnabled = cy.styleEnabled();\n    if (renderer && styleEnabled) {\n      renderer.recalculateRenderedStyle(this, useCache);\n    }\n    return this;\n  },\n  dirtyStyleCache: function dirtyStyleCache() {\n    var cy = this.cy();\n    var dirty = function dirty(ele) {\n      return ele._private.styleCache = null;\n    };\n    if (cy.hasCompoundNodes()) {\n      var eles;\n      eles = this.spawnSelf().merge(this.descendants()).merge(this.parents());\n      eles.merge(eles.connectedEdges());\n      eles.forEach(dirty);\n    } else {\n      this.forEach(function (ele) {\n        dirty(ele);\n        ele.connectedEdges().forEach(dirty);\n      });\n    }\n    return this;\n  },\n  // fully updates (recalculates) the style for the elements\n  updateStyle: function updateStyle(notifyRenderer) {\n    var cy = this._private.cy;\n    if (!cy.styleEnabled()) {\n      return this;\n    }\n    if (cy.batching()) {\n      var bEles = cy._private.batchStyleEles;\n      bEles.merge(this);\n      return this; // chaining and exit early when batching\n    }\n\n    var hasCompounds = cy.hasCompoundNodes();\n    var updatedEles = this;\n    notifyRenderer = notifyRenderer || notifyRenderer === undefined ? true : false;\n    if (hasCompounds) {\n      // then add everything up and down for compound selector checks\n      updatedEles = this.spawnSelf().merge(this.descendants()).merge(this.parents());\n    }\n\n    // let changedEles = style.apply( updatedEles );\n    var changedEles = updatedEles;\n    if (notifyRenderer) {\n      changedEles.emitAndNotify('style'); // let renderer know we changed style\n    } else {\n      changedEles.emit('style'); // just fire the event\n    }\n\n    updatedEles.forEach(function (ele) {\n      return ele._private.styleDirty = true;\n    });\n    return this; // chaining\n  },\n\n  // private: clears dirty flag and recalculates style\n  cleanStyle: function cleanStyle() {\n    var cy = this.cy();\n    if (!cy.styleEnabled()) {\n      return;\n    }\n    for (var i = 0; i < this.length; i++) {\n      var ele = this[i];\n      if (ele._private.styleDirty) {\n        // n.b. this flag should be set before apply() to avoid potential infinite recursion\n        ele._private.styleDirty = false;\n        cy.style().apply(ele);\n      }\n    }\n  },\n  // get the internal parsed style object for the specified property\n  parsedStyle: function parsedStyle(property) {\n    var includeNonDefault = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var ele = this[0];\n    var cy = ele.cy();\n    if (!cy.styleEnabled()) {\n      return;\n    }\n    if (ele) {\n      this.cleanStyle();\n      var overriddenStyle = ele._private.style[property];\n      if (overriddenStyle != null) {\n        return overriddenStyle;\n      } else if (includeNonDefault) {\n        return cy.style().getDefaultProperty(property);\n      } else {\n        return null;\n      }\n    }\n  },\n  numericStyle: function numericStyle(property) {\n    var ele = this[0];\n    if (!ele.cy().styleEnabled()) {\n      return;\n    }\n    if (ele) {\n      var pstyle = ele.pstyle(property);\n      return pstyle.pfValue !== undefined ? pstyle.pfValue : pstyle.value;\n    }\n  },\n  numericStyleUnits: function numericStyleUnits(property) {\n    var ele = this[0];\n    if (!ele.cy().styleEnabled()) {\n      return;\n    }\n    if (ele) {\n      return ele.pstyle(property).units;\n    }\n  },\n  // get the specified css property as a rendered value (i.e. on-screen value)\n  // or get the whole rendered style if no property specified (NB doesn't allow setting)\n  renderedStyle: function renderedStyle(property) {\n    var cy = this.cy();\n    if (!cy.styleEnabled()) {\n      return this;\n    }\n    var ele = this[0];\n    if (ele) {\n      return cy.style().getRenderedStyle(ele, property);\n    }\n  },\n  // read the calculated css style of the element or override the style (via a bypass)\n  style: function style(name, value) {\n    var cy = this.cy();\n    if (!cy.styleEnabled()) {\n      return this;\n    }\n    var updateTransitions = false;\n    var style = cy.style();\n    if (plainObject(name)) {\n      // then extend the bypass\n      var props = name;\n      style.applyBypass(this, props, updateTransitions);\n      this.emitAndNotify('style'); // let the renderer know we've updated style\n    } else if (string(name)) {\n      if (value === undefined) {\n        // then get the property from the style\n        var ele = this[0];\n        if (ele) {\n          return style.getStylePropertyValue(ele, name);\n        } else {\n          // empty collection => can't get any value\n          return;\n        }\n      } else {\n        // then set the bypass with the property value\n        style.applyBypass(this, name, value, updateTransitions);\n        this.emitAndNotify('style'); // let the renderer know we've updated style\n      }\n    } else if (name === undefined) {\n      var _ele = this[0];\n      if (_ele) {\n        return style.getRawStyle(_ele);\n      } else {\n        // empty collection => can't get any value\n        return;\n      }\n    }\n    return this; // chaining\n  },\n\n  removeStyle: function removeStyle(names) {\n    var cy = this.cy();\n    if (!cy.styleEnabled()) {\n      return this;\n    }\n    var updateTransitions = false;\n    var style = cy.style();\n    var eles = this;\n    if (names === undefined) {\n      for (var i = 0; i < eles.length; i++) {\n        var ele = eles[i];\n        style.removeAllBypasses(ele, updateTransitions);\n      }\n    } else {\n      names = names.split(/\\s+/);\n      for (var _i = 0; _i < eles.length; _i++) {\n        var _ele2 = eles[_i];\n        style.removeBypasses(_ele2, names, updateTransitions);\n      }\n    }\n    this.emitAndNotify('style'); // let the renderer know we've updated style\n\n    return this; // chaining\n  },\n\n  show: function show() {\n    this.css('display', 'element');\n    return this; // chaining\n  },\n\n  hide: function hide() {\n    this.css('display', 'none');\n    return this; // chaining\n  },\n\n  effectiveOpacity: function effectiveOpacity() {\n    var cy = this.cy();\n    if (!cy.styleEnabled()) {\n      return 1;\n    }\n    var hasCompoundNodes = cy.hasCompoundNodes();\n    var ele = this[0];\n    if (ele) {\n      var _p = ele._private;\n      var parentOpacity = ele.pstyle('opacity').value;\n      if (!hasCompoundNodes) {\n        return parentOpacity;\n      }\n      var parents = !_p.data.parent ? null : ele.parents();\n      if (parents) {\n        for (var i = 0; i < parents.length; i++) {\n          var parent = parents[i];\n          var opacity = parent.pstyle('opacity').value;\n          parentOpacity = opacity * parentOpacity;\n        }\n      }\n      return parentOpacity;\n    }\n  },\n  transparent: function transparent() {\n    var cy = this.cy();\n    if (!cy.styleEnabled()) {\n      return false;\n    }\n    var ele = this[0];\n    var hasCompoundNodes = ele.cy().hasCompoundNodes();\n    if (ele) {\n      if (!hasCompoundNodes) {\n        return ele.pstyle('opacity').value === 0;\n      } else {\n        return ele.effectiveOpacity() === 0;\n      }\n    }\n  },\n  backgrounding: function backgrounding() {\n    var cy = this.cy();\n    if (!cy.styleEnabled()) {\n      return false;\n    }\n    var ele = this[0];\n    return ele._private.backgrounding ? true : false;\n  }\n};\nfunction checkCompound(ele, parentOk) {\n  var _p = ele._private;\n  var parents = _p.data.parent ? ele.parents() : null;\n  if (parents) {\n    for (var i = 0; i < parents.length; i++) {\n      var parent = parents[i];\n      if (!parentOk(parent)) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\nfunction defineDerivedStateFunction(specs) {\n  var ok = specs.ok;\n  var edgeOkViaNode = specs.edgeOkViaNode || specs.ok;\n  var parentOk = specs.parentOk || specs.ok;\n  return function () {\n    var cy = this.cy();\n    if (!cy.styleEnabled()) {\n      return true;\n    }\n    var ele = this[0];\n    var hasCompoundNodes = cy.hasCompoundNodes();\n    if (ele) {\n      var _p = ele._private;\n      if (!ok(ele)) {\n        return false;\n      }\n      if (ele.isNode()) {\n        return !hasCompoundNodes || checkCompound(ele, parentOk);\n      } else {\n        var src = _p.source;\n        var tgt = _p.target;\n        return edgeOkViaNode(src) && (!hasCompoundNodes || checkCompound(src, edgeOkViaNode)) && (src === tgt || edgeOkViaNode(tgt) && (!hasCompoundNodes || checkCompound(tgt, edgeOkViaNode)));\n      }\n    }\n  };\n}\nvar eleTakesUpSpace = cacheStyleFunction('eleTakesUpSpace', function (ele) {\n  return ele.pstyle('display').value === 'element' && ele.width() !== 0 && (ele.isNode() ? ele.height() !== 0 : true);\n});\nelesfn$4.takesUpSpace = cachePrototypeStyleFunction('takesUpSpace', defineDerivedStateFunction({\n  ok: eleTakesUpSpace\n}));\nvar eleInteractive = cacheStyleFunction('eleInteractive', function (ele) {\n  return ele.pstyle('events').value === 'yes' && ele.pstyle('visibility').value === 'visible' && eleTakesUpSpace(ele);\n});\nvar parentInteractive = cacheStyleFunction('parentInteractive', function (parent) {\n  return parent.pstyle('visibility').value === 'visible' && eleTakesUpSpace(parent);\n});\nelesfn$4.interactive = cachePrototypeStyleFunction('interactive', defineDerivedStateFunction({\n  ok: eleInteractive,\n  parentOk: parentInteractive,\n  edgeOkViaNode: eleTakesUpSpace\n}));\nelesfn$4.noninteractive = function () {\n  var ele = this[0];\n  if (ele) {\n    return !ele.interactive();\n  }\n};\nvar eleVisible = cacheStyleFunction('eleVisible', function (ele) {\n  return ele.pstyle('visibility').value === 'visible' && ele.pstyle('opacity').pfValue !== 0 && eleTakesUpSpace(ele);\n});\nvar edgeVisibleViaNode = eleTakesUpSpace;\nelesfn$4.visible = cachePrototypeStyleFunction('visible', defineDerivedStateFunction({\n  ok: eleVisible,\n  edgeOkViaNode: edgeVisibleViaNode\n}));\nelesfn$4.hidden = function () {\n  var ele = this[0];\n  if (ele) {\n    return !ele.visible();\n  }\n};\nelesfn$4.isBundledBezier = cachePrototypeStyleFunction('isBundledBezier', function () {\n  if (!this.cy().styleEnabled()) {\n    return false;\n  }\n  return !this.removed() && this.pstyle('curve-style').value === 'bezier' && this.takesUpSpace();\n});\nelesfn$4.bypass = elesfn$4.css = elesfn$4.style;\nelesfn$4.renderedCss = elesfn$4.renderedStyle;\nelesfn$4.removeBypass = elesfn$4.removeCss = elesfn$4.removeStyle;\nelesfn$4.pstyle = elesfn$4.parsedStyle;\n\nvar elesfn$3 = {};\nfunction defineSwitchFunction(params) {\n  return function () {\n    var args = arguments;\n    var changedEles = [];\n\n    // e.g. cy.nodes().select( data, handler )\n    if (args.length === 2) {\n      var data = args[0];\n      var handler = args[1];\n      this.on(params.event, data, handler);\n    }\n\n    // e.g. cy.nodes().select( handler )\n    else if (args.length === 1 && fn$6(args[0])) {\n      var _handler = args[0];\n      this.on(params.event, _handler);\n    }\n\n    // e.g. cy.nodes().select()\n    // e.g. (private) cy.nodes().select(['tapselect'])\n    else if (args.length === 0 || args.length === 1 && array(args[0])) {\n      var addlEvents = args.length === 1 ? args[0] : null;\n      for (var i = 0; i < this.length; i++) {\n        var ele = this[i];\n        var able = !params.ableField || ele._private[params.ableField];\n        var changed = ele._private[params.field] != params.value;\n        if (params.overrideAble) {\n          var overrideAble = params.overrideAble(ele);\n          if (overrideAble !== undefined) {\n            able = overrideAble;\n            if (!overrideAble) {\n              return this;\n            } // to save cycles assume not able for all on override\n          }\n        }\n\n        if (able) {\n          ele._private[params.field] = params.value;\n          if (changed) {\n            changedEles.push(ele);\n          }\n        }\n      }\n      var changedColl = this.spawn(changedEles);\n      changedColl.updateStyle(); // change of state => possible change of style\n      changedColl.emit(params.event);\n      if (addlEvents) {\n        changedColl.emit(addlEvents);\n      }\n    }\n    return this;\n  };\n}\nfunction defineSwitchSet(params) {\n  elesfn$3[params.field] = function () {\n    var ele = this[0];\n    if (ele) {\n      if (params.overrideField) {\n        var val = params.overrideField(ele);\n        if (val !== undefined) {\n          return val;\n        }\n      }\n      return ele._private[params.field];\n    }\n  };\n  elesfn$3[params.on] = defineSwitchFunction({\n    event: params.on,\n    field: params.field,\n    ableField: params.ableField,\n    overrideAble: params.overrideAble,\n    value: true\n  });\n  elesfn$3[params.off] = defineSwitchFunction({\n    event: params.off,\n    field: params.field,\n    ableField: params.ableField,\n    overrideAble: params.overrideAble,\n    value: false\n  });\n}\ndefineSwitchSet({\n  field: 'locked',\n  overrideField: function overrideField(ele) {\n    return ele.cy().autolock() ? true : undefined;\n  },\n  on: 'lock',\n  off: 'unlock'\n});\ndefineSwitchSet({\n  field: 'grabbable',\n  overrideField: function overrideField(ele) {\n    return ele.cy().autoungrabify() || ele.pannable() ? false : undefined;\n  },\n  on: 'grabify',\n  off: 'ungrabify'\n});\ndefineSwitchSet({\n  field: 'selected',\n  ableField: 'selectable',\n  overrideAble: function overrideAble(ele) {\n    return ele.cy().autounselectify() ? false : undefined;\n  },\n  on: 'select',\n  off: 'unselect'\n});\ndefineSwitchSet({\n  field: 'selectable',\n  overrideField: function overrideField(ele) {\n    return ele.cy().autounselectify() ? false : undefined;\n  },\n  on: 'selectify',\n  off: 'unselectify'\n});\nelesfn$3.deselect = elesfn$3.unselect;\nelesfn$3.grabbed = function () {\n  var ele = this[0];\n  if (ele) {\n    return ele._private.grabbed;\n  }\n};\ndefineSwitchSet({\n  field: 'active',\n  on: 'activate',\n  off: 'unactivate'\n});\ndefineSwitchSet({\n  field: 'pannable',\n  on: 'panify',\n  off: 'unpanify'\n});\nelesfn$3.inactive = function () {\n  var ele = this[0];\n  if (ele) {\n    return !ele._private.active;\n  }\n};\n\nvar elesfn$2 = {};\n\n// DAG functions\n////////////////\n\nvar defineDagExtremity = function defineDagExtremity(params) {\n  return function dagExtremityImpl(selector) {\n    var eles = this;\n    var ret = [];\n    for (var i = 0; i < eles.length; i++) {\n      var ele = eles[i];\n      if (!ele.isNode()) {\n        continue;\n      }\n      var disqualified = false;\n      var edges = ele.connectedEdges();\n      for (var j = 0; j < edges.length; j++) {\n        var edge = edges[j];\n        var src = edge.source();\n        var tgt = edge.target();\n        if (params.noIncomingEdges && tgt === ele && src !== ele || params.noOutgoingEdges && src === ele && tgt !== ele) {\n          disqualified = true;\n          break;\n        }\n      }\n      if (!disqualified) {\n        ret.push(ele);\n      }\n    }\n    return this.spawn(ret, true).filter(selector);\n  };\n};\nvar defineDagOneHop = function defineDagOneHop(params) {\n  return function (selector) {\n    var eles = this;\n    var oEles = [];\n    for (var i = 0; i < eles.length; i++) {\n      var ele = eles[i];\n      if (!ele.isNode()) {\n        continue;\n      }\n      var edges = ele.connectedEdges();\n      for (var j = 0; j < edges.length; j++) {\n        var edge = edges[j];\n        var src = edge.source();\n        var tgt = edge.target();\n        if (params.outgoing && src === ele) {\n          oEles.push(edge);\n          oEles.push(tgt);\n        } else if (params.incoming && tgt === ele) {\n          oEles.push(edge);\n          oEles.push(src);\n        }\n      }\n    }\n    return this.spawn(oEles, true).filter(selector);\n  };\n};\nvar defineDagAllHops = function defineDagAllHops(params) {\n  return function (selector) {\n    var eles = this;\n    var sEles = [];\n    var sElesIds = {};\n    for (;;) {\n      var next = params.outgoing ? eles.outgoers() : eles.incomers();\n      if (next.length === 0) {\n        break;\n      } // done if none left\n\n      var newNext = false;\n      for (var i = 0; i < next.length; i++) {\n        var n = next[i];\n        var nid = n.id();\n        if (!sElesIds[nid]) {\n          sElesIds[nid] = true;\n          sEles.push(n);\n          newNext = true;\n        }\n      }\n      if (!newNext) {\n        break;\n      } // done if touched all outgoers already\n\n      eles = next;\n    }\n    return this.spawn(sEles, true).filter(selector);\n  };\n};\nelesfn$2.clearTraversalCache = function () {\n  for (var i = 0; i < this.length; i++) {\n    this[i]._private.traversalCache = null;\n  }\n};\nextend(elesfn$2, {\n  // get the root nodes in the DAG\n  roots: defineDagExtremity({\n    noIncomingEdges: true\n  }),\n  // get the leaf nodes in the DAG\n  leaves: defineDagExtremity({\n    noOutgoingEdges: true\n  }),\n  // normally called children in graph theory\n  // these nodes =edges=> outgoing nodes\n  outgoers: cache(defineDagOneHop({\n    outgoing: true\n  }), 'outgoers'),\n  // aka DAG descendants\n  successors: defineDagAllHops({\n    outgoing: true\n  }),\n  // normally called parents in graph theory\n  // these nodes <=edges= incoming nodes\n  incomers: cache(defineDagOneHop({\n    incoming: true\n  }), 'incomers'),\n  // aka DAG ancestors\n  predecessors: defineDagAllHops({\n    incoming: true\n  })\n});\n\n// Neighbourhood functions\n//////////////////////////\n\nextend(elesfn$2, {\n  neighborhood: cache(function (selector) {\n    var elements = [];\n    var nodes = this.nodes();\n    for (var i = 0; i < nodes.length; i++) {\n      // for all nodes\n      var node = nodes[i];\n      var connectedEdges = node.connectedEdges();\n\n      // for each connected edge, add the edge and the other node\n      for (var j = 0; j < connectedEdges.length; j++) {\n        var edge = connectedEdges[j];\n        var src = edge.source();\n        var tgt = edge.target();\n        var otherNode = node === src ? tgt : src;\n\n        // need check in case of loop\n        if (otherNode.length > 0) {\n          elements.push(otherNode[0]); // add node 1 hop away\n        }\n\n        // add connected edge\n        elements.push(edge[0]);\n      }\n    }\n    return this.spawn(elements, true).filter(selector);\n  }, 'neighborhood'),\n  closedNeighborhood: function closedNeighborhood(selector) {\n    return this.neighborhood().add(this).filter(selector);\n  },\n  openNeighborhood: function openNeighborhood(selector) {\n    return this.neighborhood(selector);\n  }\n});\n\n// aliases\nelesfn$2.neighbourhood = elesfn$2.neighborhood;\nelesfn$2.closedNeighbourhood = elesfn$2.closedNeighborhood;\nelesfn$2.openNeighbourhood = elesfn$2.openNeighborhood;\n\n// Edge functions\n/////////////////\n\nextend(elesfn$2, {\n  source: cache(function sourceImpl(selector) {\n    var ele = this[0];\n    var src;\n    if (ele) {\n      src = ele._private.source || ele.cy().collection();\n    }\n    return src && selector ? src.filter(selector) : src;\n  }, 'source'),\n  target: cache(function targetImpl(selector) {\n    var ele = this[0];\n    var tgt;\n    if (ele) {\n      tgt = ele._private.target || ele.cy().collection();\n    }\n    return tgt && selector ? tgt.filter(selector) : tgt;\n  }, 'target'),\n  sources: defineSourceFunction({\n    attr: 'source'\n  }),\n  targets: defineSourceFunction({\n    attr: 'target'\n  })\n});\nfunction defineSourceFunction(params) {\n  return function sourceImpl(selector) {\n    var sources = [];\n    for (var i = 0; i < this.length; i++) {\n      var ele = this[i];\n      var src = ele._private[params.attr];\n      if (src) {\n        sources.push(src);\n      }\n    }\n    return this.spawn(sources, true).filter(selector);\n  };\n}\nextend(elesfn$2, {\n  edgesWith: cache(defineEdgesWithFunction(), 'edgesWith'),\n  edgesTo: cache(defineEdgesWithFunction({\n    thisIsSrc: true\n  }), 'edgesTo')\n});\nfunction defineEdgesWithFunction(params) {\n  return function edgesWithImpl(otherNodes) {\n    var elements = [];\n    var cy = this._private.cy;\n    var p = params || {};\n\n    // get elements if a selector is specified\n    if (string(otherNodes)) {\n      otherNodes = cy.$(otherNodes);\n    }\n    for (var h = 0; h < otherNodes.length; h++) {\n      var edges = otherNodes[h]._private.edges;\n      for (var i = 0; i < edges.length; i++) {\n        var edge = edges[i];\n        var edgeData = edge._private.data;\n        var thisToOther = this.hasElementWithId(edgeData.source) && otherNodes.hasElementWithId(edgeData.target);\n        var otherToThis = otherNodes.hasElementWithId(edgeData.source) && this.hasElementWithId(edgeData.target);\n        var edgeConnectsThisAndOther = thisToOther || otherToThis;\n        if (!edgeConnectsThisAndOther) {\n          continue;\n        }\n        if (p.thisIsSrc || p.thisIsTgt) {\n          if (p.thisIsSrc && !thisToOther) {\n            continue;\n          }\n          if (p.thisIsTgt && !otherToThis) {\n            continue;\n          }\n        }\n        elements.push(edge);\n      }\n    }\n    return this.spawn(elements, true);\n  };\n}\nextend(elesfn$2, {\n  connectedEdges: cache(function (selector) {\n    var retEles = [];\n    var eles = this;\n    for (var i = 0; i < eles.length; i++) {\n      var node = eles[i];\n      if (!node.isNode()) {\n        continue;\n      }\n      var edges = node._private.edges;\n      for (var j = 0; j < edges.length; j++) {\n        var edge = edges[j];\n        retEles.push(edge);\n      }\n    }\n    return this.spawn(retEles, true).filter(selector);\n  }, 'connectedEdges'),\n  connectedNodes: cache(function (selector) {\n    var retEles = [];\n    var eles = this;\n    for (var i = 0; i < eles.length; i++) {\n      var edge = eles[i];\n      if (!edge.isEdge()) {\n        continue;\n      }\n      retEles.push(edge.source()[0]);\n      retEles.push(edge.target()[0]);\n    }\n    return this.spawn(retEles, true).filter(selector);\n  }, 'connectedNodes'),\n  parallelEdges: cache(defineParallelEdgesFunction(), 'parallelEdges'),\n  codirectedEdges: cache(defineParallelEdgesFunction({\n    codirected: true\n  }), 'codirectedEdges')\n});\nfunction defineParallelEdgesFunction(params) {\n  var defaults = {\n    codirected: false\n  };\n  params = extend({}, defaults, params);\n  return function parallelEdgesImpl(selector) {\n    // micro-optimised for renderer\n    var elements = [];\n    var edges = this.edges();\n    var p = params;\n\n    // look at all the edges in the collection\n    for (var i = 0; i < edges.length; i++) {\n      var edge1 = edges[i];\n      var edge1_p = edge1._private;\n      var src1 = edge1_p.source;\n      var srcid1 = src1._private.data.id;\n      var tgtid1 = edge1_p.data.target;\n      var srcEdges1 = src1._private.edges;\n\n      // look at edges connected to the src node of this edge\n      for (var j = 0; j < srcEdges1.length; j++) {\n        var edge2 = srcEdges1[j];\n        var edge2data = edge2._private.data;\n        var tgtid2 = edge2data.target;\n        var srcid2 = edge2data.source;\n        var codirected = tgtid2 === tgtid1 && srcid2 === srcid1;\n        var oppdirected = srcid1 === tgtid2 && tgtid1 === srcid2;\n        if (p.codirected && codirected || !p.codirected && (codirected || oppdirected)) {\n          elements.push(edge2);\n        }\n      }\n    }\n    return this.spawn(elements, true).filter(selector);\n  };\n}\n\n// Misc functions\n/////////////////\n\nextend(elesfn$2, {\n  components: function components(root) {\n    var self = this;\n    var cy = self.cy();\n    var visited = cy.collection();\n    var unvisited = root == null ? self.nodes() : root.nodes();\n    var components = [];\n    if (root != null && unvisited.empty()) {\n      // root may contain only edges\n      unvisited = root.sources(); // doesn't matter which node to use (undirected), so just use the source sides\n    }\n\n    var visitInComponent = function visitInComponent(node, component) {\n      visited.merge(node);\n      unvisited.unmerge(node);\n      component.merge(node);\n    };\n    if (unvisited.empty()) {\n      return self.spawn();\n    }\n    var _loop = function _loop() {\n      // each iteration yields a component\n      var cmpt = cy.collection();\n      components.push(cmpt);\n      var root = unvisited[0];\n      visitInComponent(root, cmpt);\n      self.bfs({\n        directed: false,\n        roots: root,\n        visit: function visit(v) {\n          return visitInComponent(v, cmpt);\n        }\n      });\n      cmpt.forEach(function (node) {\n        node.connectedEdges().forEach(function (e) {\n          // connectedEdges() usually cached\n          if (self.has(e) && cmpt.has(e.source()) && cmpt.has(e.target())) {\n            // has() is cheap\n            cmpt.merge(e); // forEach() only considers nodes -- sets N at call time\n          }\n        });\n      });\n    };\n    do {\n      _loop();\n    } while (unvisited.length > 0);\n    return components;\n  },\n  component: function component() {\n    var ele = this[0];\n    return ele.cy().mutableElements().components(ele)[0];\n  }\n});\nelesfn$2.componentsOf = elesfn$2.components;\n\n// represents a set of nodes, edges, or both together\nvar Collection = function Collection(cy, elements) {\n  var unique = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var removed = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  if (cy === undefined) {\n    error('A collection must have a reference to the core');\n    return;\n  }\n  var map = new Map$2();\n  var createdElements = false;\n  if (!elements) {\n    elements = [];\n  } else if (elements.length > 0 && plainObject(elements[0]) && !element(elements[0])) {\n    createdElements = true;\n\n    // make elements from json and restore all at once later\n    var eles = [];\n    var elesIds = new Set$1();\n    for (var i = 0, l = elements.length; i < l; i++) {\n      var json = elements[i];\n      if (json.data == null) {\n        json.data = {};\n      }\n      var _data = json.data;\n\n      // make sure newly created elements have valid ids\n      if (_data.id == null) {\n        _data.id = uuid();\n      } else if (cy.hasElementWithId(_data.id) || elesIds.has(_data.id)) {\n        continue; // can't create element if prior id already exists\n      }\n\n      var ele = new Element(cy, json, false);\n      eles.push(ele);\n      elesIds.add(_data.id);\n    }\n    elements = eles;\n  }\n  this.length = 0;\n  for (var _i = 0, _l = elements.length; _i < _l; _i++) {\n    var element$1 = elements[_i][0]; // [0] in case elements is an array of collections, rather than array of elements\n    if (element$1 == null) {\n      continue;\n    }\n    var id = element$1._private.data.id;\n    if (!unique || !map.has(id)) {\n      if (unique) {\n        map.set(id, {\n          index: this.length,\n          ele: element$1\n        });\n      }\n      this[this.length] = element$1;\n      this.length++;\n    }\n  }\n  this._private = {\n    eles: this,\n    cy: cy,\n    get map() {\n      if (this.lazyMap == null) {\n        this.rebuildMap();\n      }\n      return this.lazyMap;\n    },\n    set map(m) {\n      this.lazyMap = m;\n    },\n    rebuildMap: function rebuildMap() {\n      var m = this.lazyMap = new Map$2();\n      var eles = this.eles;\n      for (var _i2 = 0; _i2 < eles.length; _i2++) {\n        var _ele = eles[_i2];\n        m.set(_ele.id(), {\n          index: _i2,\n          ele: _ele\n        });\n      }\n    }\n  };\n  if (unique) {\n    this._private.map = map;\n  }\n\n  // restore the elements if we created them from json\n  if (createdElements && !removed) {\n    this.restore();\n  }\n};\n\n// Functions\n////////////////////////////////////////////////////////////////////////////////////////////////////\n\n// keep the prototypes in sync (an element has the same functions as a collection)\n// and use elefn and elesfn as shorthands to the prototypes\nvar elesfn$1 = Element.prototype = Collection.prototype = Object.create(Array.prototype);\nelesfn$1.instanceString = function () {\n  return 'collection';\n};\nelesfn$1.spawn = function (eles, unique) {\n  return new Collection(this.cy(), eles, unique);\n};\nelesfn$1.spawnSelf = function () {\n  return this.spawn(this);\n};\nelesfn$1.cy = function () {\n  return this._private.cy;\n};\nelesfn$1.renderer = function () {\n  return this._private.cy.renderer();\n};\nelesfn$1.element = function () {\n  return this[0];\n};\nelesfn$1.collection = function () {\n  if (collection(this)) {\n    return this;\n  } else {\n    // an element\n    return new Collection(this._private.cy, [this]);\n  }\n};\nelesfn$1.unique = function () {\n  return new Collection(this._private.cy, this, true);\n};\nelesfn$1.hasElementWithId = function (id) {\n  id = '' + id; // id must be string\n\n  return this._private.map.has(id);\n};\nelesfn$1.getElementById = function (id) {\n  id = '' + id; // id must be string\n\n  var cy = this._private.cy;\n  var entry = this._private.map.get(id);\n  return entry ? entry.ele : new Collection(cy); // get ele or empty collection\n};\n\nelesfn$1.$id = elesfn$1.getElementById;\nelesfn$1.poolIndex = function () {\n  var cy = this._private.cy;\n  var eles = cy._private.elements;\n  var id = this[0]._private.data.id;\n  return eles._private.map.get(id).index;\n};\nelesfn$1.indexOf = function (ele) {\n  var id = ele[0]._private.data.id;\n  return this._private.map.get(id).index;\n};\nelesfn$1.indexOfId = function (id) {\n  id = '' + id; // id must be string\n\n  return this._private.map.get(id).index;\n};\nelesfn$1.json = function (obj) {\n  var ele = this.element();\n  var cy = this.cy();\n  if (ele == null && obj) {\n    return this;\n  } // can't set to no eles\n\n  if (ele == null) {\n    return undefined;\n  } // can't get from no eles\n\n  var p = ele._private;\n  if (plainObject(obj)) {\n    // set\n\n    cy.startBatch();\n    if (obj.data) {\n      ele.data(obj.data);\n      var _data2 = p.data;\n      if (ele.isEdge()) {\n        // source and target are immutable via data()\n        var move = false;\n        var spec = {};\n        var src = obj.data.source;\n        var tgt = obj.data.target;\n        if (src != null && src != _data2.source) {\n          spec.source = '' + src; // id must be string\n          move = true;\n        }\n        if (tgt != null && tgt != _data2.target) {\n          spec.target = '' + tgt; // id must be string\n          move = true;\n        }\n        if (move) {\n          ele = ele.move(spec);\n        }\n      } else {\n        // parent is immutable via data()\n        var newParentValSpecd = ('parent' in obj.data);\n        var parent = obj.data.parent;\n        if (newParentValSpecd && (parent != null || _data2.parent != null) && parent != _data2.parent) {\n          if (parent === undefined) {\n            // can't set undefined imperatively, so use null\n            parent = null;\n          }\n          if (parent != null) {\n            parent = '' + parent; // id must be string\n          }\n\n          ele = ele.move({\n            parent: parent\n          });\n        }\n      }\n    }\n    if (obj.position) {\n      ele.position(obj.position);\n    }\n\n    // ignore group -- immutable\n\n    var checkSwitch = function checkSwitch(k, trueFnName, falseFnName) {\n      var obj_k = obj[k];\n      if (obj_k != null && obj_k !== p[k]) {\n        if (obj_k) {\n          ele[trueFnName]();\n        } else {\n          ele[falseFnName]();\n        }\n      }\n    };\n    checkSwitch('removed', 'remove', 'restore');\n    checkSwitch('selected', 'select', 'unselect');\n    checkSwitch('selectable', 'selectify', 'unselectify');\n    checkSwitch('locked', 'lock', 'unlock');\n    checkSwitch('grabbable', 'grabify', 'ungrabify');\n    checkSwitch('pannable', 'panify', 'unpanify');\n    if (obj.classes != null) {\n      ele.classes(obj.classes);\n    }\n    cy.endBatch();\n    return this;\n  } else if (obj === undefined) {\n    // get\n\n    var json = {\n      data: copy(p.data),\n      position: copy(p.position),\n      group: p.group,\n      removed: p.removed,\n      selected: p.selected,\n      selectable: p.selectable,\n      locked: p.locked,\n      grabbable: p.grabbable,\n      pannable: p.pannable,\n      classes: null\n    };\n    json.classes = '';\n    var i = 0;\n    p.classes.forEach(function (cls) {\n      return json.classes += i++ === 0 ? cls : ' ' + cls;\n    });\n    return json;\n  }\n};\nelesfn$1.jsons = function () {\n  var jsons = [];\n  for (var i = 0; i < this.length; i++) {\n    var ele = this[i];\n    var json = ele.json();\n    jsons.push(json);\n  }\n  return jsons;\n};\nelesfn$1.clone = function () {\n  var cy = this.cy();\n  var elesArr = [];\n  for (var i = 0; i < this.length; i++) {\n    var ele = this[i];\n    var json = ele.json();\n    var clone = new Element(cy, json, false); // NB no restore\n\n    elesArr.push(clone);\n  }\n  return new Collection(cy, elesArr);\n};\nelesfn$1.copy = elesfn$1.clone;\nelesfn$1.restore = function () {\n  var notifyRenderer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  var addToPool = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var self = this;\n  var cy = self.cy();\n  var cy_p = cy._private;\n\n  // create arrays of nodes and edges, since we need to\n  // restore the nodes first\n  var nodes = [];\n  var edges = [];\n  var elements;\n  for (var _i3 = 0, l = self.length; _i3 < l; _i3++) {\n    var ele = self[_i3];\n    if (addToPool && !ele.removed()) {\n      // don't need to handle this ele\n      continue;\n    }\n\n    // keep nodes first in the array and edges after\n    if (ele.isNode()) {\n      // put to front of array if node\n      nodes.push(ele);\n    } else {\n      // put to end of array if edge\n      edges.push(ele);\n    }\n  }\n  elements = nodes.concat(edges);\n  var i;\n  var removeFromElements = function removeFromElements() {\n    elements.splice(i, 1);\n    i--;\n  };\n\n  // now, restore each element\n  for (i = 0; i < elements.length; i++) {\n    var _ele2 = elements[i];\n    var _private = _ele2._private;\n    var _data3 = _private.data;\n\n    // the traversal cache should start fresh when ele is added\n    _ele2.clearTraversalCache();\n\n    // set id and validate\n    if (!addToPool && !_private.removed) ; else if (_data3.id === undefined) {\n      _data3.id = uuid();\n    } else if (number$1(_data3.id)) {\n      _data3.id = '' + _data3.id; // now it's a string\n    } else if (emptyString(_data3.id) || !string(_data3.id)) {\n      error('Can not create element with invalid string ID `' + _data3.id + '`');\n\n      // can't create element if it has empty string as id or non-string id\n      removeFromElements();\n      continue;\n    } else if (cy.hasElementWithId(_data3.id)) {\n      error('Can not create second element with ID `' + _data3.id + '`');\n\n      // can't create element if one already has that id\n      removeFromElements();\n      continue;\n    }\n    var id = _data3.id; // id is finalised, now let's keep a ref\n\n    if (_ele2.isNode()) {\n      // extra checks for nodes\n      var pos = _private.position;\n\n      // make sure the nodes have a defined position\n\n      if (pos.x == null) {\n        pos.x = 0;\n      }\n      if (pos.y == null) {\n        pos.y = 0;\n      }\n    }\n    if (_ele2.isEdge()) {\n      // extra checks for edges\n\n      var edge = _ele2;\n      var fields = ['source', 'target'];\n      var fieldsLength = fields.length;\n      var badSourceOrTarget = false;\n      for (var j = 0; j < fieldsLength; j++) {\n        var field = fields[j];\n        var val = _data3[field];\n        if (number$1(val)) {\n          val = _data3[field] = '' + _data3[field]; // now string\n        }\n\n        if (val == null || val === '') {\n          // can't create if source or target is not defined properly\n          error('Can not create edge `' + id + '` with unspecified ' + field);\n          badSourceOrTarget = true;\n        } else if (!cy.hasElementWithId(val)) {\n          // can't create edge if one of its nodes doesn't exist\n          error('Can not create edge `' + id + '` with nonexistant ' + field + ' `' + val + '`');\n          badSourceOrTarget = true;\n        }\n      }\n      if (badSourceOrTarget) {\n        removeFromElements();\n        continue;\n      } // can't create this\n\n      var src = cy.getElementById(_data3.source);\n      var tgt = cy.getElementById(_data3.target);\n\n      // only one edge in node if loop\n      if (src.same(tgt)) {\n        src._private.edges.push(edge);\n      } else {\n        src._private.edges.push(edge);\n        tgt._private.edges.push(edge);\n      }\n      edge._private.source = src;\n      edge._private.target = tgt;\n    } // if is edge\n\n    // create mock ids / indexes maps for element so it can be used like collections\n    _private.map = new Map$2();\n    _private.map.set(id, {\n      ele: _ele2,\n      index: 0\n    });\n    _private.removed = false;\n    if (addToPool) {\n      cy.addToPool(_ele2);\n    }\n  } // for each element\n\n  // do compound node sanity checks\n  for (var _i4 = 0; _i4 < nodes.length; _i4++) {\n    // each node\n    var node = nodes[_i4];\n    var _data4 = node._private.data;\n    if (number$1(_data4.parent)) {\n      // then automake string\n      _data4.parent = '' + _data4.parent;\n    }\n    var parentId = _data4.parent;\n    var specifiedParent = parentId != null;\n    if (specifiedParent || node._private.parent) {\n      var parent = node._private.parent ? cy.collection().merge(node._private.parent) : cy.getElementById(parentId);\n      if (parent.empty()) {\n        // non-existant parent; just remove it\n        _data4.parent = undefined;\n      } else if (parent[0].removed()) {\n        warn('Node added with missing parent, reference to parent removed');\n        _data4.parent = undefined;\n        node._private.parent = null;\n      } else {\n        var selfAsParent = false;\n        var ancestor = parent;\n        while (!ancestor.empty()) {\n          if (node.same(ancestor)) {\n            // mark self as parent and remove from data\n            selfAsParent = true;\n            _data4.parent = undefined; // remove parent reference\n\n            // exit or we loop forever\n            break;\n          }\n          ancestor = ancestor.parent();\n        }\n        if (!selfAsParent) {\n          // connect with children\n          parent[0]._private.children.push(node);\n          node._private.parent = parent[0];\n\n          // let the core know we have a compound graph\n          cy_p.hasCompoundNodes = true;\n        }\n      } // else\n    } // if specified parent\n  } // for each node\n\n  if (elements.length > 0) {\n    var restored = elements.length === self.length ? self : new Collection(cy, elements);\n    for (var _i5 = 0; _i5 < restored.length; _i5++) {\n      var _ele3 = restored[_i5];\n      if (_ele3.isNode()) {\n        continue;\n      }\n\n      // adding an edge invalidates the traversal caches for the parallel edges\n      _ele3.parallelEdges().clearTraversalCache();\n\n      // adding an edge invalidates the traversal cache for the connected nodes\n      _ele3.source().clearTraversalCache();\n      _ele3.target().clearTraversalCache();\n    }\n    var toUpdateStyle;\n    if (cy_p.hasCompoundNodes) {\n      toUpdateStyle = cy.collection().merge(restored).merge(restored.connectedNodes()).merge(restored.parent());\n    } else {\n      toUpdateStyle = restored;\n    }\n    toUpdateStyle.dirtyCompoundBoundsCache().dirtyBoundingBoxCache().updateStyle(notifyRenderer);\n    if (notifyRenderer) {\n      restored.emitAndNotify('add');\n    } else if (addToPool) {\n      restored.emit('add');\n    }\n  }\n  return self; // chainability\n};\n\nelesfn$1.removed = function () {\n  var ele = this[0];\n  return ele && ele._private.removed;\n};\nelesfn$1.inside = function () {\n  var ele = this[0];\n  return ele && !ele._private.removed;\n};\nelesfn$1.remove = function () {\n  var notifyRenderer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  var removeFromPool = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var self = this;\n  var elesToRemove = [];\n  var elesToRemoveIds = {};\n  var cy = self._private.cy;\n\n  // add connected edges\n  function addConnectedEdges(node) {\n    var edges = node._private.edges;\n    for (var i = 0; i < edges.length; i++) {\n      add(edges[i]);\n    }\n  }\n\n  // add descendant nodes\n  function addChildren(node) {\n    var children = node._private.children;\n    for (var i = 0; i < children.length; i++) {\n      add(children[i]);\n    }\n  }\n  function add(ele) {\n    var alreadyAdded = elesToRemoveIds[ele.id()];\n    if (removeFromPool && ele.removed() || alreadyAdded) {\n      return;\n    } else {\n      elesToRemoveIds[ele.id()] = true;\n    }\n    if (ele.isNode()) {\n      elesToRemove.push(ele); // nodes are removed last\n\n      addConnectedEdges(ele);\n      addChildren(ele);\n    } else {\n      elesToRemove.unshift(ele); // edges are removed first\n    }\n  }\n\n  // make the list of elements to remove\n  // (may be removing more than specified due to connected edges etc)\n\n  for (var i = 0, l = self.length; i < l; i++) {\n    var ele = self[i];\n    add(ele);\n  }\n  function removeEdgeRef(node, edge) {\n    var connectedEdges = node._private.edges;\n    removeFromArray(connectedEdges, edge);\n\n    // removing an edges invalidates the traversal cache for its nodes\n    node.clearTraversalCache();\n  }\n  function removeParallelRef(pllEdge) {\n    // removing an edge invalidates the traversal caches for the parallel edges\n    pllEdge.clearTraversalCache();\n  }\n  var alteredParents = [];\n  alteredParents.ids = {};\n  function removeChildRef(parent, ele) {\n    ele = ele[0];\n    parent = parent[0];\n    var children = parent._private.children;\n    var pid = parent.id();\n    removeFromArray(children, ele); // remove parent => child ref\n\n    ele._private.parent = null; // remove child => parent ref\n\n    if (!alteredParents.ids[pid]) {\n      alteredParents.ids[pid] = true;\n      alteredParents.push(parent);\n    }\n  }\n  self.dirtyCompoundBoundsCache();\n  if (removeFromPool) {\n    cy.removeFromPool(elesToRemove); // remove from core pool\n  }\n\n  for (var _i6 = 0; _i6 < elesToRemove.length; _i6++) {\n    var _ele4 = elesToRemove[_i6];\n    if (_ele4.isEdge()) {\n      // remove references to this edge in its connected nodes\n      var src = _ele4.source()[0];\n      var tgt = _ele4.target()[0];\n      removeEdgeRef(src, _ele4);\n      removeEdgeRef(tgt, _ele4);\n      var pllEdges = _ele4.parallelEdges();\n      for (var j = 0; j < pllEdges.length; j++) {\n        var pllEdge = pllEdges[j];\n        removeParallelRef(pllEdge);\n        if (pllEdge.isBundledBezier()) {\n          pllEdge.dirtyBoundingBoxCache();\n        }\n      }\n    } else {\n      // remove reference to parent\n      var parent = _ele4.parent();\n      if (parent.length !== 0) {\n        removeChildRef(parent, _ele4);\n      }\n    }\n    if (removeFromPool) {\n      // mark as removed\n      _ele4._private.removed = true;\n    }\n  }\n\n  // check to see if we have a compound graph or not\n  var elesStillInside = cy._private.elements;\n  cy._private.hasCompoundNodes = false;\n  for (var _i7 = 0; _i7 < elesStillInside.length; _i7++) {\n    var _ele5 = elesStillInside[_i7];\n    if (_ele5.isParent()) {\n      cy._private.hasCompoundNodes = true;\n      break;\n    }\n  }\n  var removedElements = new Collection(this.cy(), elesToRemove);\n  if (removedElements.size() > 0) {\n    // must manually notify since trigger won't do this automatically once removed\n\n    if (notifyRenderer) {\n      removedElements.emitAndNotify('remove');\n    } else if (removeFromPool) {\n      removedElements.emit('remove');\n    }\n  }\n\n  // the parents who were modified by the removal need their style updated\n  for (var _i8 = 0; _i8 < alteredParents.length; _i8++) {\n    var _ele6 = alteredParents[_i8];\n    if (!removeFromPool || !_ele6.removed()) {\n      _ele6.updateStyle();\n    }\n  }\n  return removedElements;\n};\nelesfn$1.move = function (struct) {\n  var cy = this._private.cy;\n  var eles = this;\n\n  // just clean up refs, caches, etc. in the same way as when removing and then restoring\n  // (our calls to remove/restore do not remove from the graph or make events)\n  var notifyRenderer = false;\n  var modifyPool = false;\n  var toString = function toString(id) {\n    return id == null ? id : '' + id;\n  }; // id must be string\n\n  if (struct.source !== undefined || struct.target !== undefined) {\n    var srcId = toString(struct.source);\n    var tgtId = toString(struct.target);\n    var srcExists = srcId != null && cy.hasElementWithId(srcId);\n    var tgtExists = tgtId != null && cy.hasElementWithId(tgtId);\n    if (srcExists || tgtExists) {\n      cy.batch(function () {\n        // avoid duplicate style updates\n        eles.remove(notifyRenderer, modifyPool); // clean up refs etc.\n        eles.emitAndNotify('moveout');\n        for (var i = 0; i < eles.length; i++) {\n          var ele = eles[i];\n          var _data5 = ele._private.data;\n          if (ele.isEdge()) {\n            if (srcExists) {\n              _data5.source = srcId;\n            }\n            if (tgtExists) {\n              _data5.target = tgtId;\n            }\n          }\n        }\n        eles.restore(notifyRenderer, modifyPool); // make new refs, style, etc.\n      });\n\n      eles.emitAndNotify('move');\n    }\n  } else if (struct.parent !== undefined) {\n    // move node to new parent\n    var parentId = toString(struct.parent);\n    var parentExists = parentId === null || cy.hasElementWithId(parentId);\n    if (parentExists) {\n      var pidToAssign = parentId === null ? undefined : parentId;\n      cy.batch(function () {\n        // avoid duplicate style updates\n        var updated = eles.remove(notifyRenderer, modifyPool); // clean up refs etc.\n        updated.emitAndNotify('moveout');\n        for (var i = 0; i < eles.length; i++) {\n          var ele = eles[i];\n          var _data6 = ele._private.data;\n          if (ele.isNode()) {\n            _data6.parent = pidToAssign;\n          }\n        }\n        updated.restore(notifyRenderer, modifyPool); // make new refs, style, etc.\n      });\n\n      eles.emitAndNotify('move');\n    }\n  }\n  return this;\n};\n[elesfn$j, elesfn$i, elesfn$h, elesfn$g, elesfn$f, data, elesfn$d, dimensions, elesfn$9, elesfn$8, elesfn$7, elesfn$6, elesfn$5, elesfn$4, elesfn$3, elesfn$2].forEach(function (props) {\n  extend(elesfn$1, props);\n});\n\nvar corefn$9 = {\n  add: function add(opts) {\n    var elements;\n    var cy = this;\n\n    // add the elements\n    if (elementOrCollection(opts)) {\n      var eles = opts;\n      if (eles._private.cy === cy) {\n        // same instance => just restore\n        elements = eles.restore();\n      } else {\n        // otherwise, copy from json\n        var jsons = [];\n        for (var i = 0; i < eles.length; i++) {\n          var ele = eles[i];\n          jsons.push(ele.json());\n        }\n        elements = new Collection(cy, jsons);\n      }\n    }\n\n    // specify an array of options\n    else if (array(opts)) {\n      var _jsons = opts;\n      elements = new Collection(cy, _jsons);\n    }\n\n    // specify via opts.nodes and opts.edges\n    else if (plainObject(opts) && (array(opts.nodes) || array(opts.edges))) {\n      var elesByGroup = opts;\n      var _jsons2 = [];\n      var grs = ['nodes', 'edges'];\n      for (var _i = 0, il = grs.length; _i < il; _i++) {\n        var group = grs[_i];\n        var elesArray = elesByGroup[group];\n        if (array(elesArray)) {\n          for (var j = 0, jl = elesArray.length; j < jl; j++) {\n            var json = extend({\n              group: group\n            }, elesArray[j]);\n            _jsons2.push(json);\n          }\n        }\n      }\n      elements = new Collection(cy, _jsons2);\n    }\n\n    // specify options for one element\n    else {\n      var _json = opts;\n      elements = new Element(cy, _json).collection();\n    }\n    return elements;\n  },\n  remove: function remove(collection) {\n    if (elementOrCollection(collection)) ; else if (string(collection)) {\n      var selector = collection;\n      collection = this.$(selector);\n    }\n    return collection.remove();\n  }\n};\n\n/* global Float32Array */\n\n/*! Bezier curve function generator. Copyright Gaetan Renaudeau. MIT License: http://en.wikipedia.org/wiki/MIT_License */\nfunction generateCubicBezier(mX1, mY1, mX2, mY2) {\n  var NEWTON_ITERATIONS = 4,\n    NEWTON_MIN_SLOPE = 0.001,\n    SUBDIVISION_PRECISION = 0.0000001,\n    SUBDIVISION_MAX_ITERATIONS = 10,\n    kSplineTableSize = 11,\n    kSampleStepSize = 1.0 / (kSplineTableSize - 1.0),\n    float32ArraySupported = typeof Float32Array !== 'undefined';\n\n  /* Must contain four arguments. */\n  if (arguments.length !== 4) {\n    return false;\n  }\n\n  /* Arguments must be numbers. */\n  for (var i = 0; i < 4; ++i) {\n    if (typeof arguments[i] !== \"number\" || isNaN(arguments[i]) || !isFinite(arguments[i])) {\n      return false;\n    }\n  }\n\n  /* X values must be in the [0, 1] range. */\n  mX1 = Math.min(mX1, 1);\n  mX2 = Math.min(mX2, 1);\n  mX1 = Math.max(mX1, 0);\n  mX2 = Math.max(mX2, 0);\n  var mSampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);\n  function A(aA1, aA2) {\n    return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n  }\n  function B(aA1, aA2) {\n    return 3.0 * aA2 - 6.0 * aA1;\n  }\n  function C(aA1) {\n    return 3.0 * aA1;\n  }\n  function calcBezier(aT, aA1, aA2) {\n    return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n  }\n  function getSlope(aT, aA1, aA2) {\n    return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n  }\n  function newtonRaphsonIterate(aX, aGuessT) {\n    for (var _i = 0; _i < NEWTON_ITERATIONS; ++_i) {\n      var currentSlope = getSlope(aGuessT, mX1, mX2);\n      if (currentSlope === 0.0) {\n        return aGuessT;\n      }\n      var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n      aGuessT -= currentX / currentSlope;\n    }\n    return aGuessT;\n  }\n  function calcSampleValues() {\n    for (var _i2 = 0; _i2 < kSplineTableSize; ++_i2) {\n      mSampleValues[_i2] = calcBezier(_i2 * kSampleStepSize, mX1, mX2);\n    }\n  }\n  function binarySubdivide(aX, aA, aB) {\n    var currentX,\n      currentT,\n      i = 0;\n    do {\n      currentT = aA + (aB - aA) / 2.0;\n      currentX = calcBezier(currentT, mX1, mX2) - aX;\n      if (currentX > 0.0) {\n        aB = currentT;\n      } else {\n        aA = currentT;\n      }\n    } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n    return currentT;\n  }\n  function getTForX(aX) {\n    var intervalStart = 0.0,\n      currentSample = 1,\n      lastSample = kSplineTableSize - 1;\n    for (; currentSample !== lastSample && mSampleValues[currentSample] <= aX; ++currentSample) {\n      intervalStart += kSampleStepSize;\n    }\n    --currentSample;\n    var dist = (aX - mSampleValues[currentSample]) / (mSampleValues[currentSample + 1] - mSampleValues[currentSample]),\n      guessForT = intervalStart + dist * kSampleStepSize,\n      initialSlope = getSlope(guessForT, mX1, mX2);\n    if (initialSlope >= NEWTON_MIN_SLOPE) {\n      return newtonRaphsonIterate(aX, guessForT);\n    } else if (initialSlope === 0.0) {\n      return guessForT;\n    } else {\n      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize);\n    }\n  }\n  var _precomputed = false;\n  function precompute() {\n    _precomputed = true;\n    if (mX1 !== mY1 || mX2 !== mY2) {\n      calcSampleValues();\n    }\n  }\n  var f = function f(aX) {\n    if (!_precomputed) {\n      precompute();\n    }\n    if (mX1 === mY1 && mX2 === mY2) {\n      return aX;\n    }\n    if (aX === 0) {\n      return 0;\n    }\n    if (aX === 1) {\n      return 1;\n    }\n    return calcBezier(getTForX(aX), mY1, mY2);\n  };\n  f.getControlPoints = function () {\n    return [{\n      x: mX1,\n      y: mY1\n    }, {\n      x: mX2,\n      y: mY2\n    }];\n  };\n  var str = \"generateBezier(\" + [mX1, mY1, mX2, mY2] + \")\";\n  f.toString = function () {\n    return str;\n  };\n  return f;\n}\n\n/*! Runge-Kutta spring physics function generator. Adapted from Framer.js, copyright Koen Bok. MIT License: http://en.wikipedia.org/wiki/MIT_License */\n/* Given a tension, friction, and duration, a simulation at 60FPS will first run without a defined duration in order to calculate the full path. A second pass\n   then adjusts the time delta -- using the relation between actual time and duration -- to calculate the path for the duration-constrained animation. */\nvar generateSpringRK4 = function () {\n  function springAccelerationForState(state) {\n    return -state.tension * state.x - state.friction * state.v;\n  }\n  function springEvaluateStateWithDerivative(initialState, dt, derivative) {\n    var state = {\n      x: initialState.x + derivative.dx * dt,\n      v: initialState.v + derivative.dv * dt,\n      tension: initialState.tension,\n      friction: initialState.friction\n    };\n    return {\n      dx: state.v,\n      dv: springAccelerationForState(state)\n    };\n  }\n  function springIntegrateState(state, dt) {\n    var a = {\n        dx: state.v,\n        dv: springAccelerationForState(state)\n      },\n      b = springEvaluateStateWithDerivative(state, dt * 0.5, a),\n      c = springEvaluateStateWithDerivative(state, dt * 0.5, b),\n      d = springEvaluateStateWithDerivative(state, dt, c),\n      dxdt = 1.0 / 6.0 * (a.dx + 2.0 * (b.dx + c.dx) + d.dx),\n      dvdt = 1.0 / 6.0 * (a.dv + 2.0 * (b.dv + c.dv) + d.dv);\n    state.x = state.x + dxdt * dt;\n    state.v = state.v + dvdt * dt;\n    return state;\n  }\n  return function springRK4Factory(tension, friction, duration) {\n    var initState = {\n        x: -1,\n        v: 0,\n        tension: null,\n        friction: null\n      },\n      path = [0],\n      time_lapsed = 0,\n      tolerance = 1 / 10000,\n      DT = 16 / 1000,\n      have_duration,\n      dt,\n      last_state;\n    tension = parseFloat(tension) || 500;\n    friction = parseFloat(friction) || 20;\n    duration = duration || null;\n    initState.tension = tension;\n    initState.friction = friction;\n    have_duration = duration !== null;\n\n    /* Calculate the actual time it takes for this animation to complete with the provided conditions. */\n    if (have_duration) {\n      /* Run the simulation without a duration. */\n      time_lapsed = springRK4Factory(tension, friction);\n      /* Compute the adjusted time delta. */\n      dt = time_lapsed / duration * DT;\n    } else {\n      dt = DT;\n    }\n    for (;;) {\n      /* Next/step function .*/\n      last_state = springIntegrateState(last_state || initState, dt);\n      /* Store the position. */\n      path.push(1 + last_state.x);\n      time_lapsed += 16;\n      /* If the change threshold is reached, break. */\n      if (!(Math.abs(last_state.x) > tolerance && Math.abs(last_state.v) > tolerance)) {\n        break;\n      }\n    }\n\n    /* If duration is not defined, return the actual time required for completing this animation. Otherwise, return a closure that holds the\n       computed path and returns a snapshot of the position according to a given percentComplete. */\n    return !have_duration ? time_lapsed : function (percentComplete) {\n      return path[percentComplete * (path.length - 1) | 0];\n    };\n  };\n}();\n\nvar cubicBezier = function cubicBezier(t1, p1, t2, p2) {\n  var bezier = generateCubicBezier(t1, p1, t2, p2);\n  return function (start, end, percent) {\n    return start + (end - start) * bezier(percent);\n  };\n};\nvar easings = {\n  'linear': function linear(start, end, percent) {\n    return start + (end - start) * percent;\n  },\n  // default easings\n  'ease': cubicBezier(0.25, 0.1, 0.25, 1),\n  'ease-in': cubicBezier(0.42, 0, 1, 1),\n  'ease-out': cubicBezier(0, 0, 0.58, 1),\n  'ease-in-out': cubicBezier(0.42, 0, 0.58, 1),\n  // sine\n  'ease-in-sine': cubicBezier(0.47, 0, 0.745, 0.715),\n  'ease-out-sine': cubicBezier(0.39, 0.575, 0.565, 1),\n  'ease-in-out-sine': cubicBezier(0.445, 0.05, 0.55, 0.95),\n  // quad\n  'ease-in-quad': cubicBezier(0.55, 0.085, 0.68, 0.53),\n  'ease-out-quad': cubicBezier(0.25, 0.46, 0.45, 0.94),\n  'ease-in-out-quad': cubicBezier(0.455, 0.03, 0.515, 0.955),\n  // cubic\n  'ease-in-cubic': cubicBezier(0.55, 0.055, 0.675, 0.19),\n  'ease-out-cubic': cubicBezier(0.215, 0.61, 0.355, 1),\n  'ease-in-out-cubic': cubicBezier(0.645, 0.045, 0.355, 1),\n  // quart\n  'ease-in-quart': cubicBezier(0.895, 0.03, 0.685, 0.22),\n  'ease-out-quart': cubicBezier(0.165, 0.84, 0.44, 1),\n  'ease-in-out-quart': cubicBezier(0.77, 0, 0.175, 1),\n  // quint\n  'ease-in-quint': cubicBezier(0.755, 0.05, 0.855, 0.06),\n  'ease-out-quint': cubicBezier(0.23, 1, 0.32, 1),\n  'ease-in-out-quint': cubicBezier(0.86, 0, 0.07, 1),\n  // expo\n  'ease-in-expo': cubicBezier(0.95, 0.05, 0.795, 0.035),\n  'ease-out-expo': cubicBezier(0.19, 1, 0.22, 1),\n  'ease-in-out-expo': cubicBezier(1, 0, 0, 1),\n  // circ\n  'ease-in-circ': cubicBezier(0.6, 0.04, 0.98, 0.335),\n  'ease-out-circ': cubicBezier(0.075, 0.82, 0.165, 1),\n  'ease-in-out-circ': cubicBezier(0.785, 0.135, 0.15, 0.86),\n  // user param easings...\n\n  'spring': function spring(tension, friction, duration) {\n    if (duration === 0) {\n      // can't get a spring w/ duration 0\n      return easings.linear; // duration 0 => jump to end so impl doesn't matter\n    }\n\n    var spring = generateSpringRK4(tension, friction, duration);\n    return function (start, end, percent) {\n      return start + (end - start) * spring(percent);\n    };\n  },\n  'cubic-bezier': cubicBezier\n};\n\nfunction getEasedValue(type, start, end, percent, easingFn) {\n  if (percent === 1) {\n    return end;\n  }\n  if (start === end) {\n    return end;\n  }\n  var val = easingFn(start, end, percent);\n  if (type == null) {\n    return val;\n  }\n  if (type.roundValue || type.color) {\n    val = Math.round(val);\n  }\n  if (type.min !== undefined) {\n    val = Math.max(val, type.min);\n  }\n  if (type.max !== undefined) {\n    val = Math.min(val, type.max);\n  }\n  return val;\n}\nfunction getValue(prop, spec) {\n  if (prop.pfValue != null || prop.value != null) {\n    if (prop.pfValue != null && (spec == null || spec.type.units !== '%')) {\n      return prop.pfValue;\n    } else {\n      return prop.value;\n    }\n  } else {\n    return prop;\n  }\n}\nfunction ease(startProp, endProp, percent, easingFn, propSpec) {\n  var type = propSpec != null ? propSpec.type : null;\n  if (percent < 0) {\n    percent = 0;\n  } else if (percent > 1) {\n    percent = 1;\n  }\n  var start = getValue(startProp, propSpec);\n  var end = getValue(endProp, propSpec);\n  if (number$1(start) && number$1(end)) {\n    return getEasedValue(type, start, end, percent, easingFn);\n  } else if (array(start) && array(end)) {\n    var easedArr = [];\n    for (var i = 0; i < end.length; i++) {\n      var si = start[i];\n      var ei = end[i];\n      if (si != null && ei != null) {\n        var val = getEasedValue(type, si, ei, percent, easingFn);\n        easedArr.push(val);\n      } else {\n        easedArr.push(ei);\n      }\n    }\n    return easedArr;\n  }\n  return undefined;\n}\n\nfunction step$1(self, ani, now, isCore) {\n  var isEles = !isCore;\n  var _p = self._private;\n  var ani_p = ani._private;\n  var pEasing = ani_p.easing;\n  var startTime = ani_p.startTime;\n  var cy = isCore ? self : self.cy();\n  var style = cy.style();\n  if (!ani_p.easingImpl) {\n    if (pEasing == null) {\n      // use default\n      ani_p.easingImpl = easings['linear'];\n    } else {\n      // then define w/ name\n      var easingVals;\n      if (string(pEasing)) {\n        var easingProp = style.parse('transition-timing-function', pEasing);\n        easingVals = easingProp.value;\n      } else {\n        // then assume preparsed array\n        easingVals = pEasing;\n      }\n      var name, args;\n      if (string(easingVals)) {\n        name = easingVals;\n        args = [];\n      } else {\n        name = easingVals[1];\n        args = easingVals.slice(2).map(function (n) {\n          return +n;\n        });\n      }\n      if (args.length > 0) {\n        // create with args\n        if (name === 'spring') {\n          args.push(ani_p.duration); // need duration to generate spring\n        }\n\n        ani_p.easingImpl = easings[name].apply(null, args);\n      } else {\n        // static impl by name\n        ani_p.easingImpl = easings[name];\n      }\n    }\n  }\n  var easing = ani_p.easingImpl;\n  var percent;\n  if (ani_p.duration === 0) {\n    percent = 1;\n  } else {\n    percent = (now - startTime) / ani_p.duration;\n  }\n  if (ani_p.applying) {\n    percent = ani_p.progress;\n  }\n  if (percent < 0) {\n    percent = 0;\n  } else if (percent > 1) {\n    percent = 1;\n  }\n  if (ani_p.delay == null) {\n    // then update\n\n    var startPos = ani_p.startPosition;\n    var endPos = ani_p.position;\n    if (endPos && isEles && !self.locked()) {\n      var newPos = {};\n      if (valid(startPos.x, endPos.x)) {\n        newPos.x = ease(startPos.x, endPos.x, percent, easing);\n      }\n      if (valid(startPos.y, endPos.y)) {\n        newPos.y = ease(startPos.y, endPos.y, percent, easing);\n      }\n      self.position(newPos);\n    }\n    var startPan = ani_p.startPan;\n    var endPan = ani_p.pan;\n    var pan = _p.pan;\n    var animatingPan = endPan != null && isCore;\n    if (animatingPan) {\n      if (valid(startPan.x, endPan.x)) {\n        pan.x = ease(startPan.x, endPan.x, percent, easing);\n      }\n      if (valid(startPan.y, endPan.y)) {\n        pan.y = ease(startPan.y, endPan.y, percent, easing);\n      }\n      self.emit('pan');\n    }\n    var startZoom = ani_p.startZoom;\n    var endZoom = ani_p.zoom;\n    var animatingZoom = endZoom != null && isCore;\n    if (animatingZoom) {\n      if (valid(startZoom, endZoom)) {\n        _p.zoom = bound(_p.minZoom, ease(startZoom, endZoom, percent, easing), _p.maxZoom);\n      }\n      self.emit('zoom');\n    }\n    if (animatingPan || animatingZoom) {\n      self.emit('viewport');\n    }\n    var props = ani_p.style;\n    if (props && props.length > 0 && isEles) {\n      for (var i = 0; i < props.length; i++) {\n        var prop = props[i];\n        var _name = prop.name;\n        var end = prop;\n        var start = ani_p.startStyle[_name];\n        var propSpec = style.properties[start.name];\n        var easedVal = ease(start, end, percent, easing, propSpec);\n        style.overrideBypass(self, _name, easedVal);\n      } // for props\n\n      self.emit('style');\n    } // if\n  }\n\n  ani_p.progress = percent;\n  return percent;\n}\nfunction valid(start, end) {\n  if (start == null || end == null) {\n    return false;\n  }\n  if (number$1(start) && number$1(end)) {\n    return true;\n  } else if (start && end) {\n    return true;\n  }\n  return false;\n}\n\nfunction startAnimation(self, ani, now, isCore) {\n  var ani_p = ani._private;\n  ani_p.started = true;\n  ani_p.startTime = now - ani_p.progress * ani_p.duration;\n}\n\nfunction stepAll(now, cy) {\n  var eles = cy._private.aniEles;\n  var doneEles = [];\n  function stepOne(ele, isCore) {\n    var _p = ele._private;\n    var current = _p.animation.current;\n    var queue = _p.animation.queue;\n    var ranAnis = false;\n\n    // if nothing currently animating, get something from the queue\n    if (current.length === 0) {\n      var next = queue.shift();\n      if (next) {\n        current.push(next);\n      }\n    }\n    var callbacks = function callbacks(_callbacks) {\n      for (var j = _callbacks.length - 1; j >= 0; j--) {\n        var cb = _callbacks[j];\n        cb();\n      }\n      _callbacks.splice(0, _callbacks.length);\n    };\n\n    // step and remove if done\n    for (var i = current.length - 1; i >= 0; i--) {\n      var ani = current[i];\n      var ani_p = ani._private;\n      if (ani_p.stopped) {\n        current.splice(i, 1);\n        ani_p.hooked = false;\n        ani_p.playing = false;\n        ani_p.started = false;\n        callbacks(ani_p.frames);\n        continue;\n      }\n      if (!ani_p.playing && !ani_p.applying) {\n        continue;\n      }\n\n      // an apply() while playing shouldn't do anything\n      if (ani_p.playing && ani_p.applying) {\n        ani_p.applying = false;\n      }\n      if (!ani_p.started) {\n        startAnimation(ele, ani, now);\n      }\n      step$1(ele, ani, now, isCore);\n      if (ani_p.applying) {\n        ani_p.applying = false;\n      }\n      callbacks(ani_p.frames);\n      if (ani_p.step != null) {\n        ani_p.step(now);\n      }\n      if (ani.completed()) {\n        current.splice(i, 1);\n        ani_p.hooked = false;\n        ani_p.playing = false;\n        ani_p.started = false;\n        callbacks(ani_p.completes);\n      }\n      ranAnis = true;\n    }\n    if (!isCore && current.length === 0 && queue.length === 0) {\n      doneEles.push(ele);\n    }\n    return ranAnis;\n  } // stepElement\n\n  // handle all eles\n  var ranEleAni = false;\n  for (var e = 0; e < eles.length; e++) {\n    var ele = eles[e];\n    var handledThisEle = stepOne(ele);\n    ranEleAni = ranEleAni || handledThisEle;\n  } // each element\n\n  var ranCoreAni = stepOne(cy, true);\n\n  // notify renderer\n  if (ranEleAni || ranCoreAni) {\n    if (eles.length > 0) {\n      cy.notify('draw', eles);\n    } else {\n      cy.notify('draw');\n    }\n  }\n\n  // remove elements from list of currently animating if its queues are empty\n  eles.unmerge(doneEles);\n  cy.emit('step');\n} // stepAll\n\nvar corefn$8 = {\n  // pull in animation functions\n  animate: define.animate(),\n  animation: define.animation(),\n  animated: define.animated(),\n  clearQueue: define.clearQueue(),\n  delay: define.delay(),\n  delayAnimation: define.delayAnimation(),\n  stop: define.stop(),\n  addToAnimationPool: function addToAnimationPool(eles) {\n    var cy = this;\n    if (!cy.styleEnabled()) {\n      return;\n    } // save cycles when no style used\n\n    cy._private.aniEles.merge(eles);\n  },\n  stopAnimationLoop: function stopAnimationLoop() {\n    this._private.animationsRunning = false;\n  },\n  startAnimationLoop: function startAnimationLoop() {\n    var cy = this;\n    cy._private.animationsRunning = true;\n    if (!cy.styleEnabled()) {\n      return;\n    } // save cycles when no style used\n\n    // NB the animation loop will exec in headless environments if style enabled\n    // and explicit cy.destroy() is necessary to stop the loop\n\n    function headlessStep() {\n      if (!cy._private.animationsRunning) {\n        return;\n      }\n      requestAnimationFrame(function animationStep(now) {\n        stepAll(now, cy);\n        headlessStep();\n      });\n    }\n    var renderer = cy.renderer();\n    if (renderer && renderer.beforeRender) {\n      // let the renderer schedule animations\n      renderer.beforeRender(function rendererAnimationStep(willDraw, now) {\n        stepAll(now, cy);\n      }, renderer.beforeRenderPriorities.animations);\n    } else {\n      // manage the animation loop ourselves\n      headlessStep(); // first call\n    }\n  }\n};\n\nvar emitterOptions = {\n  qualifierCompare: function qualifierCompare(selector1, selector2) {\n    if (selector1 == null || selector2 == null) {\n      return selector1 == null && selector2 == null;\n    } else {\n      return selector1.sameText(selector2);\n    }\n  },\n  eventMatches: function eventMatches(cy, listener, eventObj) {\n    var selector = listener.qualifier;\n    if (selector != null) {\n      return cy !== eventObj.target && element(eventObj.target) && selector.matches(eventObj.target);\n    }\n    return true;\n  },\n  addEventFields: function addEventFields(cy, evt) {\n    evt.cy = cy;\n    evt.target = cy;\n  },\n  callbackContext: function callbackContext(cy, listener, eventObj) {\n    return listener.qualifier != null ? eventObj.target : cy;\n  }\n};\nvar argSelector = function argSelector(arg) {\n  if (string(arg)) {\n    return new Selector(arg);\n  } else {\n    return arg;\n  }\n};\nvar elesfn = {\n  createEmitter: function createEmitter() {\n    var _p = this._private;\n    if (!_p.emitter) {\n      _p.emitter = new Emitter(emitterOptions, this);\n    }\n    return this;\n  },\n  emitter: function emitter() {\n    return this._private.emitter;\n  },\n  on: function on(events, selector, callback) {\n    this.emitter().on(events, argSelector(selector), callback);\n    return this;\n  },\n  removeListener: function removeListener(events, selector, callback) {\n    this.emitter().removeListener(events, argSelector(selector), callback);\n    return this;\n  },\n  removeAllListeners: function removeAllListeners() {\n    this.emitter().removeAllListeners();\n    return this;\n  },\n  one: function one(events, selector, callback) {\n    this.emitter().one(events, argSelector(selector), callback);\n    return this;\n  },\n  once: function once(events, selector, callback) {\n    this.emitter().one(events, argSelector(selector), callback);\n    return this;\n  },\n  emit: function emit(events, extraParams) {\n    this.emitter().emit(events, extraParams);\n    return this;\n  },\n  emitAndNotify: function emitAndNotify(event, eles) {\n    this.emit(event);\n    this.notify(event, eles);\n    return this;\n  }\n};\ndefine.eventAliasesOn(elesfn);\n\nvar corefn$7 = {\n  png: function png(options) {\n    var renderer = this._private.renderer;\n    options = options || {};\n    return renderer.png(options);\n  },\n  jpg: function jpg(options) {\n    var renderer = this._private.renderer;\n    options = options || {};\n    options.bg = options.bg || '#fff';\n    return renderer.jpg(options);\n  }\n};\ncorefn$7.jpeg = corefn$7.jpg;\n\nvar corefn$6 = {\n  layout: function layout(options) {\n    var cy = this;\n    if (options == null) {\n      error('Layout options must be specified to make a layout');\n      return;\n    }\n    if (options.name == null) {\n      error('A `name` must be specified to make a layout');\n      return;\n    }\n    var name = options.name;\n    var Layout = cy.extension('layout', name);\n    if (Layout == null) {\n      error('No such layout `' + name + '` found.  Did you forget to import it and `cytoscape.use()` it?');\n      return;\n    }\n    var eles;\n    if (string(options.eles)) {\n      eles = cy.$(options.eles);\n    } else {\n      eles = options.eles != null ? options.eles : cy.$();\n    }\n    var layout = new Layout(extend({}, options, {\n      cy: cy,\n      eles: eles\n    }));\n    return layout;\n  }\n};\ncorefn$6.createLayout = corefn$6.makeLayout = corefn$6.layout;\n\nvar corefn$5 = {\n  notify: function notify(eventName, eventEles) {\n    var _p = this._private;\n    if (this.batching()) {\n      _p.batchNotifications = _p.batchNotifications || {};\n      var eles = _p.batchNotifications[eventName] = _p.batchNotifications[eventName] || this.collection();\n      if (eventEles != null) {\n        eles.merge(eventEles);\n      }\n      return; // notifications are disabled during batching\n    }\n\n    if (!_p.notificationsEnabled) {\n      return;\n    } // exit on disabled\n\n    var renderer = this.renderer();\n\n    // exit if destroy() called on core or renderer in between frames #1499 #1528\n    if (this.destroyed() || !renderer) {\n      return;\n    }\n    renderer.notify(eventName, eventEles);\n  },\n  notifications: function notifications(bool) {\n    var p = this._private;\n    if (bool === undefined) {\n      return p.notificationsEnabled;\n    } else {\n      p.notificationsEnabled = bool ? true : false;\n    }\n    return this;\n  },\n  noNotifications: function noNotifications(callback) {\n    this.notifications(false);\n    callback();\n    this.notifications(true);\n  },\n  batching: function batching() {\n    return this._private.batchCount > 0;\n  },\n  startBatch: function startBatch() {\n    var _p = this._private;\n    if (_p.batchCount == null) {\n      _p.batchCount = 0;\n    }\n    if (_p.batchCount === 0) {\n      _p.batchStyleEles = this.collection();\n      _p.batchNotifications = {};\n    }\n    _p.batchCount++;\n    return this;\n  },\n  endBatch: function endBatch() {\n    var _p = this._private;\n    if (_p.batchCount === 0) {\n      return this;\n    }\n    _p.batchCount--;\n    if (_p.batchCount === 0) {\n      // update style for dirty eles\n      _p.batchStyleEles.updateStyle();\n      var renderer = this.renderer();\n\n      // notify the renderer of queued eles and event types\n      Object.keys(_p.batchNotifications).forEach(function (eventName) {\n        var eles = _p.batchNotifications[eventName];\n        if (eles.empty()) {\n          renderer.notify(eventName);\n        } else {\n          renderer.notify(eventName, eles);\n        }\n      });\n    }\n    return this;\n  },\n  batch: function batch(callback) {\n    this.startBatch();\n    callback();\n    this.endBatch();\n    return this;\n  },\n  // for backwards compatibility\n  batchData: function batchData(map) {\n    var cy = this;\n    return this.batch(function () {\n      var ids = Object.keys(map);\n      for (var i = 0; i < ids.length; i++) {\n        var id = ids[i];\n        var data = map[id];\n        var ele = cy.getElementById(id);\n        ele.data(data);\n      }\n    });\n  }\n};\n\nvar rendererDefaults = defaults$g({\n  hideEdgesOnViewport: false,\n  textureOnViewport: false,\n  motionBlur: false,\n  motionBlurOpacity: 0.05,\n  pixelRatio: undefined,\n  desktopTapThreshold: 4,\n  touchTapThreshold: 8,\n  wheelSensitivity: 1,\n  debug: false,\n  showFps: false\n});\nvar corefn$4 = {\n  renderTo: function renderTo(context, zoom, pan, pxRatio) {\n    var r = this._private.renderer;\n    r.renderTo(context, zoom, pan, pxRatio);\n    return this;\n  },\n  renderer: function renderer() {\n    return this._private.renderer;\n  },\n  forceRender: function forceRender() {\n    this.notify('draw');\n    return this;\n  },\n  resize: function resize() {\n    this.invalidateSize();\n    this.emitAndNotify('resize');\n    return this;\n  },\n  initRenderer: function initRenderer(options) {\n    var cy = this;\n    var RendererProto = cy.extension('renderer', options.name);\n    if (RendererProto == null) {\n      error(\"Can not initialise: No such renderer `\".concat(options.name, \"` found. Did you forget to import it and `cytoscape.use()` it?\"));\n      return;\n    }\n    if (options.wheelSensitivity !== undefined) {\n      warn(\"You have set a custom wheel sensitivity.  This will make your app zoom unnaturally when using mainstream mice.  You should change this value from the default only if you can guarantee that all your users will use the same hardware and OS configuration as your current machine.\");\n    }\n    var rOpts = rendererDefaults(options);\n    rOpts.cy = cy;\n    cy._private.renderer = new RendererProto(rOpts);\n    this.notify('init');\n  },\n  destroyRenderer: function destroyRenderer() {\n    var cy = this;\n    cy.notify('destroy'); // destroy the renderer\n\n    var domEle = cy.container();\n    if (domEle) {\n      domEle._cyreg = null;\n      while (domEle.childNodes.length > 0) {\n        domEle.removeChild(domEle.childNodes[0]);\n      }\n    }\n    cy._private.renderer = null; // to be extra safe, remove the ref\n    cy.mutableElements().forEach(function (ele) {\n      var _p = ele._private;\n      _p.rscratch = {};\n      _p.rstyle = {};\n      _p.animation.current = [];\n      _p.animation.queue = [];\n    });\n  },\n  onRender: function onRender(fn) {\n    return this.on('render', fn);\n  },\n  offRender: function offRender(fn) {\n    return this.off('render', fn);\n  }\n};\ncorefn$4.invalidateDimensions = corefn$4.resize;\n\nvar corefn$3 = {\n  // get a collection\n  // - empty collection on no args\n  // - collection of elements in the graph on selector arg\n  // - guarantee a returned collection when elements or collection specified\n  collection: function collection(eles, opts) {\n    if (string(eles)) {\n      return this.$(eles);\n    } else if (elementOrCollection(eles)) {\n      return eles.collection();\n    } else if (array(eles)) {\n      if (!opts) {\n        opts = {};\n      }\n      return new Collection(this, eles, opts.unique, opts.removed);\n    }\n    return new Collection(this);\n  },\n  nodes: function nodes(selector) {\n    var nodes = this.$(function (ele) {\n      return ele.isNode();\n    });\n    if (selector) {\n      return nodes.filter(selector);\n    }\n    return nodes;\n  },\n  edges: function edges(selector) {\n    var edges = this.$(function (ele) {\n      return ele.isEdge();\n    });\n    if (selector) {\n      return edges.filter(selector);\n    }\n    return edges;\n  },\n  // search the graph like jQuery\n  $: function $(selector) {\n    var eles = this._private.elements;\n    if (selector) {\n      return eles.filter(selector);\n    } else {\n      return eles.spawnSelf();\n    }\n  },\n  mutableElements: function mutableElements() {\n    return this._private.elements;\n  }\n};\n\n// aliases\ncorefn$3.elements = corefn$3.filter = corefn$3.$;\n\nvar styfn$8 = {};\n\n// keys for style blocks, e.g. ttfftt\nvar TRUE = 't';\nvar FALSE = 'f';\n\n// (potentially expensive calculation)\n// apply the style to the element based on\n// - its bypass\n// - what selectors match it\nstyfn$8.apply = function (eles) {\n  var self = this;\n  var _p = self._private;\n  var cy = _p.cy;\n  var updatedEles = cy.collection();\n  for (var ie = 0; ie < eles.length; ie++) {\n    var ele = eles[ie];\n    var cxtMeta = self.getContextMeta(ele);\n    if (cxtMeta.empty) {\n      continue;\n    }\n    var cxtStyle = self.getContextStyle(cxtMeta);\n    var app = self.applyContextStyle(cxtMeta, cxtStyle, ele);\n    if (ele._private.appliedInitStyle) {\n      self.updateTransitions(ele, app.diffProps);\n    } else {\n      ele._private.appliedInitStyle = true;\n    }\n    var hintsDiff = self.updateStyleHints(ele);\n    if (hintsDiff) {\n      updatedEles.push(ele);\n    }\n  } // for elements\n\n  return updatedEles;\n};\nstyfn$8.getPropertiesDiff = function (oldCxtKey, newCxtKey) {\n  var self = this;\n  var cache = self._private.propDiffs = self._private.propDiffs || {};\n  var dualCxtKey = oldCxtKey + '-' + newCxtKey;\n  var cachedVal = cache[dualCxtKey];\n  if (cachedVal) {\n    return cachedVal;\n  }\n  var diffProps = [];\n  var addedProp = {};\n  for (var i = 0; i < self.length; i++) {\n    var cxt = self[i];\n    var oldHasCxt = oldCxtKey[i] === TRUE;\n    var newHasCxt = newCxtKey[i] === TRUE;\n    var cxtHasDiffed = oldHasCxt !== newHasCxt;\n    var cxtHasMappedProps = cxt.mappedProperties.length > 0;\n    if (cxtHasDiffed || newHasCxt && cxtHasMappedProps) {\n      var props = void 0;\n      if (cxtHasDiffed && cxtHasMappedProps) {\n        props = cxt.properties; // suffices b/c mappedProperties is a subset of properties\n      } else if (cxtHasDiffed) {\n        props = cxt.properties; // need to check them all\n      } else if (cxtHasMappedProps) {\n        props = cxt.mappedProperties; // only need to check mapped\n      }\n\n      for (var j = 0; j < props.length; j++) {\n        var prop = props[j];\n        var name = prop.name;\n\n        // if a later context overrides this property, then the fact that this context has switched/diffed doesn't matter\n        // (semi expensive check since it makes this function O(n^2) on context length, but worth it since overall result\n        // is cached)\n        var laterCxtOverrides = false;\n        for (var k = i + 1; k < self.length; k++) {\n          var laterCxt = self[k];\n          var hasLaterCxt = newCxtKey[k] === TRUE;\n          if (!hasLaterCxt) {\n            continue;\n          } // can't override unless the context is active\n\n          laterCxtOverrides = laterCxt.properties[prop.name] != null;\n          if (laterCxtOverrides) {\n            break;\n          } // exit early as long as one later context overrides\n        }\n\n        if (!addedProp[name] && !laterCxtOverrides) {\n          addedProp[name] = true;\n          diffProps.push(name);\n        }\n      } // for props\n    } // if\n  } // for contexts\n\n  cache[dualCxtKey] = diffProps;\n  return diffProps;\n};\nstyfn$8.getContextMeta = function (ele) {\n  var self = this;\n  var cxtKey = '';\n  var diffProps;\n  var prevKey = ele._private.styleCxtKey || '';\n\n  // get the cxt key\n  for (var i = 0; i < self.length; i++) {\n    var context = self[i];\n    var contextSelectorMatches = context.selector && context.selector.matches(ele); // NB: context.selector may be null for 'core'\n\n    if (contextSelectorMatches) {\n      cxtKey += TRUE;\n    } else {\n      cxtKey += FALSE;\n    }\n  } // for context\n\n  diffProps = self.getPropertiesDiff(prevKey, cxtKey);\n  ele._private.styleCxtKey = cxtKey;\n  return {\n    key: cxtKey,\n    diffPropNames: diffProps,\n    empty: diffProps.length === 0\n  };\n};\n\n// gets a computed ele style object based on matched contexts\nstyfn$8.getContextStyle = function (cxtMeta) {\n  var cxtKey = cxtMeta.key;\n  var self = this;\n  var cxtStyles = this._private.contextStyles = this._private.contextStyles || {};\n\n  // if already computed style, returned cached copy\n  if (cxtStyles[cxtKey]) {\n    return cxtStyles[cxtKey];\n  }\n  var style = {\n    _private: {\n      key: cxtKey\n    }\n  };\n  for (var i = 0; i < self.length; i++) {\n    var cxt = self[i];\n    var hasCxt = cxtKey[i] === TRUE;\n    if (!hasCxt) {\n      continue;\n    }\n    for (var j = 0; j < cxt.properties.length; j++) {\n      var prop = cxt.properties[j];\n      style[prop.name] = prop;\n    }\n  }\n  cxtStyles[cxtKey] = style;\n  return style;\n};\nstyfn$8.applyContextStyle = function (cxtMeta, cxtStyle, ele) {\n  var self = this;\n  var diffProps = cxtMeta.diffPropNames;\n  var retDiffProps = {};\n  var types = self.types;\n  for (var i = 0; i < diffProps.length; i++) {\n    var diffPropName = diffProps[i];\n    var cxtProp = cxtStyle[diffPropName];\n    var eleProp = ele.pstyle(diffPropName);\n    if (!cxtProp) {\n      // no context prop means delete\n      if (!eleProp) {\n        continue; // no existing prop means nothing needs to be removed\n        // nb affects initial application on mapped values like control-point-distances\n      } else if (eleProp.bypass) {\n        cxtProp = {\n          name: diffPropName,\n          deleteBypassed: true\n        };\n      } else {\n        cxtProp = {\n          name: diffPropName,\n          \"delete\": true\n        };\n      }\n    }\n\n    // save cycles when the context prop doesn't need to be applied\n    if (eleProp === cxtProp) {\n      continue;\n    }\n\n    // save cycles when a mapped context prop doesn't need to be applied\n    if (cxtProp.mapped === types.fn // context prop is function mapper\n    && eleProp != null // some props can be null even by default (e.g. a prop that overrides another one)\n    && eleProp.mapping != null // ele prop is a concrete value from from a mapper\n    && eleProp.mapping.value === cxtProp.value // the current prop on the ele is a flat prop value for the function mapper\n    ) {\n      // NB don't write to cxtProp, as it's shared among eles (stored in stylesheet)\n      var mapping = eleProp.mapping; // can write to mapping, as it's a per-ele copy\n      var fnValue = mapping.fnValue = cxtProp.value(ele); // temporarily cache the value in case of a miss\n\n      if (fnValue === mapping.prevFnValue) {\n        continue;\n      }\n    }\n    var retDiffProp = retDiffProps[diffPropName] = {\n      prev: eleProp\n    };\n    self.applyParsedProperty(ele, cxtProp);\n    retDiffProp.next = ele.pstyle(diffPropName);\n    if (retDiffProp.next && retDiffProp.next.bypass) {\n      retDiffProp.next = retDiffProp.next.bypassed;\n    }\n  }\n  return {\n    diffProps: retDiffProps\n  };\n};\nstyfn$8.updateStyleHints = function (ele) {\n  var _p = ele._private;\n  var self = this;\n  var propNames = self.propertyGroupNames;\n  var propGrKeys = self.propertyGroupKeys;\n  var propHash = function propHash(ele, propNames, seedKey) {\n    return self.getPropertiesHash(ele, propNames, seedKey);\n  };\n  var oldStyleKey = _p.styleKey;\n  if (ele.removed()) {\n    return false;\n  }\n  var isNode = _p.group === 'nodes';\n\n  // get the style key hashes per prop group\n  // but lazily -- only use non-default prop values to reduce the number of hashes\n  //\n\n  var overriddenStyles = ele._private.style;\n  propNames = Object.keys(overriddenStyles);\n  for (var i = 0; i < propGrKeys.length; i++) {\n    var grKey = propGrKeys[i];\n    _p.styleKeys[grKey] = [DEFAULT_HASH_SEED, DEFAULT_HASH_SEED_ALT];\n  }\n  var updateGrKey1 = function updateGrKey1(val, grKey) {\n    return _p.styleKeys[grKey][0] = hashInt(val, _p.styleKeys[grKey][0]);\n  };\n  var updateGrKey2 = function updateGrKey2(val, grKey) {\n    return _p.styleKeys[grKey][1] = hashIntAlt(val, _p.styleKeys[grKey][1]);\n  };\n  var updateGrKey = function updateGrKey(val, grKey) {\n    updateGrKey1(val, grKey);\n    updateGrKey2(val, grKey);\n  };\n  var updateGrKeyWStr = function updateGrKeyWStr(strVal, grKey) {\n    for (var j = 0; j < strVal.length; j++) {\n      var ch = strVal.charCodeAt(j);\n      updateGrKey1(ch, grKey);\n      updateGrKey2(ch, grKey);\n    }\n  };\n\n  // - hashing works on 32 bit ints b/c we use bitwise ops\n  // - small numbers get cut off (e.g. 0.123 is seen as 0 by the hashing function)\n  // - raise up small numbers so more significant digits are seen by hashing\n  // - make small numbers larger than a normal value to avoid collisions\n  // - works in practice and it's relatively cheap\n  var N = 2000000000;\n  var cleanNum = function cleanNum(val) {\n    return -128 < val && val < 128 && Math.floor(val) !== val ? N - (val * 1024 | 0) : val;\n  };\n  for (var _i = 0; _i < propNames.length; _i++) {\n    var name = propNames[_i];\n    var parsedProp = overriddenStyles[name];\n    if (parsedProp == null) {\n      continue;\n    }\n    var propInfo = this.properties[name];\n    var type = propInfo.type;\n    var _grKey = propInfo.groupKey;\n    var normalizedNumberVal = void 0;\n    if (propInfo.hashOverride != null) {\n      normalizedNumberVal = propInfo.hashOverride(ele, parsedProp);\n    } else if (parsedProp.pfValue != null) {\n      normalizedNumberVal = parsedProp.pfValue;\n    }\n\n    // might not be a number if it allows enums\n    var numberVal = propInfo.enums == null ? parsedProp.value : null;\n    var haveNormNum = normalizedNumberVal != null;\n    var haveUnitedNum = numberVal != null;\n    var haveNum = haveNormNum || haveUnitedNum;\n    var units = parsedProp.units;\n\n    // numbers are cheaper to hash than strings\n    // 1 hash op vs n hash ops (for length n string)\n    if (type.number && haveNum && !type.multiple) {\n      var v = haveNormNum ? normalizedNumberVal : numberVal;\n      updateGrKey(cleanNum(v), _grKey);\n      if (!haveNormNum && units != null) {\n        updateGrKeyWStr(units, _grKey);\n      }\n    } else {\n      updateGrKeyWStr(parsedProp.strValue, _grKey);\n    }\n  }\n\n  // overall style key\n  //\n\n  var hash = [DEFAULT_HASH_SEED, DEFAULT_HASH_SEED_ALT];\n  for (var _i2 = 0; _i2 < propGrKeys.length; _i2++) {\n    var _grKey2 = propGrKeys[_i2];\n    var grHash = _p.styleKeys[_grKey2];\n    hash[0] = hashInt(grHash[0], hash[0]);\n    hash[1] = hashIntAlt(grHash[1], hash[1]);\n  }\n  _p.styleKey = combineHashes(hash[0], hash[1]);\n\n  // label dims\n  //\n\n  var sk = _p.styleKeys;\n  _p.labelDimsKey = combineHashesArray(sk.labelDimensions);\n  var labelKeys = propHash(ele, ['label'], sk.labelDimensions);\n  _p.labelKey = combineHashesArray(labelKeys);\n  _p.labelStyleKey = combineHashesArray(hashArrays(sk.commonLabel, labelKeys));\n  if (!isNode) {\n    var sourceLabelKeys = propHash(ele, ['source-label'], sk.labelDimensions);\n    _p.sourceLabelKey = combineHashesArray(sourceLabelKeys);\n    _p.sourceLabelStyleKey = combineHashesArray(hashArrays(sk.commonLabel, sourceLabelKeys));\n    var targetLabelKeys = propHash(ele, ['target-label'], sk.labelDimensions);\n    _p.targetLabelKey = combineHashesArray(targetLabelKeys);\n    _p.targetLabelStyleKey = combineHashesArray(hashArrays(sk.commonLabel, targetLabelKeys));\n  }\n\n  // node\n  //\n\n  if (isNode) {\n    var _p$styleKeys = _p.styleKeys,\n      nodeBody = _p$styleKeys.nodeBody,\n      nodeBorder = _p$styleKeys.nodeBorder,\n      nodeOutline = _p$styleKeys.nodeOutline,\n      backgroundImage = _p$styleKeys.backgroundImage,\n      compound = _p$styleKeys.compound,\n      pie = _p$styleKeys.pie;\n    var nodeKeys = [nodeBody, nodeBorder, nodeOutline, backgroundImage, compound, pie].filter(function (k) {\n      return k != null;\n    }).reduce(hashArrays, [DEFAULT_HASH_SEED, DEFAULT_HASH_SEED_ALT]);\n    _p.nodeKey = combineHashesArray(nodeKeys);\n    _p.hasPie = pie != null && pie[0] !== DEFAULT_HASH_SEED && pie[1] !== DEFAULT_HASH_SEED_ALT;\n  }\n  return oldStyleKey !== _p.styleKey;\n};\nstyfn$8.clearStyleHints = function (ele) {\n  var _p = ele._private;\n  _p.styleCxtKey = '';\n  _p.styleKeys = {};\n  _p.styleKey = null;\n  _p.labelKey = null;\n  _p.labelStyleKey = null;\n  _p.sourceLabelKey = null;\n  _p.sourceLabelStyleKey = null;\n  _p.targetLabelKey = null;\n  _p.targetLabelStyleKey = null;\n  _p.nodeKey = null;\n  _p.hasPie = null;\n};\n\n// apply a property to the style (for internal use)\n// returns whether application was successful\n//\n// now, this function flattens the property, and here's how:\n//\n// for parsedProp:{ bypass: true, deleteBypass: true }\n// no property is generated, instead the bypass property in the\n// element's style is replaced by what's pointed to by the `bypassed`\n// field in the bypass property (i.e. restoring the property the\n// bypass was overriding)\n//\n// for parsedProp:{ mapped: truthy }\n// the generated flattenedProp:{ mapping: prop }\n//\n// for parsedProp:{ bypass: true }\n// the generated flattenedProp:{ bypassed: parsedProp }\nstyfn$8.applyParsedProperty = function (ele, parsedProp) {\n  var self = this;\n  var prop = parsedProp;\n  var style = ele._private.style;\n  var flatProp;\n  var types = self.types;\n  var type = self.properties[prop.name].type;\n  var propIsBypass = prop.bypass;\n  var origProp = style[prop.name];\n  var origPropIsBypass = origProp && origProp.bypass;\n  var _p = ele._private;\n  var flatPropMapping = 'mapping';\n  var getVal = function getVal(p) {\n    if (p == null) {\n      return null;\n    } else if (p.pfValue != null) {\n      return p.pfValue;\n    } else {\n      return p.value;\n    }\n  };\n  var checkTriggers = function checkTriggers() {\n    var fromVal = getVal(origProp);\n    var toVal = getVal(prop);\n    self.checkTriggers(ele, prop.name, fromVal, toVal);\n  };\n\n  // edge sanity checks to prevent the client from making serious mistakes\n  if (parsedProp.name === 'curve-style' && ele.isEdge() && (\n  // loops must be bundled beziers\n  parsedProp.value !== 'bezier' && ele.isLoop() ||\n  // edges connected to compound nodes can not be haystacks\n  parsedProp.value === 'haystack' && (ele.source().isParent() || ele.target().isParent()))) {\n    prop = parsedProp = this.parse(parsedProp.name, 'bezier', propIsBypass);\n  }\n  if (prop[\"delete\"]) {\n    // delete the property and use the default value on falsey value\n    style[prop.name] = undefined;\n    checkTriggers();\n    return true;\n  }\n  if (prop.deleteBypassed) {\n    // delete the property that the\n    if (!origProp) {\n      checkTriggers();\n      return true; // can't delete if no prop\n    } else if (origProp.bypass) {\n      // delete bypassed\n      origProp.bypassed = undefined;\n      checkTriggers();\n      return true;\n    } else {\n      return false; // we're unsuccessful deleting the bypassed\n    }\n  }\n\n  // check if we need to delete the current bypass\n  if (prop.deleteBypass) {\n    // then this property is just here to indicate we need to delete\n    if (!origProp) {\n      checkTriggers();\n      return true; // property is already not defined\n    } else if (origProp.bypass) {\n      // then replace the bypass property with the original\n      // because the bypassed property was already applied (and therefore parsed), we can just replace it (no reapplying necessary)\n      style[prop.name] = origProp.bypassed;\n      checkTriggers();\n      return true;\n    } else {\n      return false; // we're unsuccessful deleting the bypass\n    }\n  }\n\n  var printMappingErr = function printMappingErr() {\n    warn('Do not assign mappings to elements without corresponding data (i.e. ele `' + ele.id() + '` has no mapping for property `' + prop.name + '` with data field `' + prop.field + '`); try a `[' + prop.field + ']` selector to limit scope to elements with `' + prop.field + '` defined');\n  };\n\n  // put the property in the style objects\n  switch (prop.mapped) {\n    // flatten the property if mapped\n    case types.mapData:\n      {\n        // flatten the field (e.g. data.foo.bar)\n        var fields = prop.field.split('.');\n        var fieldVal = _p.data;\n        for (var i = 0; i < fields.length && fieldVal; i++) {\n          var field = fields[i];\n          fieldVal = fieldVal[field];\n        }\n        if (fieldVal == null) {\n          printMappingErr();\n          return false;\n        }\n        var percent;\n        if (!number$1(fieldVal)) {\n          // then don't apply and fall back on the existing style\n          warn('Do not use continuous mappers without specifying numeric data (i.e. `' + prop.field + ': ' + fieldVal + '` for `' + ele.id() + '` is non-numeric)');\n          return false;\n        } else {\n          var fieldWidth = prop.fieldMax - prop.fieldMin;\n          if (fieldWidth === 0) {\n            // safety check -- not strictly necessary as no props of zero range should be passed here\n            percent = 0;\n          } else {\n            percent = (fieldVal - prop.fieldMin) / fieldWidth;\n          }\n        }\n\n        // make sure to bound percent value\n        if (percent < 0) {\n          percent = 0;\n        } else if (percent > 1) {\n          percent = 1;\n        }\n        if (type.color) {\n          var r1 = prop.valueMin[0];\n          var r2 = prop.valueMax[0];\n          var g1 = prop.valueMin[1];\n          var g2 = prop.valueMax[1];\n          var b1 = prop.valueMin[2];\n          var b2 = prop.valueMax[2];\n          var a1 = prop.valueMin[3] == null ? 1 : prop.valueMin[3];\n          var a2 = prop.valueMax[3] == null ? 1 : prop.valueMax[3];\n          var clr = [Math.round(r1 + (r2 - r1) * percent), Math.round(g1 + (g2 - g1) * percent), Math.round(b1 + (b2 - b1) * percent), Math.round(a1 + (a2 - a1) * percent)];\n          flatProp = {\n            // colours are simple, so just create the flat property instead of expensive string parsing\n            bypass: prop.bypass,\n            // we're a bypass if the mapping property is a bypass\n            name: prop.name,\n            value: clr,\n            strValue: 'rgb(' + clr[0] + ', ' + clr[1] + ', ' + clr[2] + ')'\n          };\n        } else if (type.number) {\n          var calcValue = prop.valueMin + (prop.valueMax - prop.valueMin) * percent;\n          flatProp = this.parse(prop.name, calcValue, prop.bypass, flatPropMapping);\n        } else {\n          return false; // can only map to colours and numbers\n        }\n\n        if (!flatProp) {\n          // if we can't flatten the property, then don't apply the property and fall back on the existing style\n          printMappingErr();\n          return false;\n        }\n        flatProp.mapping = prop; // keep a reference to the mapping\n        prop = flatProp; // the flattened (mapped) property is the one we want\n\n        break;\n      }\n\n    // direct mapping\n    case types.data:\n      {\n        // flatten the field (e.g. data.foo.bar)\n        var _fields = prop.field.split('.');\n        var _fieldVal = _p.data;\n        for (var _i3 = 0; _i3 < _fields.length && _fieldVal; _i3++) {\n          var _field = _fields[_i3];\n          _fieldVal = _fieldVal[_field];\n        }\n        if (_fieldVal != null) {\n          flatProp = this.parse(prop.name, _fieldVal, prop.bypass, flatPropMapping);\n        }\n        if (!flatProp) {\n          // if we can't flatten the property, then don't apply and fall back on the existing style\n          printMappingErr();\n          return false;\n        }\n        flatProp.mapping = prop; // keep a reference to the mapping\n        prop = flatProp; // the flattened (mapped) property is the one we want\n\n        break;\n      }\n    case types.fn:\n      {\n        var fn = prop.value;\n        var fnRetVal = prop.fnValue != null ? prop.fnValue : fn(ele); // check for cached value before calling function\n\n        prop.prevFnValue = fnRetVal;\n        if (fnRetVal == null) {\n          warn('Custom function mappers may not return null (i.e. `' + prop.name + '` for ele `' + ele.id() + '` is null)');\n          return false;\n        }\n        flatProp = this.parse(prop.name, fnRetVal, prop.bypass, flatPropMapping);\n        if (!flatProp) {\n          warn('Custom function mappers may not return invalid values for the property type (i.e. `' + prop.name + '` for ele `' + ele.id() + '` is invalid)');\n          return false;\n        }\n        flatProp.mapping = copy(prop); // keep a reference to the mapping\n        prop = flatProp; // the flattened (mapped) property is the one we want\n\n        break;\n      }\n    case undefined:\n      break;\n    // just set the property\n\n    default:\n      return false;\n    // not a valid mapping\n  }\n\n  // if the property is a bypass property, then link the resultant property to the original one\n  if (propIsBypass) {\n    if (origPropIsBypass) {\n      // then this bypass overrides the existing one\n      prop.bypassed = origProp.bypassed; // steal bypassed prop from old bypass\n    } else {\n      // then link the orig prop to the new bypass\n      prop.bypassed = origProp;\n    }\n    style[prop.name] = prop; // and set\n  } else {\n    // prop is not bypass\n    if (origPropIsBypass) {\n      // then keep the orig prop (since it's a bypass) and link to the new prop\n      origProp.bypassed = prop;\n    } else {\n      // then just replace the old prop with the new one\n      style[prop.name] = prop;\n    }\n  }\n  checkTriggers();\n  return true;\n};\nstyfn$8.cleanElements = function (eles, keepBypasses) {\n  for (var i = 0; i < eles.length; i++) {\n    var ele = eles[i];\n    this.clearStyleHints(ele);\n    ele.dirtyCompoundBoundsCache();\n    ele.dirtyBoundingBoxCache();\n    if (!keepBypasses) {\n      ele._private.style = {};\n    } else {\n      var style = ele._private.style;\n      var propNames = Object.keys(style);\n      for (var j = 0; j < propNames.length; j++) {\n        var propName = propNames[j];\n        var eleProp = style[propName];\n        if (eleProp != null) {\n          if (eleProp.bypass) {\n            eleProp.bypassed = null;\n          } else {\n            style[propName] = null;\n          }\n        }\n      }\n    }\n  }\n};\n\n// updates the visual style for all elements (useful for manual style modification after init)\nstyfn$8.update = function () {\n  var cy = this._private.cy;\n  var eles = cy.mutableElements();\n  eles.updateStyle();\n};\n\n// diffProps : { name => { prev, next } }\nstyfn$8.updateTransitions = function (ele, diffProps) {\n  var self = this;\n  var _p = ele._private;\n  var props = ele.pstyle('transition-property').value;\n  var duration = ele.pstyle('transition-duration').pfValue;\n  var delay = ele.pstyle('transition-delay').pfValue;\n  if (props.length > 0 && duration > 0) {\n    var style = {};\n\n    // build up the style to animate towards\n    var anyPrev = false;\n    for (var i = 0; i < props.length; i++) {\n      var prop = props[i];\n      var styProp = ele.pstyle(prop);\n      var diffProp = diffProps[prop];\n      if (!diffProp) {\n        continue;\n      }\n      var prevProp = diffProp.prev;\n      var fromProp = prevProp;\n      var toProp = diffProp.next != null ? diffProp.next : styProp;\n      var diff = false;\n      var initVal = void 0;\n      var initDt = 0.000001; // delta time % value for initVal (allows animating out of init zero opacity)\n\n      if (!fromProp) {\n        continue;\n      }\n\n      // consider px values\n      if (number$1(fromProp.pfValue) && number$1(toProp.pfValue)) {\n        diff = toProp.pfValue - fromProp.pfValue; // nonzero is truthy\n        initVal = fromProp.pfValue + initDt * diff;\n\n        // consider numerical values\n      } else if (number$1(fromProp.value) && number$1(toProp.value)) {\n        diff = toProp.value - fromProp.value; // nonzero is truthy\n        initVal = fromProp.value + initDt * diff;\n\n        // consider colour values\n      } else if (array(fromProp.value) && array(toProp.value)) {\n        diff = fromProp.value[0] !== toProp.value[0] || fromProp.value[1] !== toProp.value[1] || fromProp.value[2] !== toProp.value[2];\n        initVal = fromProp.strValue;\n      }\n\n      // the previous value is good for an animation only if it's different\n      if (diff) {\n        style[prop] = toProp.strValue; // to val\n        this.applyBypass(ele, prop, initVal); // from val\n        anyPrev = true;\n      }\n    } // end if props allow ani\n\n    // can't transition if there's nothing previous to transition from\n    if (!anyPrev) {\n      return;\n    }\n    _p.transitioning = true;\n    new Promise$1(function (resolve) {\n      if (delay > 0) {\n        ele.delayAnimation(delay).play().promise().then(resolve);\n      } else {\n        resolve();\n      }\n    }).then(function () {\n      return ele.animation({\n        style: style,\n        duration: duration,\n        easing: ele.pstyle('transition-timing-function').value,\n        queue: false\n      }).play().promise();\n    }).then(function () {\n      // if( !isBypass ){\n      self.removeBypasses(ele, props);\n      ele.emitAndNotify('style');\n      // }\n\n      _p.transitioning = false;\n    });\n  } else if (_p.transitioning) {\n    this.removeBypasses(ele, props);\n    ele.emitAndNotify('style');\n    _p.transitioning = false;\n  }\n};\nstyfn$8.checkTrigger = function (ele, name, fromValue, toValue, getTrigger, onTrigger) {\n  var prop = this.properties[name];\n  var triggerCheck = getTrigger(prop);\n  if (triggerCheck != null && triggerCheck(fromValue, toValue)) {\n    onTrigger(prop);\n  }\n};\nstyfn$8.checkZOrderTrigger = function (ele, name, fromValue, toValue) {\n  var _this = this;\n  this.checkTrigger(ele, name, fromValue, toValue, function (prop) {\n    return prop.triggersZOrder;\n  }, function () {\n    _this._private.cy.notify('zorder', ele);\n  });\n};\nstyfn$8.checkBoundsTrigger = function (ele, name, fromValue, toValue) {\n  this.checkTrigger(ele, name, fromValue, toValue, function (prop) {\n    return prop.triggersBounds;\n  }, function (prop) {\n    ele.dirtyCompoundBoundsCache();\n    ele.dirtyBoundingBoxCache();\n\n    // if the prop change makes the bb of pll bezier edges invalid,\n    // then dirty the pll edge bb cache as well\n    if (\n    // only for beziers -- so performance of other edges isn't affected\n    prop.triggersBoundsOfParallelBeziers && name === 'curve-style' && (fromValue === 'bezier' || toValue === 'bezier')) {\n      ele.parallelEdges().forEach(function (pllEdge) {\n        if (pllEdge.isBundledBezier()) {\n          pllEdge.dirtyBoundingBoxCache();\n        }\n      });\n    }\n    if (prop.triggersBoundsOfConnectedEdges && name === 'display' && (fromValue === 'none' || toValue === 'none')) {\n      ele.connectedEdges().forEach(function (edge) {\n        edge.dirtyBoundingBoxCache();\n      });\n    }\n  });\n};\nstyfn$8.checkTriggers = function (ele, name, fromValue, toValue) {\n  ele.dirtyStyleCache();\n  this.checkZOrderTrigger(ele, name, fromValue, toValue);\n  this.checkBoundsTrigger(ele, name, fromValue, toValue);\n};\n\nvar styfn$7 = {};\n\n// bypasses are applied to an existing style on an element, and just tacked on temporarily\n// returns true iff application was successful for at least 1 specified property\nstyfn$7.applyBypass = function (eles, name, value, updateTransitions) {\n  var self = this;\n  var props = [];\n  var isBypass = true;\n\n  // put all the properties (can specify one or many) in an array after parsing them\n  if (name === '*' || name === '**') {\n    // apply to all property names\n\n    if (value !== undefined) {\n      for (var i = 0; i < self.properties.length; i++) {\n        var prop = self.properties[i];\n        var _name = prop.name;\n        var parsedProp = this.parse(_name, value, true);\n        if (parsedProp) {\n          props.push(parsedProp);\n        }\n      }\n    }\n  } else if (string(name)) {\n    // then parse the single property\n    var _parsedProp = this.parse(name, value, true);\n    if (_parsedProp) {\n      props.push(_parsedProp);\n    }\n  } else if (plainObject(name)) {\n    // then parse each property\n    var specifiedProps = name;\n    updateTransitions = value;\n    var names = Object.keys(specifiedProps);\n    for (var _i = 0; _i < names.length; _i++) {\n      var _name2 = names[_i];\n      var _value = specifiedProps[_name2];\n      if (_value === undefined) {\n        // try camel case name too\n        _value = specifiedProps[dash2camel(_name2)];\n      }\n      if (_value !== undefined) {\n        var _parsedProp2 = this.parse(_name2, _value, true);\n        if (_parsedProp2) {\n          props.push(_parsedProp2);\n        }\n      }\n    }\n  } else {\n    // can't do anything without well defined properties\n    return false;\n  }\n\n  // we've failed if there are no valid properties\n  if (props.length === 0) {\n    return false;\n  }\n\n  // now, apply the bypass properties on the elements\n  var ret = false; // return true if at least one succesful bypass applied\n  for (var _i2 = 0; _i2 < eles.length; _i2++) {\n    // for each ele\n    var ele = eles[_i2];\n    var diffProps = {};\n    var diffProp = void 0;\n    for (var j = 0; j < props.length; j++) {\n      // for each prop\n      var _prop = props[j];\n      if (updateTransitions) {\n        var prevProp = ele.pstyle(_prop.name);\n        diffProp = diffProps[_prop.name] = {\n          prev: prevProp\n        };\n      }\n      ret = this.applyParsedProperty(ele, copy(_prop)) || ret;\n      if (updateTransitions) {\n        diffProp.next = ele.pstyle(_prop.name);\n      }\n    } // for props\n\n    if (ret) {\n      this.updateStyleHints(ele);\n    }\n    if (updateTransitions) {\n      this.updateTransitions(ele, diffProps, isBypass);\n    }\n  } // for eles\n\n  return ret;\n};\n\n// only useful in specific cases like animation\nstyfn$7.overrideBypass = function (eles, name, value) {\n  name = camel2dash(name);\n  for (var i = 0; i < eles.length; i++) {\n    var ele = eles[i];\n    var prop = ele._private.style[name];\n    var type = this.properties[name].type;\n    var isColor = type.color;\n    var isMulti = type.mutiple;\n    var oldValue = !prop ? null : prop.pfValue != null ? prop.pfValue : prop.value;\n    if (!prop || !prop.bypass) {\n      // need a bypass if one doesn't exist\n      this.applyBypass(ele, name, value);\n    } else {\n      prop.value = value;\n      if (prop.pfValue != null) {\n        prop.pfValue = value;\n      }\n      if (isColor) {\n        prop.strValue = 'rgb(' + value.join(',') + ')';\n      } else if (isMulti) {\n        prop.strValue = value.join(' ');\n      } else {\n        prop.strValue = '' + value;\n      }\n      this.updateStyleHints(ele);\n    }\n    this.checkTriggers(ele, name, oldValue, value);\n  }\n};\nstyfn$7.removeAllBypasses = function (eles, updateTransitions) {\n  return this.removeBypasses(eles, this.propertyNames, updateTransitions);\n};\nstyfn$7.removeBypasses = function (eles, props, updateTransitions) {\n  var isBypass = true;\n  for (var j = 0; j < eles.length; j++) {\n    var ele = eles[j];\n    var diffProps = {};\n    for (var i = 0; i < props.length; i++) {\n      var name = props[i];\n      var prop = this.properties[name];\n      var prevProp = ele.pstyle(prop.name);\n      if (!prevProp || !prevProp.bypass) {\n        // if a bypass doesn't exist for the prop, nothing needs to be removed\n        continue;\n      }\n      var value = ''; // empty => remove bypass\n      var parsedProp = this.parse(name, value, true);\n      var diffProp = diffProps[prop.name] = {\n        prev: prevProp\n      };\n      this.applyParsedProperty(ele, parsedProp);\n      diffProp.next = ele.pstyle(prop.name);\n    } // for props\n\n    this.updateStyleHints(ele);\n    if (updateTransitions) {\n      this.updateTransitions(ele, diffProps, isBypass);\n    }\n  } // for eles\n};\n\nvar styfn$6 = {};\n\n// gets what an em size corresponds to in pixels relative to a dom element\nstyfn$6.getEmSizeInPixels = function () {\n  var px = this.containerCss('font-size');\n  if (px != null) {\n    return parseFloat(px);\n  } else {\n    return 1; // for headless\n  }\n};\n\n// gets css property from the core container\nstyfn$6.containerCss = function (propName) {\n  var cy = this._private.cy;\n  var domElement = cy.container();\n  var containerWindow = cy.window();\n  if (containerWindow && domElement && containerWindow.getComputedStyle) {\n    return containerWindow.getComputedStyle(domElement).getPropertyValue(propName);\n  }\n};\n\nvar styfn$5 = {};\n\n// gets the rendered style for an element\nstyfn$5.getRenderedStyle = function (ele, prop) {\n  if (prop) {\n    return this.getStylePropertyValue(ele, prop, true);\n  } else {\n    return this.getRawStyle(ele, true);\n  }\n};\n\n// gets the raw style for an element\nstyfn$5.getRawStyle = function (ele, isRenderedVal) {\n  var self = this;\n  ele = ele[0]; // insure it's an element\n\n  if (ele) {\n    var rstyle = {};\n    for (var i = 0; i < self.properties.length; i++) {\n      var prop = self.properties[i];\n      var val = self.getStylePropertyValue(ele, prop.name, isRenderedVal);\n      if (val != null) {\n        rstyle[prop.name] = val;\n        rstyle[dash2camel(prop.name)] = val;\n      }\n    }\n    return rstyle;\n  }\n};\nstyfn$5.getIndexedStyle = function (ele, property, subproperty, index) {\n  var pstyle = ele.pstyle(property)[subproperty][index];\n  return pstyle != null ? pstyle : ele.cy().style().getDefaultProperty(property)[subproperty][0];\n};\nstyfn$5.getStylePropertyValue = function (ele, propName, isRenderedVal) {\n  var self = this;\n  ele = ele[0]; // insure it's an element\n\n  if (ele) {\n    var prop = self.properties[propName];\n    if (prop.alias) {\n      prop = prop.pointsTo;\n    }\n    var type = prop.type;\n    var styleProp = ele.pstyle(prop.name);\n    if (styleProp) {\n      var value = styleProp.value,\n        units = styleProp.units,\n        strValue = styleProp.strValue;\n      if (isRenderedVal && type.number && value != null && number$1(value)) {\n        var zoom = ele.cy().zoom();\n        var getRenderedValue = function getRenderedValue(val) {\n          return val * zoom;\n        };\n        var getValueStringWithUnits = function getValueStringWithUnits(val, units) {\n          return getRenderedValue(val) + units;\n        };\n        var isArrayValue = array(value);\n        var haveUnits = isArrayValue ? units.every(function (u) {\n          return u != null;\n        }) : units != null;\n        if (haveUnits) {\n          if (isArrayValue) {\n            return value.map(function (v, i) {\n              return getValueStringWithUnits(v, units[i]);\n            }).join(' ');\n          } else {\n            return getValueStringWithUnits(value, units);\n          }\n        } else {\n          if (isArrayValue) {\n            return value.map(function (v) {\n              return string(v) ? v : '' + getRenderedValue(v);\n            }).join(' ');\n          } else {\n            return '' + getRenderedValue(value);\n          }\n        }\n      } else if (strValue != null) {\n        return strValue;\n      }\n    }\n    return null;\n  }\n};\nstyfn$5.getAnimationStartStyle = function (ele, aniProps) {\n  var rstyle = {};\n  for (var i = 0; i < aniProps.length; i++) {\n    var aniProp = aniProps[i];\n    var name = aniProp.name;\n    var styleProp = ele.pstyle(name);\n    if (styleProp !== undefined) {\n      // then make a prop of it\n      if (plainObject(styleProp)) {\n        styleProp = this.parse(name, styleProp.strValue);\n      } else {\n        styleProp = this.parse(name, styleProp);\n      }\n    }\n    if (styleProp) {\n      rstyle[name] = styleProp;\n    }\n  }\n  return rstyle;\n};\nstyfn$5.getPropsList = function (propsObj) {\n  var self = this;\n  var rstyle = [];\n  var style = propsObj;\n  var props = self.properties;\n  if (style) {\n    var names = Object.keys(style);\n    for (var i = 0; i < names.length; i++) {\n      var name = names[i];\n      var val = style[name];\n      var prop = props[name] || props[camel2dash(name)];\n      var styleProp = this.parse(prop.name, val);\n      if (styleProp) {\n        rstyle.push(styleProp);\n      }\n    }\n  }\n  return rstyle;\n};\nstyfn$5.getNonDefaultPropertiesHash = function (ele, propNames, seed) {\n  var hash = seed.slice();\n  var name, val, strVal, chVal;\n  var i, j;\n  for (i = 0; i < propNames.length; i++) {\n    name = propNames[i];\n    val = ele.pstyle(name, false);\n    if (val == null) {\n      continue;\n    } else if (val.pfValue != null) {\n      hash[0] = hashInt(chVal, hash[0]);\n      hash[1] = hashIntAlt(chVal, hash[1]);\n    } else {\n      strVal = val.strValue;\n      for (j = 0; j < strVal.length; j++) {\n        chVal = strVal.charCodeAt(j);\n        hash[0] = hashInt(chVal, hash[0]);\n        hash[1] = hashIntAlt(chVal, hash[1]);\n      }\n    }\n  }\n  return hash;\n};\nstyfn$5.getPropertiesHash = styfn$5.getNonDefaultPropertiesHash;\n\nvar styfn$4 = {};\nstyfn$4.appendFromJson = function (json) {\n  var style = this;\n  for (var i = 0; i < json.length; i++) {\n    var context = json[i];\n    var selector = context.selector;\n    var props = context.style || context.css;\n    var names = Object.keys(props);\n    style.selector(selector); // apply selector\n\n    for (var j = 0; j < names.length; j++) {\n      var name = names[j];\n      var value = props[name];\n      style.css(name, value); // apply property\n    }\n  }\n\n  return style;\n};\n\n// accessible cy.style() function\nstyfn$4.fromJson = function (json) {\n  var style = this;\n  style.resetToDefault();\n  style.appendFromJson(json);\n  return style;\n};\n\n// get json from cy.style() api\nstyfn$4.json = function () {\n  var json = [];\n  for (var i = this.defaultLength; i < this.length; i++) {\n    var cxt = this[i];\n    var selector = cxt.selector;\n    var props = cxt.properties;\n    var css = {};\n    for (var j = 0; j < props.length; j++) {\n      var prop = props[j];\n      css[prop.name] = prop.strValue;\n    }\n    json.push({\n      selector: !selector ? 'core' : selector.toString(),\n      style: css\n    });\n  }\n  return json;\n};\n\nvar styfn$3 = {};\nstyfn$3.appendFromString = function (string) {\n  var self = this;\n  var style = this;\n  var remaining = '' + string;\n  var selAndBlockStr;\n  var blockRem;\n  var propAndValStr;\n\n  // remove comments from the style string\n  remaining = remaining.replace(/[/][*](\\s|.)+?[*][/]/g, '');\n  function removeSelAndBlockFromRemaining() {\n    // remove the parsed selector and block from the remaining text to parse\n    if (remaining.length > selAndBlockStr.length) {\n      remaining = remaining.substr(selAndBlockStr.length);\n    } else {\n      remaining = '';\n    }\n  }\n  function removePropAndValFromRem() {\n    // remove the parsed property and value from the remaining block text to parse\n    if (blockRem.length > propAndValStr.length) {\n      blockRem = blockRem.substr(propAndValStr.length);\n    } else {\n      blockRem = '';\n    }\n  }\n  for (;;) {\n    var nothingLeftToParse = remaining.match(/^\\s*$/);\n    if (nothingLeftToParse) {\n      break;\n    }\n    var selAndBlock = remaining.match(/^\\s*((?:.|\\s)+?)\\s*\\{((?:.|\\s)+?)\\}/);\n    if (!selAndBlock) {\n      warn('Halting stylesheet parsing: String stylesheet contains more to parse but no selector and block found in: ' + remaining);\n      break;\n    }\n    selAndBlockStr = selAndBlock[0];\n\n    // parse the selector\n    var selectorStr = selAndBlock[1];\n    if (selectorStr !== 'core') {\n      var selector = new Selector(selectorStr);\n      if (selector.invalid) {\n        warn('Skipping parsing of block: Invalid selector found in string stylesheet: ' + selectorStr);\n\n        // skip this selector and block\n        removeSelAndBlockFromRemaining();\n        continue;\n      }\n    }\n\n    // parse the block of properties and values\n    var blockStr = selAndBlock[2];\n    var invalidBlock = false;\n    blockRem = blockStr;\n    var props = [];\n    for (;;) {\n      var _nothingLeftToParse = blockRem.match(/^\\s*$/);\n      if (_nothingLeftToParse) {\n        break;\n      }\n      var propAndVal = blockRem.match(/^\\s*(.+?)\\s*:\\s*(.+?)(?:\\s*;|\\s*$)/);\n      if (!propAndVal) {\n        warn('Skipping parsing of block: Invalid formatting of style property and value definitions found in:' + blockStr);\n        invalidBlock = true;\n        break;\n      }\n      propAndValStr = propAndVal[0];\n      var propStr = propAndVal[1];\n      var valStr = propAndVal[2];\n      var prop = self.properties[propStr];\n      if (!prop) {\n        warn('Skipping property: Invalid property name in: ' + propAndValStr);\n\n        // skip this property in the block\n        removePropAndValFromRem();\n        continue;\n      }\n      var parsedProp = style.parse(propStr, valStr);\n      if (!parsedProp) {\n        warn('Skipping property: Invalid property definition in: ' + propAndValStr);\n\n        // skip this property in the block\n        removePropAndValFromRem();\n        continue;\n      }\n      props.push({\n        name: propStr,\n        val: valStr\n      });\n      removePropAndValFromRem();\n    }\n    if (invalidBlock) {\n      removeSelAndBlockFromRemaining();\n      break;\n    }\n\n    // put the parsed block in the style\n    style.selector(selectorStr);\n    for (var i = 0; i < props.length; i++) {\n      var _prop = props[i];\n      style.css(_prop.name, _prop.val);\n    }\n    removeSelAndBlockFromRemaining();\n  }\n  return style;\n};\nstyfn$3.fromString = function (string) {\n  var style = this;\n  style.resetToDefault();\n  style.appendFromString(string);\n  return style;\n};\n\nvar styfn$2 = {};\n(function () {\n  var number$1 = number;\n  var rgba = rgbaNoBackRefs;\n  var hsla = hslaNoBackRefs;\n  var hex3$1 = hex3;\n  var hex6$1 = hex6;\n  var data = function data(prefix) {\n    return '^' + prefix + '\\\\s*\\\\(\\\\s*([\\\\w\\\\.]+)\\\\s*\\\\)$';\n  };\n  var mapData = function mapData(prefix) {\n    var mapArg = number$1 + '|\\\\w+|' + rgba + '|' + hsla + '|' + hex3$1 + '|' + hex6$1;\n    return '^' + prefix + '\\\\s*\\\\(([\\\\w\\\\.]+)\\\\s*\\\\,\\\\s*(' + number$1 + ')\\\\s*\\\\,\\\\s*(' + number$1 + ')\\\\s*,\\\\s*(' + mapArg + ')\\\\s*\\\\,\\\\s*(' + mapArg + ')\\\\)$';\n  };\n  var urlRegexes = ['^url\\\\s*\\\\(\\\\s*[\\'\"]?(.+?)[\\'\"]?\\\\s*\\\\)$', '^(none)$', '^(.+)$'];\n\n  // each visual style property has a type and needs to be validated according to it\n  styfn$2.types = {\n    time: {\n      number: true,\n      min: 0,\n      units: 's|ms',\n      implicitUnits: 'ms'\n    },\n    percent: {\n      number: true,\n      min: 0,\n      max: 100,\n      units: '%',\n      implicitUnits: '%'\n    },\n    percentages: {\n      number: true,\n      min: 0,\n      max: 100,\n      units: '%',\n      implicitUnits: '%',\n      multiple: true\n    },\n    zeroOneNumber: {\n      number: true,\n      min: 0,\n      max: 1,\n      unitless: true\n    },\n    zeroOneNumbers: {\n      number: true,\n      min: 0,\n      max: 1,\n      unitless: true,\n      multiple: true\n    },\n    nOneOneNumber: {\n      number: true,\n      min: -1,\n      max: 1,\n      unitless: true\n    },\n    nonNegativeInt: {\n      number: true,\n      min: 0,\n      integer: true,\n      unitless: true\n    },\n    nonNegativeNumber: {\n      number: true,\n      min: 0,\n      unitless: true\n    },\n    position: {\n      enums: ['parent', 'origin']\n    },\n    nodeSize: {\n      number: true,\n      min: 0,\n      enums: ['label']\n    },\n    number: {\n      number: true,\n      unitless: true\n    },\n    numbers: {\n      number: true,\n      unitless: true,\n      multiple: true\n    },\n    positiveNumber: {\n      number: true,\n      unitless: true,\n      min: 0,\n      strictMin: true\n    },\n    size: {\n      number: true,\n      min: 0\n    },\n    bidirectionalSize: {\n      number: true\n    },\n    // allows negative\n    bidirectionalSizeMaybePercent: {\n      number: true,\n      allowPercent: true\n    },\n    // allows negative\n    bidirectionalSizes: {\n      number: true,\n      multiple: true\n    },\n    // allows negative\n    sizeMaybePercent: {\n      number: true,\n      min: 0,\n      allowPercent: true\n    },\n    axisDirection: {\n      enums: ['horizontal', 'leftward', 'rightward', 'vertical', 'upward', 'downward', 'auto']\n    },\n    paddingRelativeTo: {\n      enums: ['width', 'height', 'average', 'min', 'max']\n    },\n    bgWH: {\n      number: true,\n      min: 0,\n      allowPercent: true,\n      enums: ['auto'],\n      multiple: true\n    },\n    bgPos: {\n      number: true,\n      allowPercent: true,\n      multiple: true\n    },\n    bgRelativeTo: {\n      enums: ['inner', 'include-padding'],\n      multiple: true\n    },\n    bgRepeat: {\n      enums: ['repeat', 'repeat-x', 'repeat-y', 'no-repeat'],\n      multiple: true\n    },\n    bgFit: {\n      enums: ['none', 'contain', 'cover'],\n      multiple: true\n    },\n    bgCrossOrigin: {\n      enums: ['anonymous', 'use-credentials', 'null'],\n      multiple: true\n    },\n    bgClip: {\n      enums: ['none', 'node'],\n      multiple: true\n    },\n    bgContainment: {\n      enums: ['inside', 'over'],\n      multiple: true\n    },\n    color: {\n      color: true\n    },\n    colors: {\n      color: true,\n      multiple: true\n    },\n    fill: {\n      enums: ['solid', 'linear-gradient', 'radial-gradient']\n    },\n    bool: {\n      enums: ['yes', 'no']\n    },\n    bools: {\n      enums: ['yes', 'no'],\n      multiple: true\n    },\n    lineStyle: {\n      enums: ['solid', 'dotted', 'dashed']\n    },\n    lineCap: {\n      enums: ['butt', 'round', 'square']\n    },\n    linePosition: {\n      enums: ['center', 'inside', 'outside']\n    },\n    lineJoin: {\n      enums: ['round', 'bevel', 'miter']\n    },\n    borderStyle: {\n      enums: ['solid', 'dotted', 'dashed', 'double']\n    },\n    curveStyle: {\n      enums: ['bezier', 'unbundled-bezier', 'haystack', 'segments', 'straight', 'straight-triangle', 'taxi', 'round-segments', 'round-taxi']\n    },\n    radiusType: {\n      enums: ['arc-radius', 'influence-radius'],\n      multiple: true\n    },\n    fontFamily: {\n      regex: '^([\\\\w- \\\\\"]+(?:\\\\s*,\\\\s*[\\\\w- \\\\\"]+)*)$'\n    },\n    fontStyle: {\n      enums: ['italic', 'normal', 'oblique']\n    },\n    fontWeight: {\n      enums: ['normal', 'bold', 'bolder', 'lighter', '100', '200', '300', '400', '500', '600', '800', '900', 100, 200, 300, 400, 500, 600, 700, 800, 900]\n    },\n    textDecoration: {\n      enums: ['none', 'underline', 'overline', 'line-through']\n    },\n    textTransform: {\n      enums: ['none', 'uppercase', 'lowercase']\n    },\n    textWrap: {\n      enums: ['none', 'wrap', 'ellipsis']\n    },\n    textOverflowWrap: {\n      enums: ['whitespace', 'anywhere']\n    },\n    textBackgroundShape: {\n      enums: ['rectangle', 'roundrectangle', 'round-rectangle']\n    },\n    nodeShape: {\n      enums: ['rectangle', 'roundrectangle', 'round-rectangle', 'cutrectangle', 'cut-rectangle', 'bottomroundrectangle', 'bottom-round-rectangle', 'barrel', 'ellipse', 'triangle', 'round-triangle', 'square', 'pentagon', 'round-pentagon', 'hexagon', 'round-hexagon', 'concavehexagon', 'concave-hexagon', 'heptagon', 'round-heptagon', 'octagon', 'round-octagon', 'tag', 'round-tag', 'star', 'diamond', 'round-diamond', 'vee', 'rhomboid', 'right-rhomboid', 'polygon']\n    },\n    overlayShape: {\n      enums: ['roundrectangle', 'round-rectangle', 'ellipse']\n    },\n    cornerRadius: {\n      number: true,\n      min: 0,\n      units: 'px|em',\n      implicitUnits: 'px',\n      enums: ['auto']\n    },\n    compoundIncludeLabels: {\n      enums: ['include', 'exclude']\n    },\n    arrowShape: {\n      enums: ['tee', 'triangle', 'triangle-tee', 'circle-triangle', 'triangle-cross', 'triangle-backcurve', 'vee', 'square', 'circle', 'diamond', 'chevron', 'none']\n    },\n    arrowFill: {\n      enums: ['filled', 'hollow']\n    },\n    arrowWidth: {\n      number: true,\n      units: '%|px|em',\n      implicitUnits: 'px',\n      enums: ['match-line']\n    },\n    display: {\n      enums: ['element', 'none']\n    },\n    visibility: {\n      enums: ['hidden', 'visible']\n    },\n    zCompoundDepth: {\n      enums: ['bottom', 'orphan', 'auto', 'top']\n    },\n    zIndexCompare: {\n      enums: ['auto', 'manual']\n    },\n    valign: {\n      enums: ['top', 'center', 'bottom']\n    },\n    halign: {\n      enums: ['left', 'center', 'right']\n    },\n    justification: {\n      enums: ['left', 'center', 'right', 'auto']\n    },\n    text: {\n      string: true\n    },\n    data: {\n      mapping: true,\n      regex: data('data')\n    },\n    layoutData: {\n      mapping: true,\n      regex: data('layoutData')\n    },\n    scratch: {\n      mapping: true,\n      regex: data('scratch')\n    },\n    mapData: {\n      mapping: true,\n      regex: mapData('mapData')\n    },\n    mapLayoutData: {\n      mapping: true,\n      regex: mapData('mapLayoutData')\n    },\n    mapScratch: {\n      mapping: true,\n      regex: mapData('mapScratch')\n    },\n    fn: {\n      mapping: true,\n      fn: true\n    },\n    url: {\n      regexes: urlRegexes,\n      singleRegexMatchValue: true\n    },\n    urls: {\n      regexes: urlRegexes,\n      singleRegexMatchValue: true,\n      multiple: true\n    },\n    propList: {\n      propList: true\n    },\n    angle: {\n      number: true,\n      units: 'deg|rad',\n      implicitUnits: 'rad'\n    },\n    textRotation: {\n      number: true,\n      units: 'deg|rad',\n      implicitUnits: 'rad',\n      enums: ['none', 'autorotate']\n    },\n    polygonPointList: {\n      number: true,\n      multiple: true,\n      evenMultiple: true,\n      min: -1,\n      max: 1,\n      unitless: true\n    },\n    edgeDistances: {\n      enums: ['intersection', 'node-position', 'endpoints']\n    },\n    edgeEndpoint: {\n      number: true,\n      multiple: true,\n      units: '%|px|em|deg|rad',\n      implicitUnits: 'px',\n      enums: ['inside-to-node', 'outside-to-node', 'outside-to-node-or-label', 'outside-to-line', 'outside-to-line-or-label'],\n      singleEnum: true,\n      validate: function validate(valArr, unitsArr) {\n        switch (valArr.length) {\n          case 2:\n            // can be % or px only\n            return unitsArr[0] !== 'deg' && unitsArr[0] !== 'rad' && unitsArr[1] !== 'deg' && unitsArr[1] !== 'rad';\n          case 1:\n            // can be enum, deg, or rad only\n            return string(valArr[0]) || unitsArr[0] === 'deg' || unitsArr[0] === 'rad';\n          default:\n            return false;\n        }\n      }\n    },\n    easing: {\n      regexes: ['^(spring)\\\\s*\\\\(\\\\s*(' + number$1 + ')\\\\s*,\\\\s*(' + number$1 + ')\\\\s*\\\\)$', '^(cubic-bezier)\\\\s*\\\\(\\\\s*(' + number$1 + ')\\\\s*,\\\\s*(' + number$1 + ')\\\\s*,\\\\s*(' + number$1 + ')\\\\s*,\\\\s*(' + number$1 + ')\\\\s*\\\\)$'],\n      enums: ['linear', 'ease', 'ease-in', 'ease-out', 'ease-in-out', 'ease-in-sine', 'ease-out-sine', 'ease-in-out-sine', 'ease-in-quad', 'ease-out-quad', 'ease-in-out-quad', 'ease-in-cubic', 'ease-out-cubic', 'ease-in-out-cubic', 'ease-in-quart', 'ease-out-quart', 'ease-in-out-quart', 'ease-in-quint', 'ease-out-quint', 'ease-in-out-quint', 'ease-in-expo', 'ease-out-expo', 'ease-in-out-expo', 'ease-in-circ', 'ease-out-circ', 'ease-in-out-circ']\n    },\n    gradientDirection: {\n      enums: ['to-bottom', 'to-top', 'to-left', 'to-right', 'to-bottom-right', 'to-bottom-left', 'to-top-right', 'to-top-left', 'to-right-bottom', 'to-left-bottom', 'to-right-top', 'to-left-top' // different order\n      ]\n    },\n\n    boundsExpansion: {\n      number: true,\n      multiple: true,\n      min: 0,\n      validate: function validate(valArr) {\n        var length = valArr.length;\n        return length === 1 || length === 2 || length === 4;\n      }\n    }\n  };\n  var diff = {\n    zeroNonZero: function zeroNonZero(val1, val2) {\n      if ((val1 == null || val2 == null) && val1 !== val2) {\n        return true; // null cases could represent any value\n      }\n      if (val1 == 0 && val2 != 0) {\n        return true;\n      } else if (val1 != 0 && val2 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n    any: function any(val1, val2) {\n      return val1 != val2;\n    },\n    emptyNonEmpty: function emptyNonEmpty(str1, str2) {\n      var empty1 = emptyString(str1);\n      var empty2 = emptyString(str2);\n      return empty1 && !empty2 || !empty1 && empty2;\n    }\n  };\n\n  // define visual style properties\n  //\n  // - n.b. adding a new group of props may require updates to updateStyleHints()\n  // - adding new props to an existing group gets handled automatically\n\n  var t = styfn$2.types;\n  var mainLabel = [{\n    name: 'label',\n    type: t.text,\n    triggersBounds: diff.any,\n    triggersZOrder: diff.emptyNonEmpty\n  }, {\n    name: 'text-rotation',\n    type: t.textRotation,\n    triggersBounds: diff.any\n  }, {\n    name: 'text-margin-x',\n    type: t.bidirectionalSize,\n    triggersBounds: diff.any\n  }, {\n    name: 'text-margin-y',\n    type: t.bidirectionalSize,\n    triggersBounds: diff.any\n  }];\n  var sourceLabel = [{\n    name: 'source-label',\n    type: t.text,\n    triggersBounds: diff.any\n  }, {\n    name: 'source-text-rotation',\n    type: t.textRotation,\n    triggersBounds: diff.any\n  }, {\n    name: 'source-text-margin-x',\n    type: t.bidirectionalSize,\n    triggersBounds: diff.any\n  }, {\n    name: 'source-text-margin-y',\n    type: t.bidirectionalSize,\n    triggersBounds: diff.any\n  }, {\n    name: 'source-text-offset',\n    type: t.size,\n    triggersBounds: diff.any\n  }];\n  var targetLabel = [{\n    name: 'target-label',\n    type: t.text,\n    triggersBounds: diff.any\n  }, {\n    name: 'target-text-rotation',\n    type: t.textRotation,\n    triggersBounds: diff.any\n  }, {\n    name: 'target-text-margin-x',\n    type: t.bidirectionalSize,\n    triggersBounds: diff.any\n  }, {\n    name: 'target-text-margin-y',\n    type: t.bidirectionalSize,\n    triggersBounds: diff.any\n  }, {\n    name: 'target-text-offset',\n    type: t.size,\n    triggersBounds: diff.any\n  }];\n  var labelDimensions = [{\n    name: 'font-family',\n    type: t.fontFamily,\n    triggersBounds: diff.any\n  }, {\n    name: 'font-style',\n    type: t.fontStyle,\n    triggersBounds: diff.any\n  }, {\n    name: 'font-weight',\n    type: t.fontWeight,\n    triggersBounds: diff.any\n  }, {\n    name: 'font-size',\n    type: t.size,\n    triggersBounds: diff.any\n  }, {\n    name: 'text-transform',\n    type: t.textTransform,\n    triggersBounds: diff.any\n  }, {\n    name: 'text-wrap',\n    type: t.textWrap,\n    triggersBounds: diff.any\n  }, {\n    name: 'text-overflow-wrap',\n    type: t.textOverflowWrap,\n    triggersBounds: diff.any\n  }, {\n    name: 'text-max-width',\n    type: t.size,\n    triggersBounds: diff.any\n  }, {\n    name: 'text-outline-width',\n    type: t.size,\n    triggersBounds: diff.any\n  }, {\n    name: 'line-height',\n    type: t.positiveNumber,\n    triggersBounds: diff.any\n  }];\n  var commonLabel = [{\n    name: 'text-valign',\n    type: t.valign,\n    triggersBounds: diff.any\n  }, {\n    name: 'text-halign',\n    type: t.halign,\n    triggersBounds: diff.any\n  }, {\n    name: 'color',\n    type: t.color\n  }, {\n    name: 'text-outline-color',\n    type: t.color\n  }, {\n    name: 'text-outline-opacity',\n    type: t.zeroOneNumber\n  }, {\n    name: 'text-background-color',\n    type: t.color\n  }, {\n    name: 'text-background-opacity',\n    type: t.zeroOneNumber\n  }, {\n    name: 'text-background-padding',\n    type: t.size,\n    triggersBounds: diff.any\n  }, {\n    name: 'text-border-opacity',\n    type: t.zeroOneNumber\n  }, {\n    name: 'text-border-color',\n    type: t.color\n  }, {\n    name: 'text-border-width',\n    type: t.size,\n    triggersBounds: diff.any\n  }, {\n    name: 'text-border-style',\n    type: t.borderStyle,\n    triggersBounds: diff.any\n  }, {\n    name: 'text-background-shape',\n    type: t.textBackgroundShape,\n    triggersBounds: diff.any\n  }, {\n    name: 'text-justification',\n    type: t.justification\n  }];\n  var behavior = [{\n    name: 'events',\n    type: t.bool,\n    triggersZOrder: diff.any\n  }, {\n    name: 'text-events',\n    type: t.bool,\n    triggersZOrder: diff.any\n  }];\n  var visibility = [{\n    name: 'display',\n    type: t.display,\n    triggersZOrder: diff.any,\n    triggersBounds: diff.any,\n    triggersBoundsOfConnectedEdges: true\n  }, {\n    name: 'visibility',\n    type: t.visibility,\n    triggersZOrder: diff.any\n  }, {\n    name: 'opacity',\n    type: t.zeroOneNumber,\n    triggersZOrder: diff.zeroNonZero\n  }, {\n    name: 'text-opacity',\n    type: t.zeroOneNumber\n  }, {\n    name: 'min-zoomed-font-size',\n    type: t.size\n  }, {\n    name: 'z-compound-depth',\n    type: t.zCompoundDepth,\n    triggersZOrder: diff.any\n  }, {\n    name: 'z-index-compare',\n    type: t.zIndexCompare,\n    triggersZOrder: diff.any\n  }, {\n    name: 'z-index',\n    type: t.number,\n    triggersZOrder: diff.any\n  }];\n  var overlay = [{\n    name: 'overlay-padding',\n    type: t.size,\n    triggersBounds: diff.any\n  }, {\n    name: 'overlay-color',\n    type: t.color\n  }, {\n    name: 'overlay-opacity',\n    type: t.zeroOneNumber,\n    triggersBounds: diff.zeroNonZero\n  }, {\n    name: 'overlay-shape',\n    type: t.overlayShape,\n    triggersBounds: diff.any\n  }, {\n    name: 'overlay-corner-radius',\n    type: t.cornerRadius\n  }];\n  var underlay = [{\n    name: 'underlay-padding',\n    type: t.size,\n    triggersBounds: diff.any\n  }, {\n    name: 'underlay-color',\n    type: t.color\n  }, {\n    name: 'underlay-opacity',\n    type: t.zeroOneNumber,\n    triggersBounds: diff.zeroNonZero\n  }, {\n    name: 'underlay-shape',\n    type: t.overlayShape,\n    triggersBounds: diff.any\n  }, {\n    name: 'underlay-corner-radius',\n    type: t.cornerRadius\n  }];\n  var transition = [{\n    name: 'transition-property',\n    type: t.propList\n  }, {\n    name: 'transition-duration',\n    type: t.time\n  }, {\n    name: 'transition-delay',\n    type: t.time\n  }, {\n    name: 'transition-timing-function',\n    type: t.easing\n  }];\n  var nodeSizeHashOverride = function nodeSizeHashOverride(ele, parsedProp) {\n    if (parsedProp.value === 'label') {\n      return -ele.poolIndex(); // no hash key hits is using label size (hitrate for perf probably low anyway)\n    } else {\n      return parsedProp.pfValue;\n    }\n  };\n  var nodeBody = [{\n    name: 'height',\n    type: t.nodeSize,\n    triggersBounds: diff.any,\n    hashOverride: nodeSizeHashOverride\n  }, {\n    name: 'width',\n    type: t.nodeSize,\n    triggersBounds: diff.any,\n    hashOverride: nodeSizeHashOverride\n  }, {\n    name: 'shape',\n    type: t.nodeShape,\n    triggersBounds: diff.any\n  }, {\n    name: 'shape-polygon-points',\n    type: t.polygonPointList,\n    triggersBounds: diff.any\n  }, {\n    name: 'corner-radius',\n    type: t.cornerRadius\n  }, {\n    name: 'background-color',\n    type: t.color\n  }, {\n    name: 'background-fill',\n    type: t.fill\n  }, {\n    name: 'background-opacity',\n    type: t.zeroOneNumber\n  }, {\n    name: 'background-blacken',\n    type: t.nOneOneNumber\n  }, {\n    name: 'background-gradient-stop-colors',\n    type: t.colors\n  }, {\n    name: 'background-gradient-stop-positions',\n    type: t.percentages\n  }, {\n    name: 'background-gradient-direction',\n    type: t.gradientDirection\n  }, {\n    name: 'padding',\n    type: t.sizeMaybePercent,\n    triggersBounds: diff.any\n  }, {\n    name: 'padding-relative-to',\n    type: t.paddingRelativeTo,\n    triggersBounds: diff.any\n  }, {\n    name: 'bounds-expansion',\n    type: t.boundsExpansion,\n    triggersBounds: diff.any\n  }];\n  var nodeBorder = [{\n    name: 'border-color',\n    type: t.color\n  }, {\n    name: 'border-opacity',\n    type: t.zeroOneNumber\n  }, {\n    name: 'border-width',\n    type: t.size,\n    triggersBounds: diff.any\n  }, {\n    name: 'border-style',\n    type: t.borderStyle\n  }, {\n    name: 'border-cap',\n    type: t.lineCap\n  }, {\n    name: 'border-join',\n    type: t.lineJoin\n  }, {\n    name: 'border-dash-pattern',\n    type: t.numbers\n  }, {\n    name: 'border-dash-offset',\n    type: t.number\n  }, {\n    name: 'border-position',\n    type: t.linePosition\n  }];\n  var nodeOutline = [{\n    name: 'outline-color',\n    type: t.color\n  }, {\n    name: 'outline-opacity',\n    type: t.zeroOneNumber\n  }, {\n    name: 'outline-width',\n    type: t.size,\n    triggersBounds: diff.any\n  }, {\n    name: 'outline-style',\n    type: t.borderStyle\n  }, {\n    name: 'outline-offset',\n    type: t.size,\n    triggersBounds: diff.any\n  }];\n  var backgroundImage = [{\n    name: 'background-image',\n    type: t.urls\n  }, {\n    name: 'background-image-crossorigin',\n    type: t.bgCrossOrigin\n  }, {\n    name: 'background-image-opacity',\n    type: t.zeroOneNumbers\n  }, {\n    name: 'background-image-containment',\n    type: t.bgContainment\n  }, {\n    name: 'background-image-smoothing',\n    type: t.bools\n  }, {\n    name: 'background-position-x',\n    type: t.bgPos\n  }, {\n    name: 'background-position-y',\n    type: t.bgPos\n  }, {\n    name: 'background-width-relative-to',\n    type: t.bgRelativeTo\n  }, {\n    name: 'background-height-relative-to',\n    type: t.bgRelativeTo\n  }, {\n    name: 'background-repeat',\n    type: t.bgRepeat\n  }, {\n    name: 'background-fit',\n    type: t.bgFit\n  }, {\n    name: 'background-clip',\n    type: t.bgClip\n  }, {\n    name: 'background-width',\n    type: t.bgWH\n  }, {\n    name: 'background-height',\n    type: t.bgWH\n  }, {\n    name: 'background-offset-x',\n    type: t.bgPos\n  }, {\n    name: 'background-offset-y',\n    type: t.bgPos\n  }];\n  var compound = [{\n    name: 'position',\n    type: t.position,\n    triggersBounds: diff.any\n  }, {\n    name: 'compound-sizing-wrt-labels',\n    type: t.compoundIncludeLabels,\n    triggersBounds: diff.any\n  }, {\n    name: 'min-width',\n    type: t.size,\n    triggersBounds: diff.any\n  }, {\n    name: 'min-width-bias-left',\n    type: t.sizeMaybePercent,\n    triggersBounds: diff.any\n  }, {\n    name: 'min-width-bias-right',\n    type: t.sizeMaybePercent,\n    triggersBounds: diff.any\n  }, {\n    name: 'min-height',\n    type: t.size,\n    triggersBounds: diff.any\n  }, {\n    name: 'min-height-bias-top',\n    type: t.sizeMaybePercent,\n    triggersBounds: diff.any\n  }, {\n    name: 'min-height-bias-bottom',\n    type: t.sizeMaybePercent,\n    triggersBounds: diff.any\n  }];\n  var edgeLine = [{\n    name: 'line-style',\n    type: t.lineStyle\n  }, {\n    name: 'line-color',\n    type: t.color\n  }, {\n    name: 'line-fill',\n    type: t.fill\n  }, {\n    name: 'line-cap',\n    type: t.lineCap\n  }, {\n    name: 'line-opacity',\n    type: t.zeroOneNumber\n  }, {\n    name: 'line-dash-pattern',\n    type: t.numbers\n  }, {\n    name: 'line-dash-offset',\n    type: t.number\n  }, {\n    name: 'line-outline-width',\n    type: t.size\n  }, {\n    name: 'line-outline-color',\n    type: t.color\n  }, {\n    name: 'line-gradient-stop-colors',\n    type: t.colors\n  }, {\n    name: 'line-gradient-stop-positions',\n    type: t.percentages\n  }, {\n    name: 'curve-style',\n    type: t.curveStyle,\n    triggersBounds: diff.any,\n    triggersBoundsOfParallelBeziers: true\n  }, {\n    name: 'haystack-radius',\n    type: t.zeroOneNumber,\n    triggersBounds: diff.any\n  }, {\n    name: 'source-endpoint',\n    type: t.edgeEndpoint,\n    triggersBounds: diff.any\n  }, {\n    name: 'target-endpoint',\n    type: t.edgeEndpoint,\n    triggersBounds: diff.any\n  }, {\n    name: 'control-point-step-size',\n    type: t.size,\n    triggersBounds: diff.any\n  }, {\n    name: 'control-point-distances',\n    type: t.bidirectionalSizes,\n    triggersBounds: diff.any\n  }, {\n    name: 'control-point-weights',\n    type: t.numbers,\n    triggersBounds: diff.any\n  }, {\n    name: 'segment-distances',\n    type: t.bidirectionalSizes,\n    triggersBounds: diff.any\n  }, {\n    name: 'segment-weights',\n    type: t.numbers,\n    triggersBounds: diff.any\n  }, {\n    name: 'segment-radii',\n    type: t.numbers,\n    triggersBounds: diff.any\n  }, {\n    name: 'radius-type',\n    type: t.radiusType,\n    triggersBounds: diff.any\n  }, {\n    name: 'taxi-turn',\n    type: t.bidirectionalSizeMaybePercent,\n    triggersBounds: diff.any\n  }, {\n    name: 'taxi-turn-min-distance',\n    type: t.size,\n    triggersBounds: diff.any\n  }, {\n    name: 'taxi-direction',\n    type: t.axisDirection,\n    triggersBounds: diff.any\n  }, {\n    name: 'taxi-radius',\n    type: t.number,\n    triggersBounds: diff.any\n  }, {\n    name: 'edge-distances',\n    type: t.edgeDistances,\n    triggersBounds: diff.any\n  }, {\n    name: 'arrow-scale',\n    type: t.positiveNumber,\n    triggersBounds: diff.any\n  }, {\n    name: 'loop-direction',\n    type: t.angle,\n    triggersBounds: diff.any\n  }, {\n    name: 'loop-sweep',\n    type: t.angle,\n    triggersBounds: diff.any\n  }, {\n    name: 'source-distance-from-node',\n    type: t.size,\n    triggersBounds: diff.any\n  }, {\n    name: 'target-distance-from-node',\n    type: t.size,\n    triggersBounds: diff.any\n  }];\n  var ghost = [{\n    name: 'ghost',\n    type: t.bool,\n    triggersBounds: diff.any\n  }, {\n    name: 'ghost-offset-x',\n    type: t.bidirectionalSize,\n    triggersBounds: diff.any\n  }, {\n    name: 'ghost-offset-y',\n    type: t.bidirectionalSize,\n    triggersBounds: diff.any\n  }, {\n    name: 'ghost-opacity',\n    type: t.zeroOneNumber\n  }];\n  var core = [{\n    name: 'selection-box-color',\n    type: t.color\n  }, {\n    name: 'selection-box-opacity',\n    type: t.zeroOneNumber\n  }, {\n    name: 'selection-box-border-color',\n    type: t.color\n  }, {\n    name: 'selection-box-border-width',\n    type: t.size\n  }, {\n    name: 'active-bg-color',\n    type: t.color\n  }, {\n    name: 'active-bg-opacity',\n    type: t.zeroOneNumber\n  }, {\n    name: 'active-bg-size',\n    type: t.size\n  }, {\n    name: 'outside-texture-bg-color',\n    type: t.color\n  }, {\n    name: 'outside-texture-bg-opacity',\n    type: t.zeroOneNumber\n  }];\n\n  // pie backgrounds for nodes\n  var pie = [];\n  styfn$2.pieBackgroundN = 16; // because the pie properties are numbered, give access to a constant N (for renderer use)\n  pie.push({\n    name: 'pie-size',\n    type: t.sizeMaybePercent\n  });\n  for (var i = 1; i <= styfn$2.pieBackgroundN; i++) {\n    pie.push({\n      name: 'pie-' + i + '-background-color',\n      type: t.color\n    });\n    pie.push({\n      name: 'pie-' + i + '-background-size',\n      type: t.percent\n    });\n    pie.push({\n      name: 'pie-' + i + '-background-opacity',\n      type: t.zeroOneNumber\n    });\n  }\n\n  // edge arrows\n  var edgeArrow = [];\n  var arrowPrefixes = styfn$2.arrowPrefixes = ['source', 'mid-source', 'target', 'mid-target'];\n  [{\n    name: 'arrow-shape',\n    type: t.arrowShape,\n    triggersBounds: diff.any\n  }, {\n    name: 'arrow-color',\n    type: t.color\n  }, {\n    name: 'arrow-fill',\n    type: t.arrowFill\n  }, {\n    name: 'arrow-width',\n    type: t.arrowWidth\n  }].forEach(function (prop) {\n    arrowPrefixes.forEach(function (prefix) {\n      var name = prefix + '-' + prop.name;\n      var type = prop.type,\n        triggersBounds = prop.triggersBounds;\n      edgeArrow.push({\n        name: name,\n        type: type,\n        triggersBounds: triggersBounds\n      });\n    });\n  }, {});\n  var props = styfn$2.properties = [].concat(behavior, transition, visibility, overlay, underlay, ghost, commonLabel, labelDimensions, mainLabel, sourceLabel, targetLabel, nodeBody, nodeBorder, nodeOutline, backgroundImage, pie, compound, edgeLine, edgeArrow, core);\n  var propGroups = styfn$2.propertyGroups = {\n    // common to all eles\n    behavior: behavior,\n    transition: transition,\n    visibility: visibility,\n    overlay: overlay,\n    underlay: underlay,\n    ghost: ghost,\n    // labels\n    commonLabel: commonLabel,\n    labelDimensions: labelDimensions,\n    mainLabel: mainLabel,\n    sourceLabel: sourceLabel,\n    targetLabel: targetLabel,\n    // node props\n    nodeBody: nodeBody,\n    nodeBorder: nodeBorder,\n    nodeOutline: nodeOutline,\n    backgroundImage: backgroundImage,\n    pie: pie,\n    compound: compound,\n    // edge props\n    edgeLine: edgeLine,\n    edgeArrow: edgeArrow,\n    core: core\n  };\n  var propGroupNames = styfn$2.propertyGroupNames = {};\n  var propGroupKeys = styfn$2.propertyGroupKeys = Object.keys(propGroups);\n  propGroupKeys.forEach(function (key) {\n    propGroupNames[key] = propGroups[key].map(function (prop) {\n      return prop.name;\n    });\n    propGroups[key].forEach(function (prop) {\n      return prop.groupKey = key;\n    });\n  });\n\n  // define aliases\n  var aliases = styfn$2.aliases = [{\n    name: 'content',\n    pointsTo: 'label'\n  }, {\n    name: 'control-point-distance',\n    pointsTo: 'control-point-distances'\n  }, {\n    name: 'control-point-weight',\n    pointsTo: 'control-point-weights'\n  }, {\n    name: 'segment-distance',\n    pointsTo: 'segment-distances'\n  }, {\n    name: 'segment-weight',\n    pointsTo: 'segment-weights'\n  }, {\n    name: 'segment-radius',\n    pointsTo: 'segment-radii'\n  }, {\n    name: 'edge-text-rotation',\n    pointsTo: 'text-rotation'\n  }, {\n    name: 'padding-left',\n    pointsTo: 'padding'\n  }, {\n    name: 'padding-right',\n    pointsTo: 'padding'\n  }, {\n    name: 'padding-top',\n    pointsTo: 'padding'\n  }, {\n    name: 'padding-bottom',\n    pointsTo: 'padding'\n  }];\n\n  // list of property names\n  styfn$2.propertyNames = props.map(function (p) {\n    return p.name;\n  });\n\n  // allow access of properties by name ( e.g. style.properties.height )\n  for (var _i = 0; _i < props.length; _i++) {\n    var prop = props[_i];\n    props[prop.name] = prop; // allow lookup by name\n  }\n\n  // map aliases\n  for (var _i2 = 0; _i2 < aliases.length; _i2++) {\n    var alias = aliases[_i2];\n    var pointsToProp = props[alias.pointsTo];\n    var aliasProp = {\n      name: alias.name,\n      alias: true,\n      pointsTo: pointsToProp\n    };\n\n    // add alias prop for parsing\n    props.push(aliasProp);\n    props[alias.name] = aliasProp; // allow lookup by name\n  }\n})();\n\nstyfn$2.getDefaultProperty = function (name) {\n  return this.getDefaultProperties()[name];\n};\nstyfn$2.getDefaultProperties = function () {\n  var _p = this._private;\n  if (_p.defaultProperties != null) {\n    return _p.defaultProperties;\n  }\n  var rawProps = extend({\n    // core props\n    'selection-box-color': '#ddd',\n    'selection-box-opacity': 0.65,\n    'selection-box-border-color': '#aaa',\n    'selection-box-border-width': 1,\n    'active-bg-color': 'black',\n    'active-bg-opacity': 0.15,\n    'active-bg-size': 30,\n    'outside-texture-bg-color': '#000',\n    'outside-texture-bg-opacity': 0.125,\n    // common node/edge props\n    'events': 'yes',\n    'text-events': 'no',\n    'text-valign': 'top',\n    'text-halign': 'center',\n    'text-justification': 'auto',\n    'line-height': 1,\n    'color': '#000',\n    'text-outline-color': '#000',\n    'text-outline-width': 0,\n    'text-outline-opacity': 1,\n    'text-opacity': 1,\n    'text-decoration': 'none',\n    'text-transform': 'none',\n    'text-wrap': 'none',\n    'text-overflow-wrap': 'whitespace',\n    'text-max-width': 9999,\n    'text-background-color': '#000',\n    'text-background-opacity': 0,\n    'text-background-shape': 'rectangle',\n    'text-background-padding': 0,\n    'text-border-opacity': 0,\n    'text-border-width': 0,\n    'text-border-style': 'solid',\n    'text-border-color': '#000',\n    'font-family': 'Helvetica Neue, Helvetica, sans-serif',\n    'font-style': 'normal',\n    'font-weight': 'normal',\n    'font-size': 16,\n    'min-zoomed-font-size': 0,\n    'text-rotation': 'none',\n    'source-text-rotation': 'none',\n    'target-text-rotation': 'none',\n    'visibility': 'visible',\n    'display': 'element',\n    'opacity': 1,\n    'z-compound-depth': 'auto',\n    'z-index-compare': 'auto',\n    'z-index': 0,\n    'label': '',\n    'text-margin-x': 0,\n    'text-margin-y': 0,\n    'source-label': '',\n    'source-text-offset': 0,\n    'source-text-margin-x': 0,\n    'source-text-margin-y': 0,\n    'target-label': '',\n    'target-text-offset': 0,\n    'target-text-margin-x': 0,\n    'target-text-margin-y': 0,\n    'overlay-opacity': 0,\n    'overlay-color': '#000',\n    'overlay-padding': 10,\n    'overlay-shape': 'round-rectangle',\n    'overlay-corner-radius': 'auto',\n    'underlay-opacity': 0,\n    'underlay-color': '#000',\n    'underlay-padding': 10,\n    'underlay-shape': 'round-rectangle',\n    'underlay-corner-radius': 'auto',\n    'transition-property': 'none',\n    'transition-duration': 0,\n    'transition-delay': 0,\n    'transition-timing-function': 'linear',\n    // node props\n    'background-blacken': 0,\n    'background-color': '#999',\n    'background-fill': 'solid',\n    'background-opacity': 1,\n    'background-image': 'none',\n    'background-image-crossorigin': 'anonymous',\n    'background-image-opacity': 1,\n    'background-image-containment': 'inside',\n    'background-image-smoothing': 'yes',\n    'background-position-x': '50%',\n    'background-position-y': '50%',\n    'background-offset-x': 0,\n    'background-offset-y': 0,\n    'background-width-relative-to': 'include-padding',\n    'background-height-relative-to': 'include-padding',\n    'background-repeat': 'no-repeat',\n    'background-fit': 'none',\n    'background-clip': 'node',\n    'background-width': 'auto',\n    'background-height': 'auto',\n    'border-color': '#000',\n    'border-opacity': 1,\n    'border-width': 0,\n    'border-style': 'solid',\n    'border-dash-pattern': [4, 2],\n    'border-dash-offset': 0,\n    'border-cap': 'butt',\n    'border-join': 'miter',\n    'border-position': 'center',\n    'outline-color': '#999',\n    'outline-opacity': 1,\n    'outline-width': 0,\n    'outline-offset': 0,\n    'outline-style': 'solid',\n    'height': 30,\n    'width': 30,\n    'shape': 'ellipse',\n    'shape-polygon-points': '-1, -1,   1, -1,   1, 1,   -1, 1',\n    'corner-radius': 'auto',\n    'bounds-expansion': 0,\n    // node gradient\n    'background-gradient-direction': 'to-bottom',\n    'background-gradient-stop-colors': '#999',\n    'background-gradient-stop-positions': '0%',\n    // ghost props\n    'ghost': 'no',\n    'ghost-offset-y': 0,\n    'ghost-offset-x': 0,\n    'ghost-opacity': 0,\n    // compound props\n    'padding': 0,\n    'padding-relative-to': 'width',\n    'position': 'origin',\n    'compound-sizing-wrt-labels': 'include',\n    'min-width': 0,\n    'min-width-bias-left': 0,\n    'min-width-bias-right': 0,\n    'min-height': 0,\n    'min-height-bias-top': 0,\n    'min-height-bias-bottom': 0\n  }, {\n    // node pie bg\n    'pie-size': '100%'\n  }, [{\n    name: 'pie-{{i}}-background-color',\n    value: 'black'\n  }, {\n    name: 'pie-{{i}}-background-size',\n    value: '0%'\n  }, {\n    name: 'pie-{{i}}-background-opacity',\n    value: 1\n  }].reduce(function (css, prop) {\n    for (var i = 1; i <= styfn$2.pieBackgroundN; i++) {\n      var name = prop.name.replace('{{i}}', i);\n      var val = prop.value;\n      css[name] = val;\n    }\n    return css;\n  }, {}), {\n    // edge props\n    'line-style': 'solid',\n    'line-color': '#999',\n    'line-fill': 'solid',\n    'line-cap': 'butt',\n    'line-opacity': 1,\n    'line-outline-width': 0,\n    'line-outline-color': '#000',\n    'line-gradient-stop-colors': '#999',\n    'line-gradient-stop-positions': '0%',\n    'control-point-step-size': 40,\n    'control-point-weights': 0.5,\n    'segment-weights': 0.5,\n    'segment-distances': 20,\n    'segment-radii': 15,\n    'radius-type': 'arc-radius',\n    'taxi-turn': '50%',\n    'taxi-radius': 15,\n    'taxi-turn-min-distance': 10,\n    'taxi-direction': 'auto',\n    'edge-distances': 'intersection',\n    'curve-style': 'haystack',\n    'haystack-radius': 0,\n    'arrow-scale': 1,\n    'loop-direction': '-45deg',\n    'loop-sweep': '-90deg',\n    'source-distance-from-node': 0,\n    'target-distance-from-node': 0,\n    'source-endpoint': 'outside-to-node',\n    'target-endpoint': 'outside-to-node',\n    'line-dash-pattern': [6, 3],\n    'line-dash-offset': 0\n  }, [{\n    name: 'arrow-shape',\n    value: 'none'\n  }, {\n    name: 'arrow-color',\n    value: '#999'\n  }, {\n    name: 'arrow-fill',\n    value: 'filled'\n  }, {\n    name: 'arrow-width',\n    value: 1\n  }].reduce(function (css, prop) {\n    styfn$2.arrowPrefixes.forEach(function (prefix) {\n      var name = prefix + '-' + prop.name;\n      var val = prop.value;\n      css[name] = val;\n    });\n    return css;\n  }, {}));\n  var parsedProps = {};\n  for (var i = 0; i < this.properties.length; i++) {\n    var prop = this.properties[i];\n    if (prop.pointsTo) {\n      continue;\n    }\n    var name = prop.name;\n    var val = rawProps[name];\n    var parsedProp = this.parse(name, val);\n    parsedProps[name] = parsedProp;\n  }\n  _p.defaultProperties = parsedProps;\n  return _p.defaultProperties;\n};\nstyfn$2.addDefaultStylesheet = function () {\n  this.selector(':parent').css({\n    'shape': 'rectangle',\n    'padding': 10,\n    'background-color': '#eee',\n    'border-color': '#ccc',\n    'border-width': 1\n  }).selector('edge').css({\n    'width': 3\n  }).selector(':loop').css({\n    'curve-style': 'bezier'\n  }).selector('edge:compound').css({\n    'curve-style': 'bezier',\n    'source-endpoint': 'outside-to-line',\n    'target-endpoint': 'outside-to-line'\n  }).selector(':selected').css({\n    'background-color': '#0169D9',\n    'line-color': '#0169D9',\n    'source-arrow-color': '#0169D9',\n    'target-arrow-color': '#0169D9',\n    'mid-source-arrow-color': '#0169D9',\n    'mid-target-arrow-color': '#0169D9'\n  }).selector(':parent:selected').css({\n    'background-color': '#CCE1F9',\n    'border-color': '#aec8e5'\n  }).selector(':active').css({\n    'overlay-color': 'black',\n    'overlay-padding': 10,\n    'overlay-opacity': 0.25\n  });\n  this.defaultLength = this.length;\n};\n\nvar styfn$1 = {};\n\n// a caching layer for property parsing\nstyfn$1.parse = function (name, value, propIsBypass, propIsFlat) {\n  var self = this;\n\n  // function values can't be cached in all cases, and there isn't much benefit of caching them anyway\n  if (fn$6(value)) {\n    return self.parseImplWarn(name, value, propIsBypass, propIsFlat);\n  }\n  var flatKey = propIsFlat === 'mapping' || propIsFlat === true || propIsFlat === false || propIsFlat == null ? 'dontcare' : propIsFlat;\n  var bypassKey = propIsBypass ? 't' : 'f';\n  var valueKey = '' + value;\n  var argHash = hashStrings(name, valueKey, bypassKey, flatKey);\n  var propCache = self.propCache = self.propCache || [];\n  var ret;\n  if (!(ret = propCache[argHash])) {\n    ret = propCache[argHash] = self.parseImplWarn(name, value, propIsBypass, propIsFlat);\n  }\n\n  // - bypasses can't be shared b/c the value can be changed by animations or otherwise overridden\n  // - mappings can't be shared b/c mappings are per-element\n  if (propIsBypass || propIsFlat === 'mapping') {\n    // need a copy since props are mutated later in their lifecycles\n    ret = copy(ret);\n    if (ret) {\n      ret.value = copy(ret.value); // because it could be an array, e.g. colour\n    }\n  }\n\n  return ret;\n};\nstyfn$1.parseImplWarn = function (name, value, propIsBypass, propIsFlat) {\n  var prop = this.parseImpl(name, value, propIsBypass, propIsFlat);\n  if (!prop && value != null) {\n    warn(\"The style property `\".concat(name, \": \").concat(value, \"` is invalid\"));\n  }\n  if (prop && (prop.name === 'width' || prop.name === 'height') && value === 'label') {\n    warn('The style value of `label` is deprecated for `' + prop.name + '`');\n  }\n  return prop;\n};\n\n// parse a property; return null on invalid; return parsed property otherwise\n// fields :\n// - name : the name of the property\n// - value : the parsed, native-typed value of the property\n// - strValue : a string value that represents the property value in valid css\n// - bypass : true iff the property is a bypass property\nstyfn$1.parseImpl = function (name, value, propIsBypass, propIsFlat) {\n  var self = this;\n  name = camel2dash(name); // make sure the property name is in dash form (e.g. 'property-name' not 'propertyName')\n\n  var property = self.properties[name];\n  var passedValue = value;\n  var types = self.types;\n  if (!property) {\n    return null;\n  } // return null on property of unknown name\n  if (value === undefined) {\n    return null;\n  } // can't assign undefined\n\n  // the property may be an alias\n  if (property.alias) {\n    property = property.pointsTo;\n    name = property.name;\n  }\n  var valueIsString = string(value);\n  if (valueIsString) {\n    // trim the value to make parsing easier\n    value = value.trim();\n  }\n  var type = property.type;\n  if (!type) {\n    return null;\n  } // no type, no luck\n\n  // check if bypass is null or empty string (i.e. indication to delete bypass property)\n  if (propIsBypass && (value === '' || value === null)) {\n    return {\n      name: name,\n      value: value,\n      bypass: true,\n      deleteBypass: true\n    };\n  }\n\n  // check if value is a function used as a mapper\n  if (fn$6(value)) {\n    return {\n      name: name,\n      value: value,\n      strValue: 'fn',\n      mapped: types.fn,\n      bypass: propIsBypass\n    };\n  }\n\n  // check if value is mapped\n  var data, mapData;\n  if (!valueIsString || propIsFlat || value.length < 7 || value[1] !== 'a') ; else if (value.length >= 7 && value[0] === 'd' && (data = new RegExp(types.data.regex).exec(value))) {\n    if (propIsBypass) {\n      return false;\n    } // mappers not allowed in bypass\n\n    var mapped = types.data;\n    return {\n      name: name,\n      value: data,\n      strValue: '' + value,\n      mapped: mapped,\n      field: data[1],\n      bypass: propIsBypass\n    };\n  } else if (value.length >= 10 && value[0] === 'm' && (mapData = new RegExp(types.mapData.regex).exec(value))) {\n    if (propIsBypass) {\n      return false;\n    } // mappers not allowed in bypass\n    if (type.multiple) {\n      return false;\n    } // impossible to map to num\n\n    var _mapped = types.mapData;\n\n    // we can map only if the type is a colour or a number\n    if (!(type.color || type.number)) {\n      return false;\n    }\n    var valueMin = this.parse(name, mapData[4]); // parse to validate\n    if (!valueMin || valueMin.mapped) {\n      return false;\n    } // can't be invalid or mapped\n\n    var valueMax = this.parse(name, mapData[5]); // parse to validate\n    if (!valueMax || valueMax.mapped) {\n      return false;\n    } // can't be invalid or mapped\n\n    // check if valueMin and valueMax are the same\n    if (valueMin.pfValue === valueMax.pfValue || valueMin.strValue === valueMax.strValue) {\n      warn('`' + name + ': ' + value + '` is not a valid mapper because the output range is zero; converting to `' + name + ': ' + valueMin.strValue + '`');\n      return this.parse(name, valueMin.strValue); // can't make much of a mapper without a range\n    } else if (type.color) {\n      var c1 = valueMin.value;\n      var c2 = valueMax.value;\n      var same = c1[0] === c2[0] // red\n      && c1[1] === c2[1] // green\n      && c1[2] === c2[2] // blue\n      && (\n      // optional alpha\n      c1[3] === c2[3] // same alpha outright\n      || (c1[3] == null || c1[3] === 1 // full opacity for colour 1?\n      ) && (c2[3] == null || c2[3] === 1) // full opacity for colour 2?\n      );\n\n      if (same) {\n        return false;\n      } // can't make a mapper without a range\n    }\n\n    return {\n      name: name,\n      value: mapData,\n      strValue: '' + value,\n      mapped: _mapped,\n      field: mapData[1],\n      fieldMin: parseFloat(mapData[2]),\n      // min & max are numeric\n      fieldMax: parseFloat(mapData[3]),\n      valueMin: valueMin.value,\n      valueMax: valueMax.value,\n      bypass: propIsBypass\n    };\n  }\n  if (type.multiple && propIsFlat !== 'multiple') {\n    var vals;\n    if (valueIsString) {\n      vals = value.split(/\\s+/);\n    } else if (array(value)) {\n      vals = value;\n    } else {\n      vals = [value];\n    }\n    if (type.evenMultiple && vals.length % 2 !== 0) {\n      return null;\n    }\n    var valArr = [];\n    var unitsArr = [];\n    var pfValArr = [];\n    var strVal = '';\n    var hasEnum = false;\n    for (var i = 0; i < vals.length; i++) {\n      var p = self.parse(name, vals[i], propIsBypass, 'multiple');\n      hasEnum = hasEnum || string(p.value);\n      valArr.push(p.value);\n      pfValArr.push(p.pfValue != null ? p.pfValue : p.value);\n      unitsArr.push(p.units);\n      strVal += (i > 0 ? ' ' : '') + p.strValue;\n    }\n    if (type.validate && !type.validate(valArr, unitsArr)) {\n      return null;\n    }\n    if (type.singleEnum && hasEnum) {\n      if (valArr.length === 1 && string(valArr[0])) {\n        return {\n          name: name,\n          value: valArr[0],\n          strValue: valArr[0],\n          bypass: propIsBypass\n        };\n      } else {\n        return null;\n      }\n    }\n    return {\n      name: name,\n      value: valArr,\n      pfValue: pfValArr,\n      strValue: strVal,\n      bypass: propIsBypass,\n      units: unitsArr\n    };\n  }\n\n  // several types also allow enums\n  var checkEnums = function checkEnums() {\n    for (var _i = 0; _i < type.enums.length; _i++) {\n      var en = type.enums[_i];\n      if (en === value) {\n        return {\n          name: name,\n          value: value,\n          strValue: '' + value,\n          bypass: propIsBypass\n        };\n      }\n    }\n    return null;\n  };\n\n  // check the type and return the appropriate object\n  if (type.number) {\n    var units;\n    var implicitUnits = 'px'; // not set => px\n\n    if (type.units) {\n      // use specified units if set\n      units = type.units;\n    }\n    if (type.implicitUnits) {\n      implicitUnits = type.implicitUnits;\n    }\n    if (!type.unitless) {\n      if (valueIsString) {\n        var unitsRegex = 'px|em' + (type.allowPercent ? '|\\\\%' : '');\n        if (units) {\n          unitsRegex = units;\n        } // only allow explicit units if so set\n        var match = value.match('^(' + number + ')(' + unitsRegex + ')?' + '$');\n        if (match) {\n          value = match[1];\n          units = match[2] || implicitUnits;\n        }\n      } else if (!units || type.implicitUnits) {\n        units = implicitUnits; // implicitly px if unspecified\n      }\n    }\n\n    value = parseFloat(value);\n\n    // if not a number and enums not allowed, then the value is invalid\n    if (isNaN(value) && type.enums === undefined) {\n      return null;\n    }\n\n    // check if this number type also accepts special keywords in place of numbers\n    // (i.e. `left`, `auto`, etc)\n    if (isNaN(value) && type.enums !== undefined) {\n      value = passedValue;\n      return checkEnums();\n    }\n\n    // check if value must be an integer\n    if (type.integer && !integer(value)) {\n      return null;\n    }\n\n    // check value is within range\n    if (type.min !== undefined && (value < type.min || type.strictMin && value === type.min) || type.max !== undefined && (value > type.max || type.strictMax && value === type.max)) {\n      return null;\n    }\n    var ret = {\n      name: name,\n      value: value,\n      strValue: '' + value + (units ? units : ''),\n      units: units,\n      bypass: propIsBypass\n    };\n\n    // normalise value in pixels\n    if (type.unitless || units !== 'px' && units !== 'em') {\n      ret.pfValue = value;\n    } else {\n      ret.pfValue = units === 'px' || !units ? value : this.getEmSizeInPixels() * value;\n    }\n\n    // normalise value in ms\n    if (units === 'ms' || units === 's') {\n      ret.pfValue = units === 'ms' ? value : 1000 * value;\n    }\n\n    // normalise value in rad\n    if (units === 'deg' || units === 'rad') {\n      ret.pfValue = units === 'rad' ? value : deg2rad(value);\n    }\n\n    // normalize value in %\n    if (units === '%') {\n      ret.pfValue = value / 100;\n    }\n    return ret;\n  } else if (type.propList) {\n    var props = [];\n    var propsStr = '' + value;\n    if (propsStr === 'none') ; else {\n      // go over each prop\n\n      var propsSplit = propsStr.split(/\\s*,\\s*|\\s+/);\n      for (var _i2 = 0; _i2 < propsSplit.length; _i2++) {\n        var propName = propsSplit[_i2].trim();\n        if (self.properties[propName]) {\n          props.push(propName);\n        } else {\n          warn('`' + propName + '` is not a valid property name');\n        }\n      }\n      if (props.length === 0) {\n        return null;\n      }\n    }\n    return {\n      name: name,\n      value: props,\n      strValue: props.length === 0 ? 'none' : props.join(' '),\n      bypass: propIsBypass\n    };\n  } else if (type.color) {\n    var tuple = color2tuple(value);\n    if (!tuple) {\n      return null;\n    }\n    return {\n      name: name,\n      value: tuple,\n      pfValue: tuple,\n      strValue: 'rgb(' + tuple[0] + ',' + tuple[1] + ',' + tuple[2] + ')',\n      // n.b. no spaces b/c of multiple support\n      bypass: propIsBypass\n    };\n  } else if (type.regex || type.regexes) {\n    // first check enums\n    if (type.enums) {\n      var enumProp = checkEnums();\n      if (enumProp) {\n        return enumProp;\n      }\n    }\n    var regexes = type.regexes ? type.regexes : [type.regex];\n    for (var _i3 = 0; _i3 < regexes.length; _i3++) {\n      var regex = new RegExp(regexes[_i3]); // make a regex from the type string\n      var m = regex.exec(value);\n      if (m) {\n        // regex matches\n        return {\n          name: name,\n          value: type.singleRegexMatchValue ? m[1] : m,\n          strValue: '' + value,\n          bypass: propIsBypass\n        };\n      }\n    }\n    return null; // didn't match any\n  } else if (type.string) {\n    // just return\n    return {\n      name: name,\n      value: '' + value,\n      strValue: '' + value,\n      bypass: propIsBypass\n    };\n  } else if (type.enums) {\n    // check enums last because it's a combo type in others\n    return checkEnums();\n  } else {\n    return null; // not a type we can handle\n  }\n};\n\nvar Style = function Style(cy) {\n  if (!(this instanceof Style)) {\n    return new Style(cy);\n  }\n  if (!core(cy)) {\n    error('A style must have a core reference');\n    return;\n  }\n  this._private = {\n    cy: cy,\n    coreStyle: {}\n  };\n  this.length = 0;\n  this.resetToDefault();\n};\nvar styfn = Style.prototype;\nstyfn.instanceString = function () {\n  return 'style';\n};\n\n// remove all contexts\nstyfn.clear = function () {\n  var _p = this._private;\n  var cy = _p.cy;\n  var eles = cy.elements();\n  for (var i = 0; i < this.length; i++) {\n    this[i] = undefined;\n  }\n  this.length = 0;\n  _p.contextStyles = {};\n  _p.propDiffs = {};\n  this.cleanElements(eles, true);\n  eles.forEach(function (ele) {\n    var ele_p = ele[0]._private;\n    ele_p.styleDirty = true;\n    ele_p.appliedInitStyle = false;\n  });\n  return this; // chaining\n};\n\nstyfn.resetToDefault = function () {\n  this.clear();\n  this.addDefaultStylesheet();\n  return this;\n};\n\n// builds a style object for the 'core' selector\nstyfn.core = function (propName) {\n  return this._private.coreStyle[propName] || this.getDefaultProperty(propName);\n};\n\n// create a new context from the specified selector string and switch to that context\nstyfn.selector = function (selectorStr) {\n  // 'core' is a special case and does not need a selector\n  var selector = selectorStr === 'core' ? null : new Selector(selectorStr);\n  var i = this.length++; // new context means new index\n  this[i] = {\n    selector: selector,\n    properties: [],\n    mappedProperties: [],\n    index: i\n  };\n  return this; // chaining\n};\n\n// add one or many css rules to the current context\nstyfn.css = function () {\n  var self = this;\n  var args = arguments;\n  if (args.length === 1) {\n    var map = args[0];\n    for (var i = 0; i < self.properties.length; i++) {\n      var prop = self.properties[i];\n      var mapVal = map[prop.name];\n      if (mapVal === undefined) {\n        mapVal = map[dash2camel(prop.name)];\n      }\n      if (mapVal !== undefined) {\n        this.cssRule(prop.name, mapVal);\n      }\n    }\n  } else if (args.length === 2) {\n    this.cssRule(args[0], args[1]);\n  }\n\n  // do nothing if args are invalid\n\n  return this; // chaining\n};\n\nstyfn.style = styfn.css;\n\n// add a single css rule to the current context\nstyfn.cssRule = function (name, value) {\n  // name-value pair\n  var property = this.parse(name, value);\n\n  // add property to current context if valid\n  if (property) {\n    var i = this.length - 1;\n    this[i].properties.push(property);\n    this[i].properties[property.name] = property; // allow access by name as well\n\n    if (property.name.match(/pie-(\\d+)-background-size/) && property.value) {\n      this._private.hasPie = true;\n    }\n    if (property.mapped) {\n      this[i].mappedProperties.push(property);\n    }\n\n    // add to core style if necessary\n    var currentSelectorIsCore = !this[i].selector;\n    if (currentSelectorIsCore) {\n      this._private.coreStyle[property.name] = property;\n    }\n  }\n  return this; // chaining\n};\n\nstyfn.append = function (style) {\n  if (stylesheet(style)) {\n    style.appendToStyle(this);\n  } else if (array(style)) {\n    this.appendFromJson(style);\n  } else if (string(style)) {\n    this.appendFromString(style);\n  } // you probably wouldn't want to append a Style, since you'd duplicate the default parts\n\n  return this;\n};\n\n// static function\nStyle.fromJson = function (cy, json) {\n  var style = new Style(cy);\n  style.fromJson(json);\n  return style;\n};\nStyle.fromString = function (cy, string) {\n  return new Style(cy).fromString(string);\n};\n[styfn$8, styfn$7, styfn$6, styfn$5, styfn$4, styfn$3, styfn$2, styfn$1].forEach(function (props) {\n  extend(styfn, props);\n});\nStyle.types = styfn.types;\nStyle.properties = styfn.properties;\nStyle.propertyGroups = styfn.propertyGroups;\nStyle.propertyGroupNames = styfn.propertyGroupNames;\nStyle.propertyGroupKeys = styfn.propertyGroupKeys;\n\nvar corefn$2 = {\n  style: function style(newStyle) {\n    if (newStyle) {\n      var s = this.setStyle(newStyle);\n      s.update();\n    }\n    return this._private.style;\n  },\n  setStyle: function setStyle(style) {\n    var _p = this._private;\n    if (stylesheet(style)) {\n      _p.style = style.generateStyle(this);\n    } else if (array(style)) {\n      _p.style = Style.fromJson(this, style);\n    } else if (string(style)) {\n      _p.style = Style.fromString(this, style);\n    } else {\n      _p.style = Style(this);\n    }\n    return _p.style;\n  },\n  // e.g. cy.data() changed => recalc ele mappers\n  updateStyle: function updateStyle() {\n    this.mutableElements().updateStyle(); // just send to all eles\n  }\n};\n\nvar defaultSelectionType = 'single';\nvar corefn$1 = {\n  autolock: function autolock(bool) {\n    if (bool !== undefined) {\n      this._private.autolock = bool ? true : false;\n    } else {\n      return this._private.autolock;\n    }\n    return this; // chaining\n  },\n\n  autoungrabify: function autoungrabify(bool) {\n    if (bool !== undefined) {\n      this._private.autoungrabify = bool ? true : false;\n    } else {\n      return this._private.autoungrabify;\n    }\n    return this; // chaining\n  },\n\n  autounselectify: function autounselectify(bool) {\n    if (bool !== undefined) {\n      this._private.autounselectify = bool ? true : false;\n    } else {\n      return this._private.autounselectify;\n    }\n    return this; // chaining\n  },\n\n  selectionType: function selectionType(selType) {\n    var _p = this._private;\n    if (_p.selectionType == null) {\n      _p.selectionType = defaultSelectionType;\n    }\n    if (selType !== undefined) {\n      if (selType === 'additive' || selType === 'single') {\n        _p.selectionType = selType;\n      }\n    } else {\n      return _p.selectionType;\n    }\n    return this;\n  },\n  panningEnabled: function panningEnabled(bool) {\n    if (bool !== undefined) {\n      this._private.panningEnabled = bool ? true : false;\n    } else {\n      return this._private.panningEnabled;\n    }\n    return this; // chaining\n  },\n\n  userPanningEnabled: function userPanningEnabled(bool) {\n    if (bool !== undefined) {\n      this._private.userPanningEnabled = bool ? true : false;\n    } else {\n      return this._private.userPanningEnabled;\n    }\n    return this; // chaining\n  },\n\n  zoomingEnabled: function zoomingEnabled(bool) {\n    if (bool !== undefined) {\n      this._private.zoomingEnabled = bool ? true : false;\n    } else {\n      return this._private.zoomingEnabled;\n    }\n    return this; // chaining\n  },\n\n  userZoomingEnabled: function userZoomingEnabled(bool) {\n    if (bool !== undefined) {\n      this._private.userZoomingEnabled = bool ? true : false;\n    } else {\n      return this._private.userZoomingEnabled;\n    }\n    return this; // chaining\n  },\n\n  boxSelectionEnabled: function boxSelectionEnabled(bool) {\n    if (bool !== undefined) {\n      this._private.boxSelectionEnabled = bool ? true : false;\n    } else {\n      return this._private.boxSelectionEnabled;\n    }\n    return this; // chaining\n  },\n\n  pan: function pan() {\n    var args = arguments;\n    var pan = this._private.pan;\n    var dim, val, dims, x, y;\n    switch (args.length) {\n      case 0:\n        // .pan()\n        return pan;\n      case 1:\n        if (string(args[0])) {\n          // .pan('x')\n          dim = args[0];\n          return pan[dim];\n        } else if (plainObject(args[0])) {\n          // .pan({ x: 0, y: 100 })\n          if (!this._private.panningEnabled) {\n            return this;\n          }\n          dims = args[0];\n          x = dims.x;\n          y = dims.y;\n          if (number$1(x)) {\n            pan.x = x;\n          }\n          if (number$1(y)) {\n            pan.y = y;\n          }\n          this.emit('pan viewport');\n        }\n        break;\n      case 2:\n        // .pan('x', 100)\n        if (!this._private.panningEnabled) {\n          return this;\n        }\n        dim = args[0];\n        val = args[1];\n        if ((dim === 'x' || dim === 'y') && number$1(val)) {\n          pan[dim] = val;\n        }\n        this.emit('pan viewport');\n        break;\n      // invalid\n    }\n\n    this.notify('viewport');\n    return this; // chaining\n  },\n\n  panBy: function panBy(arg0, arg1) {\n    var args = arguments;\n    var pan = this._private.pan;\n    var dim, val, dims, x, y;\n    if (!this._private.panningEnabled) {\n      return this;\n    }\n    switch (args.length) {\n      case 1:\n        if (plainObject(arg0)) {\n          // .panBy({ x: 0, y: 100 })\n          dims = args[0];\n          x = dims.x;\n          y = dims.y;\n          if (number$1(x)) {\n            pan.x += x;\n          }\n          if (number$1(y)) {\n            pan.y += y;\n          }\n          this.emit('pan viewport');\n        }\n        break;\n      case 2:\n        // .panBy('x', 100)\n        dim = arg0;\n        val = arg1;\n        if ((dim === 'x' || dim === 'y') && number$1(val)) {\n          pan[dim] += val;\n        }\n        this.emit('pan viewport');\n        break;\n      // invalid\n    }\n\n    this.notify('viewport');\n    return this; // chaining\n  },\n\n  fit: function fit(elements, padding) {\n    var viewportState = this.getFitViewport(elements, padding);\n    if (viewportState) {\n      var _p = this._private;\n      _p.zoom = viewportState.zoom;\n      _p.pan = viewportState.pan;\n      this.emit('pan zoom viewport');\n      this.notify('viewport');\n    }\n    return this; // chaining\n  },\n\n  getFitViewport: function getFitViewport(elements, padding) {\n    if (number$1(elements) && padding === undefined) {\n      // elements is optional\n      padding = elements;\n      elements = undefined;\n    }\n    if (!this._private.panningEnabled || !this._private.zoomingEnabled) {\n      return;\n    }\n    var bb;\n    if (string(elements)) {\n      var sel = elements;\n      elements = this.$(sel);\n    } else if (boundingBox(elements)) {\n      // assume bb\n      var bbe = elements;\n      bb = {\n        x1: bbe.x1,\n        y1: bbe.y1,\n        x2: bbe.x2,\n        y2: bbe.y2\n      };\n      bb.w = bb.x2 - bb.x1;\n      bb.h = bb.y2 - bb.y1;\n    } else if (!elementOrCollection(elements)) {\n      elements = this.mutableElements();\n    }\n    if (elementOrCollection(elements) && elements.empty()) {\n      return;\n    } // can't fit to nothing\n\n    bb = bb || elements.boundingBox();\n    var w = this.width();\n    var h = this.height();\n    var zoom;\n    padding = number$1(padding) ? padding : 0;\n    if (!isNaN(w) && !isNaN(h) && w > 0 && h > 0 && !isNaN(bb.w) && !isNaN(bb.h) && bb.w > 0 && bb.h > 0) {\n      zoom = Math.min((w - 2 * padding) / bb.w, (h - 2 * padding) / bb.h);\n\n      // crop zoom\n      zoom = zoom > this._private.maxZoom ? this._private.maxZoom : zoom;\n      zoom = zoom < this._private.minZoom ? this._private.minZoom : zoom;\n      var pan = {\n        // now pan to middle\n        x: (w - zoom * (bb.x1 + bb.x2)) / 2,\n        y: (h - zoom * (bb.y1 + bb.y2)) / 2\n      };\n      return {\n        zoom: zoom,\n        pan: pan\n      };\n    }\n    return;\n  },\n  zoomRange: function zoomRange(min, max) {\n    var _p = this._private;\n    if (max == null) {\n      var opts = min;\n      min = opts.min;\n      max = opts.max;\n    }\n    if (number$1(min) && number$1(max) && min <= max) {\n      _p.minZoom = min;\n      _p.maxZoom = max;\n    } else if (number$1(min) && max === undefined && min <= _p.maxZoom) {\n      _p.minZoom = min;\n    } else if (number$1(max) && min === undefined && max >= _p.minZoom) {\n      _p.maxZoom = max;\n    }\n    return this;\n  },\n  minZoom: function minZoom(zoom) {\n    if (zoom === undefined) {\n      return this._private.minZoom;\n    } else {\n      return this.zoomRange({\n        min: zoom\n      });\n    }\n  },\n  maxZoom: function maxZoom(zoom) {\n    if (zoom === undefined) {\n      return this._private.maxZoom;\n    } else {\n      return this.zoomRange({\n        max: zoom\n      });\n    }\n  },\n  getZoomedViewport: function getZoomedViewport(params) {\n    var _p = this._private;\n    var currentPan = _p.pan;\n    var currentZoom = _p.zoom;\n    var pos; // in rendered px\n    var zoom;\n    var bail = false;\n    if (!_p.zoomingEnabled) {\n      // zooming disabled\n      bail = true;\n    }\n    if (number$1(params)) {\n      // then set the zoom\n      zoom = params;\n    } else if (plainObject(params)) {\n      // then zoom about a point\n      zoom = params.level;\n      if (params.position != null) {\n        pos = modelToRenderedPosition(params.position, currentZoom, currentPan);\n      } else if (params.renderedPosition != null) {\n        pos = params.renderedPosition;\n      }\n      if (pos != null && !_p.panningEnabled) {\n        // panning disabled\n        bail = true;\n      }\n    }\n\n    // crop zoom\n    zoom = zoom > _p.maxZoom ? _p.maxZoom : zoom;\n    zoom = zoom < _p.minZoom ? _p.minZoom : zoom;\n\n    // can't zoom with invalid params\n    if (bail || !number$1(zoom) || zoom === currentZoom || pos != null && (!number$1(pos.x) || !number$1(pos.y))) {\n      return null;\n    }\n    if (pos != null) {\n      // set zoom about position\n      var pan1 = currentPan;\n      var zoom1 = currentZoom;\n      var zoom2 = zoom;\n      var pan2 = {\n        x: -zoom2 / zoom1 * (pos.x - pan1.x) + pos.x,\n        y: -zoom2 / zoom1 * (pos.y - pan1.y) + pos.y\n      };\n      return {\n        zoomed: true,\n        panned: true,\n        zoom: zoom2,\n        pan: pan2\n      };\n    } else {\n      // just set the zoom\n      return {\n        zoomed: true,\n        panned: false,\n        zoom: zoom,\n        pan: currentPan\n      };\n    }\n  },\n  zoom: function zoom(params) {\n    if (params === undefined) {\n      // get\n      return this._private.zoom;\n    } else {\n      // set\n      var vp = this.getZoomedViewport(params);\n      var _p = this._private;\n      if (vp == null || !vp.zoomed) {\n        return this;\n      }\n      _p.zoom = vp.zoom;\n      if (vp.panned) {\n        _p.pan.x = vp.pan.x;\n        _p.pan.y = vp.pan.y;\n      }\n      this.emit('zoom' + (vp.panned ? ' pan' : '') + ' viewport');\n      this.notify('viewport');\n      return this; // chaining\n    }\n  },\n\n  viewport: function viewport(opts) {\n    var _p = this._private;\n    var zoomDefd = true;\n    var panDefd = true;\n    var events = []; // to trigger\n    var zoomFailed = false;\n    var panFailed = false;\n    if (!opts) {\n      return this;\n    }\n    if (!number$1(opts.zoom)) {\n      zoomDefd = false;\n    }\n    if (!plainObject(opts.pan)) {\n      panDefd = false;\n    }\n    if (!zoomDefd && !panDefd) {\n      return this;\n    }\n    if (zoomDefd) {\n      var z = opts.zoom;\n      if (z < _p.minZoom || z > _p.maxZoom || !_p.zoomingEnabled) {\n        zoomFailed = true;\n      } else {\n        _p.zoom = z;\n        events.push('zoom');\n      }\n    }\n    if (panDefd && (!zoomFailed || !opts.cancelOnFailedZoom) && _p.panningEnabled) {\n      var p = opts.pan;\n      if (number$1(p.x)) {\n        _p.pan.x = p.x;\n        panFailed = false;\n      }\n      if (number$1(p.y)) {\n        _p.pan.y = p.y;\n        panFailed = false;\n      }\n      if (!panFailed) {\n        events.push('pan');\n      }\n    }\n    if (events.length > 0) {\n      events.push('viewport');\n      this.emit(events.join(' '));\n      this.notify('viewport');\n    }\n    return this; // chaining\n  },\n\n  center: function center(elements) {\n    var pan = this.getCenterPan(elements);\n    if (pan) {\n      this._private.pan = pan;\n      this.emit('pan viewport');\n      this.notify('viewport');\n    }\n    return this; // chaining\n  },\n\n  getCenterPan: function getCenterPan(elements, zoom) {\n    if (!this._private.panningEnabled) {\n      return;\n    }\n    if (string(elements)) {\n      var selector = elements;\n      elements = this.mutableElements().filter(selector);\n    } else if (!elementOrCollection(elements)) {\n      elements = this.mutableElements();\n    }\n    if (elements.length === 0) {\n      return;\n    } // can't centre pan to nothing\n\n    var bb = elements.boundingBox();\n    var w = this.width();\n    var h = this.height();\n    zoom = zoom === undefined ? this._private.zoom : zoom;\n    var pan = {\n      // middle\n      x: (w - zoom * (bb.x1 + bb.x2)) / 2,\n      y: (h - zoom * (bb.y1 + bb.y2)) / 2\n    };\n    return pan;\n  },\n  reset: function reset() {\n    if (!this._private.panningEnabled || !this._private.zoomingEnabled) {\n      return this;\n    }\n    this.viewport({\n      pan: {\n        x: 0,\n        y: 0\n      },\n      zoom: 1\n    });\n    return this; // chaining\n  },\n\n  invalidateSize: function invalidateSize() {\n    this._private.sizeCache = null;\n  },\n  size: function size() {\n    var _p = this._private;\n    var container = _p.container;\n    var cy = this;\n    return _p.sizeCache = _p.sizeCache || (container ? function () {\n      var style = cy.window().getComputedStyle(container);\n      var val = function val(name) {\n        return parseFloat(style.getPropertyValue(name));\n      };\n      return {\n        width: container.clientWidth - val('padding-left') - val('padding-right'),\n        height: container.clientHeight - val('padding-top') - val('padding-bottom')\n      };\n    }() : {\n      // fallback if no container (not 0 b/c can be used for dividing etc)\n      width: 1,\n      height: 1\n    });\n  },\n  width: function width() {\n    return this.size().width;\n  },\n  height: function height() {\n    return this.size().height;\n  },\n  extent: function extent() {\n    var pan = this._private.pan;\n    var zoom = this._private.zoom;\n    var rb = this.renderedExtent();\n    var b = {\n      x1: (rb.x1 - pan.x) / zoom,\n      x2: (rb.x2 - pan.x) / zoom,\n      y1: (rb.y1 - pan.y) / zoom,\n      y2: (rb.y2 - pan.y) / zoom\n    };\n    b.w = b.x2 - b.x1;\n    b.h = b.y2 - b.y1;\n    return b;\n  },\n  renderedExtent: function renderedExtent() {\n    var width = this.width();\n    var height = this.height();\n    return {\n      x1: 0,\n      y1: 0,\n      x2: width,\n      y2: height,\n      w: width,\n      h: height\n    };\n  },\n  multiClickDebounceTime: function multiClickDebounceTime(_int) {\n    if (_int) this._private.multiClickDebounceTime = _int;else return this._private.multiClickDebounceTime;\n    return this; // chaining\n  }\n};\n\n// aliases\ncorefn$1.centre = corefn$1.center;\n\n// backwards compatibility\ncorefn$1.autolockNodes = corefn$1.autolock;\ncorefn$1.autoungrabifyNodes = corefn$1.autoungrabify;\n\nvar fn = {\n  data: define.data({\n    field: 'data',\n    bindingEvent: 'data',\n    allowBinding: true,\n    allowSetting: true,\n    settingEvent: 'data',\n    settingTriggersEvent: true,\n    triggerFnName: 'trigger',\n    allowGetting: true,\n    updateStyle: true\n  }),\n  removeData: define.removeData({\n    field: 'data',\n    event: 'data',\n    triggerFnName: 'trigger',\n    triggerEvent: true,\n    updateStyle: true\n  }),\n  scratch: define.data({\n    field: 'scratch',\n    bindingEvent: 'scratch',\n    allowBinding: true,\n    allowSetting: true,\n    settingEvent: 'scratch',\n    settingTriggersEvent: true,\n    triggerFnName: 'trigger',\n    allowGetting: true,\n    updateStyle: true\n  }),\n  removeScratch: define.removeData({\n    field: 'scratch',\n    event: 'scratch',\n    triggerFnName: 'trigger',\n    triggerEvent: true,\n    updateStyle: true\n  })\n};\n\n// aliases\nfn.attr = fn.data;\nfn.removeAttr = fn.removeData;\n\nvar Core = function Core(opts) {\n  var cy = this;\n  opts = extend({}, opts);\n  var container = opts.container;\n\n  // allow for passing a wrapped jquery object\n  // e.g. cytoscape({ container: $('#cy') })\n  if (container && !htmlElement(container) && htmlElement(container[0])) {\n    container = container[0];\n  }\n  var reg = container ? container._cyreg : null; // e.g. already registered some info (e.g. readies) via jquery\n  reg = reg || {};\n  if (reg && reg.cy) {\n    reg.cy.destroy();\n    reg = {}; // old instance => replace reg completely\n  }\n\n  var readies = reg.readies = reg.readies || [];\n  if (container) {\n    container._cyreg = reg;\n  } // make sure container assoc'd reg points to this cy\n  reg.cy = cy;\n  var head = _window !== undefined && container !== undefined && !opts.headless;\n  var options = opts;\n  options.layout = extend({\n    name: head ? 'grid' : 'null'\n  }, options.layout);\n  options.renderer = extend({\n    name: head ? 'canvas' : 'null'\n  }, options.renderer);\n  var defVal = function defVal(def, val, altVal) {\n    if (val !== undefined) {\n      return val;\n    } else if (altVal !== undefined) {\n      return altVal;\n    } else {\n      return def;\n    }\n  };\n  var _p = this._private = {\n    container: container,\n    // html dom ele container\n    ready: false,\n    // whether ready has been triggered\n    options: options,\n    // cached options\n    elements: new Collection(this),\n    // elements in the graph\n    listeners: [],\n    // list of listeners\n    aniEles: new Collection(this),\n    // elements being animated\n    data: options.data || {},\n    // data for the core\n    scratch: {},\n    // scratch object for core\n    layout: null,\n    renderer: null,\n    destroyed: false,\n    // whether destroy was called\n    notificationsEnabled: true,\n    // whether notifications are sent to the renderer\n    minZoom: 1e-50,\n    maxZoom: 1e50,\n    zoomingEnabled: defVal(true, options.zoomingEnabled),\n    userZoomingEnabled: defVal(true, options.userZoomingEnabled),\n    panningEnabled: defVal(true, options.panningEnabled),\n    userPanningEnabled: defVal(true, options.userPanningEnabled),\n    boxSelectionEnabled: defVal(true, options.boxSelectionEnabled),\n    autolock: defVal(false, options.autolock, options.autolockNodes),\n    autoungrabify: defVal(false, options.autoungrabify, options.autoungrabifyNodes),\n    autounselectify: defVal(false, options.autounselectify),\n    styleEnabled: options.styleEnabled === undefined ? head : options.styleEnabled,\n    zoom: number$1(options.zoom) ? options.zoom : 1,\n    pan: {\n      x: plainObject(options.pan) && number$1(options.pan.x) ? options.pan.x : 0,\n      y: plainObject(options.pan) && number$1(options.pan.y) ? options.pan.y : 0\n    },\n    animation: {\n      // object for currently-running animations\n      current: [],\n      queue: []\n    },\n    hasCompoundNodes: false,\n    multiClickDebounceTime: defVal(250, options.multiClickDebounceTime)\n  };\n  this.createEmitter();\n\n  // set selection type\n  this.selectionType(options.selectionType);\n\n  // init zoom bounds\n  this.zoomRange({\n    min: options.minZoom,\n    max: options.maxZoom\n  });\n  var loadExtData = function loadExtData(extData, next) {\n    var anyIsPromise = extData.some(promise);\n    if (anyIsPromise) {\n      return Promise$1.all(extData).then(next); // load all data asynchronously, then exec rest of init\n    } else {\n      next(extData); // exec synchronously for convenience\n    }\n  };\n\n  // start with the default stylesheet so we have something before loading an external stylesheet\n  if (_p.styleEnabled) {\n    cy.setStyle([]);\n  }\n\n  // create the renderer\n  var rendererOptions = extend({}, options, options.renderer); // allow rendering hints in top level options\n  cy.initRenderer(rendererOptions);\n  var setElesAndLayout = function setElesAndLayout(elements, onload, ondone) {\n    cy.notifications(false);\n\n    // remove old elements\n    var oldEles = cy.mutableElements();\n    if (oldEles.length > 0) {\n      oldEles.remove();\n    }\n    if (elements != null) {\n      if (plainObject(elements) || array(elements)) {\n        cy.add(elements);\n      }\n    }\n    cy.one('layoutready', function (e) {\n      cy.notifications(true);\n      cy.emit(e); // we missed this event by turning notifications off, so pass it on\n\n      cy.one('load', onload);\n      cy.emitAndNotify('load');\n    }).one('layoutstop', function () {\n      cy.one('done', ondone);\n      cy.emit('done');\n    });\n    var layoutOpts = extend({}, cy._private.options.layout);\n    layoutOpts.eles = cy.elements();\n    cy.layout(layoutOpts).run();\n  };\n  loadExtData([options.style, options.elements], function (thens) {\n    var initStyle = thens[0];\n    var initEles = thens[1];\n\n    // init style\n    if (_p.styleEnabled) {\n      cy.style().append(initStyle);\n    }\n\n    // initial load\n    setElesAndLayout(initEles, function () {\n      // onready\n      cy.startAnimationLoop();\n      _p.ready = true;\n\n      // if a ready callback is specified as an option, the bind it\n      if (fn$6(options.ready)) {\n        cy.on('ready', options.ready);\n      }\n\n      // bind all the ready handlers registered before creating this instance\n      for (var i = 0; i < readies.length; i++) {\n        var fn = readies[i];\n        cy.on('ready', fn);\n      }\n      if (reg) {\n        reg.readies = [];\n      } // clear b/c we've bound them all and don't want to keep it around in case a new core uses the same div etc\n\n      cy.emit('ready');\n    }, options.done);\n  });\n};\nvar corefn = Core.prototype; // short alias\n\nextend(corefn, {\n  instanceString: function instanceString() {\n    return 'core';\n  },\n  isReady: function isReady() {\n    return this._private.ready;\n  },\n  destroyed: function destroyed() {\n    return this._private.destroyed;\n  },\n  ready: function ready(fn) {\n    if (this.isReady()) {\n      this.emitter().emit('ready', [], fn); // just calls fn as though triggered via ready event\n    } else {\n      this.on('ready', fn);\n    }\n    return this;\n  },\n  destroy: function destroy() {\n    var cy = this;\n    if (cy.destroyed()) return;\n    cy.stopAnimationLoop();\n    cy.destroyRenderer();\n    this.emit('destroy');\n    cy._private.destroyed = true;\n    return cy;\n  },\n  hasElementWithId: function hasElementWithId(id) {\n    return this._private.elements.hasElementWithId(id);\n  },\n  getElementById: function getElementById(id) {\n    return this._private.elements.getElementById(id);\n  },\n  hasCompoundNodes: function hasCompoundNodes() {\n    return this._private.hasCompoundNodes;\n  },\n  headless: function headless() {\n    return this._private.renderer.isHeadless();\n  },\n  styleEnabled: function styleEnabled() {\n    return this._private.styleEnabled;\n  },\n  addToPool: function addToPool(eles) {\n    this._private.elements.merge(eles);\n    return this; // chaining\n  },\n\n  removeFromPool: function removeFromPool(eles) {\n    this._private.elements.unmerge(eles);\n    return this;\n  },\n  container: function container() {\n    return this._private.container || null;\n  },\n  window: function window() {\n    var container = this._private.container;\n    if (container == null) return _window;\n    var ownerDocument = this._private.container.ownerDocument;\n    if (ownerDocument === undefined || ownerDocument == null) {\n      return _window;\n    }\n    return ownerDocument.defaultView || _window;\n  },\n  mount: function mount(container) {\n    if (container == null) {\n      return;\n    }\n    var cy = this;\n    var _p = cy._private;\n    var options = _p.options;\n    if (!htmlElement(container) && htmlElement(container[0])) {\n      container = container[0];\n    }\n    cy.stopAnimationLoop();\n    cy.destroyRenderer();\n    _p.container = container;\n    _p.styleEnabled = true;\n    cy.invalidateSize();\n    cy.initRenderer(extend({}, options, options.renderer, {\n      // allow custom renderer name to be re-used, otherwise use canvas\n      name: options.renderer.name === 'null' ? 'canvas' : options.renderer.name\n    }));\n    cy.startAnimationLoop();\n    cy.style(options.style);\n    cy.emit('mount');\n    return cy;\n  },\n  unmount: function unmount() {\n    var cy = this;\n    cy.stopAnimationLoop();\n    cy.destroyRenderer();\n    cy.initRenderer({\n      name: 'null'\n    });\n    cy.emit('unmount');\n    return cy;\n  },\n  options: function options() {\n    return copy(this._private.options);\n  },\n  json: function json(obj) {\n    var cy = this;\n    var _p = cy._private;\n    var eles = cy.mutableElements();\n    var getFreshRef = function getFreshRef(ele) {\n      return cy.getElementById(ele.id());\n    };\n    if (plainObject(obj)) {\n      // set\n\n      cy.startBatch();\n      if (obj.elements) {\n        var idInJson = {};\n        var updateEles = function updateEles(jsons, gr) {\n          var toAdd = [];\n          var toMod = [];\n          for (var i = 0; i < jsons.length; i++) {\n            var json = jsons[i];\n            if (!json.data.id) {\n              warn('cy.json() cannot handle elements without an ID attribute');\n              continue;\n            }\n            var id = '' + json.data.id; // id must be string\n            var ele = cy.getElementById(id);\n            idInJson[id] = true;\n            if (ele.length !== 0) {\n              // existing element should be updated\n              toMod.push({\n                ele: ele,\n                json: json\n              });\n            } else {\n              // otherwise should be added\n              if (gr) {\n                json.group = gr;\n                toAdd.push(json);\n              } else {\n                toAdd.push(json);\n              }\n            }\n          }\n          cy.add(toAdd);\n          for (var _i = 0; _i < toMod.length; _i++) {\n            var _toMod$_i = toMod[_i],\n              _ele = _toMod$_i.ele,\n              _json = _toMod$_i.json;\n            _ele.json(_json);\n          }\n        };\n        if (array(obj.elements)) {\n          // elements: []\n          updateEles(obj.elements);\n        } else {\n          // elements: { nodes: [], edges: [] }\n          var grs = ['nodes', 'edges'];\n          for (var i = 0; i < grs.length; i++) {\n            var gr = grs[i];\n            var elements = obj.elements[gr];\n            if (array(elements)) {\n              updateEles(elements, gr);\n            }\n          }\n        }\n        var parentsToRemove = cy.collection();\n        eles.filter(function (ele) {\n          return !idInJson[ele.id()];\n        }).forEach(function (ele) {\n          if (ele.isParent()) {\n            parentsToRemove.merge(ele);\n          } else {\n            ele.remove();\n          }\n        });\n\n        // so that children are not removed w/parent\n        parentsToRemove.forEach(function (ele) {\n          return ele.children().move({\n            parent: null\n          });\n        });\n\n        // intermediate parents may be moved by prior line, so make sure we remove by fresh refs\n        parentsToRemove.forEach(function (ele) {\n          return getFreshRef(ele).remove();\n        });\n      }\n      if (obj.style) {\n        cy.style(obj.style);\n      }\n      if (obj.zoom != null && obj.zoom !== _p.zoom) {\n        cy.zoom(obj.zoom);\n      }\n      if (obj.pan) {\n        if (obj.pan.x !== _p.pan.x || obj.pan.y !== _p.pan.y) {\n          cy.pan(obj.pan);\n        }\n      }\n      if (obj.data) {\n        cy.data(obj.data);\n      }\n      var fields = ['minZoom', 'maxZoom', 'zoomingEnabled', 'userZoomingEnabled', 'panningEnabled', 'userPanningEnabled', 'boxSelectionEnabled', 'autolock', 'autoungrabify', 'autounselectify', 'multiClickDebounceTime'];\n      for (var _i2 = 0; _i2 < fields.length; _i2++) {\n        var f = fields[_i2];\n        if (obj[f] != null) {\n          cy[f](obj[f]);\n        }\n      }\n      cy.endBatch();\n      return this; // chaining\n    } else {\n      // get\n      var flat = !!obj;\n      var json = {};\n      if (flat) {\n        json.elements = this.elements().map(function (ele) {\n          return ele.json();\n        });\n      } else {\n        json.elements = {};\n        eles.forEach(function (ele) {\n          var group = ele.group();\n          if (!json.elements[group]) {\n            json.elements[group] = [];\n          }\n          json.elements[group].push(ele.json());\n        });\n      }\n      if (this._private.styleEnabled) {\n        json.style = cy.style().json();\n      }\n      json.data = copy(cy.data());\n      var options = _p.options;\n      json.zoomingEnabled = _p.zoomingEnabled;\n      json.userZoomingEnabled = _p.userZoomingEnabled;\n      json.zoom = _p.zoom;\n      json.minZoom = _p.minZoom;\n      json.maxZoom = _p.maxZoom;\n      json.panningEnabled = _p.panningEnabled;\n      json.userPanningEnabled = _p.userPanningEnabled;\n      json.pan = copy(_p.pan);\n      json.boxSelectionEnabled = _p.boxSelectionEnabled;\n      json.renderer = copy(options.renderer);\n      json.hideEdgesOnViewport = options.hideEdgesOnViewport;\n      json.textureOnViewport = options.textureOnViewport;\n      json.wheelSensitivity = options.wheelSensitivity;\n      json.motionBlur = options.motionBlur;\n      json.multiClickDebounceTime = options.multiClickDebounceTime;\n      return json;\n    }\n  }\n});\ncorefn.$id = corefn.getElementById;\n[corefn$9, corefn$8, elesfn, corefn$7, corefn$6, corefn$5, corefn$4, corefn$3, corefn$2, corefn$1, fn].forEach(function (props) {\n  extend(corefn, props);\n});\n\n/* eslint-disable no-unused-vars */\nvar defaults$7 = {\n  fit: true,\n  // whether to fit the viewport to the graph\n  directed: false,\n  // whether the tree is directed downwards (or edges can point in any direction if false)\n  padding: 30,\n  // padding on fit\n  circle: false,\n  // put depths in concentric circles if true, put depths top down if false\n  grid: false,\n  // whether to create an even grid into which the DAG is placed (circle:false only)\n  spacingFactor: 1.75,\n  // positive spacing factor, larger => more space between nodes (N.B. n/a if causes overlap)\n  boundingBox: undefined,\n  // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }\n  avoidOverlap: true,\n  // prevents node overlap, may overflow boundingBox if not enough space\n  nodeDimensionsIncludeLabels: false,\n  // Excludes the label when calculating node bounding boxes for the layout algorithm\n  roots: undefined,\n  // the roots of the trees\n  depthSort: undefined,\n  // a sorting function to order nodes at equal depth. e.g. function(a, b){ return a.data('weight') - b.data('weight') }\n  animate: false,\n  // whether to transition the node positions\n  animationDuration: 500,\n  // duration of animation in ms if enabled\n  animationEasing: undefined,\n  // easing of animation if enabled,\n  animateFilter: function animateFilter(node, i) {\n    return true;\n  },\n  // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts\n  ready: undefined,\n  // callback on layoutready\n  stop: undefined,\n  // callback on layoutstop\n  transform: function transform(node, position) {\n    return position;\n  } // transform a given node position. Useful for changing flow direction in discrete layouts\n};\n\nvar deprecatedOptionDefaults = {\n  maximal: false,\n  // whether to shift nodes down their natural BFS depths in order to avoid upwards edges (DAGS only); setting acyclic to true sets maximal to true also\n  acyclic: false // whether the tree is acyclic and thus a node could be shifted (due to the maximal option) multiple times without causing an infinite loop; setting to true sets maximal to true also; if you are uncertain whether a tree is acyclic, set to false to avoid potential infinite loops\n};\n\n/* eslint-enable */\n\nvar getInfo = function getInfo(ele) {\n  return ele.scratch('breadthfirst');\n};\nvar setInfo = function setInfo(ele, obj) {\n  return ele.scratch('breadthfirst', obj);\n};\nfunction BreadthFirstLayout(options) {\n  this.options = extend({}, defaults$7, deprecatedOptionDefaults, options);\n}\nBreadthFirstLayout.prototype.run = function () {\n  var params = this.options;\n  var options = params;\n  var cy = params.cy;\n  var eles = options.eles;\n  var nodes = eles.nodes().filter(function (n) {\n    return !n.isParent();\n  });\n  var graph = eles;\n  var directed = options.directed;\n  var maximal = options.acyclic || options.maximal || options.maximalAdjustments > 0; // maximalAdjustments for compat. w/ old code; also, setting acyclic to true sets maximal to true\n\n  var bb = makeBoundingBox(options.boundingBox ? options.boundingBox : {\n    x1: 0,\n    y1: 0,\n    w: cy.width(),\n    h: cy.height()\n  });\n  var roots;\n  if (elementOrCollection(options.roots)) {\n    roots = options.roots;\n  } else if (array(options.roots)) {\n    var rootsArray = [];\n    for (var i = 0; i < options.roots.length; i++) {\n      var id = options.roots[i];\n      var ele = cy.getElementById(id);\n      rootsArray.push(ele);\n    }\n    roots = cy.collection(rootsArray);\n  } else if (string(options.roots)) {\n    roots = cy.$(options.roots);\n  } else {\n    if (directed) {\n      roots = nodes.roots();\n    } else {\n      var components = eles.components();\n      roots = cy.collection();\n      var _loop = function _loop(_i) {\n        var comp = components[_i];\n        var maxDegree = comp.maxDegree(false);\n        var compRoots = comp.filter(function (ele) {\n          return ele.degree(false) === maxDegree;\n        });\n        roots = roots.add(compRoots);\n      };\n      for (var _i = 0; _i < components.length; _i++) {\n        _loop(_i);\n      }\n    }\n  }\n  var depths = [];\n  var foundByBfs = {};\n  var addToDepth = function addToDepth(ele, d) {\n    if (depths[d] == null) {\n      depths[d] = [];\n    }\n    var i = depths[d].length;\n    depths[d].push(ele);\n    setInfo(ele, {\n      index: i,\n      depth: d\n    });\n  };\n  var changeDepth = function changeDepth(ele, newDepth) {\n    var _getInfo = getInfo(ele),\n      depth = _getInfo.depth,\n      index = _getInfo.index;\n    depths[depth][index] = null;\n    addToDepth(ele, newDepth);\n  };\n\n  // find the depths of the nodes\n  graph.bfs({\n    roots: roots,\n    directed: options.directed,\n    visit: function visit(node, edge, pNode, i, depth) {\n      var ele = node[0];\n      var id = ele.id();\n      addToDepth(ele, depth);\n      foundByBfs[id] = true;\n    }\n  });\n\n  // check for nodes not found by bfs\n  var orphanNodes = [];\n  for (var _i2 = 0; _i2 < nodes.length; _i2++) {\n    var _ele = nodes[_i2];\n    if (foundByBfs[_ele.id()]) {\n      continue;\n    } else {\n      orphanNodes.push(_ele);\n    }\n  }\n\n  // assign the nodes a depth and index\n\n  var assignDepthsAt = function assignDepthsAt(i) {\n    var eles = depths[i];\n    for (var j = 0; j < eles.length; j++) {\n      var _ele2 = eles[j];\n      if (_ele2 == null) {\n        eles.splice(j, 1);\n        j--;\n        continue;\n      }\n      setInfo(_ele2, {\n        depth: i,\n        index: j\n      });\n    }\n  };\n  var assignDepths = function assignDepths() {\n    for (var _i3 = 0; _i3 < depths.length; _i3++) {\n      assignDepthsAt(_i3);\n    }\n  };\n  var adjustMaximally = function adjustMaximally(ele, shifted) {\n    var eInfo = getInfo(ele);\n    var incomers = ele.incomers().filter(function (el) {\n      return el.isNode() && eles.has(el);\n    });\n    var maxDepth = -1;\n    var id = ele.id();\n    for (var k = 0; k < incomers.length; k++) {\n      var incmr = incomers[k];\n      var iInfo = getInfo(incmr);\n      maxDepth = Math.max(maxDepth, iInfo.depth);\n    }\n    if (eInfo.depth <= maxDepth) {\n      if (!options.acyclic && shifted[id]) {\n        return null;\n      }\n      var newDepth = maxDepth + 1;\n      changeDepth(ele, newDepth);\n      shifted[id] = newDepth;\n      return true;\n    }\n    return false;\n  };\n\n  // for the directed case, try to make the edges all go down (i.e. depth i => depth i + 1)\n  if (directed && maximal) {\n    var Q = [];\n    var shifted = {};\n    var enqueue = function enqueue(n) {\n      return Q.push(n);\n    };\n    var dequeue = function dequeue() {\n      return Q.shift();\n    };\n    nodes.forEach(function (n) {\n      return Q.push(n);\n    });\n    while (Q.length > 0) {\n      var _ele3 = dequeue();\n      var didShift = adjustMaximally(_ele3, shifted);\n      if (didShift) {\n        _ele3.outgoers().filter(function (el) {\n          return el.isNode() && eles.has(el);\n        }).forEach(enqueue);\n      } else if (didShift === null) {\n        warn('Detected double maximal shift for node `' + _ele3.id() + '`.  Bailing maximal adjustment due to cycle.  Use `options.maximal: true` only on DAGs.');\n        break; // exit on failure\n      }\n    }\n  }\n\n  assignDepths(); // clear holes\n\n  // find min distance we need to leave between nodes\n  var minDistance = 0;\n  if (options.avoidOverlap) {\n    for (var _i4 = 0; _i4 < nodes.length; _i4++) {\n      var n = nodes[_i4];\n      var nbb = n.layoutDimensions(options);\n      var w = nbb.w;\n      var h = nbb.h;\n      minDistance = Math.max(minDistance, w, h);\n    }\n  }\n\n  // get the weighted percent for an element based on its connectivity to other levels\n  var cachedWeightedPercent = {};\n  var getWeightedPercent = function getWeightedPercent(ele) {\n    if (cachedWeightedPercent[ele.id()]) {\n      return cachedWeightedPercent[ele.id()];\n    }\n    var eleDepth = getInfo(ele).depth;\n    var neighbors = ele.neighborhood();\n    var percent = 0;\n    var samples = 0;\n    for (var _i5 = 0; _i5 < neighbors.length; _i5++) {\n      var neighbor = neighbors[_i5];\n      if (neighbor.isEdge() || neighbor.isParent() || !nodes.has(neighbor)) {\n        continue;\n      }\n      var bf = getInfo(neighbor);\n      if (bf == null) {\n        continue;\n      }\n      var index = bf.index;\n      var depth = bf.depth;\n\n      // unassigned neighbours shouldn't affect the ordering\n      if (index == null || depth == null) {\n        continue;\n      }\n      var nDepth = depths[depth].length;\n      if (depth < eleDepth) {\n        // only get influenced by elements above\n        percent += index / nDepth;\n        samples++;\n      }\n    }\n    samples = Math.max(1, samples);\n    percent = percent / samples;\n    if (samples === 0) {\n      // put lone nodes at the start\n      percent = 0;\n    }\n    cachedWeightedPercent[ele.id()] = percent;\n    return percent;\n  };\n\n  // rearrange the indices in each depth level based on connectivity\n\n  var sortFn = function sortFn(a, b) {\n    var apct = getWeightedPercent(a);\n    var bpct = getWeightedPercent(b);\n    var diff = apct - bpct;\n    if (diff === 0) {\n      return ascending(a.id(), b.id()); // make sure sort doesn't have don't-care comparisons\n    } else {\n      return diff;\n    }\n  };\n  if (options.depthSort !== undefined) {\n    sortFn = options.depthSort;\n  }\n\n  // sort each level to make connected nodes closer\n  for (var _i6 = 0; _i6 < depths.length; _i6++) {\n    depths[_i6].sort(sortFn);\n    assignDepthsAt(_i6);\n  }\n\n  // assign orphan nodes to a new top-level depth\n  var orphanDepth = [];\n  for (var _i7 = 0; _i7 < orphanNodes.length; _i7++) {\n    orphanDepth.push(orphanNodes[_i7]);\n  }\n  depths.unshift(orphanDepth);\n  assignDepths();\n  var biggestDepthSize = 0;\n  for (var _i8 = 0; _i8 < depths.length; _i8++) {\n    biggestDepthSize = Math.max(depths[_i8].length, biggestDepthSize);\n  }\n  var center = {\n    x: bb.x1 + bb.w / 2,\n    y: bb.x1 + bb.h / 2\n  };\n  var maxDepthSize = depths.reduce(function (max, eles) {\n    return Math.max(max, eles.length);\n  }, 0);\n  var getPosition = function getPosition(ele) {\n    var _getInfo2 = getInfo(ele),\n      depth = _getInfo2.depth,\n      index = _getInfo2.index;\n    var depthSize = depths[depth].length;\n    var distanceX = Math.max(bb.w / ((options.grid ? maxDepthSize : depthSize) + 1), minDistance);\n    var distanceY = Math.max(bb.h / (depths.length + 1), minDistance);\n    var radiusStepSize = Math.min(bb.w / 2 / depths.length, bb.h / 2 / depths.length);\n    radiusStepSize = Math.max(radiusStepSize, minDistance);\n    if (!options.circle) {\n      var epos = {\n        x: center.x + (index + 1 - (depthSize + 1) / 2) * distanceX,\n        y: (depth + 1) * distanceY\n      };\n      return epos;\n    } else {\n      var radius = radiusStepSize * depth + radiusStepSize - (depths.length > 0 && depths[0].length <= 3 ? radiusStepSize / 2 : 0);\n      var theta = 2 * Math.PI / depths[depth].length * index;\n      if (depth === 0 && depths[0].length === 1) {\n        radius = 1;\n      }\n      return {\n        x: center.x + radius * Math.cos(theta),\n        y: center.y + radius * Math.sin(theta)\n      };\n    }\n  };\n  eles.nodes().layoutPositions(this, options, getPosition);\n  return this; // chaining\n};\n\nvar defaults$6 = {\n  fit: true,\n  // whether to fit the viewport to the graph\n  padding: 30,\n  // the padding on fit\n  boundingBox: undefined,\n  // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }\n  avoidOverlap: true,\n  // prevents node overlap, may overflow boundingBox and radius if not enough space\n  nodeDimensionsIncludeLabels: false,\n  // Excludes the label when calculating node bounding boxes for the layout algorithm\n  spacingFactor: undefined,\n  // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up\n  radius: undefined,\n  // the radius of the circle\n  startAngle: 3 / 2 * Math.PI,\n  // where nodes start in radians\n  sweep: undefined,\n  // how many radians should be between the first and last node (defaults to full circle)\n  clockwise: true,\n  // whether the layout should go clockwise (true) or counterclockwise/anticlockwise (false)\n  sort: undefined,\n  // a sorting function to order the nodes; e.g. function(a, b){ return a.data('weight') - b.data('weight') }\n  animate: false,\n  // whether to transition the node positions\n  animationDuration: 500,\n  // duration of animation in ms if enabled\n  animationEasing: undefined,\n  // easing of animation if enabled\n  animateFilter: function animateFilter(node, i) {\n    return true;\n  },\n  // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts\n  ready: undefined,\n  // callback on layoutready\n  stop: undefined,\n  // callback on layoutstop\n  transform: function transform(node, position) {\n    return position;\n  } // transform a given node position. Useful for changing flow direction in discrete layouts \n};\n\nfunction CircleLayout(options) {\n  this.options = extend({}, defaults$6, options);\n}\nCircleLayout.prototype.run = function () {\n  var params = this.options;\n  var options = params;\n  var cy = params.cy;\n  var eles = options.eles;\n  var clockwise = options.counterclockwise !== undefined ? !options.counterclockwise : options.clockwise;\n  var nodes = eles.nodes().not(':parent');\n  if (options.sort) {\n    nodes = nodes.sort(options.sort);\n  }\n  var bb = makeBoundingBox(options.boundingBox ? options.boundingBox : {\n    x1: 0,\n    y1: 0,\n    w: cy.width(),\n    h: cy.height()\n  });\n  var center = {\n    x: bb.x1 + bb.w / 2,\n    y: bb.y1 + bb.h / 2\n  };\n  var sweep = options.sweep === undefined ? 2 * Math.PI - 2 * Math.PI / nodes.length : options.sweep;\n  var dTheta = sweep / Math.max(1, nodes.length - 1);\n  var r;\n  var minDistance = 0;\n  for (var i = 0; i < nodes.length; i++) {\n    var n = nodes[i];\n    var nbb = n.layoutDimensions(options);\n    var w = nbb.w;\n    var h = nbb.h;\n    minDistance = Math.max(minDistance, w, h);\n  }\n  if (number$1(options.radius)) {\n    r = options.radius;\n  } else if (nodes.length <= 1) {\n    r = 0;\n  } else {\n    r = Math.min(bb.h, bb.w) / 2 - minDistance;\n  }\n\n  // calculate the radius\n  if (nodes.length > 1 && options.avoidOverlap) {\n    // but only if more than one node (can't overlap)\n    minDistance *= 1.75; // just to have some nice spacing\n\n    var dcos = Math.cos(dTheta) - Math.cos(0);\n    var dsin = Math.sin(dTheta) - Math.sin(0);\n    var rMin = Math.sqrt(minDistance * minDistance / (dcos * dcos + dsin * dsin)); // s.t. no nodes overlapping\n    r = Math.max(rMin, r);\n  }\n  var getPos = function getPos(ele, i) {\n    var theta = options.startAngle + i * dTheta * (clockwise ? 1 : -1);\n    var rx = r * Math.cos(theta);\n    var ry = r * Math.sin(theta);\n    var pos = {\n      x: center.x + rx,\n      y: center.y + ry\n    };\n    return pos;\n  };\n  eles.nodes().layoutPositions(this, options, getPos);\n  return this; // chaining\n};\n\nvar defaults$5 = {\n  fit: true,\n  // whether to fit the viewport to the graph\n  padding: 30,\n  // the padding on fit\n  startAngle: 3 / 2 * Math.PI,\n  // where nodes start in radians\n  sweep: undefined,\n  // how many radians should be between the first and last node (defaults to full circle)\n  clockwise: true,\n  // whether the layout should go clockwise (true) or counterclockwise/anticlockwise (false)\n  equidistant: false,\n  // whether levels have an equal radial distance betwen them, may cause bounding box overflow\n  minNodeSpacing: 10,\n  // min spacing between outside of nodes (used for radius adjustment)\n  boundingBox: undefined,\n  // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }\n  avoidOverlap: true,\n  // prevents node overlap, may overflow boundingBox if not enough space\n  nodeDimensionsIncludeLabels: false,\n  // Excludes the label when calculating node bounding boxes for the layout algorithm\n  height: undefined,\n  // height of layout area (overrides container height)\n  width: undefined,\n  // width of layout area (overrides container width)\n  spacingFactor: undefined,\n  // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up\n  concentric: function concentric(node) {\n    // returns numeric value for each node, placing higher nodes in levels towards the centre\n    return node.degree();\n  },\n  levelWidth: function levelWidth(nodes) {\n    // the variation of concentric values in each level\n    return nodes.maxDegree() / 4;\n  },\n  animate: false,\n  // whether to transition the node positions\n  animationDuration: 500,\n  // duration of animation in ms if enabled\n  animationEasing: undefined,\n  // easing of animation if enabled\n  animateFilter: function animateFilter(node, i) {\n    return true;\n  },\n  // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts\n  ready: undefined,\n  // callback on layoutready\n  stop: undefined,\n  // callback on layoutstop\n  transform: function transform(node, position) {\n    return position;\n  } // transform a given node position. Useful for changing flow direction in discrete layouts\n};\n\nfunction ConcentricLayout(options) {\n  this.options = extend({}, defaults$5, options);\n}\nConcentricLayout.prototype.run = function () {\n  var params = this.options;\n  var options = params;\n  var clockwise = options.counterclockwise !== undefined ? !options.counterclockwise : options.clockwise;\n  var cy = params.cy;\n  var eles = options.eles;\n  var nodes = eles.nodes().not(':parent');\n  var bb = makeBoundingBox(options.boundingBox ? options.boundingBox : {\n    x1: 0,\n    y1: 0,\n    w: cy.width(),\n    h: cy.height()\n  });\n  var center = {\n    x: bb.x1 + bb.w / 2,\n    y: bb.y1 + bb.h / 2\n  };\n  var nodeValues = []; // { node, value }\n  var maxNodeSize = 0;\n  for (var i = 0; i < nodes.length; i++) {\n    var node = nodes[i];\n    var value = void 0;\n\n    // calculate the node value\n    value = options.concentric(node);\n    nodeValues.push({\n      value: value,\n      node: node\n    });\n\n    // for style mapping\n    node._private.scratch.concentric = value;\n  }\n\n  // in case we used the `concentric` in style\n  nodes.updateStyle();\n\n  // calculate max size now based on potentially updated mappers\n  for (var _i = 0; _i < nodes.length; _i++) {\n    var _node = nodes[_i];\n    var nbb = _node.layoutDimensions(options);\n    maxNodeSize = Math.max(maxNodeSize, nbb.w, nbb.h);\n  }\n\n  // sort node values in descreasing order\n  nodeValues.sort(function (a, b) {\n    return b.value - a.value;\n  });\n  var levelWidth = options.levelWidth(nodes);\n\n  // put the values into levels\n  var levels = [[]];\n  var currentLevel = levels[0];\n  for (var _i2 = 0; _i2 < nodeValues.length; _i2++) {\n    var val = nodeValues[_i2];\n    if (currentLevel.length > 0) {\n      var diff = Math.abs(currentLevel[0].value - val.value);\n      if (diff >= levelWidth) {\n        currentLevel = [];\n        levels.push(currentLevel);\n      }\n    }\n    currentLevel.push(val);\n  }\n\n  // create positions from levels\n\n  var minDist = maxNodeSize + options.minNodeSpacing; // min dist between nodes\n\n  if (!options.avoidOverlap) {\n    // then strictly constrain to bb\n    var firstLvlHasMulti = levels.length > 0 && levels[0].length > 1;\n    var maxR = Math.min(bb.w, bb.h) / 2 - minDist;\n    var rStep = maxR / (levels.length + firstLvlHasMulti ? 1 : 0);\n    minDist = Math.min(minDist, rStep);\n  }\n\n  // find the metrics for each level\n  var r = 0;\n  for (var _i3 = 0; _i3 < levels.length; _i3++) {\n    var level = levels[_i3];\n    var sweep = options.sweep === undefined ? 2 * Math.PI - 2 * Math.PI / level.length : options.sweep;\n    var dTheta = level.dTheta = sweep / Math.max(1, level.length - 1);\n\n    // calculate the radius\n    if (level.length > 1 && options.avoidOverlap) {\n      // but only if more than one node (can't overlap)\n      var dcos = Math.cos(dTheta) - Math.cos(0);\n      var dsin = Math.sin(dTheta) - Math.sin(0);\n      var rMin = Math.sqrt(minDist * minDist / (dcos * dcos + dsin * dsin)); // s.t. no nodes overlapping\n\n      r = Math.max(rMin, r);\n    }\n    level.r = r;\n    r += minDist;\n  }\n  if (options.equidistant) {\n    var rDeltaMax = 0;\n    var _r = 0;\n    for (var _i4 = 0; _i4 < levels.length; _i4++) {\n      var _level = levels[_i4];\n      var rDelta = _level.r - _r;\n      rDeltaMax = Math.max(rDeltaMax, rDelta);\n    }\n    _r = 0;\n    for (var _i5 = 0; _i5 < levels.length; _i5++) {\n      var _level2 = levels[_i5];\n      if (_i5 === 0) {\n        _r = _level2.r;\n      }\n      _level2.r = _r;\n      _r += rDeltaMax;\n    }\n  }\n\n  // calculate the node positions\n  var pos = {}; // id => position\n  for (var _i6 = 0; _i6 < levels.length; _i6++) {\n    var _level3 = levels[_i6];\n    var _dTheta = _level3.dTheta;\n    var _r2 = _level3.r;\n    for (var j = 0; j < _level3.length; j++) {\n      var _val = _level3[j];\n      var theta = options.startAngle + (clockwise ? 1 : -1) * _dTheta * j;\n      var p = {\n        x: center.x + _r2 * Math.cos(theta),\n        y: center.y + _r2 * Math.sin(theta)\n      };\n      pos[_val.node.id()] = p;\n    }\n  }\n\n  // position the nodes\n  eles.nodes().layoutPositions(this, options, function (ele) {\n    var id = ele.id();\n    return pos[id];\n  });\n  return this; // chaining\n};\n\n/*\nThe CoSE layout was written by Gerardo Huck.\nhttps://www.linkedin.com/in/gerardohuck/\n\nBased on the following article:\nhttp://dl.acm.org/citation.cfm?id=1498047\n\nModifications tracked on Github.\n*/\nvar DEBUG;\n\n/**\n * @brief :  default layout options\n */\nvar defaults$4 = {\n  // Called on `layoutready`\n  ready: function ready() {},\n  // Called on `layoutstop`\n  stop: function stop() {},\n  // Whether to animate while running the layout\n  // true : Animate continuously as the layout is running\n  // false : Just show the end result\n  // 'end' : Animate with the end result, from the initial positions to the end positions\n  animate: true,\n  // Easing of the animation for animate:'end'\n  animationEasing: undefined,\n  // The duration of the animation for animate:'end'\n  animationDuration: undefined,\n  // A function that determines whether the node should be animated\n  // All nodes animated by default on animate enabled\n  // Non-animated nodes are positioned immediately when the layout starts\n  animateFilter: function animateFilter(node, i) {\n    return true;\n  },\n  // The layout animates only after this many milliseconds for animate:true\n  // (prevents flashing on fast runs)\n  animationThreshold: 250,\n  // Number of iterations between consecutive screen positions update\n  refresh: 20,\n  // Whether to fit the network view after when done\n  fit: true,\n  // Padding on fit\n  padding: 30,\n  // Constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }\n  boundingBox: undefined,\n  // Excludes the label when calculating node bounding boxes for the layout algorithm\n  nodeDimensionsIncludeLabels: false,\n  // Randomize the initial positions of the nodes (true) or use existing positions (false)\n  randomize: false,\n  // Extra spacing between components in non-compound graphs\n  componentSpacing: 40,\n  // Node repulsion (non overlapping) multiplier\n  nodeRepulsion: function nodeRepulsion(node) {\n    return 2048;\n  },\n  // Node repulsion (overlapping) multiplier\n  nodeOverlap: 4,\n  // Ideal edge (non nested) length\n  idealEdgeLength: function idealEdgeLength(edge) {\n    return 32;\n  },\n  // Divisor to compute edge forces\n  edgeElasticity: function edgeElasticity(edge) {\n    return 32;\n  },\n  // Nesting factor (multiplier) to compute ideal edge length for nested edges\n  nestingFactor: 1.2,\n  // Gravity force (constant)\n  gravity: 1,\n  // Maximum number of iterations to perform\n  numIter: 1000,\n  // Initial temperature (maximum node displacement)\n  initialTemp: 1000,\n  // Cooling factor (how the temperature is reduced between consecutive iterations\n  coolingFactor: 0.99,\n  // Lower temperature threshold (below this point the layout will end)\n  minTemp: 1.0\n};\n\n/**\n * @brief       : constructor\n * @arg options : object containing layout options\n */\nfunction CoseLayout(options) {\n  this.options = extend({}, defaults$4, options);\n  this.options.layout = this;\n\n  // Exclude any edge that has a source or target node that is not in the set of passed-in nodes\n  var nodes = this.options.eles.nodes();\n  var edges = this.options.eles.edges();\n  var notEdges = edges.filter(function (e) {\n    var sourceId = e.source().data('id');\n    var targetId = e.target().data('id');\n    var hasSource = nodes.some(function (n) {\n      return n.data('id') === sourceId;\n    });\n    var hasTarget = nodes.some(function (n) {\n      return n.data('id') === targetId;\n    });\n    return !hasSource || !hasTarget;\n  });\n  this.options.eles = this.options.eles.not(notEdges);\n}\n\n/**\n * @brief : runs the layout\n */\nCoseLayout.prototype.run = function () {\n  var options = this.options;\n  var cy = options.cy;\n  var layout = this;\n  layout.stopped = false;\n  if (options.animate === true || options.animate === false) {\n    layout.emit({\n      type: 'layoutstart',\n      layout: layout\n    });\n  }\n\n  // Set DEBUG - Global variable\n  if (true === options.debug) {\n    DEBUG = true;\n  } else {\n    DEBUG = false;\n  }\n\n  // Initialize layout info\n  var layoutInfo = createLayoutInfo(cy, layout, options);\n\n  // Show LayoutInfo contents if debugging\n  if (DEBUG) {\n    printLayoutInfo(layoutInfo);\n  }\n\n  // If required, randomize node positions\n  if (options.randomize) {\n    randomizePositions(layoutInfo);\n  }\n  var startTime = performanceNow();\n  var refresh = function refresh() {\n    refreshPositions(layoutInfo, cy, options);\n\n    // Fit the graph if necessary\n    if (true === options.fit) {\n      cy.fit(options.padding);\n    }\n  };\n  var mainLoop = function mainLoop(i) {\n    if (layout.stopped || i >= options.numIter) {\n      // logDebug(\"Layout manually stopped. Stopping computation in step \" + i);\n      return false;\n    }\n\n    // Do one step in the phisical simulation\n    step(layoutInfo, options);\n\n    // Update temperature\n    layoutInfo.temperature = layoutInfo.temperature * options.coolingFactor;\n    // logDebug(\"New temperature: \" + layoutInfo.temperature);\n\n    if (layoutInfo.temperature < options.minTemp) {\n      // logDebug(\"Temperature drop below minimum threshold. Stopping computation in step \" + i);\n      return false;\n    }\n    return true;\n  };\n  var done = function done() {\n    if (options.animate === true || options.animate === false) {\n      refresh();\n\n      // Layout has finished\n      layout.one('layoutstop', options.stop);\n      layout.emit({\n        type: 'layoutstop',\n        layout: layout\n      });\n    } else {\n      var nodes = options.eles.nodes();\n      var getScaledPos = getScaleInBoundsFn(layoutInfo, options, nodes);\n      nodes.layoutPositions(layout, options, getScaledPos);\n    }\n  };\n  var i = 0;\n  var loopRet = true;\n  if (options.animate === true) {\n    var frame = function frame() {\n      var f = 0;\n      while (loopRet && f < options.refresh) {\n        loopRet = mainLoop(i);\n        i++;\n        f++;\n      }\n      if (!loopRet) {\n        // it's done\n        separateComponents(layoutInfo, options);\n        done();\n      } else {\n        var now = performanceNow();\n        if (now - startTime >= options.animationThreshold) {\n          refresh();\n        }\n        requestAnimationFrame(frame);\n      }\n    };\n    frame();\n  } else {\n    while (loopRet) {\n      loopRet = mainLoop(i);\n      i++;\n    }\n    separateComponents(layoutInfo, options);\n    done();\n  }\n  return this; // chaining\n};\n\n/**\n * @brief : called on continuous layouts to stop them before they finish\n */\nCoseLayout.prototype.stop = function () {\n  this.stopped = true;\n  if (this.thread) {\n    this.thread.stop();\n  }\n  this.emit('layoutstop');\n  return this; // chaining\n};\n\nCoseLayout.prototype.destroy = function () {\n  if (this.thread) {\n    this.thread.stop();\n  }\n  return this; // chaining\n};\n\n/**\n * @brief     : Creates an object which is contains all the data\n *              used in the layout process\n * @arg cy    : cytoscape.js object\n * @return    : layoutInfo object initialized\n */\nvar createLayoutInfo = function createLayoutInfo(cy, layout, options) {\n  // Shortcut\n  var edges = options.eles.edges();\n  var nodes = options.eles.nodes();\n  var bb = makeBoundingBox(options.boundingBox ? options.boundingBox : {\n    x1: 0,\n    y1: 0,\n    w: cy.width(),\n    h: cy.height()\n  });\n  var layoutInfo = {\n    isCompound: cy.hasCompoundNodes(),\n    layoutNodes: [],\n    idToIndex: {},\n    nodeSize: nodes.size(),\n    graphSet: [],\n    indexToGraph: [],\n    layoutEdges: [],\n    edgeSize: edges.size(),\n    temperature: options.initialTemp,\n    clientWidth: bb.w,\n    clientHeight: bb.h,\n    boundingBox: bb\n  };\n  var components = options.eles.components();\n  var id2cmptId = {};\n  for (var i = 0; i < components.length; i++) {\n    var component = components[i];\n    for (var j = 0; j < component.length; j++) {\n      var node = component[j];\n      id2cmptId[node.id()] = i;\n    }\n  }\n\n  // Iterate over all nodes, creating layout nodes\n  for (var i = 0; i < layoutInfo.nodeSize; i++) {\n    var n = nodes[i];\n    var nbb = n.layoutDimensions(options);\n    var tempNode = {};\n    tempNode.isLocked = n.locked();\n    tempNode.id = n.data('id');\n    tempNode.parentId = n.data('parent');\n    tempNode.cmptId = id2cmptId[n.id()];\n    tempNode.children = [];\n    tempNode.positionX = n.position('x');\n    tempNode.positionY = n.position('y');\n    tempNode.offsetX = 0;\n    tempNode.offsetY = 0;\n    tempNode.height = nbb.w;\n    tempNode.width = nbb.h;\n    tempNode.maxX = tempNode.positionX + tempNode.width / 2;\n    tempNode.minX = tempNode.positionX - tempNode.width / 2;\n    tempNode.maxY = tempNode.positionY + tempNode.height / 2;\n    tempNode.minY = tempNode.positionY - tempNode.height / 2;\n    tempNode.padLeft = parseFloat(n.style('padding'));\n    tempNode.padRight = parseFloat(n.style('padding'));\n    tempNode.padTop = parseFloat(n.style('padding'));\n    tempNode.padBottom = parseFloat(n.style('padding'));\n\n    // forces\n    tempNode.nodeRepulsion = fn$6(options.nodeRepulsion) ? options.nodeRepulsion(n) : options.nodeRepulsion;\n\n    // Add new node\n    layoutInfo.layoutNodes.push(tempNode);\n    // Add entry to id-index map\n    layoutInfo.idToIndex[tempNode.id] = i;\n  }\n\n  // Inline implementation of a queue, used for traversing the graph in BFS order\n  var queue = [];\n  var start = 0; // Points to the start the queue\n  var end = -1; // Points to the end of the queue\n\n  var tempGraph = [];\n\n  // Second pass to add child information and\n  // initialize queue for hierarchical traversal\n  for (var i = 0; i < layoutInfo.nodeSize; i++) {\n    var n = layoutInfo.layoutNodes[i];\n    var p_id = n.parentId;\n    // Check if node n has a parent node\n    if (null != p_id) {\n      // Add node Id to parent's list of children\n      layoutInfo.layoutNodes[layoutInfo.idToIndex[p_id]].children.push(n.id);\n    } else {\n      // If a node doesn't have a parent, then it's in the root graph\n      queue[++end] = n.id;\n      tempGraph.push(n.id);\n    }\n  }\n\n  // Add root graph to graphSet\n  layoutInfo.graphSet.push(tempGraph);\n\n  // Traverse the graph, level by level,\n  while (start <= end) {\n    // Get the node to visit and remove it from queue\n    var node_id = queue[start++];\n    var node_ix = layoutInfo.idToIndex[node_id];\n    var node = layoutInfo.layoutNodes[node_ix];\n    var children = node.children;\n    if (children.length > 0) {\n      // Add children nodes as a new graph to graph set\n      layoutInfo.graphSet.push(children);\n      // Add children to que queue to be visited\n      for (var i = 0; i < children.length; i++) {\n        queue[++end] = children[i];\n      }\n    }\n  }\n\n  // Create indexToGraph map\n  for (var i = 0; i < layoutInfo.graphSet.length; i++) {\n    var graph = layoutInfo.graphSet[i];\n    for (var j = 0; j < graph.length; j++) {\n      var index = layoutInfo.idToIndex[graph[j]];\n      layoutInfo.indexToGraph[index] = i;\n    }\n  }\n\n  // Iterate over all edges, creating Layout Edges\n  for (var i = 0; i < layoutInfo.edgeSize; i++) {\n    var e = edges[i];\n    var tempEdge = {};\n    tempEdge.id = e.data('id');\n    tempEdge.sourceId = e.data('source');\n    tempEdge.targetId = e.data('target');\n\n    // Compute ideal length\n    var idealLength = fn$6(options.idealEdgeLength) ? options.idealEdgeLength(e) : options.idealEdgeLength;\n    var elasticity = fn$6(options.edgeElasticity) ? options.edgeElasticity(e) : options.edgeElasticity;\n\n    // Check if it's an inter graph edge\n    var sourceIx = layoutInfo.idToIndex[tempEdge.sourceId];\n    var targetIx = layoutInfo.idToIndex[tempEdge.targetId];\n    var sourceGraph = layoutInfo.indexToGraph[sourceIx];\n    var targetGraph = layoutInfo.indexToGraph[targetIx];\n    if (sourceGraph != targetGraph) {\n      // Find lowest common graph ancestor\n      var lca = findLCA(tempEdge.sourceId, tempEdge.targetId, layoutInfo);\n\n      // Compute sum of node depths, relative to lca graph\n      var lcaGraph = layoutInfo.graphSet[lca];\n      var depth = 0;\n\n      // Source depth\n      var tempNode = layoutInfo.layoutNodes[sourceIx];\n      while (-1 === lcaGraph.indexOf(tempNode.id)) {\n        tempNode = layoutInfo.layoutNodes[layoutInfo.idToIndex[tempNode.parentId]];\n        depth++;\n      }\n\n      // Target depth\n      tempNode = layoutInfo.layoutNodes[targetIx];\n      while (-1 === lcaGraph.indexOf(tempNode.id)) {\n        tempNode = layoutInfo.layoutNodes[layoutInfo.idToIndex[tempNode.parentId]];\n        depth++;\n      }\n\n      // logDebug('LCA of nodes ' + tempEdge.sourceId + ' and ' + tempEdge.targetId +\n      //  \". Index: \" + lca + \" Contents: \" + lcaGraph.toString() +\n      //  \". Depth: \" + depth);\n\n      // Update idealLength\n      idealLength *= depth * options.nestingFactor;\n    }\n    tempEdge.idealLength = idealLength;\n    tempEdge.elasticity = elasticity;\n    layoutInfo.layoutEdges.push(tempEdge);\n  }\n\n  // Finally, return layoutInfo object\n  return layoutInfo;\n};\n\n/**\n * @brief : This function finds the index of the lowest common\n *          graph ancestor between 2 nodes in the subtree\n *          (from the graph hierarchy induced tree) whose\n *          root is graphIx\n *\n * @arg node1: node1's ID\n * @arg node2: node2's ID\n * @arg layoutInfo: layoutInfo object\n *\n */\nvar findLCA = function findLCA(node1, node2, layoutInfo) {\n  // Find their common ancester, starting from the root graph\n  var res = findLCA_aux(node1, node2, 0, layoutInfo);\n  if (2 > res.count) {\n    // If aux function couldn't find the common ancester,\n    // then it is the root graph\n    return 0;\n  } else {\n    return res.graph;\n  }\n};\n\n/**\n * @brief          : Auxiliary function used for LCA computation\n *\n * @arg node1      : node1's ID\n * @arg node2      : node2's ID\n * @arg graphIx    : subgraph index\n * @arg layoutInfo : layoutInfo object\n *\n * @return         : object of the form {count: X, graph: Y}, where:\n *                   X is the number of ancestors (max: 2) found in\n *                   graphIx (and it's subgraphs),\n *                   Y is the graph index of the lowest graph containing\n *                   all X nodes\n */\nvar findLCA_aux = function findLCA_aux(node1, node2, graphIx, layoutInfo) {\n  var graph = layoutInfo.graphSet[graphIx];\n  // If both nodes belongs to graphIx\n  if (-1 < graph.indexOf(node1) && -1 < graph.indexOf(node2)) {\n    return {\n      count: 2,\n      graph: graphIx\n    };\n  }\n\n  // Make recursive calls for all subgraphs\n  var c = 0;\n  for (var i = 0; i < graph.length; i++) {\n    var nodeId = graph[i];\n    var nodeIx = layoutInfo.idToIndex[nodeId];\n    var children = layoutInfo.layoutNodes[nodeIx].children;\n\n    // If the node has no child, skip it\n    if (0 === children.length) {\n      continue;\n    }\n    var childGraphIx = layoutInfo.indexToGraph[layoutInfo.idToIndex[children[0]]];\n    var result = findLCA_aux(node1, node2, childGraphIx, layoutInfo);\n    if (0 === result.count) {\n      // Neither node1 nor node2 are present in this subgraph\n      continue;\n    } else if (1 === result.count) {\n      // One of (node1, node2) is present in this subgraph\n      c++;\n      if (2 === c) {\n        // We've already found both nodes, no need to keep searching\n        break;\n      }\n    } else {\n      // Both nodes are present in this subgraph\n      return result;\n    }\n  }\n  return {\n    count: c,\n    graph: graphIx\n  };\n};\n\n/**\n * @brief: printsLayoutInfo into js console\n *         Only used for debbuging\n */\nvar printLayoutInfo; \n\n/**\n * @brief : Randomizes the position of all nodes\n */\nvar randomizePositions = function randomizePositions(layoutInfo, cy) {\n  var width = layoutInfo.clientWidth;\n  var height = layoutInfo.clientHeight;\n  for (var i = 0; i < layoutInfo.nodeSize; i++) {\n    var n = layoutInfo.layoutNodes[i];\n\n    // No need to randomize compound nodes or locked nodes\n    if (0 === n.children.length && !n.isLocked) {\n      n.positionX = Math.random() * width;\n      n.positionY = Math.random() * height;\n    }\n  }\n};\nvar getScaleInBoundsFn = function getScaleInBoundsFn(layoutInfo, options, nodes) {\n  var bb = layoutInfo.boundingBox;\n  var coseBB = {\n    x1: Infinity,\n    x2: -Infinity,\n    y1: Infinity,\n    y2: -Infinity\n  };\n  if (options.boundingBox) {\n    nodes.forEach(function (node) {\n      var lnode = layoutInfo.layoutNodes[layoutInfo.idToIndex[node.data('id')]];\n      coseBB.x1 = Math.min(coseBB.x1, lnode.positionX);\n      coseBB.x2 = Math.max(coseBB.x2, lnode.positionX);\n      coseBB.y1 = Math.min(coseBB.y1, lnode.positionY);\n      coseBB.y2 = Math.max(coseBB.y2, lnode.positionY);\n    });\n    coseBB.w = coseBB.x2 - coseBB.x1;\n    coseBB.h = coseBB.y2 - coseBB.y1;\n  }\n  return function (ele, i) {\n    var lnode = layoutInfo.layoutNodes[layoutInfo.idToIndex[ele.data('id')]];\n    if (options.boundingBox) {\n      // then add extra bounding box constraint\n      var pctX = (lnode.positionX - coseBB.x1) / coseBB.w;\n      var pctY = (lnode.positionY - coseBB.y1) / coseBB.h;\n      return {\n        x: bb.x1 + pctX * bb.w,\n        y: bb.y1 + pctY * bb.h\n      };\n    } else {\n      return {\n        x: lnode.positionX,\n        y: lnode.positionY\n      };\n    }\n  };\n};\n\n/**\n * @brief          : Updates the positions of nodes in the network\n * @arg layoutInfo : LayoutInfo object\n * @arg cy         : Cytoscape object\n * @arg options    : Layout options\n */\nvar refreshPositions = function refreshPositions(layoutInfo, cy, options) {\n  // var s = 'Refreshing positions';\n  // logDebug(s);\n\n  var layout = options.layout;\n  var nodes = options.eles.nodes();\n  var getScaledPos = getScaleInBoundsFn(layoutInfo, options, nodes);\n  nodes.positions(getScaledPos);\n\n  // Trigger layoutReady only on first call\n  if (true !== layoutInfo.ready) {\n    // s = 'Triggering layoutready';\n    // logDebug(s);\n    layoutInfo.ready = true;\n    layout.one('layoutready', options.ready);\n    layout.emit({\n      type: 'layoutready',\n      layout: this\n    });\n  }\n};\n\n/**\n * @brief : Logs a debug message in JS console, if DEBUG is ON\n */\n// var logDebug = function(text) {\n//   if (DEBUG) {\n//     console.debug(text);\n//   }\n// };\n\n/**\n * @brief          : Performs one iteration of the physical simulation\n * @arg layoutInfo : LayoutInfo object already initialized\n * @arg cy         : Cytoscape object\n * @arg options    : Layout options\n */\nvar step = function step(layoutInfo, options, _step) {\n  // var s = \"\\n\\n###############################\";\n  // s += \"\\nSTEP: \" + step;\n  // s += \"\\n###############################\\n\";\n  // logDebug(s);\n\n  // Calculate node repulsions\n  calculateNodeForces(layoutInfo, options);\n  // Calculate edge forces\n  calculateEdgeForces(layoutInfo);\n  // Calculate gravity forces\n  calculateGravityForces(layoutInfo, options);\n  // Propagate forces from parent to child\n  propagateForces(layoutInfo);\n  // Update positions based on calculated forces\n  updatePositions(layoutInfo);\n};\n\n/**\n * @brief : Computes the node repulsion forces\n */\nvar calculateNodeForces = function calculateNodeForces(layoutInfo, options) {\n  // Go through each of the graphs in graphSet\n  // Nodes only repel each other if they belong to the same graph\n  // var s = 'calculateNodeForces';\n  // logDebug(s);\n  for (var i = 0; i < layoutInfo.graphSet.length; i++) {\n    var graph = layoutInfo.graphSet[i];\n    var numNodes = graph.length;\n\n    // s = \"Set: \" + graph.toString();\n    // logDebug(s);\n\n    // Now get all the pairs of nodes\n    // Only get each pair once, (A, B) = (B, A)\n    for (var j = 0; j < numNodes; j++) {\n      var node1 = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[j]]];\n      for (var k = j + 1; k < numNodes; k++) {\n        var node2 = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[k]]];\n        nodeRepulsion(node1, node2, layoutInfo, options);\n      }\n    }\n  }\n};\nvar randomDistance = function randomDistance(max) {\n  return -max + 2 * max * Math.random();\n};\n\n/**\n * @brief : Compute the node repulsion forces between a pair of nodes\n */\nvar nodeRepulsion = function nodeRepulsion(node1, node2, layoutInfo, options) {\n  // var s = \"Node repulsion. Node1: \" + node1.id + \" Node2: \" + node2.id;\n\n  var cmptId1 = node1.cmptId;\n  var cmptId2 = node2.cmptId;\n  if (cmptId1 !== cmptId2 && !layoutInfo.isCompound) {\n    return;\n  }\n\n  // Get direction of line connecting both node centers\n  var directionX = node2.positionX - node1.positionX;\n  var directionY = node2.positionY - node1.positionY;\n  var maxRandDist = 1;\n  // s += \"\\ndirectionX: \" + directionX + \", directionY: \" + directionY;\n\n  // If both centers are the same, apply a random force\n  if (0 === directionX && 0 === directionY) {\n    directionX = randomDistance(maxRandDist);\n    directionY = randomDistance(maxRandDist);\n  }\n  var overlap = nodesOverlap(node1, node2, directionX, directionY);\n  if (overlap > 0) {\n    // s += \"\\nNodes DO overlap.\";\n    // s += \"\\nOverlap: \" + overlap;\n    // If nodes overlap, repulsion force is proportional\n    // to the overlap\n    var force = options.nodeOverlap * overlap;\n\n    // Compute the module and components of the force vector\n    var distance = Math.sqrt(directionX * directionX + directionY * directionY);\n    // s += \"\\nDistance: \" + distance;\n    var forceX = force * directionX / distance;\n    var forceY = force * directionY / distance;\n  } else {\n    // s += \"\\nNodes do NOT overlap.\";\n    // If there's no overlap, force is inversely proportional\n    // to squared distance\n\n    // Get clipping points for both nodes\n    var point1 = findClippingPoint(node1, directionX, directionY);\n    var point2 = findClippingPoint(node2, -1 * directionX, -1 * directionY);\n\n    // Use clipping points to compute distance\n    var distanceX = point2.x - point1.x;\n    var distanceY = point2.y - point1.y;\n    var distanceSqr = distanceX * distanceX + distanceY * distanceY;\n    var distance = Math.sqrt(distanceSqr);\n    // s += \"\\nDistance: \" + distance;\n\n    // Compute the module and components of the force vector\n    var force = (node1.nodeRepulsion + node2.nodeRepulsion) / distanceSqr;\n    var forceX = force * distanceX / distance;\n    var forceY = force * distanceY / distance;\n  }\n\n  // Apply force\n  if (!node1.isLocked) {\n    node1.offsetX -= forceX;\n    node1.offsetY -= forceY;\n  }\n  if (!node2.isLocked) {\n    node2.offsetX += forceX;\n    node2.offsetY += forceY;\n  }\n\n  // s += \"\\nForceX: \" + forceX + \" ForceY: \" + forceY;\n  // logDebug(s);\n\n  return;\n};\n\n/**\n * @brief  : Determines whether two nodes overlap or not\n * @return : Amount of overlapping (0 => no overlap)\n */\nvar nodesOverlap = function nodesOverlap(node1, node2, dX, dY) {\n  if (dX > 0) {\n    var overlapX = node1.maxX - node2.minX;\n  } else {\n    var overlapX = node2.maxX - node1.minX;\n  }\n  if (dY > 0) {\n    var overlapY = node1.maxY - node2.minY;\n  } else {\n    var overlapY = node2.maxY - node1.minY;\n  }\n  if (overlapX >= 0 && overlapY >= 0) {\n    return Math.sqrt(overlapX * overlapX + overlapY * overlapY);\n  } else {\n    return 0;\n  }\n};\n\n/**\n * @brief : Finds the point in which an edge (direction dX, dY) intersects\n *          the rectangular bounding box of it's source/target node\n */\nvar findClippingPoint = function findClippingPoint(node, dX, dY) {\n  // Shorcuts\n  var X = node.positionX;\n  var Y = node.positionY;\n  var H = node.height || 1;\n  var W = node.width || 1;\n  var dirSlope = dY / dX;\n  var nodeSlope = H / W;\n\n  // var s = 'Computing clipping point of node ' + node.id +\n  //   \" . Height:  \" + H + \", Width: \" + W +\n  //   \"\\nDirection \" + dX + \", \" + dY;\n  //\n  // Compute intersection\n  var res = {};\n\n  // Case: Vertical direction (up)\n  if (0 === dX && 0 < dY) {\n    res.x = X;\n    // s += \"\\nUp direction\";\n    res.y = Y + H / 2;\n    return res;\n  }\n\n  // Case: Vertical direction (down)\n  if (0 === dX && 0 > dY) {\n    res.x = X;\n    res.y = Y + H / 2;\n    // s += \"\\nDown direction\";\n\n    return res;\n  }\n\n  // Case: Intersects the right border\n  if (0 < dX && -1 * nodeSlope <= dirSlope && dirSlope <= nodeSlope) {\n    res.x = X + W / 2;\n    res.y = Y + W * dY / 2 / dX;\n    // s += \"\\nRightborder\";\n\n    return res;\n  }\n\n  // Case: Intersects the left border\n  if (0 > dX && -1 * nodeSlope <= dirSlope && dirSlope <= nodeSlope) {\n    res.x = X - W / 2;\n    res.y = Y - W * dY / 2 / dX;\n    // s += \"\\nLeftborder\";\n\n    return res;\n  }\n\n  // Case: Intersects the top border\n  if (0 < dY && (dirSlope <= -1 * nodeSlope || dirSlope >= nodeSlope)) {\n    res.x = X + H * dX / 2 / dY;\n    res.y = Y + H / 2;\n    // s += \"\\nTop border\";\n\n    return res;\n  }\n\n  // Case: Intersects the bottom border\n  if (0 > dY && (dirSlope <= -1 * nodeSlope || dirSlope >= nodeSlope)) {\n    res.x = X - H * dX / 2 / dY;\n    res.y = Y - H / 2;\n    // s += \"\\nBottom border\";\n\n    return res;\n  }\n\n  // s += \"\\nClipping point found at \" + res.x + \", \" + res.y;\n  // logDebug(s);\n  return res;\n};\n\n/**\n * @brief : Calculates all edge forces\n */\nvar calculateEdgeForces = function calculateEdgeForces(layoutInfo, options) {\n  // Iterate over all edges\n  for (var i = 0; i < layoutInfo.edgeSize; i++) {\n    // Get edge, source & target nodes\n    var edge = layoutInfo.layoutEdges[i];\n    var sourceIx = layoutInfo.idToIndex[edge.sourceId];\n    var source = layoutInfo.layoutNodes[sourceIx];\n    var targetIx = layoutInfo.idToIndex[edge.targetId];\n    var target = layoutInfo.layoutNodes[targetIx];\n\n    // Get direction of line connecting both node centers\n    var directionX = target.positionX - source.positionX;\n    var directionY = target.positionY - source.positionY;\n\n    // If both centers are the same, do nothing.\n    // A random force has already been applied as node repulsion\n    if (0 === directionX && 0 === directionY) {\n      continue;\n    }\n\n    // Get clipping points for both nodes\n    var point1 = findClippingPoint(source, directionX, directionY);\n    var point2 = findClippingPoint(target, -1 * directionX, -1 * directionY);\n    var lx = point2.x - point1.x;\n    var ly = point2.y - point1.y;\n    var l = Math.sqrt(lx * lx + ly * ly);\n    var force = Math.pow(edge.idealLength - l, 2) / edge.elasticity;\n    if (0 !== l) {\n      var forceX = force * lx / l;\n      var forceY = force * ly / l;\n    } else {\n      var forceX = 0;\n      var forceY = 0;\n    }\n\n    // Add this force to target and source nodes\n    if (!source.isLocked) {\n      source.offsetX += forceX;\n      source.offsetY += forceY;\n    }\n    if (!target.isLocked) {\n      target.offsetX -= forceX;\n      target.offsetY -= forceY;\n    }\n\n    // var s = 'Edge force between nodes ' + source.id + ' and ' + target.id;\n    // s += \"\\nDistance: \" + l + \" Force: (\" + forceX + \", \" + forceY + \")\";\n    // logDebug(s);\n  }\n};\n\n/**\n * @brief : Computes gravity forces for all nodes\n */\nvar calculateGravityForces = function calculateGravityForces(layoutInfo, options) {\n  if (options.gravity === 0) {\n    return;\n  }\n  var distThreshold = 1;\n\n  // var s = 'calculateGravityForces';\n  // logDebug(s);\n  for (var i = 0; i < layoutInfo.graphSet.length; i++) {\n    var graph = layoutInfo.graphSet[i];\n    var numNodes = graph.length;\n\n    // s = \"Set: \" + graph.toString();\n    // logDebug(s);\n\n    // Compute graph center\n    if (0 === i) {\n      var centerX = layoutInfo.clientHeight / 2;\n      var centerY = layoutInfo.clientWidth / 2;\n    } else {\n      // Get Parent node for this graph, and use its position as center\n      var temp = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[0]]];\n      var parent = layoutInfo.layoutNodes[layoutInfo.idToIndex[temp.parentId]];\n      var centerX = parent.positionX;\n      var centerY = parent.positionY;\n    }\n    // s = \"Center found at: \" + centerX + \", \" + centerY;\n    // logDebug(s);\n\n    // Apply force to all nodes in graph\n    for (var j = 0; j < numNodes; j++) {\n      var node = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[j]]];\n      // s = \"Node: \" + node.id;\n\n      if (node.isLocked) {\n        continue;\n      }\n      var dx = centerX - node.positionX;\n      var dy = centerY - node.positionY;\n      var d = Math.sqrt(dx * dx + dy * dy);\n      if (d > distThreshold) {\n        var fx = options.gravity * dx / d;\n        var fy = options.gravity * dy / d;\n        node.offsetX += fx;\n        node.offsetY += fy;\n        // s += \": Applied force: \" + fx + \", \" + fy;\n      }\n      // logDebug(s);\n    }\n  }\n};\n\n/**\n * @brief          : This function propagates the existing offsets from\n *                   parent nodes to its descendents.\n * @arg layoutInfo : layoutInfo Object\n * @arg cy         : cytoscape Object\n * @arg options    : Layout options\n */\nvar propagateForces = function propagateForces(layoutInfo, options) {\n  // Inline implementation of a queue, used for traversing the graph in BFS order\n  var queue = [];\n  var start = 0; // Points to the start the queue\n  var end = -1; // Points to the end of the queue\n\n  // logDebug('propagateForces');\n\n  // Start by visiting the nodes in the root graph\n  queue.push.apply(queue, layoutInfo.graphSet[0]);\n  end += layoutInfo.graphSet[0].length;\n\n  // Traverse the graph, level by level,\n  while (start <= end) {\n    // Get the node to visit and remove it from queue\n    var nodeId = queue[start++];\n    var nodeIndex = layoutInfo.idToIndex[nodeId];\n    var node = layoutInfo.layoutNodes[nodeIndex];\n    var children = node.children;\n\n    // We only need to process the node if it's compound\n    if (0 < children.length && !node.isLocked) {\n      var offX = node.offsetX;\n      var offY = node.offsetY;\n\n      // var s = \"Propagating offset from parent node : \" + node.id +\n      //   \". OffsetX: \" + offX + \". OffsetY: \" + offY;\n      // s += \"\\n Children: \" + children.toString();\n      // logDebug(s);\n\n      for (var i = 0; i < children.length; i++) {\n        var childNode = layoutInfo.layoutNodes[layoutInfo.idToIndex[children[i]]];\n        // Propagate offset\n        childNode.offsetX += offX;\n        childNode.offsetY += offY;\n        // Add children to queue to be visited\n        queue[++end] = children[i];\n      }\n\n      // Reset parent offsets\n      node.offsetX = 0;\n      node.offsetY = 0;\n    }\n  }\n};\n\n/**\n * @brief : Updates the layout model positions, based on\n *          the accumulated forces\n */\nvar updatePositions = function updatePositions(layoutInfo, options) {\n  // var s = 'Updating positions';\n  // logDebug(s);\n\n  // Reset boundaries for compound nodes\n  for (var i = 0; i < layoutInfo.nodeSize; i++) {\n    var n = layoutInfo.layoutNodes[i];\n    if (0 < n.children.length) {\n      // logDebug(\"Resetting boundaries of compound node: \" + n.id);\n      n.maxX = undefined;\n      n.minX = undefined;\n      n.maxY = undefined;\n      n.minY = undefined;\n    }\n  }\n  for (var i = 0; i < layoutInfo.nodeSize; i++) {\n    var n = layoutInfo.layoutNodes[i];\n    if (0 < n.children.length || n.isLocked) {\n      // No need to set compound or locked node position\n      // logDebug(\"Skipping position update of node: \" + n.id);\n      continue;\n    }\n    // s = \"Node: \" + n.id + \" Previous position: (\" +\n    // n.positionX + \", \" + n.positionY + \").\";\n\n    // Limit displacement in order to improve stability\n    var tempForce = limitForce(n.offsetX, n.offsetY, layoutInfo.temperature);\n    n.positionX += tempForce.x;\n    n.positionY += tempForce.y;\n    n.offsetX = 0;\n    n.offsetY = 0;\n    n.minX = n.positionX - n.width;\n    n.maxX = n.positionX + n.width;\n    n.minY = n.positionY - n.height;\n    n.maxY = n.positionY + n.height;\n    // s += \" New Position: (\" + n.positionX + \", \" + n.positionY + \").\";\n    // logDebug(s);\n\n    // Update ancestry boudaries\n    updateAncestryBoundaries(n, layoutInfo);\n  }\n\n  // Update size, position of compund nodes\n  for (var i = 0; i < layoutInfo.nodeSize; i++) {\n    var n = layoutInfo.layoutNodes[i];\n    if (0 < n.children.length && !n.isLocked) {\n      n.positionX = (n.maxX + n.minX) / 2;\n      n.positionY = (n.maxY + n.minY) / 2;\n      n.width = n.maxX - n.minX;\n      n.height = n.maxY - n.minY;\n      // s = \"Updating position, size of compound node \" + n.id;\n      // s += \"\\nPositionX: \" + n.positionX + \", PositionY: \" + n.positionY;\n      // s += \"\\nWidth: \" + n.width + \", Height: \" + n.height;\n      // logDebug(s);\n    }\n  }\n};\n\n/**\n * @brief : Limits a force (forceX, forceY) to be not\n *          greater (in modulo) than max.\n 8          Preserves force direction.\n  */\nvar limitForce = function limitForce(forceX, forceY, max) {\n  // var s = \"Limiting force: (\" + forceX + \", \" + forceY + \"). Max: \" + max;\n  var force = Math.sqrt(forceX * forceX + forceY * forceY);\n  if (force > max) {\n    var res = {\n      x: max * forceX / force,\n      y: max * forceY / force\n    };\n  } else {\n    var res = {\n      x: forceX,\n      y: forceY\n    };\n  }\n\n  // s += \".\\nResult: (\" + res.x + \", \" + res.y + \")\";\n  // logDebug(s);\n\n  return res;\n};\n\n/**\n * @brief : Function used for keeping track of compound node\n *          sizes, since they should bound all their subnodes.\n */\nvar updateAncestryBoundaries = function updateAncestryBoundaries(node, layoutInfo) {\n  // var s = \"Propagating new position/size of node \" + node.id;\n  var parentId = node.parentId;\n  if (null == parentId) {\n    // If there's no parent, we are done\n    // s += \". No parent node.\";\n    // logDebug(s);\n    return;\n  }\n\n  // Get Parent Node\n  var p = layoutInfo.layoutNodes[layoutInfo.idToIndex[parentId]];\n  var flag = false;\n\n  // MaxX\n  if (null == p.maxX || node.maxX + p.padRight > p.maxX) {\n    p.maxX = node.maxX + p.padRight;\n    flag = true;\n    // s += \"\\nNew maxX for parent node \" + p.id + \": \" + p.maxX;\n  }\n\n  // MinX\n  if (null == p.minX || node.minX - p.padLeft < p.minX) {\n    p.minX = node.minX - p.padLeft;\n    flag = true;\n    // s += \"\\nNew minX for parent node \" + p.id + \": \" + p.minX;\n  }\n\n  // MaxY\n  if (null == p.maxY || node.maxY + p.padBottom > p.maxY) {\n    p.maxY = node.maxY + p.padBottom;\n    flag = true;\n    // s += \"\\nNew maxY for parent node \" + p.id + \": \" + p.maxY;\n  }\n\n  // MinY\n  if (null == p.minY || node.minY - p.padTop < p.minY) {\n    p.minY = node.minY - p.padTop;\n    flag = true;\n    // s += \"\\nNew minY for parent node \" + p.id + \": \" + p.minY;\n  }\n\n  // If updated boundaries, propagate changes upward\n  if (flag) {\n    // logDebug(s);\n    return updateAncestryBoundaries(p, layoutInfo);\n  }\n\n  // s += \". No changes in boundaries/position of parent node \" + p.id;\n  // logDebug(s);\n  return;\n};\nvar separateComponents = function separateComponents(layoutInfo, options) {\n  var nodes = layoutInfo.layoutNodes;\n  var components = [];\n  for (var i = 0; i < nodes.length; i++) {\n    var node = nodes[i];\n    var cid = node.cmptId;\n    var component = components[cid] = components[cid] || [];\n    component.push(node);\n  }\n  var totalA = 0;\n  for (var i = 0; i < components.length; i++) {\n    var c = components[i];\n    if (!c) {\n      continue;\n    }\n    c.x1 = Infinity;\n    c.x2 = -Infinity;\n    c.y1 = Infinity;\n    c.y2 = -Infinity;\n    for (var j = 0; j < c.length; j++) {\n      var n = c[j];\n      c.x1 = Math.min(c.x1, n.positionX - n.width / 2);\n      c.x2 = Math.max(c.x2, n.positionX + n.width / 2);\n      c.y1 = Math.min(c.y1, n.positionY - n.height / 2);\n      c.y2 = Math.max(c.y2, n.positionY + n.height / 2);\n    }\n    c.w = c.x2 - c.x1;\n    c.h = c.y2 - c.y1;\n    totalA += c.w * c.h;\n  }\n  components.sort(function (c1, c2) {\n    return c2.w * c2.h - c1.w * c1.h;\n  });\n  var x = 0;\n  var y = 0;\n  var usedW = 0;\n  var rowH = 0;\n  var maxRowW = Math.sqrt(totalA) * layoutInfo.clientWidth / layoutInfo.clientHeight;\n  for (var i = 0; i < components.length; i++) {\n    var c = components[i];\n    if (!c) {\n      continue;\n    }\n    for (var j = 0; j < c.length; j++) {\n      var n = c[j];\n      if (!n.isLocked) {\n        n.positionX += x - c.x1;\n        n.positionY += y - c.y1;\n      }\n    }\n    x += c.w + options.componentSpacing;\n    usedW += c.w + options.componentSpacing;\n    rowH = Math.max(rowH, c.h);\n    if (usedW > maxRowW) {\n      y += rowH + options.componentSpacing;\n      x = 0;\n      usedW = 0;\n      rowH = 0;\n    }\n  }\n};\n\nvar defaults$3 = {\n  fit: true,\n  // whether to fit the viewport to the graph\n  padding: 30,\n  // padding used on fit\n  boundingBox: undefined,\n  // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }\n  avoidOverlap: true,\n  // prevents node overlap, may overflow boundingBox if not enough space\n  avoidOverlapPadding: 10,\n  // extra spacing around nodes when avoidOverlap: true\n  nodeDimensionsIncludeLabels: false,\n  // Excludes the label when calculating node bounding boxes for the layout algorithm\n  spacingFactor: undefined,\n  // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up\n  condense: false,\n  // uses all available space on false, uses minimal space on true\n  rows: undefined,\n  // force num of rows in the grid\n  cols: undefined,\n  // force num of columns in the grid\n  position: function position(node) {},\n  // returns { row, col } for element\n  sort: undefined,\n  // a sorting function to order the nodes; e.g. function(a, b){ return a.data('weight') - b.data('weight') }\n  animate: false,\n  // whether to transition the node positions\n  animationDuration: 500,\n  // duration of animation in ms if enabled\n  animationEasing: undefined,\n  // easing of animation if enabled\n  animateFilter: function animateFilter(node, i) {\n    return true;\n  },\n  // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts\n  ready: undefined,\n  // callback on layoutready\n  stop: undefined,\n  // callback on layoutstop\n  transform: function transform(node, position) {\n    return position;\n  } // transform a given node position. Useful for changing flow direction in discrete layouts \n};\n\nfunction GridLayout(options) {\n  this.options = extend({}, defaults$3, options);\n}\nGridLayout.prototype.run = function () {\n  var params = this.options;\n  var options = params;\n  var cy = params.cy;\n  var eles = options.eles;\n  var nodes = eles.nodes().not(':parent');\n  if (options.sort) {\n    nodes = nodes.sort(options.sort);\n  }\n  var bb = makeBoundingBox(options.boundingBox ? options.boundingBox : {\n    x1: 0,\n    y1: 0,\n    w: cy.width(),\n    h: cy.height()\n  });\n  if (bb.h === 0 || bb.w === 0) {\n    eles.nodes().layoutPositions(this, options, function (ele) {\n      return {\n        x: bb.x1,\n        y: bb.y1\n      };\n    });\n  } else {\n    // width/height * splits^2 = cells where splits is number of times to split width\n    var cells = nodes.size();\n    var splits = Math.sqrt(cells * bb.h / bb.w);\n    var rows = Math.round(splits);\n    var cols = Math.round(bb.w / bb.h * splits);\n    var small = function small(val) {\n      if (val == null) {\n        return Math.min(rows, cols);\n      } else {\n        var min = Math.min(rows, cols);\n        if (min == rows) {\n          rows = val;\n        } else {\n          cols = val;\n        }\n      }\n    };\n    var large = function large(val) {\n      if (val == null) {\n        return Math.max(rows, cols);\n      } else {\n        var max = Math.max(rows, cols);\n        if (max == rows) {\n          rows = val;\n        } else {\n          cols = val;\n        }\n      }\n    };\n    var oRows = options.rows;\n    var oCols = options.cols != null ? options.cols : options.columns;\n\n    // if rows or columns were set in options, use those values\n    if (oRows != null && oCols != null) {\n      rows = oRows;\n      cols = oCols;\n    } else if (oRows != null && oCols == null) {\n      rows = oRows;\n      cols = Math.ceil(cells / rows);\n    } else if (oRows == null && oCols != null) {\n      cols = oCols;\n      rows = Math.ceil(cells / cols);\n    }\n\n    // otherwise use the automatic values and adjust accordingly\n\n    // if rounding was up, see if we can reduce rows or columns\n    else if (cols * rows > cells) {\n      var sm = small();\n      var lg = large();\n\n      // reducing the small side takes away the most cells, so try it first\n      if ((sm - 1) * lg >= cells) {\n        small(sm - 1);\n      } else if ((lg - 1) * sm >= cells) {\n        large(lg - 1);\n      }\n    } else {\n      // if rounding was too low, add rows or columns\n      while (cols * rows < cells) {\n        var _sm = small();\n        var _lg = large();\n\n        // try to add to larger side first (adds less in multiplication)\n        if ((_lg + 1) * _sm >= cells) {\n          large(_lg + 1);\n        } else {\n          small(_sm + 1);\n        }\n      }\n    }\n    var cellWidth = bb.w / cols;\n    var cellHeight = bb.h / rows;\n    if (options.condense) {\n      cellWidth = 0;\n      cellHeight = 0;\n    }\n    if (options.avoidOverlap) {\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var pos = node._private.position;\n        if (pos.x == null || pos.y == null) {\n          // for bb\n          pos.x = 0;\n          pos.y = 0;\n        }\n        var nbb = node.layoutDimensions(options);\n        var p = options.avoidOverlapPadding;\n        var w = nbb.w + p;\n        var h = nbb.h + p;\n        cellWidth = Math.max(cellWidth, w);\n        cellHeight = Math.max(cellHeight, h);\n      }\n    }\n    var cellUsed = {}; // e.g. 'c-0-2' => true\n\n    var used = function used(row, col) {\n      return cellUsed['c-' + row + '-' + col] ? true : false;\n    };\n    var use = function use(row, col) {\n      cellUsed['c-' + row + '-' + col] = true;\n    };\n\n    // to keep track of current cell position\n    var row = 0;\n    var col = 0;\n    var moveToNextCell = function moveToNextCell() {\n      col++;\n      if (col >= cols) {\n        col = 0;\n        row++;\n      }\n    };\n\n    // get a cache of all the manual positions\n    var id2manPos = {};\n    for (var _i = 0; _i < nodes.length; _i++) {\n      var _node = nodes[_i];\n      var rcPos = options.position(_node);\n      if (rcPos && (rcPos.row !== undefined || rcPos.col !== undefined)) {\n        // must have at least row or col def'd\n        var _pos = {\n          row: rcPos.row,\n          col: rcPos.col\n        };\n        if (_pos.col === undefined) {\n          // find unused col\n          _pos.col = 0;\n          while (used(_pos.row, _pos.col)) {\n            _pos.col++;\n          }\n        } else if (_pos.row === undefined) {\n          // find unused row\n          _pos.row = 0;\n          while (used(_pos.row, _pos.col)) {\n            _pos.row++;\n          }\n        }\n        id2manPos[_node.id()] = _pos;\n        use(_pos.row, _pos.col);\n      }\n    }\n    var getPos = function getPos(element, i) {\n      var x, y;\n      if (element.locked() || element.isParent()) {\n        return false;\n      }\n\n      // see if we have a manual position set\n      var rcPos = id2manPos[element.id()];\n      if (rcPos) {\n        x = rcPos.col * cellWidth + cellWidth / 2 + bb.x1;\n        y = rcPos.row * cellHeight + cellHeight / 2 + bb.y1;\n      } else {\n        // otherwise set automatically\n\n        while (used(row, col)) {\n          moveToNextCell();\n        }\n        x = col * cellWidth + cellWidth / 2 + bb.x1;\n        y = row * cellHeight + cellHeight / 2 + bb.y1;\n        use(row, col);\n        moveToNextCell();\n      }\n      return {\n        x: x,\n        y: y\n      };\n    };\n    nodes.layoutPositions(this, options, getPos);\n  }\n  return this; // chaining\n};\n\n// default layout options\nvar defaults$2 = {\n  ready: function ready() {},\n  // on layoutready\n  stop: function stop() {} // on layoutstop\n};\n\n// constructor\n// options : object containing layout options\nfunction NullLayout(options) {\n  this.options = extend({}, defaults$2, options);\n}\n\n// runs the layout\nNullLayout.prototype.run = function () {\n  var options = this.options;\n  var eles = options.eles; // elements to consider in the layout\n  var layout = this;\n\n  // cy is automatically populated for us in the constructor\n  // (disable eslint for next line as this serves as example layout code to external developers)\n  // eslint-disable-next-line no-unused-vars\n  options.cy;\n  layout.emit('layoutstart');\n\n  // puts all nodes at (0, 0)\n  // n.b. most layouts would use layoutPositions(), instead of positions() and manual events\n  eles.nodes().positions(function () {\n    return {\n      x: 0,\n      y: 0\n    };\n  });\n\n  // trigger layoutready when each node has had its position set at least once\n  layout.one('layoutready', options.ready);\n  layout.emit('layoutready');\n\n  // trigger layoutstop when the layout stops (e.g. finishes)\n  layout.one('layoutstop', options.stop);\n  layout.emit('layoutstop');\n  return this; // chaining\n};\n\n// called on continuous layouts to stop them before they finish\nNullLayout.prototype.stop = function () {\n  return this; // chaining\n};\n\nvar defaults$1 = {\n  positions: undefined,\n  // map of (node id) => (position obj); or function(node){ return somPos; }\n  zoom: undefined,\n  // the zoom level to set (prob want fit = false if set)\n  pan: undefined,\n  // the pan level to set (prob want fit = false if set)\n  fit: true,\n  // whether to fit to viewport\n  padding: 30,\n  // padding on fit\n  spacingFactor: undefined,\n  // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up\n  animate: false,\n  // whether to transition the node positions\n  animationDuration: 500,\n  // duration of animation in ms if enabled\n  animationEasing: undefined,\n  // easing of animation if enabled\n  animateFilter: function animateFilter(node, i) {\n    return true;\n  },\n  // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts\n  ready: undefined,\n  // callback on layoutready\n  stop: undefined,\n  // callback on layoutstop\n  transform: function transform(node, position) {\n    return position;\n  } // transform a given node position. Useful for changing flow direction in discrete layouts\n};\n\nfunction PresetLayout(options) {\n  this.options = extend({}, defaults$1, options);\n}\nPresetLayout.prototype.run = function () {\n  var options = this.options;\n  var eles = options.eles;\n  var nodes = eles.nodes();\n  var posIsFn = fn$6(options.positions);\n  function getPosition(node) {\n    if (options.positions == null) {\n      return copyPosition(node.position());\n    }\n    if (posIsFn) {\n      return options.positions(node);\n    }\n    var pos = options.positions[node._private.data.id];\n    if (pos == null) {\n      return null;\n    }\n    return pos;\n  }\n  nodes.layoutPositions(this, options, function (node, i) {\n    var position = getPosition(node);\n    if (node.locked() || position == null) {\n      return false;\n    }\n    return position;\n  });\n  return this; // chaining\n};\n\nvar defaults = {\n  fit: true,\n  // whether to fit to viewport\n  padding: 30,\n  // fit padding\n  boundingBox: undefined,\n  // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }\n  animate: false,\n  // whether to transition the node positions\n  animationDuration: 500,\n  // duration of animation in ms if enabled\n  animationEasing: undefined,\n  // easing of animation if enabled\n  animateFilter: function animateFilter(node, i) {\n    return true;\n  },\n  // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts\n  ready: undefined,\n  // callback on layoutready\n  stop: undefined,\n  // callback on layoutstop\n  transform: function transform(node, position) {\n    return position;\n  } // transform a given node position. Useful for changing flow direction in discrete layouts \n};\n\nfunction RandomLayout(options) {\n  this.options = extend({}, defaults, options);\n}\nRandomLayout.prototype.run = function () {\n  var options = this.options;\n  var cy = options.cy;\n  var eles = options.eles;\n  var bb = makeBoundingBox(options.boundingBox ? options.boundingBox : {\n    x1: 0,\n    y1: 0,\n    w: cy.width(),\n    h: cy.height()\n  });\n  var getPos = function getPos(node, i) {\n    return {\n      x: bb.x1 + Math.round(Math.random() * bb.w),\n      y: bb.y1 + Math.round(Math.random() * bb.h)\n    };\n  };\n  eles.nodes().layoutPositions(this, options, getPos);\n  return this; // chaining\n};\n\nvar layout = [{\n  name: 'breadthfirst',\n  impl: BreadthFirstLayout\n}, {\n  name: 'circle',\n  impl: CircleLayout\n}, {\n  name: 'concentric',\n  impl: ConcentricLayout\n}, {\n  name: 'cose',\n  impl: CoseLayout\n}, {\n  name: 'grid',\n  impl: GridLayout\n}, {\n  name: 'null',\n  impl: NullLayout\n}, {\n  name: 'preset',\n  impl: PresetLayout\n}, {\n  name: 'random',\n  impl: RandomLayout\n}];\n\nfunction NullRenderer(options) {\n  this.options = options;\n  this.notifications = 0; // for testing\n}\n\nvar noop = function noop() {};\nvar throwImgErr = function throwImgErr() {\n  throw new Error('A headless instance can not render images');\n};\nNullRenderer.prototype = {\n  recalculateRenderedStyle: noop,\n  notify: function notify() {\n    this.notifications++;\n  },\n  init: noop,\n  isHeadless: function isHeadless() {\n    return true;\n  },\n  png: throwImgErr,\n  jpg: throwImgErr\n};\n\nvar BRp$f = {};\nBRp$f.arrowShapeWidth = 0.3;\nBRp$f.registerArrowShapes = function () {\n  var arrowShapes = this.arrowShapes = {};\n  var renderer = this;\n\n  // Contract for arrow shapes:\n  // 0, 0 is arrow tip\n  // (0, 1) is direction towards node\n  // (1, 0) is right\n  //\n  // functional api:\n  // collide: check x, y in shape\n  // roughCollide: called before collide, no false negatives\n  // draw: draw\n  // spacing: dist(arrowTip, nodeBoundary)\n  // gap: dist(edgeTip, nodeBoundary), edgeTip may != arrowTip\n\n  var bbCollide = function bbCollide(x, y, size, angle, translation, edgeWidth, padding) {\n    var x1 = translation.x - size / 2 - padding;\n    var x2 = translation.x + size / 2 + padding;\n    var y1 = translation.y - size / 2 - padding;\n    var y2 = translation.y + size / 2 + padding;\n    var inside = x1 <= x && x <= x2 && y1 <= y && y <= y2;\n    return inside;\n  };\n  var transform = function transform(x, y, size, angle, translation) {\n    var xRotated = x * Math.cos(angle) - y * Math.sin(angle);\n    var yRotated = x * Math.sin(angle) + y * Math.cos(angle);\n    var xScaled = xRotated * size;\n    var yScaled = yRotated * size;\n    var xTranslated = xScaled + translation.x;\n    var yTranslated = yScaled + translation.y;\n    return {\n      x: xTranslated,\n      y: yTranslated\n    };\n  };\n  var transformPoints = function transformPoints(pts, size, angle, translation) {\n    var retPts = [];\n    for (var i = 0; i < pts.length; i += 2) {\n      var x = pts[i];\n      var y = pts[i + 1];\n      retPts.push(transform(x, y, size, angle, translation));\n    }\n    return retPts;\n  };\n  var pointsToArr = function pointsToArr(pts) {\n    var ret = [];\n    for (var i = 0; i < pts.length; i++) {\n      var p = pts[i];\n      ret.push(p.x, p.y);\n    }\n    return ret;\n  };\n  var standardGap = function standardGap(edge) {\n    return edge.pstyle('width').pfValue * edge.pstyle('arrow-scale').pfValue * 2;\n  };\n  var defineArrowShape = function defineArrowShape(name, defn) {\n    if (string(defn)) {\n      defn = arrowShapes[defn];\n    }\n    arrowShapes[name] = extend({\n      name: name,\n      points: [-0.15, -0.3, 0.15, -0.3, 0.15, 0.3, -0.15, 0.3],\n      collide: function collide(x, y, size, angle, translation, padding) {\n        var points = pointsToArr(transformPoints(this.points, size + 2 * padding, angle, translation));\n        var inside = pointInsidePolygonPoints(x, y, points);\n        return inside;\n      },\n      roughCollide: bbCollide,\n      draw: function draw(context, size, angle, translation) {\n        var points = transformPoints(this.points, size, angle, translation);\n        renderer.arrowShapeImpl('polygon')(context, points);\n      },\n      spacing: function spacing(edge) {\n        return 0;\n      },\n      gap: standardGap\n    }, defn);\n  };\n  defineArrowShape('none', {\n    collide: falsify,\n    roughCollide: falsify,\n    draw: noop$1,\n    spacing: zeroify,\n    gap: zeroify\n  });\n  defineArrowShape('triangle', {\n    points: [-0.15, -0.3, 0, 0, 0.15, -0.3]\n  });\n  defineArrowShape('arrow', 'triangle');\n  defineArrowShape('triangle-backcurve', {\n    points: arrowShapes['triangle'].points,\n    controlPoint: [0, -0.15],\n    roughCollide: bbCollide,\n    draw: function draw(context, size, angle, translation, edgeWidth) {\n      var ptsTrans = transformPoints(this.points, size, angle, translation);\n      var ctrlPt = this.controlPoint;\n      var ctrlPtTrans = transform(ctrlPt[0], ctrlPt[1], size, angle, translation);\n      renderer.arrowShapeImpl(this.name)(context, ptsTrans, ctrlPtTrans);\n    },\n    gap: function gap(edge) {\n      return standardGap(edge) * 0.8;\n    }\n  });\n  defineArrowShape('triangle-tee', {\n    points: [0, 0, 0.15, -0.3, -0.15, -0.3, 0, 0],\n    pointsTee: [-0.15, -0.4, -0.15, -0.5, 0.15, -0.5, 0.15, -0.4],\n    collide: function collide(x, y, size, angle, translation, edgeWidth, padding) {\n      var triPts = pointsToArr(transformPoints(this.points, size + 2 * padding, angle, translation));\n      var teePts = pointsToArr(transformPoints(this.pointsTee, size + 2 * padding, angle, translation));\n      var inside = pointInsidePolygonPoints(x, y, triPts) || pointInsidePolygonPoints(x, y, teePts);\n      return inside;\n    },\n    draw: function draw(context, size, angle, translation, edgeWidth) {\n      var triPts = transformPoints(this.points, size, angle, translation);\n      var teePts = transformPoints(this.pointsTee, size, angle, translation);\n      renderer.arrowShapeImpl(this.name)(context, triPts, teePts);\n    }\n  });\n  defineArrowShape('circle-triangle', {\n    radius: 0.15,\n    pointsTr: [0, -0.15, 0.15, -0.45, -0.15, -0.45, 0, -0.15],\n    collide: function collide(x, y, size, angle, translation, edgeWidth, padding) {\n      var t = translation;\n      var circleInside = Math.pow(t.x - x, 2) + Math.pow(t.y - y, 2) <= Math.pow((size + 2 * padding) * this.radius, 2);\n      var triPts = pointsToArr(transformPoints(this.points, size + 2 * padding, angle, translation));\n      return pointInsidePolygonPoints(x, y, triPts) || circleInside;\n    },\n    draw: function draw(context, size, angle, translation, edgeWidth) {\n      var triPts = transformPoints(this.pointsTr, size, angle, translation);\n      renderer.arrowShapeImpl(this.name)(context, triPts, translation.x, translation.y, this.radius * size);\n    },\n    spacing: function spacing(edge) {\n      return renderer.getArrowWidth(edge.pstyle('width').pfValue, edge.pstyle('arrow-scale').value) * this.radius;\n    }\n  });\n  defineArrowShape('triangle-cross', {\n    points: [0, 0, 0.15, -0.3, -0.15, -0.3, 0, 0],\n    baseCrossLinePts: [-0.15, -0.4,\n    // first half of the rectangle\n    -0.15, -0.4, 0.15, -0.4,\n    // second half of the rectangle\n    0.15, -0.4],\n    crossLinePts: function crossLinePts(size, edgeWidth) {\n      // shift points so that the distance between the cross points matches edge width\n      var p = this.baseCrossLinePts.slice();\n      var shiftFactor = edgeWidth / size;\n      var y0 = 3;\n      var y1 = 5;\n      p[y0] = p[y0] - shiftFactor;\n      p[y1] = p[y1] - shiftFactor;\n      return p;\n    },\n    collide: function collide(x, y, size, angle, translation, edgeWidth, padding) {\n      var triPts = pointsToArr(transformPoints(this.points, size + 2 * padding, angle, translation));\n      var teePts = pointsToArr(transformPoints(this.crossLinePts(size, edgeWidth), size + 2 * padding, angle, translation));\n      var inside = pointInsidePolygonPoints(x, y, triPts) || pointInsidePolygonPoints(x, y, teePts);\n      return inside;\n    },\n    draw: function draw(context, size, angle, translation, edgeWidth) {\n      var triPts = transformPoints(this.points, size, angle, translation);\n      var crossLinePts = transformPoints(this.crossLinePts(size, edgeWidth), size, angle, translation);\n      renderer.arrowShapeImpl(this.name)(context, triPts, crossLinePts);\n    }\n  });\n  defineArrowShape('vee', {\n    points: [-0.15, -0.3, 0, 0, 0.15, -0.3, 0, -0.15],\n    gap: function gap(edge) {\n      return standardGap(edge) * 0.525;\n    }\n  });\n  defineArrowShape('circle', {\n    radius: 0.15,\n    collide: function collide(x, y, size, angle, translation, edgeWidth, padding) {\n      var t = translation;\n      var inside = Math.pow(t.x - x, 2) + Math.pow(t.y - y, 2) <= Math.pow((size + 2 * padding) * this.radius, 2);\n      return inside;\n    },\n    draw: function draw(context, size, angle, translation, edgeWidth) {\n      renderer.arrowShapeImpl(this.name)(context, translation.x, translation.y, this.radius * size);\n    },\n    spacing: function spacing(edge) {\n      return renderer.getArrowWidth(edge.pstyle('width').pfValue, edge.pstyle('arrow-scale').value) * this.radius;\n    }\n  });\n  defineArrowShape('tee', {\n    points: [-0.15, 0, -0.15, -0.1, 0.15, -0.1, 0.15, 0],\n    spacing: function spacing(edge) {\n      return 1;\n    },\n    gap: function gap(edge) {\n      return 1;\n    }\n  });\n  defineArrowShape('square', {\n    points: [-0.15, 0.00, 0.15, 0.00, 0.15, -0.3, -0.15, -0.3]\n  });\n  defineArrowShape('diamond', {\n    points: [-0.15, -0.15, 0, -0.3, 0.15, -0.15, 0, 0],\n    gap: function gap(edge) {\n      return edge.pstyle('width').pfValue * edge.pstyle('arrow-scale').value;\n    }\n  });\n  defineArrowShape('chevron', {\n    points: [0, 0, -0.15, -0.15, -0.1, -0.2, 0, -0.1, 0.1, -0.2, 0.15, -0.15],\n    gap: function gap(edge) {\n      return 0.95 * edge.pstyle('width').pfValue * edge.pstyle('arrow-scale').value;\n    }\n  });\n};\n\nvar BRp$e = {};\n\n// Project mouse\nBRp$e.projectIntoViewport = function (clientX, clientY) {\n  var cy = this.cy;\n  var offsets = this.findContainerClientCoords();\n  var offsetLeft = offsets[0];\n  var offsetTop = offsets[1];\n  var scale = offsets[4];\n  var pan = cy.pan();\n  var zoom = cy.zoom();\n  var x = ((clientX - offsetLeft) / scale - pan.x) / zoom;\n  var y = ((clientY - offsetTop) / scale - pan.y) / zoom;\n  return [x, y];\n};\nBRp$e.findContainerClientCoords = function () {\n  if (this.containerBB) {\n    return this.containerBB;\n  }\n  var container = this.container;\n  var rect = container.getBoundingClientRect();\n  var style = this.cy.window().getComputedStyle(container);\n  var styleValue = function styleValue(name) {\n    return parseFloat(style.getPropertyValue(name));\n  };\n  var padding = {\n    left: styleValue('padding-left'),\n    right: styleValue('padding-right'),\n    top: styleValue('padding-top'),\n    bottom: styleValue('padding-bottom')\n  };\n  var border = {\n    left: styleValue('border-left-width'),\n    right: styleValue('border-right-width'),\n    top: styleValue('border-top-width'),\n    bottom: styleValue('border-bottom-width')\n  };\n  var clientWidth = container.clientWidth;\n  var clientHeight = container.clientHeight;\n  var paddingHor = padding.left + padding.right;\n  var paddingVer = padding.top + padding.bottom;\n  var borderHor = border.left + border.right;\n  var scale = rect.width / (clientWidth + borderHor);\n  var unscaledW = clientWidth - paddingHor;\n  var unscaledH = clientHeight - paddingVer;\n  var left = rect.left + padding.left + border.left;\n  var top = rect.top + padding.top + border.top;\n  return this.containerBB = [left, top, unscaledW, unscaledH, scale];\n};\nBRp$e.invalidateContainerClientCoordsCache = function () {\n  this.containerBB = null;\n};\nBRp$e.findNearestElement = function (x, y, interactiveElementsOnly, isTouch) {\n  return this.findNearestElements(x, y, interactiveElementsOnly, isTouch)[0];\n};\nBRp$e.findNearestElements = function (x, y, interactiveElementsOnly, isTouch) {\n  var self = this;\n  var r = this;\n  var eles = r.getCachedZSortedEles();\n  var near = []; // 1 node max, 1 edge max\n  var zoom = r.cy.zoom();\n  var hasCompounds = r.cy.hasCompoundNodes();\n  var edgeThreshold = (isTouch ? 24 : 8) / zoom;\n  var nodeThreshold = (isTouch ? 8 : 2) / zoom;\n  var labelThreshold = (isTouch ? 8 : 2) / zoom;\n  var minSqDist = Infinity;\n  var nearEdge;\n  var nearNode;\n  if (interactiveElementsOnly) {\n    eles = eles.interactive;\n  }\n  function addEle(ele, sqDist) {\n    if (ele.isNode()) {\n      if (nearNode) {\n        return; // can't replace node\n      } else {\n        nearNode = ele;\n        near.push(ele);\n      }\n    }\n    if (ele.isEdge() && (sqDist == null || sqDist < minSqDist)) {\n      if (nearEdge) {\n        // then replace existing edge\n        // can replace only if same z-index\n        if (nearEdge.pstyle('z-compound-depth').value === ele.pstyle('z-compound-depth').value && nearEdge.pstyle('z-compound-depth').value === ele.pstyle('z-compound-depth').value) {\n          for (var i = 0; i < near.length; i++) {\n            if (near[i].isEdge()) {\n              near[i] = ele;\n              nearEdge = ele;\n              minSqDist = sqDist != null ? sqDist : minSqDist;\n              break;\n            }\n          }\n        }\n      } else {\n        near.push(ele);\n        nearEdge = ele;\n        minSqDist = sqDist != null ? sqDist : minSqDist;\n      }\n    }\n  }\n  function checkNode(node) {\n    var width = node.outerWidth() + 2 * nodeThreshold;\n    var height = node.outerHeight() + 2 * nodeThreshold;\n    var hw = width / 2;\n    var hh = height / 2;\n    var pos = node.position();\n    var cornerRadius = node.pstyle('corner-radius').value === 'auto' ? 'auto' : node.pstyle('corner-radius').pfValue;\n    var rs = node._private.rscratch;\n    if (pos.x - hw <= x && x <= pos.x + hw // bb check x\n    && pos.y - hh <= y && y <= pos.y + hh // bb check y\n    ) {\n      var shape = r.nodeShapes[self.getNodeShape(node)];\n      if (shape.checkPoint(x, y, 0, width, height, pos.x, pos.y, cornerRadius, rs)) {\n        addEle(node, 0);\n        return true;\n      }\n    }\n  }\n  function checkEdge(edge) {\n    var _p = edge._private;\n    var rs = _p.rscratch;\n    var styleWidth = edge.pstyle('width').pfValue;\n    var scale = edge.pstyle('arrow-scale').value;\n    var width = styleWidth / 2 + edgeThreshold; // more like a distance radius from centre\n    var widthSq = width * width;\n    var width2 = width * 2;\n    var src = _p.source;\n    var tgt = _p.target;\n    var sqDist;\n    if (rs.edgeType === 'segments' || rs.edgeType === 'straight' || rs.edgeType === 'haystack') {\n      var pts = rs.allpts;\n      for (var i = 0; i + 3 < pts.length; i += 2) {\n        if (inLineVicinity(x, y, pts[i], pts[i + 1], pts[i + 2], pts[i + 3], width2) && widthSq > (sqDist = sqdistToFiniteLine(x, y, pts[i], pts[i + 1], pts[i + 2], pts[i + 3]))) {\n          addEle(edge, sqDist);\n          return true;\n        }\n      }\n    } else if (rs.edgeType === 'bezier' || rs.edgeType === 'multibezier' || rs.edgeType === 'self' || rs.edgeType === 'compound') {\n      var pts = rs.allpts;\n      for (var i = 0; i + 5 < rs.allpts.length; i += 4) {\n        if (inBezierVicinity(x, y, pts[i], pts[i + 1], pts[i + 2], pts[i + 3], pts[i + 4], pts[i + 5], width2) && widthSq > (sqDist = sqdistToQuadraticBezier(x, y, pts[i], pts[i + 1], pts[i + 2], pts[i + 3], pts[i + 4], pts[i + 5]))) {\n          addEle(edge, sqDist);\n          return true;\n        }\n      }\n    }\n\n    // if we're close to the edge but didn't hit it, maybe we hit its arrows\n\n    var src = src || _p.source;\n    var tgt = tgt || _p.target;\n    var arSize = self.getArrowWidth(styleWidth, scale);\n    var arrows = [{\n      name: 'source',\n      x: rs.arrowStartX,\n      y: rs.arrowStartY,\n      angle: rs.srcArrowAngle\n    }, {\n      name: 'target',\n      x: rs.arrowEndX,\n      y: rs.arrowEndY,\n      angle: rs.tgtArrowAngle\n    }, {\n      name: 'mid-source',\n      x: rs.midX,\n      y: rs.midY,\n      angle: rs.midsrcArrowAngle\n    }, {\n      name: 'mid-target',\n      x: rs.midX,\n      y: rs.midY,\n      angle: rs.midtgtArrowAngle\n    }];\n    for (var i = 0; i < arrows.length; i++) {\n      var ar = arrows[i];\n      var shape = r.arrowShapes[edge.pstyle(ar.name + '-arrow-shape').value];\n      var edgeWidth = edge.pstyle('width').pfValue;\n      if (shape.roughCollide(x, y, arSize, ar.angle, {\n        x: ar.x,\n        y: ar.y\n      }, edgeWidth, edgeThreshold) && shape.collide(x, y, arSize, ar.angle, {\n        x: ar.x,\n        y: ar.y\n      }, edgeWidth, edgeThreshold)) {\n        addEle(edge);\n        return true;\n      }\n    }\n\n    // for compound graphs, hitting edge may actually want a connected node instead (b/c edge may have greater z-index precedence)\n    if (hasCompounds && near.length > 0) {\n      checkNode(src);\n      checkNode(tgt);\n    }\n  }\n  function preprop(obj, name, pre) {\n    return getPrefixedProperty(obj, name, pre);\n  }\n  function checkLabel(ele, prefix) {\n    var _p = ele._private;\n    var th = labelThreshold;\n    var prefixDash;\n    if (prefix) {\n      prefixDash = prefix + '-';\n    } else {\n      prefixDash = '';\n    }\n    ele.boundingBox();\n    var bb = _p.labelBounds[prefix || 'main'];\n    var text = ele.pstyle(prefixDash + 'label').value;\n    var eventsEnabled = ele.pstyle('text-events').strValue === 'yes';\n    if (!eventsEnabled || !text) {\n      return;\n    }\n    var lx = preprop(_p.rscratch, 'labelX', prefix);\n    var ly = preprop(_p.rscratch, 'labelY', prefix);\n    var theta = preprop(_p.rscratch, 'labelAngle', prefix);\n    var ox = ele.pstyle(prefixDash + 'text-margin-x').pfValue;\n    var oy = ele.pstyle(prefixDash + 'text-margin-y').pfValue;\n    var lx1 = bb.x1 - th - ox; // (-ox, -oy) as bb already includes margin\n    var lx2 = bb.x2 + th - ox; // and rotation is about (lx, ly)\n    var ly1 = bb.y1 - th - oy;\n    var ly2 = bb.y2 + th - oy;\n    if (theta) {\n      var cos = Math.cos(theta);\n      var sin = Math.sin(theta);\n      var rotate = function rotate(x, y) {\n        x = x - lx;\n        y = y - ly;\n        return {\n          x: x * cos - y * sin + lx,\n          y: x * sin + y * cos + ly\n        };\n      };\n      var px1y1 = rotate(lx1, ly1);\n      var px1y2 = rotate(lx1, ly2);\n      var px2y1 = rotate(lx2, ly1);\n      var px2y2 = rotate(lx2, ly2);\n      var points = [\n      // with the margin added after the rotation is applied\n      px1y1.x + ox, px1y1.y + oy, px2y1.x + ox, px2y1.y + oy, px2y2.x + ox, px2y2.y + oy, px1y2.x + ox, px1y2.y + oy];\n      if (pointInsidePolygonPoints(x, y, points)) {\n        addEle(ele);\n        return true;\n      }\n    } else {\n      // do a cheaper bb check\n      if (inBoundingBox(bb, x, y)) {\n        addEle(ele);\n        return true;\n      }\n    }\n  }\n  for (var i = eles.length - 1; i >= 0; i--) {\n    // reverse order for precedence\n    var ele = eles[i];\n    if (ele.isNode()) {\n      checkNode(ele) || checkLabel(ele);\n    } else {\n      // then edge\n      checkEdge(ele) || checkLabel(ele) || checkLabel(ele, 'source') || checkLabel(ele, 'target');\n    }\n  }\n  return near;\n};\n\n// 'Give me everything from this box'\nBRp$e.getAllInBox = function (x1, y1, x2, y2) {\n  var eles = this.getCachedZSortedEles().interactive;\n  var box = [];\n  var x1c = Math.min(x1, x2);\n  var x2c = Math.max(x1, x2);\n  var y1c = Math.min(y1, y2);\n  var y2c = Math.max(y1, y2);\n  x1 = x1c;\n  x2 = x2c;\n  y1 = y1c;\n  y2 = y2c;\n  var boxBb = makeBoundingBox({\n    x1: x1,\n    y1: y1,\n    x2: x2,\n    y2: y2\n  });\n  for (var e = 0; e < eles.length; e++) {\n    var ele = eles[e];\n    if (ele.isNode()) {\n      var node = ele;\n      var nodeBb = node.boundingBox({\n        includeNodes: true,\n        includeEdges: false,\n        includeLabels: false\n      });\n      if (boundingBoxesIntersect(boxBb, nodeBb) && !boundingBoxInBoundingBox(nodeBb, boxBb)) {\n        box.push(node);\n      }\n    } else {\n      var edge = ele;\n      var _p = edge._private;\n      var rs = _p.rscratch;\n      if (rs.startX != null && rs.startY != null && !inBoundingBox(boxBb, rs.startX, rs.startY)) {\n        continue;\n      }\n      if (rs.endX != null && rs.endY != null && !inBoundingBox(boxBb, rs.endX, rs.endY)) {\n        continue;\n      }\n      if (rs.edgeType === 'bezier' || rs.edgeType === 'multibezier' || rs.edgeType === 'self' || rs.edgeType === 'compound' || rs.edgeType === 'segments' || rs.edgeType === 'haystack') {\n        var pts = _p.rstyle.bezierPts || _p.rstyle.linePts || _p.rstyle.haystackPts;\n        var allInside = true;\n        for (var i = 0; i < pts.length; i++) {\n          if (!pointInBoundingBox(boxBb, pts[i])) {\n            allInside = false;\n            break;\n          }\n        }\n        if (allInside) {\n          box.push(edge);\n        }\n      } else if (rs.edgeType === 'haystack' || rs.edgeType === 'straight') {\n        box.push(edge);\n      }\n    }\n  }\n  return box;\n};\n\nvar BRp$d = {};\nBRp$d.calculateArrowAngles = function (edge) {\n  var rs = edge._private.rscratch;\n  var isHaystack = rs.edgeType === 'haystack';\n  var isBezier = rs.edgeType === 'bezier';\n  var isMultibezier = rs.edgeType === 'multibezier';\n  var isSegments = rs.edgeType === 'segments';\n  var isCompound = rs.edgeType === 'compound';\n  var isSelf = rs.edgeType === 'self';\n\n  // Displacement gives direction for arrowhead orientation\n  var dispX, dispY;\n  var startX, startY, endX, endY, midX, midY;\n  if (isHaystack) {\n    startX = rs.haystackPts[0];\n    startY = rs.haystackPts[1];\n    endX = rs.haystackPts[2];\n    endY = rs.haystackPts[3];\n  } else {\n    startX = rs.arrowStartX;\n    startY = rs.arrowStartY;\n    endX = rs.arrowEndX;\n    endY = rs.arrowEndY;\n  }\n  midX = rs.midX;\n  midY = rs.midY;\n\n  // source\n  //\n\n  if (isSegments) {\n    dispX = startX - rs.segpts[0];\n    dispY = startY - rs.segpts[1];\n  } else if (isMultibezier || isCompound || isSelf || isBezier) {\n    var pts = rs.allpts;\n    var bX = qbezierAt(pts[0], pts[2], pts[4], 0.1);\n    var bY = qbezierAt(pts[1], pts[3], pts[5], 0.1);\n    dispX = startX - bX;\n    dispY = startY - bY;\n  } else {\n    dispX = startX - midX;\n    dispY = startY - midY;\n  }\n  rs.srcArrowAngle = getAngleFromDisp(dispX, dispY);\n\n  // mid target\n  //\n\n  var midX = rs.midX;\n  var midY = rs.midY;\n  if (isHaystack) {\n    midX = (startX + endX) / 2;\n    midY = (startY + endY) / 2;\n  }\n  dispX = endX - startX;\n  dispY = endY - startY;\n  if (isSegments) {\n    var pts = rs.allpts;\n    if (pts.length / 2 % 2 === 0) {\n      var i2 = pts.length / 2;\n      var i1 = i2 - 2;\n      dispX = pts[i2] - pts[i1];\n      dispY = pts[i2 + 1] - pts[i1 + 1];\n    } else if (rs.isRound) {\n      dispX = rs.midVector[1];\n      dispY = -rs.midVector[0];\n    } else {\n      var i2 = pts.length / 2 - 1;\n      var i1 = i2 - 2;\n      dispX = pts[i2] - pts[i1];\n      dispY = pts[i2 + 1] - pts[i1 + 1];\n    }\n  } else if (isMultibezier || isCompound || isSelf) {\n    var pts = rs.allpts;\n    var cpts = rs.ctrlpts;\n    var bp0x, bp0y;\n    var bp1x, bp1y;\n    if (cpts.length / 2 % 2 === 0) {\n      var p0 = pts.length / 2 - 1; // startpt\n      var ic = p0 + 2;\n      var p1 = ic + 2;\n      bp0x = qbezierAt(pts[p0], pts[ic], pts[p1], 0.0);\n      bp0y = qbezierAt(pts[p0 + 1], pts[ic + 1], pts[p1 + 1], 0.0);\n      bp1x = qbezierAt(pts[p0], pts[ic], pts[p1], 0.0001);\n      bp1y = qbezierAt(pts[p0 + 1], pts[ic + 1], pts[p1 + 1], 0.0001);\n    } else {\n      var ic = pts.length / 2 - 1; // ctrpt\n      var p0 = ic - 2; // startpt\n      var p1 = ic + 2; // endpt\n\n      bp0x = qbezierAt(pts[p0], pts[ic], pts[p1], 0.4999);\n      bp0y = qbezierAt(pts[p0 + 1], pts[ic + 1], pts[p1 + 1], 0.4999);\n      bp1x = qbezierAt(pts[p0], pts[ic], pts[p1], 0.5);\n      bp1y = qbezierAt(pts[p0 + 1], pts[ic + 1], pts[p1 + 1], 0.5);\n    }\n    dispX = bp1x - bp0x;\n    dispY = bp1y - bp0y;\n  }\n  rs.midtgtArrowAngle = getAngleFromDisp(dispX, dispY);\n  rs.midDispX = dispX;\n  rs.midDispY = dispY;\n\n  // mid source\n  //\n\n  dispX *= -1;\n  dispY *= -1;\n  if (isSegments) {\n    var pts = rs.allpts;\n    if (pts.length / 2 % 2 === 0) ; else if (!rs.isRound) {\n      var i2 = pts.length / 2 - 1;\n      var i3 = i2 + 2;\n      dispX = -(pts[i3] - pts[i2]);\n      dispY = -(pts[i3 + 1] - pts[i2 + 1]);\n    }\n  }\n  rs.midsrcArrowAngle = getAngleFromDisp(dispX, dispY);\n\n  // target\n  //\n\n  if (isSegments) {\n    dispX = endX - rs.segpts[rs.segpts.length - 2];\n    dispY = endY - rs.segpts[rs.segpts.length - 1];\n  } else if (isMultibezier || isCompound || isSelf || isBezier) {\n    var pts = rs.allpts;\n    var l = pts.length;\n    var bX = qbezierAt(pts[l - 6], pts[l - 4], pts[l - 2], 0.9);\n    var bY = qbezierAt(pts[l - 5], pts[l - 3], pts[l - 1], 0.9);\n    dispX = endX - bX;\n    dispY = endY - bY;\n  } else {\n    dispX = endX - midX;\n    dispY = endY - midY;\n  }\n  rs.tgtArrowAngle = getAngleFromDisp(dispX, dispY);\n};\nBRp$d.getArrowWidth = BRp$d.getArrowHeight = function (edgeWidth, scale) {\n  var cache = this.arrowWidthCache = this.arrowWidthCache || {};\n  var cachedVal = cache[edgeWidth + ', ' + scale];\n  if (cachedVal) {\n    return cachedVal;\n  }\n  cachedVal = Math.max(Math.pow(edgeWidth * 13.37, 0.9), 29) * scale;\n  cache[edgeWidth + ', ' + scale] = cachedVal;\n  return cachedVal;\n};\n\n/**\n * Explained by Blindman67 at https://stackoverflow.com/a/44856925/11028828\n */\n\n// Declare reused variable to avoid reallocating variables every time the function is called\nvar x,\n  y,\n  v1 = {},\n  v2 = {},\n  sinA,\n  sinA90,\n  radDirection,\n  drawDirection,\n  angle,\n  halfAngle,\n  cRadius,\n  lenOut,\n  radius,\n  limit;\nvar startX, startY, stopX, stopY;\nvar lastPoint;\n\n// convert 2 points into vector form, polar form, and normalised\nvar asVec = function asVec(p, pp, v) {\n  v.x = pp.x - p.x;\n  v.y = pp.y - p.y;\n  v.len = Math.sqrt(v.x * v.x + v.y * v.y);\n  v.nx = v.x / v.len;\n  v.ny = v.y / v.len;\n  v.ang = Math.atan2(v.ny, v.nx);\n};\nvar invertVec = function invertVec(originalV, invertedV) {\n  invertedV.x = originalV.x * -1;\n  invertedV.y = originalV.y * -1;\n  invertedV.nx = originalV.nx * -1;\n  invertedV.ny = originalV.ny * -1;\n  invertedV.ang = originalV.ang > 0 ? -(Math.PI - originalV.ang) : Math.PI + originalV.ang;\n};\nvar calcCornerArc = function calcCornerArc(previousPoint, currentPoint, nextPoint, radiusMax, isArcRadius) {\n  //-----------------------------------------\n  // Part 1\n  previousPoint !== lastPoint ? asVec(currentPoint, previousPoint, v1) : invertVec(v2, v1); // Avoid recalculating vec if it is the invert of the last one calculated\n  asVec(currentPoint, nextPoint, v2);\n  sinA = v1.nx * v2.ny - v1.ny * v2.nx;\n  sinA90 = v1.nx * v2.nx - v1.ny * -v2.ny;\n  angle = Math.asin(Math.max(-1, Math.min(1, sinA)));\n  if (Math.abs(angle) < 1e-6) {\n    x = currentPoint.x;\n    y = currentPoint.y;\n    cRadius = radius = 0;\n    return;\n  }\n  //-----------------------------------------\n  radDirection = 1;\n  drawDirection = false;\n  if (sinA90 < 0) {\n    if (angle < 0) {\n      angle = Math.PI + angle;\n    } else {\n      angle = Math.PI - angle;\n      radDirection = -1;\n      drawDirection = true;\n    }\n  } else {\n    if (angle > 0) {\n      radDirection = -1;\n      drawDirection = true;\n    }\n  }\n  if (currentPoint.radius !== undefined) {\n    radius = currentPoint.radius;\n  } else {\n    radius = radiusMax;\n  }\n  //-----------------------------------------\n  // Part 2\n  halfAngle = angle / 2;\n  //-----------------------------------------\n\n  limit = Math.min(v1.len / 2, v2.len / 2);\n  if (isArcRadius) {\n    //-----------------------------------------\n    // Part 3\n    lenOut = Math.abs(Math.cos(halfAngle) * radius / Math.sin(halfAngle));\n\n    //-----------------------------------------\n    // Special part A\n    if (lenOut > limit) {\n      lenOut = limit;\n      cRadius = Math.abs(lenOut * Math.sin(halfAngle) / Math.cos(halfAngle));\n    } else {\n      cRadius = radius;\n    }\n  } else {\n    lenOut = Math.min(limit, radius);\n    cRadius = Math.abs(lenOut * Math.sin(halfAngle) / Math.cos(halfAngle));\n  }\n  //-----------------------------------------\n\n  //-----------------------------------------\n  // Part 4\n  stopX = currentPoint.x + v2.nx * lenOut;\n  stopY = currentPoint.y + v2.ny * lenOut;\n  //-----------------------------------------\n  // Part 5\n  x = stopX - v2.ny * cRadius * radDirection;\n  y = stopY + v2.nx * cRadius * radDirection;\n  //-----------------------------------------\n  // Additional Part : calculate start point E\n  startX = currentPoint.x + v1.nx * lenOut;\n  startY = currentPoint.y + v1.ny * lenOut;\n\n  // Save last point to avoid recalculating vector when not needed\n  lastPoint = currentPoint;\n};\n\n/**\n * Draw corner provided by {@link getRoundCorner}\n *\n * @param ctx :CanvasRenderingContext2D\n * @param roundCorner {{cx:number, cy:number, radius:number, endAngle: number, startAngle: number, counterClockwise: boolean}}\n */\nfunction drawPreparedRoundCorner(ctx, roundCorner) {\n  if (roundCorner.radius === 0) ctx.lineTo(roundCorner.cx, roundCorner.cy);else ctx.arc(roundCorner.cx, roundCorner.cy, roundCorner.radius, roundCorner.startAngle, roundCorner.endAngle, roundCorner.counterClockwise);\n}\n\n/**\n * Get round corner from a point and its previous and next neighbours in a path\n *\n * @param previousPoint {{x: number, y:number, radius: number?}}\n * @param currentPoint {{x: number, y:number, radius: number?}}\n * @param nextPoint {{x: number, y:number, radius: number?}}\n * @param radiusMax :number\n * @param isArcRadius :boolean\n * @return {{\n * cx:number, cy:number, radius:number,\n * startX:number, startY:number,\n * stopX:number, stopY: number,\n * endAngle: number, startAngle: number, counterClockwise: boolean\n * }}\n */\nfunction getRoundCorner(previousPoint, currentPoint, nextPoint, radiusMax) {\n  var isArcRadius = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n  if (radiusMax === 0 || currentPoint.radius === 0) return {\n    cx: currentPoint.x,\n    cy: currentPoint.y,\n    radius: 0,\n    startX: currentPoint.x,\n    startY: currentPoint.y,\n    stopX: currentPoint.x,\n    stopY: currentPoint.y,\n    startAngle: undefined,\n    endAngle: undefined,\n    counterClockwise: undefined\n  };\n  calcCornerArc(previousPoint, currentPoint, nextPoint, radiusMax, isArcRadius);\n  return {\n    cx: x,\n    cy: y,\n    radius: cRadius,\n    startX: startX,\n    startY: startY,\n    stopX: stopX,\n    stopY: stopY,\n    startAngle: v1.ang + Math.PI / 2 * radDirection,\n    endAngle: v2.ang - Math.PI / 2 * radDirection,\n    counterClockwise: drawDirection\n  };\n}\n\nvar BRp$c = {};\nBRp$c.findMidptPtsEtc = function (edge, pairInfo) {\n  var posPts = pairInfo.posPts,\n    intersectionPts = pairInfo.intersectionPts,\n    vectorNormInverse = pairInfo.vectorNormInverse;\n  var midptPts;\n\n  // n.b. assumes all edges in bezier bundle have same endpoints specified\n  var srcManEndpt = edge.pstyle('source-endpoint');\n  var tgtManEndpt = edge.pstyle('target-endpoint');\n  var haveManualEndPts = srcManEndpt.units != null && tgtManEndpt.units != null;\n  var recalcVectorNormInverse = function recalcVectorNormInverse(x1, y1, x2, y2) {\n    var dy = y2 - y1;\n    var dx = x2 - x1;\n    var l = Math.sqrt(dx * dx + dy * dy);\n    return {\n      x: -dy / l,\n      y: dx / l\n    };\n  };\n  var edgeDistances = edge.pstyle('edge-distances').value;\n  switch (edgeDistances) {\n    case 'node-position':\n      midptPts = posPts;\n      break;\n    case 'intersection':\n      midptPts = intersectionPts;\n      break;\n    case 'endpoints':\n      {\n        if (haveManualEndPts) {\n          var _this$manualEndptToPx = this.manualEndptToPx(edge.source()[0], srcManEndpt),\n            _this$manualEndptToPx2 = _slicedToArray(_this$manualEndptToPx, 2),\n            x1 = _this$manualEndptToPx2[0],\n            y1 = _this$manualEndptToPx2[1];\n          var _this$manualEndptToPx3 = this.manualEndptToPx(edge.target()[0], tgtManEndpt),\n            _this$manualEndptToPx4 = _slicedToArray(_this$manualEndptToPx3, 2),\n            x2 = _this$manualEndptToPx4[0],\n            y2 = _this$manualEndptToPx4[1];\n          var endPts = {\n            x1: x1,\n            y1: y1,\n            x2: x2,\n            y2: y2\n          };\n          vectorNormInverse = recalcVectorNormInverse(x1, y1, x2, y2);\n          midptPts = endPts;\n        } else {\n          warn(\"Edge \".concat(edge.id(), \" has edge-distances:endpoints specified without manual endpoints specified via source-endpoint and target-endpoint.  Falling back on edge-distances:intersection (default).\"));\n          midptPts = intersectionPts; // back to default\n        }\n\n        break;\n      }\n  }\n  return {\n    midptPts: midptPts,\n    vectorNormInverse: vectorNormInverse\n  };\n};\nBRp$c.findHaystackPoints = function (edges) {\n  for (var i = 0; i < edges.length; i++) {\n    var edge = edges[i];\n    var _p = edge._private;\n    var rs = _p.rscratch;\n    if (!rs.haystack) {\n      var angle = Math.random() * 2 * Math.PI;\n      rs.source = {\n        x: Math.cos(angle),\n        y: Math.sin(angle)\n      };\n      angle = Math.random() * 2 * Math.PI;\n      rs.target = {\n        x: Math.cos(angle),\n        y: Math.sin(angle)\n      };\n    }\n    var src = _p.source;\n    var tgt = _p.target;\n    var srcPos = src.position();\n    var tgtPos = tgt.position();\n    var srcW = src.width();\n    var tgtW = tgt.width();\n    var srcH = src.height();\n    var tgtH = tgt.height();\n    var radius = edge.pstyle('haystack-radius').value;\n    var halfRadius = radius / 2; // b/c have to half width/height\n\n    rs.haystackPts = rs.allpts = [rs.source.x * srcW * halfRadius + srcPos.x, rs.source.y * srcH * halfRadius + srcPos.y, rs.target.x * tgtW * halfRadius + tgtPos.x, rs.target.y * tgtH * halfRadius + tgtPos.y];\n    rs.midX = (rs.allpts[0] + rs.allpts[2]) / 2;\n    rs.midY = (rs.allpts[1] + rs.allpts[3]) / 2;\n\n    // always override as haystack in case set to different type previously\n    rs.edgeType = 'haystack';\n    rs.haystack = true;\n    this.storeEdgeProjections(edge);\n    this.calculateArrowAngles(edge);\n    this.recalculateEdgeLabelProjections(edge);\n    this.calculateLabelAngles(edge);\n  }\n};\nBRp$c.findSegmentsPoints = function (edge, pairInfo) {\n  // Segments (multiple straight lines)\n\n  var rs = edge._private.rscratch;\n  var segmentWs = edge.pstyle('segment-weights');\n  var segmentDs = edge.pstyle('segment-distances');\n  var segmentRs = edge.pstyle('segment-radii');\n  var segmentTs = edge.pstyle('radius-type');\n  var segmentsN = Math.min(segmentWs.pfValue.length, segmentDs.pfValue.length);\n  var lastRadius = segmentRs.pfValue[segmentRs.pfValue.length - 1];\n  var lastRadiusType = segmentTs.pfValue[segmentTs.pfValue.length - 1];\n  rs.edgeType = 'segments';\n  rs.segpts = [];\n  rs.radii = [];\n  rs.isArcRadius = [];\n  for (var s = 0; s < segmentsN; s++) {\n    var w = segmentWs.pfValue[s];\n    var d = segmentDs.pfValue[s];\n    var w1 = 1 - w;\n    var w2 = w;\n    var _this$findMidptPtsEtc = this.findMidptPtsEtc(edge, pairInfo),\n      midptPts = _this$findMidptPtsEtc.midptPts,\n      vectorNormInverse = _this$findMidptPtsEtc.vectorNormInverse;\n    var adjustedMidpt = {\n      x: midptPts.x1 * w1 + midptPts.x2 * w2,\n      y: midptPts.y1 * w1 + midptPts.y2 * w2\n    };\n    rs.segpts.push(adjustedMidpt.x + vectorNormInverse.x * d, adjustedMidpt.y + vectorNormInverse.y * d);\n    rs.radii.push(segmentRs.pfValue[s] !== undefined ? segmentRs.pfValue[s] : lastRadius);\n    rs.isArcRadius.push((segmentTs.pfValue[s] !== undefined ? segmentTs.pfValue[s] : lastRadiusType) === 'arc-radius');\n  }\n};\nBRp$c.findLoopPoints = function (edge, pairInfo, i, edgeIsUnbundled) {\n  // Self-edge\n\n  var rs = edge._private.rscratch;\n  var dirCounts = pairInfo.dirCounts,\n    srcPos = pairInfo.srcPos;\n  var ctrlptDists = edge.pstyle('control-point-distances');\n  var ctrlptDist = ctrlptDists ? ctrlptDists.pfValue[0] : undefined;\n  var loopDir = edge.pstyle('loop-direction').pfValue;\n  var loopSwp = edge.pstyle('loop-sweep').pfValue;\n  var stepSize = edge.pstyle('control-point-step-size').pfValue;\n  rs.edgeType = 'self';\n  var j = i;\n  var loopDist = stepSize;\n  if (edgeIsUnbundled) {\n    j = 0;\n    loopDist = ctrlptDist;\n  }\n  var loopAngle = loopDir - Math.PI / 2;\n  var outAngle = loopAngle - loopSwp / 2;\n  var inAngle = loopAngle + loopSwp / 2;\n\n  // increase by step size for overlapping loops, keyed on direction and sweep values\n  var dc = String(loopDir + '_' + loopSwp);\n  j = dirCounts[dc] === undefined ? dirCounts[dc] = 0 : ++dirCounts[dc];\n  rs.ctrlpts = [srcPos.x + Math.cos(outAngle) * 1.4 * loopDist * (j / 3 + 1), srcPos.y + Math.sin(outAngle) * 1.4 * loopDist * (j / 3 + 1), srcPos.x + Math.cos(inAngle) * 1.4 * loopDist * (j / 3 + 1), srcPos.y + Math.sin(inAngle) * 1.4 * loopDist * (j / 3 + 1)];\n};\nBRp$c.findCompoundLoopPoints = function (edge, pairInfo, i, edgeIsUnbundled) {\n  // Compound edge\n\n  var rs = edge._private.rscratch;\n  rs.edgeType = 'compound';\n  var srcPos = pairInfo.srcPos,\n    tgtPos = pairInfo.tgtPos,\n    srcW = pairInfo.srcW,\n    srcH = pairInfo.srcH,\n    tgtW = pairInfo.tgtW,\n    tgtH = pairInfo.tgtH;\n  var stepSize = edge.pstyle('control-point-step-size').pfValue;\n  var ctrlptDists = edge.pstyle('control-point-distances');\n  var ctrlptDist = ctrlptDists ? ctrlptDists.pfValue[0] : undefined;\n  var j = i;\n  var loopDist = stepSize;\n  if (edgeIsUnbundled) {\n    j = 0;\n    loopDist = ctrlptDist;\n  }\n  var loopW = 50;\n  var loopaPos = {\n    x: srcPos.x - srcW / 2,\n    y: srcPos.y - srcH / 2\n  };\n  var loopbPos = {\n    x: tgtPos.x - tgtW / 2,\n    y: tgtPos.y - tgtH / 2\n  };\n  var loopPos = {\n    x: Math.min(loopaPos.x, loopbPos.x),\n    y: Math.min(loopaPos.y, loopbPos.y)\n  };\n\n  // avoids cases with impossible beziers\n  var minCompoundStretch = 0.5;\n  var compoundStretchA = Math.max(minCompoundStretch, Math.log(srcW * 0.01));\n  var compoundStretchB = Math.max(minCompoundStretch, Math.log(tgtW * 0.01));\n  rs.ctrlpts = [loopPos.x, loopPos.y - (1 + Math.pow(loopW, 1.12) / 100) * loopDist * (j / 3 + 1) * compoundStretchA, loopPos.x - (1 + Math.pow(loopW, 1.12) / 100) * loopDist * (j / 3 + 1) * compoundStretchB, loopPos.y];\n};\nBRp$c.findStraightEdgePoints = function (edge) {\n  // Straight edge within bundle\n\n  edge._private.rscratch.edgeType = 'straight';\n};\nBRp$c.findBezierPoints = function (edge, pairInfo, i, edgeIsUnbundled, edgeIsSwapped) {\n  var rs = edge._private.rscratch;\n  var stepSize = edge.pstyle('control-point-step-size').pfValue;\n  var ctrlptDists = edge.pstyle('control-point-distances');\n  var ctrlptWs = edge.pstyle('control-point-weights');\n  var bezierN = ctrlptDists && ctrlptWs ? Math.min(ctrlptDists.value.length, ctrlptWs.value.length) : 1;\n  var ctrlptDist = ctrlptDists ? ctrlptDists.pfValue[0] : undefined;\n  var ctrlptWeight = ctrlptWs.value[0];\n\n  // (Multi)bezier\n\n  var multi = edgeIsUnbundled;\n  rs.edgeType = multi ? 'multibezier' : 'bezier';\n  rs.ctrlpts = [];\n  for (var b = 0; b < bezierN; b++) {\n    var normctrlptDist = (0.5 - pairInfo.eles.length / 2 + i) * stepSize * (edgeIsSwapped ? -1 : 1);\n    var manctrlptDist = void 0;\n    var sign = signum(normctrlptDist);\n    if (multi) {\n      ctrlptDist = ctrlptDists ? ctrlptDists.pfValue[b] : stepSize; // fall back on step size\n      ctrlptWeight = ctrlptWs.value[b];\n    }\n    if (edgeIsUnbundled) {\n      // multi or single unbundled\n      manctrlptDist = ctrlptDist;\n    } else {\n      manctrlptDist = ctrlptDist !== undefined ? sign * ctrlptDist : undefined;\n    }\n    var distanceFromMidpoint = manctrlptDist !== undefined ? manctrlptDist : normctrlptDist;\n    var w1 = 1 - ctrlptWeight;\n    var w2 = ctrlptWeight;\n    var _this$findMidptPtsEtc2 = this.findMidptPtsEtc(edge, pairInfo),\n      midptPts = _this$findMidptPtsEtc2.midptPts,\n      vectorNormInverse = _this$findMidptPtsEtc2.vectorNormInverse;\n    var adjustedMidpt = {\n      x: midptPts.x1 * w1 + midptPts.x2 * w2,\n      y: midptPts.y1 * w1 + midptPts.y2 * w2\n    };\n    rs.ctrlpts.push(adjustedMidpt.x + vectorNormInverse.x * distanceFromMidpoint, adjustedMidpt.y + vectorNormInverse.y * distanceFromMidpoint);\n  }\n};\nBRp$c.findTaxiPoints = function (edge, pairInfo) {\n  // Taxicab geometry with two turns maximum\n\n  var rs = edge._private.rscratch;\n  rs.edgeType = 'segments';\n  var VERTICAL = 'vertical';\n  var HORIZONTAL = 'horizontal';\n  var LEFTWARD = 'leftward';\n  var RIGHTWARD = 'rightward';\n  var DOWNWARD = 'downward';\n  var UPWARD = 'upward';\n  var AUTO = 'auto';\n  var posPts = pairInfo.posPts,\n    srcW = pairInfo.srcW,\n    srcH = pairInfo.srcH,\n    tgtW = pairInfo.tgtW,\n    tgtH = pairInfo.tgtH;\n  var edgeDistances = edge.pstyle('edge-distances').value;\n  var dIncludesNodeBody = edgeDistances !== 'node-position';\n  var taxiDir = edge.pstyle('taxi-direction').value;\n  var rawTaxiDir = taxiDir; // unprocessed value\n  var taxiTurn = edge.pstyle('taxi-turn');\n  var turnIsPercent = taxiTurn.units === '%';\n  var taxiTurnPfVal = taxiTurn.pfValue;\n  var turnIsNegative = taxiTurnPfVal < 0; // i.e. from target side\n  var minD = edge.pstyle('taxi-turn-min-distance').pfValue;\n  var dw = dIncludesNodeBody ? (srcW + tgtW) / 2 : 0;\n  var dh = dIncludesNodeBody ? (srcH + tgtH) / 2 : 0;\n  var pdx = posPts.x2 - posPts.x1;\n  var pdy = posPts.y2 - posPts.y1;\n\n  // take away the effective w/h from the magnitude of the delta value\n  var subDWH = function subDWH(dxy, dwh) {\n    if (dxy > 0) {\n      return Math.max(dxy - dwh, 0);\n    } else {\n      return Math.min(dxy + dwh, 0);\n    }\n  };\n  var dx = subDWH(pdx, dw);\n  var dy = subDWH(pdy, dh);\n  var isExplicitDir = false;\n  if (rawTaxiDir === AUTO) {\n    taxiDir = Math.abs(dx) > Math.abs(dy) ? HORIZONTAL : VERTICAL;\n  } else if (rawTaxiDir === UPWARD || rawTaxiDir === DOWNWARD) {\n    taxiDir = VERTICAL;\n    isExplicitDir = true;\n  } else if (rawTaxiDir === LEFTWARD || rawTaxiDir === RIGHTWARD) {\n    taxiDir = HORIZONTAL;\n    isExplicitDir = true;\n  }\n  var isVert = taxiDir === VERTICAL;\n  var l = isVert ? dy : dx;\n  var pl = isVert ? pdy : pdx;\n  var sgnL = signum(pl);\n  var forcedDir = false;\n  if (!(isExplicitDir && (turnIsPercent || turnIsNegative)) // forcing in this case would cause weird growing in the opposite direction\n  && (rawTaxiDir === DOWNWARD && pl < 0 || rawTaxiDir === UPWARD && pl > 0 || rawTaxiDir === LEFTWARD && pl > 0 || rawTaxiDir === RIGHTWARD && pl < 0)) {\n    sgnL *= -1;\n    l = sgnL * Math.abs(l);\n    forcedDir = true;\n  }\n  var d;\n  if (turnIsPercent) {\n    var p = taxiTurnPfVal < 0 ? 1 + taxiTurnPfVal : taxiTurnPfVal;\n    d = p * l;\n  } else {\n    var k = taxiTurnPfVal < 0 ? l : 0;\n    d = k + taxiTurnPfVal * sgnL;\n  }\n  var getIsTooClose = function getIsTooClose(d) {\n    return Math.abs(d) < minD || Math.abs(d) >= Math.abs(l);\n  };\n  var isTooCloseSrc = getIsTooClose(d);\n  var isTooCloseTgt = getIsTooClose(Math.abs(l) - Math.abs(d));\n  var isTooClose = isTooCloseSrc || isTooCloseTgt;\n  if (isTooClose && !forcedDir) {\n    // non-ideal routing\n    if (isVert) {\n      // vertical fallbacks\n      var lShapeInsideSrc = Math.abs(pl) <= srcH / 2;\n      var lShapeInsideTgt = Math.abs(pdx) <= tgtW / 2;\n      if (lShapeInsideSrc) {\n        // horizontal Z-shape (direction not respected)\n        var x = (posPts.x1 + posPts.x2) / 2;\n        var y1 = posPts.y1,\n          y2 = posPts.y2;\n        rs.segpts = [x, y1, x, y2];\n      } else if (lShapeInsideTgt) {\n        // vertical Z-shape (distance not respected)\n        var y = (posPts.y1 + posPts.y2) / 2;\n        var x1 = posPts.x1,\n          x2 = posPts.x2;\n        rs.segpts = [x1, y, x2, y];\n      } else {\n        // L-shape fallback (turn distance not respected, but works well with tree siblings)\n        rs.segpts = [posPts.x1, posPts.y2];\n      }\n    } else {\n      // horizontal fallbacks\n      var _lShapeInsideSrc = Math.abs(pl) <= srcW / 2;\n      var _lShapeInsideTgt = Math.abs(pdy) <= tgtH / 2;\n      if (_lShapeInsideSrc) {\n        // vertical Z-shape (direction not respected)\n        var _y = (posPts.y1 + posPts.y2) / 2;\n        var _x = posPts.x1,\n          _x2 = posPts.x2;\n        rs.segpts = [_x, _y, _x2, _y];\n      } else if (_lShapeInsideTgt) {\n        // horizontal Z-shape (turn distance not respected)\n        var _x3 = (posPts.x1 + posPts.x2) / 2;\n        var _y2 = posPts.y1,\n          _y3 = posPts.y2;\n        rs.segpts = [_x3, _y2, _x3, _y3];\n      } else {\n        // L-shape (turn distance not respected, but works well for tree siblings)\n        rs.segpts = [posPts.x2, posPts.y1];\n      }\n    }\n  } else {\n    // ideal routing\n    if (isVert) {\n      var _y4 = posPts.y1 + d + (dIncludesNodeBody ? srcH / 2 * sgnL : 0);\n      var _x4 = posPts.x1,\n        _x5 = posPts.x2;\n      rs.segpts = [_x4, _y4, _x5, _y4];\n    } else {\n      // horizontal\n      var _x6 = posPts.x1 + d + (dIncludesNodeBody ? srcW / 2 * sgnL : 0);\n      var _y5 = posPts.y1,\n        _y6 = posPts.y2;\n      rs.segpts = [_x6, _y5, _x6, _y6];\n    }\n  }\n  if (rs.isRound) {\n    var radius = edge.pstyle('taxi-radius').value;\n    var isArcRadius = edge.pstyle('radius-type').value[0] === 'arc-radius';\n    rs.radii = new Array(rs.segpts.length / 2).fill(radius);\n    rs.isArcRadius = new Array(rs.segpts.length / 2).fill(isArcRadius);\n  }\n};\nBRp$c.tryToCorrectInvalidPoints = function (edge, pairInfo) {\n  var rs = edge._private.rscratch;\n\n  // can only correct beziers for now...\n  if (rs.edgeType === 'bezier') {\n    var srcPos = pairInfo.srcPos,\n      tgtPos = pairInfo.tgtPos,\n      srcW = pairInfo.srcW,\n      srcH = pairInfo.srcH,\n      tgtW = pairInfo.tgtW,\n      tgtH = pairInfo.tgtH,\n      srcShape = pairInfo.srcShape,\n      tgtShape = pairInfo.tgtShape,\n      srcCornerRadius = pairInfo.srcCornerRadius,\n      tgtCornerRadius = pairInfo.tgtCornerRadius,\n      srcRs = pairInfo.srcRs,\n      tgtRs = pairInfo.tgtRs;\n    var badStart = !number$1(rs.startX) || !number$1(rs.startY);\n    var badAStart = !number$1(rs.arrowStartX) || !number$1(rs.arrowStartY);\n    var badEnd = !number$1(rs.endX) || !number$1(rs.endY);\n    var badAEnd = !number$1(rs.arrowEndX) || !number$1(rs.arrowEndY);\n    var minCpADistFactor = 3;\n    var arrowW = this.getArrowWidth(edge.pstyle('width').pfValue, edge.pstyle('arrow-scale').value) * this.arrowShapeWidth;\n    var minCpADist = minCpADistFactor * arrowW;\n    var startACpDist = dist({\n      x: rs.ctrlpts[0],\n      y: rs.ctrlpts[1]\n    }, {\n      x: rs.startX,\n      y: rs.startY\n    });\n    var closeStartACp = startACpDist < minCpADist;\n    var endACpDist = dist({\n      x: rs.ctrlpts[0],\n      y: rs.ctrlpts[1]\n    }, {\n      x: rs.endX,\n      y: rs.endY\n    });\n    var closeEndACp = endACpDist < minCpADist;\n    var overlapping = false;\n    if (badStart || badAStart || closeStartACp) {\n      overlapping = true;\n\n      // project control point along line from src centre to outside the src shape\n      // (otherwise intersection will yield nothing)\n      var cpD = {\n        // delta\n        x: rs.ctrlpts[0] - srcPos.x,\n        y: rs.ctrlpts[1] - srcPos.y\n      };\n      var cpL = Math.sqrt(cpD.x * cpD.x + cpD.y * cpD.y); // length of line\n      var cpM = {\n        // normalised delta\n        x: cpD.x / cpL,\n        y: cpD.y / cpL\n      };\n      var radius = Math.max(srcW, srcH);\n      var cpProj = {\n        // *2 radius guarantees outside shape\n        x: rs.ctrlpts[0] + cpM.x * 2 * radius,\n        y: rs.ctrlpts[1] + cpM.y * 2 * radius\n      };\n      var srcCtrlPtIntn = srcShape.intersectLine(srcPos.x, srcPos.y, srcW, srcH, cpProj.x, cpProj.y, 0, srcCornerRadius, srcRs);\n      if (closeStartACp) {\n        rs.ctrlpts[0] = rs.ctrlpts[0] + cpM.x * (minCpADist - startACpDist);\n        rs.ctrlpts[1] = rs.ctrlpts[1] + cpM.y * (minCpADist - startACpDist);\n      } else {\n        rs.ctrlpts[0] = srcCtrlPtIntn[0] + cpM.x * minCpADist;\n        rs.ctrlpts[1] = srcCtrlPtIntn[1] + cpM.y * minCpADist;\n      }\n    }\n    if (badEnd || badAEnd || closeEndACp) {\n      overlapping = true;\n\n      // project control point along line from tgt centre to outside the tgt shape\n      // (otherwise intersection will yield nothing)\n      var _cpD = {\n        // delta\n        x: rs.ctrlpts[0] - tgtPos.x,\n        y: rs.ctrlpts[1] - tgtPos.y\n      };\n      var _cpL = Math.sqrt(_cpD.x * _cpD.x + _cpD.y * _cpD.y); // length of line\n      var _cpM = {\n        // normalised delta\n        x: _cpD.x / _cpL,\n        y: _cpD.y / _cpL\n      };\n      var _radius = Math.max(srcW, srcH);\n      var _cpProj = {\n        // *2 radius guarantees outside shape\n        x: rs.ctrlpts[0] + _cpM.x * 2 * _radius,\n        y: rs.ctrlpts[1] + _cpM.y * 2 * _radius\n      };\n      var tgtCtrlPtIntn = tgtShape.intersectLine(tgtPos.x, tgtPos.y, tgtW, tgtH, _cpProj.x, _cpProj.y, 0, tgtCornerRadius, tgtRs);\n      if (closeEndACp) {\n        rs.ctrlpts[0] = rs.ctrlpts[0] + _cpM.x * (minCpADist - endACpDist);\n        rs.ctrlpts[1] = rs.ctrlpts[1] + _cpM.y * (minCpADist - endACpDist);\n      } else {\n        rs.ctrlpts[0] = tgtCtrlPtIntn[0] + _cpM.x * minCpADist;\n        rs.ctrlpts[1] = tgtCtrlPtIntn[1] + _cpM.y * minCpADist;\n      }\n    }\n    if (overlapping) {\n      // recalc endpts\n      this.findEndpoints(edge);\n    }\n  }\n};\nBRp$c.storeAllpts = function (edge) {\n  var rs = edge._private.rscratch;\n  if (rs.edgeType === 'multibezier' || rs.edgeType === 'bezier' || rs.edgeType === 'self' || rs.edgeType === 'compound') {\n    rs.allpts = [];\n    rs.allpts.push(rs.startX, rs.startY);\n    for (var b = 0; b + 1 < rs.ctrlpts.length; b += 2) {\n      // ctrl pt itself\n      rs.allpts.push(rs.ctrlpts[b], rs.ctrlpts[b + 1]);\n\n      // the midpt between ctrlpts as intermediate destination pts\n      if (b + 3 < rs.ctrlpts.length) {\n        rs.allpts.push((rs.ctrlpts[b] + rs.ctrlpts[b + 2]) / 2, (rs.ctrlpts[b + 1] + rs.ctrlpts[b + 3]) / 2);\n      }\n    }\n    rs.allpts.push(rs.endX, rs.endY);\n    var m, mt;\n    if (rs.ctrlpts.length / 2 % 2 === 0) {\n      m = rs.allpts.length / 2 - 1;\n      rs.midX = rs.allpts[m];\n      rs.midY = rs.allpts[m + 1];\n    } else {\n      m = rs.allpts.length / 2 - 3;\n      mt = 0.5;\n      rs.midX = qbezierAt(rs.allpts[m], rs.allpts[m + 2], rs.allpts[m + 4], mt);\n      rs.midY = qbezierAt(rs.allpts[m + 1], rs.allpts[m + 3], rs.allpts[m + 5], mt);\n    }\n  } else if (rs.edgeType === 'straight') {\n    // need to calc these after endpts\n    rs.allpts = [rs.startX, rs.startY, rs.endX, rs.endY];\n\n    // default midpt for labels etc\n    rs.midX = (rs.startX + rs.endX + rs.arrowStartX + rs.arrowEndX) / 4;\n    rs.midY = (rs.startY + rs.endY + rs.arrowStartY + rs.arrowEndY) / 4;\n  } else if (rs.edgeType === 'segments') {\n    rs.allpts = [];\n    rs.allpts.push(rs.startX, rs.startY);\n    rs.allpts.push.apply(rs.allpts, rs.segpts);\n    rs.allpts.push(rs.endX, rs.endY);\n    if (rs.isRound) {\n      rs.roundCorners = [];\n      for (var i = 2; i + 3 < rs.allpts.length; i += 2) {\n        var radius = rs.radii[i / 2 - 1];\n        var isArcRadius = rs.isArcRadius[i / 2 - 1];\n        rs.roundCorners.push(getRoundCorner({\n          x: rs.allpts[i - 2],\n          y: rs.allpts[i - 1]\n        }, {\n          x: rs.allpts[i],\n          y: rs.allpts[i + 1],\n          radius: radius\n        }, {\n          x: rs.allpts[i + 2],\n          y: rs.allpts[i + 3]\n        }, radius, isArcRadius));\n      }\n    }\n    if (rs.segpts.length % 4 === 0) {\n      var i2 = rs.segpts.length / 2;\n      var i1 = i2 - 2;\n      rs.midX = (rs.segpts[i1] + rs.segpts[i2]) / 2;\n      rs.midY = (rs.segpts[i1 + 1] + rs.segpts[i2 + 1]) / 2;\n    } else {\n      var _i = rs.segpts.length / 2 - 1;\n      if (!rs.isRound) {\n        rs.midX = rs.segpts[_i];\n        rs.midY = rs.segpts[_i + 1];\n      } else {\n        var point = {\n          x: rs.segpts[_i],\n          y: rs.segpts[_i + 1]\n        };\n        var corner = rs.roundCorners[_i / 2];\n        var v = [point.x - corner.cx, point.y - corner.cy];\n        var factor = corner.radius / Math.sqrt(Math.pow(v[0], 2) + Math.pow(v[1], 2));\n        v = v.map(function (c) {\n          return c * factor;\n        });\n        rs.midX = corner.cx + v[0];\n        rs.midY = corner.cy + v[1];\n        rs.midVector = v;\n      }\n    }\n  }\n};\nBRp$c.checkForInvalidEdgeWarning = function (edge) {\n  var rs = edge[0]._private.rscratch;\n  if (rs.nodesOverlap || number$1(rs.startX) && number$1(rs.startY) && number$1(rs.endX) && number$1(rs.endY)) {\n    rs.loggedErr = false;\n  } else {\n    if (!rs.loggedErr) {\n      rs.loggedErr = true;\n      warn('Edge `' + edge.id() + '` has invalid endpoints and so it is impossible to draw.  Adjust your edge style (e.g. control points) accordingly or use an alternative edge type.  This is expected behaviour when the source node and the target node overlap.');\n    }\n  }\n};\nBRp$c.findEdgeControlPoints = function (edges) {\n  var _this = this;\n  if (!edges || edges.length === 0) {\n    return;\n  }\n  var r = this;\n  var cy = r.cy;\n  var hasCompounds = cy.hasCompoundNodes();\n  var hashTable = {\n    map: new Map$2(),\n    get: function get(pairId) {\n      var map2 = this.map.get(pairId[0]);\n      if (map2 != null) {\n        return map2.get(pairId[1]);\n      } else {\n        return null;\n      }\n    },\n    set: function set(pairId, val) {\n      var map2 = this.map.get(pairId[0]);\n      if (map2 == null) {\n        map2 = new Map$2();\n        this.map.set(pairId[0], map2);\n      }\n      map2.set(pairId[1], val);\n    }\n  };\n  var pairIds = [];\n  var haystackEdges = [];\n\n  // create a table of edge (src, tgt) => list of edges between them\n  for (var i = 0; i < edges.length; i++) {\n    var edge = edges[i];\n    var _p = edge._private;\n    var curveStyle = edge.pstyle('curve-style').value;\n\n    // ignore edges who are not to be displayed\n    // they shouldn't take up space\n    if (edge.removed() || !edge.takesUpSpace()) {\n      continue;\n    }\n    if (curveStyle === 'haystack') {\n      haystackEdges.push(edge);\n      continue;\n    }\n    var edgeIsUnbundled = curveStyle === 'unbundled-bezier' || curveStyle.endsWith('segments') || curveStyle === 'straight' || curveStyle === 'straight-triangle' || curveStyle.endsWith('taxi');\n    var edgeIsBezier = curveStyle === 'unbundled-bezier' || curveStyle === 'bezier';\n    var src = _p.source;\n    var tgt = _p.target;\n    var srcIndex = src.poolIndex();\n    var tgtIndex = tgt.poolIndex();\n    var pairId = [srcIndex, tgtIndex].sort();\n    var tableEntry = hashTable.get(pairId);\n    if (tableEntry == null) {\n      tableEntry = {\n        eles: []\n      };\n      hashTable.set(pairId, tableEntry);\n      pairIds.push(pairId);\n    }\n    tableEntry.eles.push(edge);\n    if (edgeIsUnbundled) {\n      tableEntry.hasUnbundled = true;\n    }\n    if (edgeIsBezier) {\n      tableEntry.hasBezier = true;\n    }\n  }\n\n  // for each pair (src, tgt), create the ctrl pts\n  // Nested for loop is OK; total number of iterations for both loops = edgeCount\n  var _loop = function _loop(p) {\n    var pairId = pairIds[p];\n    var pairInfo = hashTable.get(pairId);\n    var swappedpairInfo = void 0;\n    if (!pairInfo.hasUnbundled) {\n      var pllEdges = pairInfo.eles[0].parallelEdges().filter(function (e) {\n        return e.isBundledBezier();\n      });\n      clearArray(pairInfo.eles);\n      pllEdges.forEach(function (edge) {\n        return pairInfo.eles.push(edge);\n      });\n\n      // for each pair id, the edges should be sorted by index\n      pairInfo.eles.sort(function (edge1, edge2) {\n        return edge1.poolIndex() - edge2.poolIndex();\n      });\n    }\n    var firstEdge = pairInfo.eles[0];\n    var src = firstEdge.source();\n    var tgt = firstEdge.target();\n\n    // make sure src/tgt distinction is consistent w.r.t. pairId\n    if (src.poolIndex() > tgt.poolIndex()) {\n      var temp = src;\n      src = tgt;\n      tgt = temp;\n    }\n    var srcPos = pairInfo.srcPos = src.position();\n    var tgtPos = pairInfo.tgtPos = tgt.position();\n    var srcW = pairInfo.srcW = src.outerWidth();\n    var srcH = pairInfo.srcH = src.outerHeight();\n    var tgtW = pairInfo.tgtW = tgt.outerWidth();\n    var tgtH = pairInfo.tgtH = tgt.outerHeight();\n    var srcShape = pairInfo.srcShape = r.nodeShapes[_this.getNodeShape(src)];\n    var tgtShape = pairInfo.tgtShape = r.nodeShapes[_this.getNodeShape(tgt)];\n    var srcCornerRadius = pairInfo.srcCornerRadius = src.pstyle('corner-radius').value === 'auto' ? 'auto' : src.pstyle('corner-radius').pfValue;\n    var tgtCornerRadius = pairInfo.tgtCornerRadius = tgt.pstyle('corner-radius').value === 'auto' ? 'auto' : tgt.pstyle('corner-radius').pfValue;\n    var tgtRs = pairInfo.tgtRs = tgt._private.rscratch;\n    var srcRs = pairInfo.srcRs = src._private.rscratch;\n    pairInfo.dirCounts = {\n      'north': 0,\n      'west': 0,\n      'south': 0,\n      'east': 0,\n      'northwest': 0,\n      'southwest': 0,\n      'northeast': 0,\n      'southeast': 0\n    };\n    for (var _i2 = 0; _i2 < pairInfo.eles.length; _i2++) {\n      var _edge = pairInfo.eles[_i2];\n      var rs = _edge[0]._private.rscratch;\n      var _curveStyle = _edge.pstyle('curve-style').value;\n      var _edgeIsUnbundled = _curveStyle === 'unbundled-bezier' || _curveStyle.endsWith('segments') || _curveStyle.endsWith('taxi');\n\n      // whether the normalised pair order is the reverse of the edge's src-tgt order\n      var edgeIsSwapped = !src.same(_edge.source());\n      if (!pairInfo.calculatedIntersection && src !== tgt && (pairInfo.hasBezier || pairInfo.hasUnbundled)) {\n        pairInfo.calculatedIntersection = true;\n\n        // pt outside src shape to calc distance/displacement from src to tgt\n        var srcOutside = srcShape.intersectLine(srcPos.x, srcPos.y, srcW, srcH, tgtPos.x, tgtPos.y, 0, srcCornerRadius, srcRs);\n        var srcIntn = pairInfo.srcIntn = srcOutside;\n\n        // pt outside tgt shape to calc distance/displacement from src to tgt\n        var tgtOutside = tgtShape.intersectLine(tgtPos.x, tgtPos.y, tgtW, tgtH, srcPos.x, srcPos.y, 0, tgtCornerRadius, tgtRs);\n        var tgtIntn = pairInfo.tgtIntn = tgtOutside;\n        var intersectionPts = pairInfo.intersectionPts = {\n          x1: srcOutside[0],\n          x2: tgtOutside[0],\n          y1: srcOutside[1],\n          y2: tgtOutside[1]\n        };\n        var posPts = pairInfo.posPts = {\n          x1: srcPos.x,\n          x2: tgtPos.x,\n          y1: srcPos.y,\n          y2: tgtPos.y\n        };\n        var dy = tgtOutside[1] - srcOutside[1];\n        var dx = tgtOutside[0] - srcOutside[0];\n        var l = Math.sqrt(dx * dx + dy * dy);\n        var vector = pairInfo.vector = {\n          x: dx,\n          y: dy\n        };\n        var vectorNorm = pairInfo.vectorNorm = {\n          x: vector.x / l,\n          y: vector.y / l\n        };\n        var vectorNormInverse = {\n          x: -vectorNorm.y,\n          y: vectorNorm.x\n        };\n\n        // if node shapes overlap, then no ctrl pts to draw\n        pairInfo.nodesOverlap = !number$1(l) || tgtShape.checkPoint(srcOutside[0], srcOutside[1], 0, tgtW, tgtH, tgtPos.x, tgtPos.y, tgtCornerRadius, tgtRs) || srcShape.checkPoint(tgtOutside[0], tgtOutside[1], 0, srcW, srcH, srcPos.x, srcPos.y, srcCornerRadius, srcRs);\n        pairInfo.vectorNormInverse = vectorNormInverse;\n        swappedpairInfo = {\n          nodesOverlap: pairInfo.nodesOverlap,\n          dirCounts: pairInfo.dirCounts,\n          calculatedIntersection: true,\n          hasBezier: pairInfo.hasBezier,\n          hasUnbundled: pairInfo.hasUnbundled,\n          eles: pairInfo.eles,\n          srcPos: tgtPos,\n          srcRs: tgtRs,\n          tgtPos: srcPos,\n          tgtRs: srcRs,\n          srcW: tgtW,\n          srcH: tgtH,\n          tgtW: srcW,\n          tgtH: srcH,\n          srcIntn: tgtIntn,\n          tgtIntn: srcIntn,\n          srcShape: tgtShape,\n          tgtShape: srcShape,\n          posPts: {\n            x1: posPts.x2,\n            y1: posPts.y2,\n            x2: posPts.x1,\n            y2: posPts.y1\n          },\n          intersectionPts: {\n            x1: intersectionPts.x2,\n            y1: intersectionPts.y2,\n            x2: intersectionPts.x1,\n            y2: intersectionPts.y1\n          },\n          vector: {\n            x: -vector.x,\n            y: -vector.y\n          },\n          vectorNorm: {\n            x: -vectorNorm.x,\n            y: -vectorNorm.y\n          },\n          vectorNormInverse: {\n            x: -vectorNormInverse.x,\n            y: -vectorNormInverse.y\n          }\n        };\n      }\n      var passedPairInfo = edgeIsSwapped ? swappedpairInfo : pairInfo;\n      rs.nodesOverlap = passedPairInfo.nodesOverlap;\n      rs.srcIntn = passedPairInfo.srcIntn;\n      rs.tgtIntn = passedPairInfo.tgtIntn;\n      rs.isRound = _curveStyle.startsWith('round');\n      if (hasCompounds && (src.isParent() || src.isChild() || tgt.isParent() || tgt.isChild()) && (src.parents().anySame(tgt) || tgt.parents().anySame(src) || src.same(tgt) && src.isParent())) {\n        _this.findCompoundLoopPoints(_edge, passedPairInfo, _i2, _edgeIsUnbundled);\n      } else if (src === tgt) {\n        _this.findLoopPoints(_edge, passedPairInfo, _i2, _edgeIsUnbundled);\n      } else if (_curveStyle.endsWith('segments')) {\n        _this.findSegmentsPoints(_edge, passedPairInfo);\n      } else if (_curveStyle.endsWith('taxi')) {\n        _this.findTaxiPoints(_edge, passedPairInfo);\n      } else if (_curveStyle === 'straight' || !_edgeIsUnbundled && pairInfo.eles.length % 2 === 1 && _i2 === Math.floor(pairInfo.eles.length / 2)) {\n        _this.findStraightEdgePoints(_edge);\n      } else {\n        _this.findBezierPoints(_edge, passedPairInfo, _i2, _edgeIsUnbundled, edgeIsSwapped);\n      }\n      _this.findEndpoints(_edge);\n      _this.tryToCorrectInvalidPoints(_edge, passedPairInfo);\n      _this.checkForInvalidEdgeWarning(_edge);\n      _this.storeAllpts(_edge);\n      _this.storeEdgeProjections(_edge);\n      _this.calculateArrowAngles(_edge);\n      _this.recalculateEdgeLabelProjections(_edge);\n      _this.calculateLabelAngles(_edge);\n    } // for pair edges\n  };\n  for (var p = 0; p < pairIds.length; p++) {\n    _loop(p);\n  } // for pair ids\n\n  // haystacks avoid the expense of pairInfo stuff (intersections etc.)\n  this.findHaystackPoints(haystackEdges);\n};\nfunction getPts(pts) {\n  var retPts = [];\n  if (pts == null) {\n    return;\n  }\n  for (var i = 0; i < pts.length; i += 2) {\n    var x = pts[i];\n    var y = pts[i + 1];\n    retPts.push({\n      x: x,\n      y: y\n    });\n  }\n  return retPts;\n}\nBRp$c.getSegmentPoints = function (edge) {\n  var rs = edge[0]._private.rscratch;\n  this.recalculateRenderedStyle(edge);\n  var type = rs.edgeType;\n  if (type === 'segments') {\n    return getPts(rs.segpts);\n  }\n};\nBRp$c.getControlPoints = function (edge) {\n  var rs = edge[0]._private.rscratch;\n  this.recalculateRenderedStyle(edge);\n  var type = rs.edgeType;\n  if (type === 'bezier' || type === 'multibezier' || type === 'self' || type === 'compound') {\n    return getPts(rs.ctrlpts);\n  }\n};\nBRp$c.getEdgeMidpoint = function (edge) {\n  var rs = edge[0]._private.rscratch;\n  this.recalculateRenderedStyle(edge);\n  return {\n    x: rs.midX,\n    y: rs.midY\n  };\n};\n\nvar BRp$b = {};\nBRp$b.manualEndptToPx = function (node, prop) {\n  var r = this;\n  var npos = node.position();\n  var w = node.outerWidth();\n  var h = node.outerHeight();\n  var rs = node._private.rscratch;\n  if (prop.value.length === 2) {\n    var p = [prop.pfValue[0], prop.pfValue[1]];\n    if (prop.units[0] === '%') {\n      p[0] = p[0] * w;\n    }\n    if (prop.units[1] === '%') {\n      p[1] = p[1] * h;\n    }\n    p[0] += npos.x;\n    p[1] += npos.y;\n    return p;\n  } else {\n    var angle = prop.pfValue[0];\n    angle = -Math.PI / 2 + angle; // start at 12 o'clock\n\n    var l = 2 * Math.max(w, h);\n    var _p = [npos.x + Math.cos(angle) * l, npos.y + Math.sin(angle) * l];\n    return r.nodeShapes[this.getNodeShape(node)].intersectLine(npos.x, npos.y, w, h, _p[0], _p[1], 0, node.pstyle('corner-radius').value === 'auto' ? 'auto' : node.pstyle('corner-radius').pfValue, rs);\n  }\n};\nBRp$b.findEndpoints = function (edge) {\n  var r = this;\n  var intersect;\n  var source = edge.source()[0];\n  var target = edge.target()[0];\n  var srcPos = source.position();\n  var tgtPos = target.position();\n  var tgtArShape = edge.pstyle('target-arrow-shape').value;\n  var srcArShape = edge.pstyle('source-arrow-shape').value;\n  var tgtDist = edge.pstyle('target-distance-from-node').pfValue;\n  var srcDist = edge.pstyle('source-distance-from-node').pfValue;\n  var srcRs = source._private.rscratch;\n  var tgtRs = target._private.rscratch;\n  var curveStyle = edge.pstyle('curve-style').value;\n  var rs = edge._private.rscratch;\n  var et = rs.edgeType;\n  var taxi = curveStyle === 'taxi';\n  var self = et === 'self' || et === 'compound';\n  var bezier = et === 'bezier' || et === 'multibezier' || self;\n  var multi = et !== 'bezier';\n  var lines = et === 'straight' || et === 'segments';\n  var segments = et === 'segments';\n  var hasEndpts = bezier || multi || lines;\n  var overrideEndpts = self || taxi;\n  var srcManEndpt = edge.pstyle('source-endpoint');\n  var srcManEndptVal = overrideEndpts ? 'outside-to-node' : srcManEndpt.value;\n  var srcCornerRadius = source.pstyle('corner-radius').value === 'auto' ? 'auto' : source.pstyle('corner-radius').pfValue;\n  var tgtManEndpt = edge.pstyle('target-endpoint');\n  var tgtManEndptVal = overrideEndpts ? 'outside-to-node' : tgtManEndpt.value;\n  var tgtCornerRadius = target.pstyle('corner-radius').value === 'auto' ? 'auto' : target.pstyle('corner-radius').pfValue;\n  rs.srcManEndpt = srcManEndpt;\n  rs.tgtManEndpt = tgtManEndpt;\n  var p1; // last known point of edge on target side\n  var p2; // last known point of edge on source side\n\n  var p1_i; // point to intersect with target shape\n  var p2_i; // point to intersect with source shape\n\n  if (bezier) {\n    var cpStart = [rs.ctrlpts[0], rs.ctrlpts[1]];\n    var cpEnd = multi ? [rs.ctrlpts[rs.ctrlpts.length - 2], rs.ctrlpts[rs.ctrlpts.length - 1]] : cpStart;\n    p1 = cpEnd;\n    p2 = cpStart;\n  } else if (lines) {\n    var srcArrowFromPt = !segments ? [tgtPos.x, tgtPos.y] : rs.segpts.slice(0, 2);\n    var tgtArrowFromPt = !segments ? [srcPos.x, srcPos.y] : rs.segpts.slice(rs.segpts.length - 2);\n    p1 = tgtArrowFromPt;\n    p2 = srcArrowFromPt;\n  }\n  if (tgtManEndptVal === 'inside-to-node') {\n    intersect = [tgtPos.x, tgtPos.y];\n  } else if (tgtManEndpt.units) {\n    intersect = this.manualEndptToPx(target, tgtManEndpt);\n  } else if (tgtManEndptVal === 'outside-to-line') {\n    intersect = rs.tgtIntn; // use cached value from ctrlpt calc\n  } else {\n    if (tgtManEndptVal === 'outside-to-node' || tgtManEndptVal === 'outside-to-node-or-label') {\n      p1_i = p1;\n    } else if (tgtManEndptVal === 'outside-to-line' || tgtManEndptVal === 'outside-to-line-or-label') {\n      p1_i = [srcPos.x, srcPos.y];\n    }\n    intersect = r.nodeShapes[this.getNodeShape(target)].intersectLine(tgtPos.x, tgtPos.y, target.outerWidth(), target.outerHeight(), p1_i[0], p1_i[1], 0, tgtCornerRadius, tgtRs);\n    if (tgtManEndptVal === 'outside-to-node-or-label' || tgtManEndptVal === 'outside-to-line-or-label') {\n      var trs = target._private.rscratch;\n      var lw = trs.labelWidth;\n      var lh = trs.labelHeight;\n      var lx = trs.labelX;\n      var ly = trs.labelY;\n      var lw2 = lw / 2;\n      var lh2 = lh / 2;\n      var va = target.pstyle('text-valign').value;\n      if (va === 'top') {\n        ly -= lh2;\n      } else if (va === 'bottom') {\n        ly += lh2;\n      }\n      var ha = target.pstyle('text-halign').value;\n      if (ha === 'left') {\n        lx -= lw2;\n      } else if (ha === 'right') {\n        lx += lw2;\n      }\n      var labelIntersect = polygonIntersectLine(p1_i[0], p1_i[1], [lx - lw2, ly - lh2, lx + lw2, ly - lh2, lx + lw2, ly + lh2, lx - lw2, ly + lh2], tgtPos.x, tgtPos.y);\n      if (labelIntersect.length > 0) {\n        var refPt = srcPos;\n        var intSqdist = sqdist(refPt, array2point(intersect));\n        var labIntSqdist = sqdist(refPt, array2point(labelIntersect));\n        var minSqDist = intSqdist;\n        if (labIntSqdist < intSqdist) {\n          intersect = labelIntersect;\n          minSqDist = labIntSqdist;\n        }\n        if (labelIntersect.length > 2) {\n          var labInt2SqDist = sqdist(refPt, {\n            x: labelIntersect[2],\n            y: labelIntersect[3]\n          });\n          if (labInt2SqDist < minSqDist) {\n            intersect = [labelIntersect[2], labelIntersect[3]];\n          }\n        }\n      }\n    }\n  }\n  var arrowEnd = shortenIntersection(intersect, p1, r.arrowShapes[tgtArShape].spacing(edge) + tgtDist);\n  var edgeEnd = shortenIntersection(intersect, p1, r.arrowShapes[tgtArShape].gap(edge) + tgtDist);\n  rs.endX = edgeEnd[0];\n  rs.endY = edgeEnd[1];\n  rs.arrowEndX = arrowEnd[0];\n  rs.arrowEndY = arrowEnd[1];\n  if (srcManEndptVal === 'inside-to-node') {\n    intersect = [srcPos.x, srcPos.y];\n  } else if (srcManEndpt.units) {\n    intersect = this.manualEndptToPx(source, srcManEndpt);\n  } else if (srcManEndptVal === 'outside-to-line') {\n    intersect = rs.srcIntn; // use cached value from ctrlpt calc\n  } else {\n    if (srcManEndptVal === 'outside-to-node' || srcManEndptVal === 'outside-to-node-or-label') {\n      p2_i = p2;\n    } else if (srcManEndptVal === 'outside-to-line' || srcManEndptVal === 'outside-to-line-or-label') {\n      p2_i = [tgtPos.x, tgtPos.y];\n    }\n    intersect = r.nodeShapes[this.getNodeShape(source)].intersectLine(srcPos.x, srcPos.y, source.outerWidth(), source.outerHeight(), p2_i[0], p2_i[1], 0, srcCornerRadius, srcRs);\n    if (srcManEndptVal === 'outside-to-node-or-label' || srcManEndptVal === 'outside-to-line-or-label') {\n      var srs = source._private.rscratch;\n      var _lw = srs.labelWidth;\n      var _lh = srs.labelHeight;\n      var _lx = srs.labelX;\n      var _ly = srs.labelY;\n      var _lw2 = _lw / 2;\n      var _lh2 = _lh / 2;\n      var _va = source.pstyle('text-valign').value;\n      if (_va === 'top') {\n        _ly -= _lh2;\n      } else if (_va === 'bottom') {\n        _ly += _lh2;\n      }\n      var _ha = source.pstyle('text-halign').value;\n      if (_ha === 'left') {\n        _lx -= _lw2;\n      } else if (_ha === 'right') {\n        _lx += _lw2;\n      }\n      var _labelIntersect = polygonIntersectLine(p2_i[0], p2_i[1], [_lx - _lw2, _ly - _lh2, _lx + _lw2, _ly - _lh2, _lx + _lw2, _ly + _lh2, _lx - _lw2, _ly + _lh2], srcPos.x, srcPos.y);\n      if (_labelIntersect.length > 0) {\n        var _refPt = tgtPos;\n        var _intSqdist = sqdist(_refPt, array2point(intersect));\n        var _labIntSqdist = sqdist(_refPt, array2point(_labelIntersect));\n        var _minSqDist = _intSqdist;\n        if (_labIntSqdist < _intSqdist) {\n          intersect = [_labelIntersect[0], _labelIntersect[1]];\n          _minSqDist = _labIntSqdist;\n        }\n        if (_labelIntersect.length > 2) {\n          var _labInt2SqDist = sqdist(_refPt, {\n            x: _labelIntersect[2],\n            y: _labelIntersect[3]\n          });\n          if (_labInt2SqDist < _minSqDist) {\n            intersect = [_labelIntersect[2], _labelIntersect[3]];\n          }\n        }\n      }\n    }\n  }\n  var arrowStart = shortenIntersection(intersect, p2, r.arrowShapes[srcArShape].spacing(edge) + srcDist);\n  var edgeStart = shortenIntersection(intersect, p2, r.arrowShapes[srcArShape].gap(edge) + srcDist);\n  rs.startX = edgeStart[0];\n  rs.startY = edgeStart[1];\n  rs.arrowStartX = arrowStart[0];\n  rs.arrowStartY = arrowStart[1];\n  if (hasEndpts) {\n    if (!number$1(rs.startX) || !number$1(rs.startY) || !number$1(rs.endX) || !number$1(rs.endY)) {\n      rs.badLine = true;\n    } else {\n      rs.badLine = false;\n    }\n  }\n};\nBRp$b.getSourceEndpoint = function (edge) {\n  var rs = edge[0]._private.rscratch;\n  this.recalculateRenderedStyle(edge);\n  switch (rs.edgeType) {\n    case 'haystack':\n      return {\n        x: rs.haystackPts[0],\n        y: rs.haystackPts[1]\n      };\n    default:\n      return {\n        x: rs.arrowStartX,\n        y: rs.arrowStartY\n      };\n  }\n};\nBRp$b.getTargetEndpoint = function (edge) {\n  var rs = edge[0]._private.rscratch;\n  this.recalculateRenderedStyle(edge);\n  switch (rs.edgeType) {\n    case 'haystack':\n      return {\n        x: rs.haystackPts[2],\n        y: rs.haystackPts[3]\n      };\n    default:\n      return {\n        x: rs.arrowEndX,\n        y: rs.arrowEndY\n      };\n  }\n};\n\nvar BRp$a = {};\nfunction pushBezierPts(r, edge, pts) {\n  var qbezierAt$1 = function qbezierAt$1(p1, p2, p3, t) {\n    return qbezierAt(p1, p2, p3, t);\n  };\n  var _p = edge._private;\n  var bpts = _p.rstyle.bezierPts;\n  for (var i = 0; i < r.bezierProjPcts.length; i++) {\n    var p = r.bezierProjPcts[i];\n    bpts.push({\n      x: qbezierAt$1(pts[0], pts[2], pts[4], p),\n      y: qbezierAt$1(pts[1], pts[3], pts[5], p)\n    });\n  }\n}\nBRp$a.storeEdgeProjections = function (edge) {\n  var _p = edge._private;\n  var rs = _p.rscratch;\n  var et = rs.edgeType;\n\n  // clear the cached points state\n  _p.rstyle.bezierPts = null;\n  _p.rstyle.linePts = null;\n  _p.rstyle.haystackPts = null;\n  if (et === 'multibezier' || et === 'bezier' || et === 'self' || et === 'compound') {\n    _p.rstyle.bezierPts = [];\n    for (var i = 0; i + 5 < rs.allpts.length; i += 4) {\n      pushBezierPts(this, edge, rs.allpts.slice(i, i + 6));\n    }\n  } else if (et === 'segments') {\n    var lpts = _p.rstyle.linePts = [];\n    for (var i = 0; i + 1 < rs.allpts.length; i += 2) {\n      lpts.push({\n        x: rs.allpts[i],\n        y: rs.allpts[i + 1]\n      });\n    }\n  } else if (et === 'haystack') {\n    var hpts = rs.haystackPts;\n    _p.rstyle.haystackPts = [{\n      x: hpts[0],\n      y: hpts[1]\n    }, {\n      x: hpts[2],\n      y: hpts[3]\n    }];\n  }\n  _p.rstyle.arrowWidth = this.getArrowWidth(edge.pstyle('width').pfValue, edge.pstyle('arrow-scale').value) * this.arrowShapeWidth;\n};\nBRp$a.recalculateEdgeProjections = function (edges) {\n  this.findEdgeControlPoints(edges);\n};\n\nvar BRp$9 = {};\nBRp$9.recalculateNodeLabelProjection = function (node) {\n  var content = node.pstyle('label').strValue;\n  if (emptyString(content)) {\n    return;\n  }\n  var textX, textY;\n  var _p = node._private;\n  var nodeWidth = node.width();\n  var nodeHeight = node.height();\n  var padding = node.padding();\n  var nodePos = node.position();\n  var textHalign = node.pstyle('text-halign').strValue;\n  var textValign = node.pstyle('text-valign').strValue;\n  var rs = _p.rscratch;\n  var rstyle = _p.rstyle;\n  switch (textHalign) {\n    case 'left':\n      textX = nodePos.x - nodeWidth / 2 - padding;\n      break;\n    case 'right':\n      textX = nodePos.x + nodeWidth / 2 + padding;\n      break;\n    default:\n      // e.g. center\n      textX = nodePos.x;\n  }\n  switch (textValign) {\n    case 'top':\n      textY = nodePos.y - nodeHeight / 2 - padding;\n      break;\n    case 'bottom':\n      textY = nodePos.y + nodeHeight / 2 + padding;\n      break;\n    default:\n      // e.g. middle\n      textY = nodePos.y;\n  }\n  rs.labelX = textX;\n  rs.labelY = textY;\n  rstyle.labelX = textX;\n  rstyle.labelY = textY;\n  this.calculateLabelAngles(node);\n  this.applyLabelDimensions(node);\n};\nvar lineAngleFromDelta = function lineAngleFromDelta(dx, dy) {\n  var angle = Math.atan(dy / dx);\n  if (dx === 0 && angle < 0) {\n    angle = angle * -1;\n  }\n  return angle;\n};\nvar lineAngle = function lineAngle(p0, p1) {\n  var dx = p1.x - p0.x;\n  var dy = p1.y - p0.y;\n  return lineAngleFromDelta(dx, dy);\n};\nvar bezierAngle = function bezierAngle(p0, p1, p2, t) {\n  var t0 = bound(0, t - 0.001, 1);\n  var t1 = bound(0, t + 0.001, 1);\n  var lp0 = qbezierPtAt(p0, p1, p2, t0);\n  var lp1 = qbezierPtAt(p0, p1, p2, t1);\n  return lineAngle(lp0, lp1);\n};\nBRp$9.recalculateEdgeLabelProjections = function (edge) {\n  var p;\n  var _p = edge._private;\n  var rs = _p.rscratch;\n  var r = this;\n  var content = {\n    mid: edge.pstyle('label').strValue,\n    source: edge.pstyle('source-label').strValue,\n    target: edge.pstyle('target-label').strValue\n  };\n  if (content.mid || content.source || content.target) ; else {\n    return; // no labels => no calcs\n  }\n\n  // add center point to style so bounding box calculations can use it\n  //\n  p = {\n    x: rs.midX,\n    y: rs.midY\n  };\n  var setRs = function setRs(propName, prefix, value) {\n    setPrefixedProperty(_p.rscratch, propName, prefix, value);\n    setPrefixedProperty(_p.rstyle, propName, prefix, value);\n  };\n  setRs('labelX', null, p.x);\n  setRs('labelY', null, p.y);\n  var midAngle = lineAngleFromDelta(rs.midDispX, rs.midDispY);\n  setRs('labelAutoAngle', null, midAngle);\n  var createControlPointInfo = function createControlPointInfo() {\n    if (createControlPointInfo.cache) {\n      return createControlPointInfo.cache;\n    } // use cache so only 1x per edge\n\n    var ctrlpts = [];\n\n    // store each ctrlpt info init\n    for (var i = 0; i + 5 < rs.allpts.length; i += 4) {\n      var p0 = {\n        x: rs.allpts[i],\n        y: rs.allpts[i + 1]\n      };\n      var p1 = {\n        x: rs.allpts[i + 2],\n        y: rs.allpts[i + 3]\n      }; // ctrlpt\n      var p2 = {\n        x: rs.allpts[i + 4],\n        y: rs.allpts[i + 5]\n      };\n      ctrlpts.push({\n        p0: p0,\n        p1: p1,\n        p2: p2,\n        startDist: 0,\n        length: 0,\n        segments: []\n      });\n    }\n    var bpts = _p.rstyle.bezierPts;\n    var nProjs = r.bezierProjPcts.length;\n    function addSegment(cp, p0, p1, t0, t1) {\n      var length = dist(p0, p1);\n      var prevSegment = cp.segments[cp.segments.length - 1];\n      var segment = {\n        p0: p0,\n        p1: p1,\n        t0: t0,\n        t1: t1,\n        startDist: prevSegment ? prevSegment.startDist + prevSegment.length : 0,\n        length: length\n      };\n      cp.segments.push(segment);\n      cp.length += length;\n    }\n\n    // update each ctrlpt with segment info\n    for (var _i = 0; _i < ctrlpts.length; _i++) {\n      var cp = ctrlpts[_i];\n      var prevCp = ctrlpts[_i - 1];\n      if (prevCp) {\n        cp.startDist = prevCp.startDist + prevCp.length;\n      }\n      addSegment(cp, cp.p0, bpts[_i * nProjs], 0, r.bezierProjPcts[0]); // first\n\n      for (var j = 0; j < nProjs - 1; j++) {\n        addSegment(cp, bpts[_i * nProjs + j], bpts[_i * nProjs + j + 1], r.bezierProjPcts[j], r.bezierProjPcts[j + 1]);\n      }\n      addSegment(cp, bpts[_i * nProjs + nProjs - 1], cp.p2, r.bezierProjPcts[nProjs - 1], 1); // last\n    }\n\n    return createControlPointInfo.cache = ctrlpts;\n  };\n  var calculateEndProjection = function calculateEndProjection(prefix) {\n    var angle;\n    var isSrc = prefix === 'source';\n    if (!content[prefix]) {\n      return;\n    }\n    var offset = edge.pstyle(prefix + '-text-offset').pfValue;\n    switch (rs.edgeType) {\n      case 'self':\n      case 'compound':\n      case 'bezier':\n      case 'multibezier':\n        {\n          var cps = createControlPointInfo();\n          var selected;\n          var startDist = 0;\n          var totalDist = 0;\n\n          // find the segment we're on\n          for (var i = 0; i < cps.length; i++) {\n            var _cp = cps[isSrc ? i : cps.length - 1 - i];\n            for (var j = 0; j < _cp.segments.length; j++) {\n              var _seg = _cp.segments[isSrc ? j : _cp.segments.length - 1 - j];\n              var lastSeg = i === cps.length - 1 && j === _cp.segments.length - 1;\n              startDist = totalDist;\n              totalDist += _seg.length;\n              if (totalDist >= offset || lastSeg) {\n                selected = {\n                  cp: _cp,\n                  segment: _seg\n                };\n                break;\n              }\n            }\n            if (selected) {\n              break;\n            }\n          }\n          var cp = selected.cp;\n          var seg = selected.segment;\n          var tSegment = (offset - startDist) / seg.length;\n          var segDt = seg.t1 - seg.t0;\n          var t = isSrc ? seg.t0 + segDt * tSegment : seg.t1 - segDt * tSegment;\n          t = bound(0, t, 1);\n          p = qbezierPtAt(cp.p0, cp.p1, cp.p2, t);\n          angle = bezierAngle(cp.p0, cp.p1, cp.p2, t);\n          break;\n        }\n      case 'straight':\n      case 'segments':\n      case 'haystack':\n        {\n          var d = 0,\n            di,\n            d0;\n          var p0, p1;\n          var l = rs.allpts.length;\n          for (var _i2 = 0; _i2 + 3 < l; _i2 += 2) {\n            if (isSrc) {\n              p0 = {\n                x: rs.allpts[_i2],\n                y: rs.allpts[_i2 + 1]\n              };\n              p1 = {\n                x: rs.allpts[_i2 + 2],\n                y: rs.allpts[_i2 + 3]\n              };\n            } else {\n              p0 = {\n                x: rs.allpts[l - 2 - _i2],\n                y: rs.allpts[l - 1 - _i2]\n              };\n              p1 = {\n                x: rs.allpts[l - 4 - _i2],\n                y: rs.allpts[l - 3 - _i2]\n              };\n            }\n            di = dist(p0, p1);\n            d0 = d;\n            d += di;\n            if (d >= offset) {\n              break;\n            }\n          }\n          var pD = offset - d0;\n          var _t = pD / di;\n          _t = bound(0, _t, 1);\n          p = lineAt(p0, p1, _t);\n          angle = lineAngle(p0, p1);\n          break;\n        }\n    }\n    setRs('labelX', prefix, p.x);\n    setRs('labelY', prefix, p.y);\n    setRs('labelAutoAngle', prefix, angle);\n  };\n  calculateEndProjection('source');\n  calculateEndProjection('target');\n  this.applyLabelDimensions(edge);\n};\nBRp$9.applyLabelDimensions = function (ele) {\n  this.applyPrefixedLabelDimensions(ele);\n  if (ele.isEdge()) {\n    this.applyPrefixedLabelDimensions(ele, 'source');\n    this.applyPrefixedLabelDimensions(ele, 'target');\n  }\n};\nBRp$9.applyPrefixedLabelDimensions = function (ele, prefix) {\n  var _p = ele._private;\n  var text = this.getLabelText(ele, prefix);\n  var labelDims = this.calculateLabelDimensions(ele, text);\n  var lineHeight = ele.pstyle('line-height').pfValue;\n  var textWrap = ele.pstyle('text-wrap').strValue;\n  var lines = getPrefixedProperty(_p.rscratch, 'labelWrapCachedLines', prefix) || [];\n  var numLines = textWrap !== 'wrap' ? 1 : Math.max(lines.length, 1);\n  var normPerLineHeight = labelDims.height / numLines;\n  var labelLineHeight = normPerLineHeight * lineHeight;\n  var width = labelDims.width;\n  var height = labelDims.height + (numLines - 1) * (lineHeight - 1) * normPerLineHeight;\n  setPrefixedProperty(_p.rstyle, 'labelWidth', prefix, width);\n  setPrefixedProperty(_p.rscratch, 'labelWidth', prefix, width);\n  setPrefixedProperty(_p.rstyle, 'labelHeight', prefix, height);\n  setPrefixedProperty(_p.rscratch, 'labelHeight', prefix, height);\n  setPrefixedProperty(_p.rscratch, 'labelLineHeight', prefix, labelLineHeight);\n};\nBRp$9.getLabelText = function (ele, prefix) {\n  var _p = ele._private;\n  var pfd = prefix ? prefix + '-' : '';\n  var text = ele.pstyle(pfd + 'label').strValue;\n  var textTransform = ele.pstyle('text-transform').value;\n  var rscratch = function rscratch(propName, value) {\n    if (value) {\n      setPrefixedProperty(_p.rscratch, propName, prefix, value);\n      return value;\n    } else {\n      return getPrefixedProperty(_p.rscratch, propName, prefix);\n    }\n  };\n\n  // for empty text, skip all processing\n  if (!text) {\n    return '';\n  }\n  if (textTransform == 'none') ; else if (textTransform == 'uppercase') {\n    text = text.toUpperCase();\n  } else if (textTransform == 'lowercase') {\n    text = text.toLowerCase();\n  }\n  var wrapStyle = ele.pstyle('text-wrap').value;\n  if (wrapStyle === 'wrap') {\n    var labelKey = rscratch('labelKey');\n\n    // save recalc if the label is the same as before\n    if (labelKey != null && rscratch('labelWrapKey') === labelKey) {\n      return rscratch('labelWrapCachedText');\n    }\n    var zwsp = \"\\u200B\";\n    var lines = text.split('\\n');\n    var maxW = ele.pstyle('text-max-width').pfValue;\n    var overflow = ele.pstyle('text-overflow-wrap').value;\n    var overflowAny = overflow === 'anywhere';\n    var wrappedLines = [];\n    var separatorRegex = /[\\s\\u200b]+|$/g; // Include end of string to add last word\n\n    for (var l = 0; l < lines.length; l++) {\n      var line = lines[l];\n      var lineDims = this.calculateLabelDimensions(ele, line);\n      var lineW = lineDims.width;\n      if (overflowAny) {\n        var processedLine = line.split('').join(zwsp);\n        line = processedLine;\n      }\n      if (lineW > maxW) {\n        // line is too long\n        var separatorMatches = line.matchAll(separatorRegex);\n        var subline = '';\n        var previousIndex = 0;\n        // Add fake match\n        var _iterator = _createForOfIteratorHelper(separatorMatches),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var separatorMatch = _step.value;\n            var wordSeparator = separatorMatch[0];\n            var word = line.substring(previousIndex, separatorMatch.index);\n            previousIndex = separatorMatch.index + wordSeparator.length;\n            var testLine = subline.length === 0 ? word : subline + word + wordSeparator;\n            var testDims = this.calculateLabelDimensions(ele, testLine);\n            var testW = testDims.width;\n            if (testW <= maxW) {\n              // word fits on current line\n              subline += word + wordSeparator;\n            } else {\n              // word starts new line\n              if (subline) {\n                wrappedLines.push(subline);\n              }\n              subline = word + wordSeparator;\n            }\n          }\n\n          // if there's remaining text, put it in a wrapped line\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n        if (!subline.match(/^[\\s\\u200b]+$/)) {\n          wrappedLines.push(subline);\n        }\n      } else {\n        // line is already short enough\n        wrappedLines.push(line);\n      }\n    } // for\n\n    rscratch('labelWrapCachedLines', wrappedLines);\n    text = rscratch('labelWrapCachedText', wrappedLines.join('\\n'));\n    rscratch('labelWrapKey', labelKey);\n  } else if (wrapStyle === 'ellipsis') {\n    var _maxW = ele.pstyle('text-max-width').pfValue;\n    var ellipsized = '';\n    var ellipsis = \"\\u2026\";\n    var incLastCh = false;\n    if (this.calculateLabelDimensions(ele, text).width < _maxW) {\n      // the label already fits\n      return text;\n    }\n    for (var i = 0; i < text.length; i++) {\n      var widthWithNextCh = this.calculateLabelDimensions(ele, ellipsized + text[i] + ellipsis).width;\n      if (widthWithNextCh > _maxW) {\n        break;\n      }\n      ellipsized += text[i];\n      if (i === text.length - 1) {\n        incLastCh = true;\n      }\n    }\n    if (!incLastCh) {\n      ellipsized += ellipsis;\n    }\n    return ellipsized;\n  } // if ellipsize\n\n  return text;\n};\nBRp$9.getLabelJustification = function (ele) {\n  var justification = ele.pstyle('text-justification').strValue;\n  var textHalign = ele.pstyle('text-halign').strValue;\n  if (justification === 'auto') {\n    if (ele.isNode()) {\n      switch (textHalign) {\n        case 'left':\n          return 'right';\n        case 'right':\n          return 'left';\n        default:\n          return 'center';\n      }\n    } else {\n      return 'center';\n    }\n  } else {\n    return justification;\n  }\n};\nBRp$9.calculateLabelDimensions = function (ele, text) {\n  var r = this;\n  var containerWindow = r.cy.window();\n  var document = containerWindow.document;\n  var cacheKey = hashString(text, ele._private.labelDimsKey);\n  var cache = r.labelDimCache || (r.labelDimCache = []);\n  var existingVal = cache[cacheKey];\n  if (existingVal != null) {\n    return existingVal;\n  }\n  var padding = 0; // add padding around text dims, as the measurement isn't that accurate\n  var fStyle = ele.pstyle('font-style').strValue;\n  var size = ele.pstyle('font-size').pfValue;\n  var family = ele.pstyle('font-family').strValue;\n  var weight = ele.pstyle('font-weight').strValue;\n  var canvas = this.labelCalcCanvas;\n  var c2d = this.labelCalcCanvasContext;\n  if (!canvas) {\n    canvas = this.labelCalcCanvas = document.createElement('canvas');\n    c2d = this.labelCalcCanvasContext = canvas.getContext('2d');\n    var ds = canvas.style;\n    ds.position = 'absolute';\n    ds.left = '-9999px';\n    ds.top = '-9999px';\n    ds.zIndex = '-1';\n    ds.visibility = 'hidden';\n    ds.pointerEvents = 'none';\n  }\n  c2d.font = \"\".concat(fStyle, \" \").concat(weight, \" \").concat(size, \"px \").concat(family);\n  var width = 0;\n  var height = 0;\n  var lines = text.split('\\n');\n  for (var i = 0; i < lines.length; i++) {\n    var line = lines[i];\n    var metrics = c2d.measureText(line);\n    var w = Math.ceil(metrics.width);\n    var h = size;\n    width = Math.max(w, width);\n    height += h;\n  }\n  width += padding;\n  height += padding;\n  return cache[cacheKey] = {\n    width: width,\n    height: height\n  };\n};\nBRp$9.calculateLabelAngle = function (ele, prefix) {\n  var _p = ele._private;\n  var rs = _p.rscratch;\n  var isEdge = ele.isEdge();\n  var prefixDash = prefix ? prefix + '-' : '';\n  var rot = ele.pstyle(prefixDash + 'text-rotation');\n  var rotStr = rot.strValue;\n  if (rotStr === 'none') {\n    return 0;\n  } else if (isEdge && rotStr === 'autorotate') {\n    return rs.labelAutoAngle;\n  } else if (rotStr === 'autorotate') {\n    return 0;\n  } else {\n    return rot.pfValue;\n  }\n};\nBRp$9.calculateLabelAngles = function (ele) {\n  var r = this;\n  var isEdge = ele.isEdge();\n  var _p = ele._private;\n  var rs = _p.rscratch;\n  rs.labelAngle = r.calculateLabelAngle(ele);\n  if (isEdge) {\n    rs.sourceLabelAngle = r.calculateLabelAngle(ele, 'source');\n    rs.targetLabelAngle = r.calculateLabelAngle(ele, 'target');\n  }\n};\n\nvar BRp$8 = {};\nvar TOO_SMALL_CUT_RECT = 28;\nvar warnedCutRect = false;\nBRp$8.getNodeShape = function (node) {\n  var r = this;\n  var shape = node.pstyle('shape').value;\n  if (shape === 'cutrectangle' && (node.width() < TOO_SMALL_CUT_RECT || node.height() < TOO_SMALL_CUT_RECT)) {\n    if (!warnedCutRect) {\n      warn('The `cutrectangle` node shape can not be used at small sizes so `rectangle` is used instead');\n      warnedCutRect = true;\n    }\n    return 'rectangle';\n  }\n  if (node.isParent()) {\n    if (shape === 'rectangle' || shape === 'roundrectangle' || shape === 'round-rectangle' || shape === 'cutrectangle' || shape === 'cut-rectangle' || shape === 'barrel') {\n      return shape;\n    } else {\n      return 'rectangle';\n    }\n  }\n  if (shape === 'polygon') {\n    var points = node.pstyle('shape-polygon-points').value;\n    return r.nodeShapes.makePolygon(points).name;\n  }\n  return shape;\n};\n\nvar BRp$7 = {};\nBRp$7.registerCalculationListeners = function () {\n  var cy = this.cy;\n  var elesToUpdate = cy.collection();\n  var r = this;\n  var enqueue = function enqueue(eles) {\n    var dirtyStyleCaches = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    elesToUpdate.merge(eles);\n    if (dirtyStyleCaches) {\n      for (var i = 0; i < eles.length; i++) {\n        var ele = eles[i];\n        var _p = ele._private;\n        var rstyle = _p.rstyle;\n        rstyle.clean = false;\n        rstyle.cleanConnected = false;\n      }\n    }\n  };\n  r.binder(cy).on('bounds.* dirty.*', function onDirtyBounds(e) {\n    var ele = e.target;\n    enqueue(ele);\n  }).on('style.* background.*', function onDirtyStyle(e) {\n    var ele = e.target;\n    enqueue(ele, false);\n  });\n  var updateEleCalcs = function updateEleCalcs(willDraw) {\n    if (willDraw) {\n      var fns = r.onUpdateEleCalcsFns;\n\n      // because we need to have up-to-date style (e.g. stylesheet mappers)\n      // before calculating rendered style (and pstyle might not be called yet)\n      elesToUpdate.cleanStyle();\n      for (var i = 0; i < elesToUpdate.length; i++) {\n        var ele = elesToUpdate[i];\n        var rstyle = ele._private.rstyle;\n        if (ele.isNode() && !rstyle.cleanConnected) {\n          enqueue(ele.connectedEdges());\n          rstyle.cleanConnected = true;\n        }\n      }\n      if (fns) {\n        for (var _i = 0; _i < fns.length; _i++) {\n          var fn = fns[_i];\n          fn(willDraw, elesToUpdate);\n        }\n      }\n      r.recalculateRenderedStyle(elesToUpdate);\n      elesToUpdate = cy.collection();\n    }\n  };\n  r.flushRenderedStyleQueue = function () {\n    updateEleCalcs(true);\n  };\n  r.beforeRender(updateEleCalcs, r.beforeRenderPriorities.eleCalcs);\n};\nBRp$7.onUpdateEleCalcs = function (fn) {\n  var fns = this.onUpdateEleCalcsFns = this.onUpdateEleCalcsFns || [];\n  fns.push(fn);\n};\nBRp$7.recalculateRenderedStyle = function (eles, useCache) {\n  var isCleanConnected = function isCleanConnected(ele) {\n    return ele._private.rstyle.cleanConnected;\n  };\n  var edges = [];\n  var nodes = [];\n\n  // the renderer can't be used for calcs when destroyed, e.g. ele.boundingBox()\n  if (this.destroyed) {\n    return;\n  }\n\n  // use cache by default for perf\n  if (useCache === undefined) {\n    useCache = true;\n  }\n  for (var i = 0; i < eles.length; i++) {\n    var ele = eles[i];\n    var _p = ele._private;\n    var rstyle = _p.rstyle;\n\n    // an edge may be implicitly dirty b/c of one of its connected nodes\n    // (and a request for recalc may come in between frames)\n    if (ele.isEdge() && (!isCleanConnected(ele.source()) || !isCleanConnected(ele.target()))) {\n      rstyle.clean = false;\n    }\n\n    // only update if dirty and in graph\n    if (useCache && rstyle.clean || ele.removed()) {\n      continue;\n    }\n\n    // only update if not display: none\n    if (ele.pstyle('display').value === 'none') {\n      continue;\n    }\n    if (_p.group === 'nodes') {\n      nodes.push(ele);\n    } else {\n      // edges\n      edges.push(ele);\n    }\n    rstyle.clean = true;\n  }\n\n  // update node data from projections\n  for (var _i2 = 0; _i2 < nodes.length; _i2++) {\n    var _ele = nodes[_i2];\n    var _p2 = _ele._private;\n    var _rstyle = _p2.rstyle;\n    var pos = _ele.position();\n    this.recalculateNodeLabelProjection(_ele);\n    _rstyle.nodeX = pos.x;\n    _rstyle.nodeY = pos.y;\n    _rstyle.nodeW = _ele.pstyle('width').pfValue;\n    _rstyle.nodeH = _ele.pstyle('height').pfValue;\n  }\n  this.recalculateEdgeProjections(edges);\n\n  // update edge data from projections\n  for (var _i3 = 0; _i3 < edges.length; _i3++) {\n    var _ele2 = edges[_i3];\n    var _p3 = _ele2._private;\n    var _rstyle2 = _p3.rstyle;\n    var rs = _p3.rscratch;\n\n    // update rstyle positions\n    _rstyle2.srcX = rs.arrowStartX;\n    _rstyle2.srcY = rs.arrowStartY;\n    _rstyle2.tgtX = rs.arrowEndX;\n    _rstyle2.tgtY = rs.arrowEndY;\n    _rstyle2.midX = rs.midX;\n    _rstyle2.midY = rs.midY;\n    _rstyle2.labelAngle = rs.labelAngle;\n    _rstyle2.sourceLabelAngle = rs.sourceLabelAngle;\n    _rstyle2.targetLabelAngle = rs.targetLabelAngle;\n  }\n};\n\nvar BRp$6 = {};\nBRp$6.updateCachedGrabbedEles = function () {\n  var eles = this.cachedZSortedEles;\n  if (!eles) {\n    // just let this be recalculated on the next z sort tick\n    return;\n  }\n  eles.drag = [];\n  eles.nondrag = [];\n  var grabTargets = [];\n  for (var i = 0; i < eles.length; i++) {\n    var ele = eles[i];\n    var rs = ele._private.rscratch;\n    if (ele.grabbed() && !ele.isParent()) {\n      grabTargets.push(ele);\n    } else if (rs.inDragLayer) {\n      eles.drag.push(ele);\n    } else {\n      eles.nondrag.push(ele);\n    }\n  }\n\n  // put the grab target nodes last so it's on top of its neighbourhood\n  for (var i = 0; i < grabTargets.length; i++) {\n    var ele = grabTargets[i];\n    eles.drag.push(ele);\n  }\n};\nBRp$6.invalidateCachedZSortedEles = function () {\n  this.cachedZSortedEles = null;\n};\nBRp$6.getCachedZSortedEles = function (forceRecalc) {\n  if (forceRecalc || !this.cachedZSortedEles) {\n    var eles = this.cy.mutableElements().toArray();\n    eles.sort(zIndexSort);\n    eles.interactive = eles.filter(function (ele) {\n      return ele.interactive();\n    });\n    this.cachedZSortedEles = eles;\n    this.updateCachedGrabbedEles();\n  } else {\n    eles = this.cachedZSortedEles;\n  }\n  return eles;\n};\n\nvar BRp$5 = {};\n[BRp$e, BRp$d, BRp$c, BRp$b, BRp$a, BRp$9, BRp$8, BRp$7, BRp$6].forEach(function (props) {\n  extend(BRp$5, props);\n});\n\nvar BRp$4 = {};\nBRp$4.getCachedImage = function (url, crossOrigin, onLoad) {\n  var r = this;\n  var imageCache = r.imageCache = r.imageCache || {};\n  var cache = imageCache[url];\n  if (cache) {\n    if (!cache.image.complete) {\n      cache.image.addEventListener('load', onLoad);\n    }\n    return cache.image;\n  } else {\n    cache = imageCache[url] = imageCache[url] || {};\n    var image = cache.image = new Image(); // eslint-disable-line no-undef\n\n    image.addEventListener('load', onLoad);\n    image.addEventListener('error', function () {\n      image.error = true;\n    });\n\n    // #1582 safari doesn't load data uris with crossOrigin properly\n    // https://bugs.webkit.org/show_bug.cgi?id=123978\n    var dataUriPrefix = 'data:';\n    var isDataUri = url.substring(0, dataUriPrefix.length).toLowerCase() === dataUriPrefix;\n    if (!isDataUri) {\n      // if crossorigin is 'null'(stringified), then manually set it to null \n      crossOrigin = crossOrigin === 'null' ? null : crossOrigin;\n      image.crossOrigin = crossOrigin; // prevent tainted canvas\n    }\n\n    image.src = url;\n    return image;\n  }\n};\n\nvar BRp$3 = {};\n\n/* global document, ResizeObserver, MutationObserver */\n\nBRp$3.registerBinding = function (target, event, handler, useCapture) {\n  // eslint-disable-line no-unused-vars\n  var args = Array.prototype.slice.apply(arguments, [1]); // copy\n\n  if (Array.isArray(target)) {\n    var res = [];\n    for (var i = 0; i < target.length; i++) {\n      var t = target[i];\n      if (t !== undefined) {\n        var b = this.binder(t);\n        res.push(b.on.apply(b, args));\n      }\n    }\n    return res;\n  }\n  var b = this.binder(target);\n  return b.on.apply(b, args);\n};\nBRp$3.binder = function (tgt) {\n  var r = this;\n  var containerWindow = r.cy.window();\n  var tgtIsDom = tgt === containerWindow || tgt === containerWindow.document || tgt === containerWindow.document.body || domElement(tgt);\n  if (r.supportsPassiveEvents == null) {\n    // from https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md#feature-detection\n    var supportsPassive = false;\n    try {\n      var opts = Object.defineProperty({}, 'passive', {\n        get: function get() {\n          supportsPassive = true;\n          return true;\n        }\n      });\n      containerWindow.addEventListener('test', null, opts);\n    } catch (err) {\n      // not supported\n    }\n    r.supportsPassiveEvents = supportsPassive;\n  }\n  var on = function on(event, handler, useCapture) {\n    var args = Array.prototype.slice.call(arguments);\n    if (tgtIsDom && r.supportsPassiveEvents) {\n      // replace useCapture w/ opts obj\n      args[2] = {\n        capture: useCapture != null ? useCapture : false,\n        passive: false,\n        once: false\n      };\n    }\n    r.bindings.push({\n      target: tgt,\n      args: args\n    });\n    (tgt.addEventListener || tgt.on).apply(tgt, args);\n    return this;\n  };\n  return {\n    on: on,\n    addEventListener: on,\n    addListener: on,\n    bind: on\n  };\n};\nBRp$3.nodeIsDraggable = function (node) {\n  return node && node.isNode() && !node.locked() && node.grabbable();\n};\nBRp$3.nodeIsGrabbable = function (node) {\n  return this.nodeIsDraggable(node) && node.interactive();\n};\nBRp$3.load = function () {\n  var r = this;\n  var containerWindow = r.cy.window();\n  var isSelected = function isSelected(ele) {\n    return ele.selected();\n  };\n  var getShadowRoot = function getShadowRoot(element) {\n    var rootNode = element.getRootNode();\n    // Check if the root node is a shadow root\n    if (rootNode && rootNode.nodeType === 11 && rootNode.host !== undefined) {\n      return rootNode;\n    }\n  };\n  var triggerEvents = function triggerEvents(target, names, e, position) {\n    if (target == null) {\n      target = r.cy;\n    }\n    for (var i = 0; i < names.length; i++) {\n      var name = names[i];\n      target.emit({\n        originalEvent: e,\n        type: name,\n        position: position\n      });\n    }\n  };\n  var isMultSelKeyDown = function isMultSelKeyDown(e) {\n    return e.shiftKey || e.metaKey || e.ctrlKey; // maybe e.altKey\n  };\n\n  var allowPanningPassthrough = function allowPanningPassthrough(down, downs) {\n    var allowPassthrough = true;\n    if (r.cy.hasCompoundNodes() && down && down.pannable()) {\n      // a grabbable compound node below the ele => no passthrough panning\n      for (var i = 0; downs && i < downs.length; i++) {\n        var down = downs[i];\n\n        //if any parent node in event hierarchy isn't pannable, reject passthrough\n        if (down.isNode() && down.isParent() && !down.pannable()) {\n          allowPassthrough = false;\n          break;\n        }\n      }\n    } else {\n      allowPassthrough = true;\n    }\n    return allowPassthrough;\n  };\n  var setGrabbed = function setGrabbed(ele) {\n    ele[0]._private.grabbed = true;\n  };\n  var setFreed = function setFreed(ele) {\n    ele[0]._private.grabbed = false;\n  };\n  var setInDragLayer = function setInDragLayer(ele) {\n    ele[0]._private.rscratch.inDragLayer = true;\n  };\n  var setOutDragLayer = function setOutDragLayer(ele) {\n    ele[0]._private.rscratch.inDragLayer = false;\n  };\n  var setGrabTarget = function setGrabTarget(ele) {\n    ele[0]._private.rscratch.isGrabTarget = true;\n  };\n  var removeGrabTarget = function removeGrabTarget(ele) {\n    ele[0]._private.rscratch.isGrabTarget = false;\n  };\n  var addToDragList = function addToDragList(ele, opts) {\n    var list = opts.addToList;\n    var listHasEle = list.has(ele);\n    if (!listHasEle && ele.grabbable() && !ele.locked()) {\n      list.merge(ele);\n      setGrabbed(ele);\n    }\n  };\n\n  // helper function to determine which child nodes and inner edges\n  // of a compound node to be dragged as well as the grabbed and selected nodes\n  var addDescendantsToDrag = function addDescendantsToDrag(node, opts) {\n    if (!node.cy().hasCompoundNodes()) {\n      return;\n    }\n    if (opts.inDragLayer == null && opts.addToList == null) {\n      return;\n    } // nothing to do\n\n    var innerNodes = node.descendants();\n    if (opts.inDragLayer) {\n      innerNodes.forEach(setInDragLayer);\n      innerNodes.connectedEdges().forEach(setInDragLayer);\n    }\n    if (opts.addToList) {\n      addToDragList(innerNodes, opts);\n    }\n  };\n\n  // adds the given nodes and its neighbourhood to the drag layer\n  var addNodesToDrag = function addNodesToDrag(nodes, opts) {\n    opts = opts || {};\n    var hasCompoundNodes = nodes.cy().hasCompoundNodes();\n    if (opts.inDragLayer) {\n      nodes.forEach(setInDragLayer);\n      nodes.neighborhood().stdFilter(function (ele) {\n        return !hasCompoundNodes || ele.isEdge();\n      }).forEach(setInDragLayer);\n    }\n    if (opts.addToList) {\n      nodes.forEach(function (ele) {\n        addToDragList(ele, opts);\n      });\n    }\n    addDescendantsToDrag(nodes, opts); // always add to drag\n\n    // also add nodes and edges related to the topmost ancestor\n    updateAncestorsInDragLayer(nodes, {\n      inDragLayer: opts.inDragLayer\n    });\n    r.updateCachedGrabbedEles();\n  };\n  var addNodeToDrag = addNodesToDrag;\n  var freeDraggedElements = function freeDraggedElements(grabbedEles) {\n    if (!grabbedEles) {\n      return;\n    }\n\n    // just go over all elements rather than doing a bunch of (possibly expensive) traversals\n    r.getCachedZSortedEles().forEach(function (ele) {\n      setFreed(ele);\n      setOutDragLayer(ele);\n      removeGrabTarget(ele);\n    });\n    r.updateCachedGrabbedEles();\n  };\n\n  // helper function to determine which ancestor nodes and edges should go\n  // to the drag layer (or should be removed from drag layer).\n  var updateAncestorsInDragLayer = function updateAncestorsInDragLayer(node, opts) {\n    if (opts.inDragLayer == null && opts.addToList == null) {\n      return;\n    } // nothing to do\n\n    if (!node.cy().hasCompoundNodes()) {\n      return;\n    }\n\n    // find top-level parent\n    var parent = node.ancestors().orphans();\n\n    // no parent node: no nodes to add to the drag layer\n    if (parent.same(node)) {\n      return;\n    }\n    var nodes = parent.descendants().spawnSelf().merge(parent).unmerge(node).unmerge(node.descendants());\n    var edges = nodes.connectedEdges();\n    if (opts.inDragLayer) {\n      edges.forEach(setInDragLayer);\n      nodes.forEach(setInDragLayer);\n    }\n    if (opts.addToList) {\n      nodes.forEach(function (ele) {\n        addToDragList(ele, opts);\n      });\n    }\n  };\n  var blurActiveDomElement = function blurActiveDomElement() {\n    if (document.activeElement != null && document.activeElement.blur != null) {\n      document.activeElement.blur();\n    }\n  };\n  var haveMutationsApi = typeof MutationObserver !== 'undefined';\n  var haveResizeObserverApi = typeof ResizeObserver !== 'undefined';\n\n  // watch for when the cy container is removed from the dom\n  if (haveMutationsApi) {\n    r.removeObserver = new MutationObserver(function (mutns) {\n      // eslint-disable-line no-undef\n      for (var i = 0; i < mutns.length; i++) {\n        var mutn = mutns[i];\n        var rNodes = mutn.removedNodes;\n        if (rNodes) {\n          for (var j = 0; j < rNodes.length; j++) {\n            var rNode = rNodes[j];\n            if (rNode === r.container) {\n              r.destroy();\n              break;\n            }\n          }\n        }\n      }\n    });\n    if (r.container.parentNode) {\n      r.removeObserver.observe(r.container.parentNode, {\n        childList: true\n      });\n    }\n  } else {\n    r.registerBinding(r.container, 'DOMNodeRemoved', function (e) {\n      // eslint-disable-line no-unused-vars\n      r.destroy();\n    });\n  }\n  var onResize = debounce_1(function () {\n    r.cy.resize();\n  }, 100);\n  if (haveMutationsApi) {\n    r.styleObserver = new MutationObserver(onResize); // eslint-disable-line no-undef\n\n    r.styleObserver.observe(r.container, {\n      attributes: true\n    });\n  }\n\n  // auto resize\n  r.registerBinding(containerWindow, 'resize', onResize); // eslint-disable-line no-undef\n\n  if (haveResizeObserverApi) {\n    r.resizeObserver = new ResizeObserver(onResize); // eslint-disable-line no-undef\n\n    r.resizeObserver.observe(r.container);\n  }\n  var forEachUp = function forEachUp(domEle, fn) {\n    while (domEle != null) {\n      fn(domEle);\n      domEle = domEle.parentNode;\n    }\n  };\n  var invalidateCoords = function invalidateCoords() {\n    r.invalidateContainerClientCoordsCache();\n  };\n  forEachUp(r.container, function (domEle) {\n    r.registerBinding(domEle, 'transitionend', invalidateCoords);\n    r.registerBinding(domEle, 'animationend', invalidateCoords);\n    r.registerBinding(domEle, 'scroll', invalidateCoords);\n  });\n\n  // stop right click menu from appearing on cy\n  r.registerBinding(r.container, 'contextmenu', function (e) {\n    e.preventDefault();\n  });\n  var inBoxSelection = function inBoxSelection() {\n    return r.selection[4] !== 0;\n  };\n  var eventInContainer = function eventInContainer(e) {\n    // save cycles if mouse events aren't to be captured\n    var containerPageCoords = r.findContainerClientCoords();\n    var x = containerPageCoords[0];\n    var y = containerPageCoords[1];\n    var width = containerPageCoords[2];\n    var height = containerPageCoords[3];\n    var positions = e.touches ? e.touches : [e];\n    var atLeastOnePosInside = false;\n    for (var i = 0; i < positions.length; i++) {\n      var p = positions[i];\n      if (x <= p.clientX && p.clientX <= x + width && y <= p.clientY && p.clientY <= y + height) {\n        atLeastOnePosInside = true;\n        break;\n      }\n    }\n    if (!atLeastOnePosInside) {\n      return false;\n    }\n    var container = r.container;\n    var target = e.target;\n    var tParent = target.parentNode;\n    var containerIsTarget = false;\n    while (tParent) {\n      if (tParent === container) {\n        containerIsTarget = true;\n        break;\n      }\n      tParent = tParent.parentNode;\n    }\n    if (!containerIsTarget) {\n      return false;\n    } // if target is outisde cy container, then this event is not for us\n\n    return true;\n  };\n\n  // Primary key\n  r.registerBinding(r.container, 'mousedown', function mousedownHandler(e) {\n    if (!eventInContainer(e)) {\n      return;\n    }\n\n    // during left mouse button gestures, ignore other buttons\n    if (r.hoverData.which === 1 && e.which !== 1) {\n      return;\n    }\n    e.preventDefault();\n    blurActiveDomElement();\n    r.hoverData.capture = true;\n    r.hoverData.which = e.which;\n    var cy = r.cy;\n    var gpos = [e.clientX, e.clientY];\n    var pos = r.projectIntoViewport(gpos[0], gpos[1]);\n    var select = r.selection;\n    var nears = r.findNearestElements(pos[0], pos[1], true, false);\n    var near = nears[0];\n    var draggedElements = r.dragData.possibleDragElements;\n    r.hoverData.mdownPos = pos;\n    r.hoverData.mdownGPos = gpos;\n    var checkForTaphold = function checkForTaphold() {\n      r.hoverData.tapholdCancelled = false;\n      clearTimeout(r.hoverData.tapholdTimeout);\n      r.hoverData.tapholdTimeout = setTimeout(function () {\n        if (r.hoverData.tapholdCancelled) {\n          return;\n        } else {\n          var ele = r.hoverData.down;\n          if (ele) {\n            ele.emit({\n              originalEvent: e,\n              type: 'taphold',\n              position: {\n                x: pos[0],\n                y: pos[1]\n              }\n            });\n          } else {\n            cy.emit({\n              originalEvent: e,\n              type: 'taphold',\n              position: {\n                x: pos[0],\n                y: pos[1]\n              }\n            });\n          }\n        }\n      }, r.tapholdDuration);\n    };\n\n    // Right click button\n    if (e.which == 3) {\n      r.hoverData.cxtStarted = true;\n      var cxtEvt = {\n        originalEvent: e,\n        type: 'cxttapstart',\n        position: {\n          x: pos[0],\n          y: pos[1]\n        }\n      };\n      if (near) {\n        near.activate();\n        near.emit(cxtEvt);\n        r.hoverData.down = near;\n      } else {\n        cy.emit(cxtEvt);\n      }\n      r.hoverData.downTime = new Date().getTime();\n      r.hoverData.cxtDragged = false;\n\n      // Primary button\n    } else if (e.which == 1) {\n      if (near) {\n        near.activate();\n      }\n\n      // Element dragging\n      {\n        // If something is under the cursor and it is draggable, prepare to grab it\n        if (near != null) {\n          if (r.nodeIsGrabbable(near)) {\n            var makeEvent = function makeEvent(type) {\n              return {\n                originalEvent: e,\n                type: type,\n                position: {\n                  x: pos[0],\n                  y: pos[1]\n                }\n              };\n            };\n            var triggerGrab = function triggerGrab(ele) {\n              ele.emit(makeEvent('grab'));\n            };\n            setGrabTarget(near);\n            if (!near.selected()) {\n              draggedElements = r.dragData.possibleDragElements = cy.collection();\n              addNodeToDrag(near, {\n                addToList: draggedElements\n              });\n              near.emit(makeEvent('grabon')).emit(makeEvent('grab'));\n            } else {\n              draggedElements = r.dragData.possibleDragElements = cy.collection();\n              var selectedNodes = cy.$(function (ele) {\n                return ele.isNode() && ele.selected() && r.nodeIsGrabbable(ele);\n              });\n              addNodesToDrag(selectedNodes, {\n                addToList: draggedElements\n              });\n              near.emit(makeEvent('grabon'));\n              selectedNodes.forEach(triggerGrab);\n            }\n            r.redrawHint('eles', true);\n            r.redrawHint('drag', true);\n          }\n        }\n        r.hoverData.down = near;\n        r.hoverData.downs = nears;\n        r.hoverData.downTime = new Date().getTime();\n      }\n      triggerEvents(near, ['mousedown', 'tapstart', 'vmousedown'], e, {\n        x: pos[0],\n        y: pos[1]\n      });\n      if (near == null) {\n        select[4] = 1;\n        r.data.bgActivePosistion = {\n          x: pos[0],\n          y: pos[1]\n        };\n        r.redrawHint('select', true);\n        r.redraw();\n      } else if (near.pannable()) {\n        select[4] = 1; // for future pan\n      }\n\n      checkForTaphold();\n    }\n\n    // Initialize selection box coordinates\n    select[0] = select[2] = pos[0];\n    select[1] = select[3] = pos[1];\n  }, false);\n  var shadowRoot = getShadowRoot(r.container);\n  r.registerBinding([containerWindow, shadowRoot], 'mousemove', function mousemoveHandler(e) {\n    // eslint-disable-line no-undef\n    var capture = r.hoverData.capture;\n    if (!capture && !eventInContainer(e)) {\n      return;\n    }\n    var preventDefault = false;\n    var cy = r.cy;\n    var zoom = cy.zoom();\n    var gpos = [e.clientX, e.clientY];\n    var pos = r.projectIntoViewport(gpos[0], gpos[1]);\n    var mdownPos = r.hoverData.mdownPos;\n    var mdownGPos = r.hoverData.mdownGPos;\n    var select = r.selection;\n    var near = null;\n    if (!r.hoverData.draggingEles && !r.hoverData.dragging && !r.hoverData.selecting) {\n      near = r.findNearestElement(pos[0], pos[1], true, false);\n    }\n    var last = r.hoverData.last;\n    var down = r.hoverData.down;\n    var disp = [pos[0] - select[2], pos[1] - select[3]];\n    var draggedElements = r.dragData.possibleDragElements;\n    var isOverThresholdDrag;\n    if (mdownGPos) {\n      var dx = gpos[0] - mdownGPos[0];\n      var dx2 = dx * dx;\n      var dy = gpos[1] - mdownGPos[1];\n      var dy2 = dy * dy;\n      var dist2 = dx2 + dy2;\n      r.hoverData.isOverThresholdDrag = isOverThresholdDrag = dist2 >= r.desktopTapThreshold2;\n    }\n    var multSelKeyDown = isMultSelKeyDown(e);\n    if (isOverThresholdDrag) {\n      r.hoverData.tapholdCancelled = true;\n    }\n    var updateDragDelta = function updateDragDelta() {\n      var dragDelta = r.hoverData.dragDelta = r.hoverData.dragDelta || [];\n      if (dragDelta.length === 0) {\n        dragDelta.push(disp[0]);\n        dragDelta.push(disp[1]);\n      } else {\n        dragDelta[0] += disp[0];\n        dragDelta[1] += disp[1];\n      }\n    };\n    preventDefault = true;\n    triggerEvents(near, ['mousemove', 'vmousemove', 'tapdrag'], e, {\n      x: pos[0],\n      y: pos[1]\n    });\n    var goIntoBoxMode = function goIntoBoxMode() {\n      r.data.bgActivePosistion = undefined;\n      if (!r.hoverData.selecting) {\n        cy.emit({\n          originalEvent: e,\n          type: 'boxstart',\n          position: {\n            x: pos[0],\n            y: pos[1]\n          }\n        });\n      }\n      select[4] = 1;\n      r.hoverData.selecting = true;\n      r.redrawHint('select', true);\n      r.redraw();\n    };\n\n    // trigger context drag if rmouse down\n    if (r.hoverData.which === 3) {\n      // but only if over threshold\n      if (isOverThresholdDrag) {\n        var cxtEvt = {\n          originalEvent: e,\n          type: 'cxtdrag',\n          position: {\n            x: pos[0],\n            y: pos[1]\n          }\n        };\n        if (down) {\n          down.emit(cxtEvt);\n        } else {\n          cy.emit(cxtEvt);\n        }\n        r.hoverData.cxtDragged = true;\n        if (!r.hoverData.cxtOver || near !== r.hoverData.cxtOver) {\n          if (r.hoverData.cxtOver) {\n            r.hoverData.cxtOver.emit({\n              originalEvent: e,\n              type: 'cxtdragout',\n              position: {\n                x: pos[0],\n                y: pos[1]\n              }\n            });\n          }\n          r.hoverData.cxtOver = near;\n          if (near) {\n            near.emit({\n              originalEvent: e,\n              type: 'cxtdragover',\n              position: {\n                x: pos[0],\n                y: pos[1]\n              }\n            });\n          }\n        }\n      }\n\n      // Check if we are drag panning the entire graph\n    } else if (r.hoverData.dragging) {\n      preventDefault = true;\n      if (cy.panningEnabled() && cy.userPanningEnabled()) {\n        var deltaP;\n        if (r.hoverData.justStartedPan) {\n          var mdPos = r.hoverData.mdownPos;\n          deltaP = {\n            x: (pos[0] - mdPos[0]) * zoom,\n            y: (pos[1] - mdPos[1]) * zoom\n          };\n          r.hoverData.justStartedPan = false;\n        } else {\n          deltaP = {\n            x: disp[0] * zoom,\n            y: disp[1] * zoom\n          };\n        }\n        cy.panBy(deltaP);\n        cy.emit('dragpan');\n        r.hoverData.dragged = true;\n      }\n\n      // Needs reproject due to pan changing viewport\n      pos = r.projectIntoViewport(e.clientX, e.clientY);\n\n      // Checks primary button down & out of time & mouse not moved much\n    } else if (select[4] == 1 && (down == null || down.pannable())) {\n      if (isOverThresholdDrag) {\n        if (!r.hoverData.dragging && cy.boxSelectionEnabled() && (multSelKeyDown || !cy.panningEnabled() || !cy.userPanningEnabled())) {\n          goIntoBoxMode();\n        } else if (!r.hoverData.selecting && cy.panningEnabled() && cy.userPanningEnabled()) {\n          var allowPassthrough = allowPanningPassthrough(down, r.hoverData.downs);\n          if (allowPassthrough) {\n            r.hoverData.dragging = true;\n            r.hoverData.justStartedPan = true;\n            select[4] = 0;\n            r.data.bgActivePosistion = array2point(mdownPos);\n            r.redrawHint('select', true);\n            r.redraw();\n          }\n        }\n        if (down && down.pannable() && down.active()) {\n          down.unactivate();\n        }\n      }\n    } else {\n      if (down && down.pannable() && down.active()) {\n        down.unactivate();\n      }\n      if ((!down || !down.grabbed()) && near != last) {\n        if (last) {\n          triggerEvents(last, ['mouseout', 'tapdragout'], e, {\n            x: pos[0],\n            y: pos[1]\n          });\n        }\n        if (near) {\n          triggerEvents(near, ['mouseover', 'tapdragover'], e, {\n            x: pos[0],\n            y: pos[1]\n          });\n        }\n        r.hoverData.last = near;\n      }\n      if (down) {\n        if (isOverThresholdDrag) {\n          // then we can take action\n\n          if (cy.boxSelectionEnabled() && multSelKeyDown) {\n            // then selection overrides\n            if (down && down.grabbed()) {\n              freeDraggedElements(draggedElements);\n              down.emit('freeon');\n              draggedElements.emit('free');\n              if (r.dragData.didDrag) {\n                down.emit('dragfreeon');\n                draggedElements.emit('dragfree');\n              }\n            }\n            goIntoBoxMode();\n          } else if (down && down.grabbed() && r.nodeIsDraggable(down)) {\n            // drag node\n            var justStartedDrag = !r.dragData.didDrag;\n            if (justStartedDrag) {\n              r.redrawHint('eles', true);\n            }\n            r.dragData.didDrag = true; // indicate that we actually did drag the node\n\n            // now, add the elements to the drag layer if not done already\n            if (!r.hoverData.draggingEles) {\n              addNodesToDrag(draggedElements, {\n                inDragLayer: true\n              });\n            }\n            var totalShift = {\n              x: 0,\n              y: 0\n            };\n            if (number$1(disp[0]) && number$1(disp[1])) {\n              totalShift.x += disp[0];\n              totalShift.y += disp[1];\n              if (justStartedDrag) {\n                var dragDelta = r.hoverData.dragDelta;\n                if (dragDelta && number$1(dragDelta[0]) && number$1(dragDelta[1])) {\n                  totalShift.x += dragDelta[0];\n                  totalShift.y += dragDelta[1];\n                }\n              }\n            }\n            r.hoverData.draggingEles = true;\n            draggedElements.silentShift(totalShift).emit('position drag');\n            r.redrawHint('drag', true);\n            r.redraw();\n          }\n        } else {\n          // otherwise save drag delta for when we actually start dragging so the relative grab pos is constant\n          updateDragDelta();\n        }\n      }\n\n      // prevent the dragging from triggering text selection on the page\n      preventDefault = true;\n    }\n    select[2] = pos[0];\n    select[3] = pos[1];\n    if (preventDefault) {\n      if (e.stopPropagation) e.stopPropagation();\n      if (e.preventDefault) e.preventDefault();\n      return false;\n    }\n  }, false);\n  var clickTimeout, didDoubleClick, prevClickTimeStamp;\n  r.registerBinding(containerWindow, 'mouseup', function mouseupHandler(e) {\n    // eslint-disable-line no-undef\n    // during left mouse button gestures, ignore other buttons\n    if (r.hoverData.which === 1 && e.which !== 1 && r.hoverData.capture) {\n      return;\n    }\n    var capture = r.hoverData.capture;\n    if (!capture) {\n      return;\n    }\n    r.hoverData.capture = false;\n    var cy = r.cy;\n    var pos = r.projectIntoViewport(e.clientX, e.clientY);\n    var select = r.selection;\n    var near = r.findNearestElement(pos[0], pos[1], true, false);\n    var draggedElements = r.dragData.possibleDragElements;\n    var down = r.hoverData.down;\n    var multSelKeyDown = isMultSelKeyDown(e);\n    if (r.data.bgActivePosistion) {\n      r.redrawHint('select', true);\n      r.redraw();\n    }\n    r.hoverData.tapholdCancelled = true;\n    r.data.bgActivePosistion = undefined; // not active bg now\n\n    if (down) {\n      down.unactivate();\n    }\n    if (r.hoverData.which === 3) {\n      var cxtEvt = {\n        originalEvent: e,\n        type: 'cxttapend',\n        position: {\n          x: pos[0],\n          y: pos[1]\n        }\n      };\n      if (down) {\n        down.emit(cxtEvt);\n      } else {\n        cy.emit(cxtEvt);\n      }\n      if (!r.hoverData.cxtDragged) {\n        var cxtTap = {\n          originalEvent: e,\n          type: 'cxttap',\n          position: {\n            x: pos[0],\n            y: pos[1]\n          }\n        };\n        if (down) {\n          down.emit(cxtTap);\n        } else {\n          cy.emit(cxtTap);\n        }\n      }\n      r.hoverData.cxtDragged = false;\n      r.hoverData.which = null;\n    } else if (r.hoverData.which === 1) {\n      triggerEvents(near, ['mouseup', 'tapend', 'vmouseup'], e, {\n        x: pos[0],\n        y: pos[1]\n      });\n      if (!r.dragData.didDrag &&\n      // didn't move a node around\n      !r.hoverData.dragged &&\n      // didn't pan\n      !r.hoverData.selecting &&\n      // not box selection\n      !r.hoverData.isOverThresholdDrag // didn't move too much\n      ) {\n        triggerEvents(down, [\"click\", \"tap\", \"vclick\"], e, {\n          x: pos[0],\n          y: pos[1]\n        });\n        didDoubleClick = false;\n        if (e.timeStamp - prevClickTimeStamp <= cy.multiClickDebounceTime()) {\n          clickTimeout && clearTimeout(clickTimeout);\n          didDoubleClick = true;\n          prevClickTimeStamp = null;\n          triggerEvents(down, [\"dblclick\", \"dbltap\", \"vdblclick\"], e, {\n            x: pos[0],\n            y: pos[1]\n          });\n        } else {\n          clickTimeout = setTimeout(function () {\n            if (didDoubleClick) return;\n            triggerEvents(down, [\"oneclick\", \"onetap\", \"voneclick\"], e, {\n              x: pos[0],\n              y: pos[1]\n            });\n          }, cy.multiClickDebounceTime());\n          prevClickTimeStamp = e.timeStamp;\n        }\n      }\n\n      // Deselect all elements if nothing is currently under the mouse cursor and we aren't dragging something\n      if (down == null // not mousedown on node\n      && !r.dragData.didDrag // didn't move the node around\n      && !r.hoverData.selecting // not box selection\n      && !r.hoverData.dragged // didn't pan\n      && !isMultSelKeyDown(e)) {\n        cy.$(isSelected).unselect(['tapunselect']);\n        if (draggedElements.length > 0) {\n          r.redrawHint('eles', true);\n        }\n        r.dragData.possibleDragElements = draggedElements = cy.collection();\n      }\n\n      // Single selection\n      if (near == down && !r.dragData.didDrag && !r.hoverData.selecting) {\n        if (near != null && near._private.selectable) {\n          if (r.hoverData.dragging) ; else if (cy.selectionType() === 'additive' || multSelKeyDown) {\n            if (near.selected()) {\n              near.unselect(['tapunselect']);\n            } else {\n              near.select(['tapselect']);\n            }\n          } else {\n            if (!multSelKeyDown) {\n              cy.$(isSelected).unmerge(near).unselect(['tapunselect']);\n              near.select(['tapselect']);\n            }\n          }\n          r.redrawHint('eles', true);\n        }\n      }\n      if (r.hoverData.selecting) {\n        var box = cy.collection(r.getAllInBox(select[0], select[1], select[2], select[3]));\n        r.redrawHint('select', true);\n        if (box.length > 0) {\n          r.redrawHint('eles', true);\n        }\n        cy.emit({\n          type: 'boxend',\n          originalEvent: e,\n          position: {\n            x: pos[0],\n            y: pos[1]\n          }\n        });\n        var eleWouldBeSelected = function eleWouldBeSelected(ele) {\n          return ele.selectable() && !ele.selected();\n        };\n        if (cy.selectionType() === 'additive') {\n          box.emit('box').stdFilter(eleWouldBeSelected).select().emit('boxselect');\n        } else {\n          if (!multSelKeyDown) {\n            cy.$(isSelected).unmerge(box).unselect();\n          }\n          box.emit('box').stdFilter(eleWouldBeSelected).select().emit('boxselect');\n        }\n\n        // always need redraw in case eles unselectable\n        r.redraw();\n      }\n\n      // Cancel drag pan\n      if (r.hoverData.dragging) {\n        r.hoverData.dragging = false;\n        r.redrawHint('select', true);\n        r.redrawHint('eles', true);\n        r.redraw();\n      }\n      if (!select[4]) {\n        r.redrawHint('drag', true);\n        r.redrawHint('eles', true);\n        var downWasGrabbed = down && down.grabbed();\n        freeDraggedElements(draggedElements);\n        if (downWasGrabbed) {\n          down.emit('freeon');\n          draggedElements.emit('free');\n          if (r.dragData.didDrag) {\n            down.emit('dragfreeon');\n            draggedElements.emit('dragfree');\n          }\n        }\n      }\n    } // else not right mouse\n\n    select[4] = 0;\n    r.hoverData.down = null;\n    r.hoverData.cxtStarted = false;\n    r.hoverData.draggingEles = false;\n    r.hoverData.selecting = false;\n    r.hoverData.isOverThresholdDrag = false;\n    r.dragData.didDrag = false;\n    r.hoverData.dragged = false;\n    r.hoverData.dragDelta = [];\n    r.hoverData.mdownPos = null;\n    r.hoverData.mdownGPos = null;\n    r.hoverData.which = null;\n  }, false);\n  var wheelHandler = function wheelHandler(e) {\n    if (r.scrollingPage) {\n      return;\n    } // while scrolling, ignore wheel-to-zoom\n\n    var cy = r.cy;\n    var zoom = cy.zoom();\n    var pan = cy.pan();\n    var pos = r.projectIntoViewport(e.clientX, e.clientY);\n    var rpos = [pos[0] * zoom + pan.x, pos[1] * zoom + pan.y];\n    if (r.hoverData.draggingEles || r.hoverData.dragging || r.hoverData.cxtStarted || inBoxSelection()) {\n      // if pan dragging or cxt dragging, wheel movements make no zoom\n      e.preventDefault();\n      return;\n    }\n    if (cy.panningEnabled() && cy.userPanningEnabled() && cy.zoomingEnabled() && cy.userZoomingEnabled()) {\n      e.preventDefault();\n      r.data.wheelZooming = true;\n      clearTimeout(r.data.wheelTimeout);\n      r.data.wheelTimeout = setTimeout(function () {\n        r.data.wheelZooming = false;\n        r.redrawHint('eles', true);\n        r.redraw();\n      }, 150);\n      var diff;\n      if (e.deltaY != null) {\n        diff = e.deltaY / -250;\n      } else if (e.wheelDeltaY != null) {\n        diff = e.wheelDeltaY / 1000;\n      } else {\n        diff = e.wheelDelta / 1000;\n      }\n      diff = diff * r.wheelSensitivity;\n      var needsWheelFix = e.deltaMode === 1;\n      if (needsWheelFix) {\n        // fixes slow wheel events on ff/linux and ff/windows\n        diff *= 33;\n      }\n      var newZoom = cy.zoom() * Math.pow(10, diff);\n      if (e.type === 'gesturechange') {\n        newZoom = r.gestureStartZoom * e.scale;\n      }\n      cy.zoom({\n        level: newZoom,\n        renderedPosition: {\n          x: rpos[0],\n          y: rpos[1]\n        }\n      });\n      cy.emit(e.type === 'gesturechange' ? 'pinchzoom' : 'scrollzoom');\n    }\n  };\n\n  // Functions to help with whether mouse wheel should trigger zooming\n  // --\n  r.registerBinding(r.container, 'wheel', wheelHandler, true);\n\n  // disable nonstandard wheel events\n  // r.registerBinding(r.container, 'mousewheel', wheelHandler, true);\n  // r.registerBinding(r.container, 'DOMMouseScroll', wheelHandler, true);\n  // r.registerBinding(r.container, 'MozMousePixelScroll', wheelHandler, true); // older firefox\n\n  r.registerBinding(containerWindow, 'scroll', function scrollHandler(e) {\n    // eslint-disable-line no-unused-vars\n    r.scrollingPage = true;\n    clearTimeout(r.scrollingPageTimeout);\n    r.scrollingPageTimeout = setTimeout(function () {\n      r.scrollingPage = false;\n    }, 250);\n  }, true);\n\n  // desktop safari pinch to zoom start\n  r.registerBinding(r.container, 'gesturestart', function gestureStartHandler(e) {\n    r.gestureStartZoom = r.cy.zoom();\n    if (!r.hasTouchStarted) {\n      // don't affect touch devices like iphone\n      e.preventDefault();\n    }\n  }, true);\n  r.registerBinding(r.container, 'gesturechange', function (e) {\n    if (!r.hasTouchStarted) {\n      // don't affect touch devices like iphone\n      wheelHandler(e);\n    }\n  }, true);\n\n  // Functions to help with handling mouseout/mouseover on the Cytoscape container\n  // Handle mouseout on Cytoscape container\n  r.registerBinding(r.container, 'mouseout', function mouseOutHandler(e) {\n    var pos = r.projectIntoViewport(e.clientX, e.clientY);\n    r.cy.emit({\n      originalEvent: e,\n      type: 'mouseout',\n      position: {\n        x: pos[0],\n        y: pos[1]\n      }\n    });\n  }, false);\n  r.registerBinding(r.container, 'mouseover', function mouseOverHandler(e) {\n    var pos = r.projectIntoViewport(e.clientX, e.clientY);\n    r.cy.emit({\n      originalEvent: e,\n      type: 'mouseover',\n      position: {\n        x: pos[0],\n        y: pos[1]\n      }\n    });\n  }, false);\n  var f1x1, f1y1, f2x1, f2y1; // starting points for pinch-to-zoom\n  var distance1, distance1Sq; // initial distance between finger 1 and finger 2 for pinch-to-zoom\n  var center1, modelCenter1; // center point on start pinch to zoom\n  var offsetLeft, offsetTop;\n  var containerWidth, containerHeight;\n  var twoFingersStartInside;\n  var distance = function distance(x1, y1, x2, y2) {\n    return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n  };\n  var distanceSq = function distanceSq(x1, y1, x2, y2) {\n    return (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);\n  };\n  var touchstartHandler;\n  r.registerBinding(r.container, 'touchstart', touchstartHandler = function touchstartHandler(e) {\n    r.hasTouchStarted = true;\n    if (!eventInContainer(e)) {\n      return;\n    }\n    blurActiveDomElement();\n    r.touchData.capture = true;\n    r.data.bgActivePosistion = undefined;\n    var cy = r.cy;\n    var now = r.touchData.now;\n    var earlier = r.touchData.earlier;\n    if (e.touches[0]) {\n      var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);\n      now[0] = pos[0];\n      now[1] = pos[1];\n    }\n    if (e.touches[1]) {\n      var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY);\n      now[2] = pos[0];\n      now[3] = pos[1];\n    }\n    if (e.touches[2]) {\n      var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY);\n      now[4] = pos[0];\n      now[5] = pos[1];\n    }\n\n    // record starting points for pinch-to-zoom\n    if (e.touches[1]) {\n      r.touchData.singleTouchMoved = true;\n      freeDraggedElements(r.dragData.touchDragEles);\n      var offsets = r.findContainerClientCoords();\n      offsetLeft = offsets[0];\n      offsetTop = offsets[1];\n      containerWidth = offsets[2];\n      containerHeight = offsets[3];\n      f1x1 = e.touches[0].clientX - offsetLeft;\n      f1y1 = e.touches[0].clientY - offsetTop;\n      f2x1 = e.touches[1].clientX - offsetLeft;\n      f2y1 = e.touches[1].clientY - offsetTop;\n      twoFingersStartInside = 0 <= f1x1 && f1x1 <= containerWidth && 0 <= f2x1 && f2x1 <= containerWidth && 0 <= f1y1 && f1y1 <= containerHeight && 0 <= f2y1 && f2y1 <= containerHeight;\n      var pan = cy.pan();\n      var zoom = cy.zoom();\n      distance1 = distance(f1x1, f1y1, f2x1, f2y1);\n      distance1Sq = distanceSq(f1x1, f1y1, f2x1, f2y1);\n      center1 = [(f1x1 + f2x1) / 2, (f1y1 + f2y1) / 2];\n      modelCenter1 = [(center1[0] - pan.x) / zoom, (center1[1] - pan.y) / zoom];\n\n      // consider context tap\n      var cxtDistThreshold = 200;\n      var cxtDistThresholdSq = cxtDistThreshold * cxtDistThreshold;\n      if (distance1Sq < cxtDistThresholdSq && !e.touches[2]) {\n        var near1 = r.findNearestElement(now[0], now[1], true, true);\n        var near2 = r.findNearestElement(now[2], now[3], true, true);\n        if (near1 && near1.isNode()) {\n          near1.activate().emit({\n            originalEvent: e,\n            type: 'cxttapstart',\n            position: {\n              x: now[0],\n              y: now[1]\n            }\n          });\n          r.touchData.start = near1;\n        } else if (near2 && near2.isNode()) {\n          near2.activate().emit({\n            originalEvent: e,\n            type: 'cxttapstart',\n            position: {\n              x: now[0],\n              y: now[1]\n            }\n          });\n          r.touchData.start = near2;\n        } else {\n          cy.emit({\n            originalEvent: e,\n            type: 'cxttapstart',\n            position: {\n              x: now[0],\n              y: now[1]\n            }\n          });\n        }\n        if (r.touchData.start) {\n          r.touchData.start._private.grabbed = false;\n        }\n        r.touchData.cxt = true;\n        r.touchData.cxtDragged = false;\n        r.data.bgActivePosistion = undefined;\n        r.redraw();\n        return;\n      }\n    }\n    if (e.touches[2]) {\n      // ignore\n\n      // safari on ios pans the page otherwise (normally you should be able to preventdefault on touchmove...)\n      if (cy.boxSelectionEnabled()) {\n        e.preventDefault();\n      }\n    } else if (e.touches[1]) ; else if (e.touches[0]) {\n      var nears = r.findNearestElements(now[0], now[1], true, true);\n      var near = nears[0];\n      if (near != null) {\n        near.activate();\n        r.touchData.start = near;\n        r.touchData.starts = nears;\n        if (r.nodeIsGrabbable(near)) {\n          var draggedEles = r.dragData.touchDragEles = cy.collection();\n          var selectedNodes = null;\n          r.redrawHint('eles', true);\n          r.redrawHint('drag', true);\n          if (near.selected()) {\n            // reset drag elements, since near will be added again\n\n            selectedNodes = cy.$(function (ele) {\n              return ele.selected() && r.nodeIsGrabbable(ele);\n            });\n            addNodesToDrag(selectedNodes, {\n              addToList: draggedEles\n            });\n          } else {\n            addNodeToDrag(near, {\n              addToList: draggedEles\n            });\n          }\n          setGrabTarget(near);\n          var makeEvent = function makeEvent(type) {\n            return {\n              originalEvent: e,\n              type: type,\n              position: {\n                x: now[0],\n                y: now[1]\n              }\n            };\n          };\n          near.emit(makeEvent('grabon'));\n          if (selectedNodes) {\n            selectedNodes.forEach(function (n) {\n              n.emit(makeEvent('grab'));\n            });\n          } else {\n            near.emit(makeEvent('grab'));\n          }\n        }\n      }\n      triggerEvents(near, ['touchstart', 'tapstart', 'vmousedown'], e, {\n        x: now[0],\n        y: now[1]\n      });\n      if (near == null) {\n        r.data.bgActivePosistion = {\n          x: pos[0],\n          y: pos[1]\n        };\n        r.redrawHint('select', true);\n        r.redraw();\n      }\n\n      // Tap, taphold\n      // -----\n\n      r.touchData.singleTouchMoved = false;\n      r.touchData.singleTouchStartTime = +new Date();\n      clearTimeout(r.touchData.tapholdTimeout);\n      r.touchData.tapholdTimeout = setTimeout(function () {\n        if (r.touchData.singleTouchMoved === false && !r.pinching // if pinching, then taphold unselect shouldn't take effect\n        && !r.touchData.selecting // box selection shouldn't allow taphold through\n        ) {\n          triggerEvents(r.touchData.start, ['taphold'], e, {\n            x: now[0],\n            y: now[1]\n          });\n        }\n      }, r.tapholdDuration);\n    }\n    if (e.touches.length >= 1) {\n      var sPos = r.touchData.startPosition = [null, null, null, null, null, null];\n      for (var i = 0; i < now.length; i++) {\n        sPos[i] = earlier[i] = now[i];\n      }\n      var touch0 = e.touches[0];\n      r.touchData.startGPosition = [touch0.clientX, touch0.clientY];\n    }\n  }, false);\n  var touchmoveHandler;\n  r.registerBinding(containerWindow, 'touchmove', touchmoveHandler = function touchmoveHandler(e) {\n    // eslint-disable-line no-undef\n    var capture = r.touchData.capture;\n    if (!capture && !eventInContainer(e)) {\n      return;\n    }\n    var select = r.selection;\n    var cy = r.cy;\n    var now = r.touchData.now;\n    var earlier = r.touchData.earlier;\n    var zoom = cy.zoom();\n    if (e.touches[0]) {\n      var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);\n      now[0] = pos[0];\n      now[1] = pos[1];\n    }\n    if (e.touches[1]) {\n      var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY);\n      now[2] = pos[0];\n      now[3] = pos[1];\n    }\n    if (e.touches[2]) {\n      var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY);\n      now[4] = pos[0];\n      now[5] = pos[1];\n    }\n    var startGPos = r.touchData.startGPosition;\n    var isOverThresholdDrag;\n    if (capture && e.touches[0] && startGPos) {\n      var disp = [];\n      for (var j = 0; j < now.length; j++) {\n        disp[j] = now[j] - earlier[j];\n      }\n      var dx = e.touches[0].clientX - startGPos[0];\n      var dx2 = dx * dx;\n      var dy = e.touches[0].clientY - startGPos[1];\n      var dy2 = dy * dy;\n      var dist2 = dx2 + dy2;\n      isOverThresholdDrag = dist2 >= r.touchTapThreshold2;\n    }\n\n    // context swipe cancelling\n    if (capture && r.touchData.cxt) {\n      e.preventDefault();\n      var f1x2 = e.touches[0].clientX - offsetLeft,\n        f1y2 = e.touches[0].clientY - offsetTop;\n      var f2x2 = e.touches[1].clientX - offsetLeft,\n        f2y2 = e.touches[1].clientY - offsetTop;\n      // var distance2 = distance( f1x2, f1y2, f2x2, f2y2 );\n      var distance2Sq = distanceSq(f1x2, f1y2, f2x2, f2y2);\n      var factorSq = distance2Sq / distance1Sq;\n      var distThreshold = 150;\n      var distThresholdSq = distThreshold * distThreshold;\n      var factorThreshold = 1.5;\n      var factorThresholdSq = factorThreshold * factorThreshold;\n\n      // cancel ctx gestures if the distance b/t the fingers increases\n      if (factorSq >= factorThresholdSq || distance2Sq >= distThresholdSq) {\n        r.touchData.cxt = false;\n        r.data.bgActivePosistion = undefined;\n        r.redrawHint('select', true);\n        var cxtEvt = {\n          originalEvent: e,\n          type: 'cxttapend',\n          position: {\n            x: now[0],\n            y: now[1]\n          }\n        };\n        if (r.touchData.start) {\n          r.touchData.start.unactivate().emit(cxtEvt);\n          r.touchData.start = null;\n        } else {\n          cy.emit(cxtEvt);\n        }\n      }\n    }\n\n    // context swipe\n    if (capture && r.touchData.cxt) {\n      var cxtEvt = {\n        originalEvent: e,\n        type: 'cxtdrag',\n        position: {\n          x: now[0],\n          y: now[1]\n        }\n      };\n      r.data.bgActivePosistion = undefined;\n      r.redrawHint('select', true);\n      if (r.touchData.start) {\n        r.touchData.start.emit(cxtEvt);\n      } else {\n        cy.emit(cxtEvt);\n      }\n      if (r.touchData.start) {\n        r.touchData.start._private.grabbed = false;\n      }\n      r.touchData.cxtDragged = true;\n      var near = r.findNearestElement(now[0], now[1], true, true);\n      if (!r.touchData.cxtOver || near !== r.touchData.cxtOver) {\n        if (r.touchData.cxtOver) {\n          r.touchData.cxtOver.emit({\n            originalEvent: e,\n            type: 'cxtdragout',\n            position: {\n              x: now[0],\n              y: now[1]\n            }\n          });\n        }\n        r.touchData.cxtOver = near;\n        if (near) {\n          near.emit({\n            originalEvent: e,\n            type: 'cxtdragover',\n            position: {\n              x: now[0],\n              y: now[1]\n            }\n          });\n        }\n      }\n\n      // box selection\n    } else if (capture && e.touches[2] && cy.boxSelectionEnabled()) {\n      e.preventDefault();\n      r.data.bgActivePosistion = undefined;\n      this.lastThreeTouch = +new Date();\n      if (!r.touchData.selecting) {\n        cy.emit({\n          originalEvent: e,\n          type: 'boxstart',\n          position: {\n            x: now[0],\n            y: now[1]\n          }\n        });\n      }\n      r.touchData.selecting = true;\n      r.touchData.didSelect = true;\n      select[4] = 1;\n      if (!select || select.length === 0 || select[0] === undefined) {\n        select[0] = (now[0] + now[2] + now[4]) / 3;\n        select[1] = (now[1] + now[3] + now[5]) / 3;\n        select[2] = (now[0] + now[2] + now[4]) / 3 + 1;\n        select[3] = (now[1] + now[3] + now[5]) / 3 + 1;\n      } else {\n        select[2] = (now[0] + now[2] + now[4]) / 3;\n        select[3] = (now[1] + now[3] + now[5]) / 3;\n      }\n      r.redrawHint('select', true);\n      r.redraw();\n\n      // pinch to zoom\n    } else if (capture && e.touches[1] && !r.touchData.didSelect // don't allow box selection to degrade to pinch-to-zoom\n    && cy.zoomingEnabled() && cy.panningEnabled() && cy.userZoomingEnabled() && cy.userPanningEnabled()) {\n      // two fingers => pinch to zoom\n      e.preventDefault();\n      r.data.bgActivePosistion = undefined;\n      r.redrawHint('select', true);\n      var draggedEles = r.dragData.touchDragEles;\n      if (draggedEles) {\n        r.redrawHint('drag', true);\n        for (var i = 0; i < draggedEles.length; i++) {\n          var de_p = draggedEles[i]._private;\n          de_p.grabbed = false;\n          de_p.rscratch.inDragLayer = false;\n        }\n      }\n      var _start = r.touchData.start;\n\n      // (x2, y2) for fingers 1 and 2\n      var f1x2 = e.touches[0].clientX - offsetLeft,\n        f1y2 = e.touches[0].clientY - offsetTop;\n      var f2x2 = e.touches[1].clientX - offsetLeft,\n        f2y2 = e.touches[1].clientY - offsetTop;\n      var distance2 = distance(f1x2, f1y2, f2x2, f2y2);\n      // var distance2Sq = distanceSq( f1x2, f1y2, f2x2, f2y2 );\n      // var factor = Math.sqrt( distance2Sq ) / Math.sqrt( distance1Sq );\n      var factor = distance2 / distance1;\n      if (twoFingersStartInside) {\n        // delta finger1\n        var df1x = f1x2 - f1x1;\n        var df1y = f1y2 - f1y1;\n\n        // delta finger 2\n        var df2x = f2x2 - f2x1;\n        var df2y = f2y2 - f2y1;\n\n        // translation is the normalised vector of the two fingers movement\n        // i.e. so pinching cancels out and moving together pans\n        var tx = (df1x + df2x) / 2;\n        var ty = (df1y + df2y) / 2;\n\n        // now calculate the zoom\n        var zoom1 = cy.zoom();\n        var zoom2 = zoom1 * factor;\n        var pan1 = cy.pan();\n\n        // the model center point converted to the current rendered pos\n        var ctrx = modelCenter1[0] * zoom1 + pan1.x;\n        var ctry = modelCenter1[1] * zoom1 + pan1.y;\n        var pan2 = {\n          x: -zoom2 / zoom1 * (ctrx - pan1.x - tx) + ctrx,\n          y: -zoom2 / zoom1 * (ctry - pan1.y - ty) + ctry\n        };\n\n        // remove dragged eles\n        if (_start && _start.active()) {\n          var draggedEles = r.dragData.touchDragEles;\n          freeDraggedElements(draggedEles);\n          r.redrawHint('drag', true);\n          r.redrawHint('eles', true);\n          _start.unactivate().emit('freeon');\n          draggedEles.emit('free');\n          if (r.dragData.didDrag) {\n            _start.emit('dragfreeon');\n            draggedEles.emit('dragfree');\n          }\n        }\n        cy.viewport({\n          zoom: zoom2,\n          pan: pan2,\n          cancelOnFailedZoom: true\n        });\n        cy.emit('pinchzoom');\n        distance1 = distance2;\n        f1x1 = f1x2;\n        f1y1 = f1y2;\n        f2x1 = f2x2;\n        f2y1 = f2y2;\n        r.pinching = true;\n      }\n\n      // Re-project\n      if (e.touches[0]) {\n        var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);\n        now[0] = pos[0];\n        now[1] = pos[1];\n      }\n      if (e.touches[1]) {\n        var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY);\n        now[2] = pos[0];\n        now[3] = pos[1];\n      }\n      if (e.touches[2]) {\n        var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY);\n        now[4] = pos[0];\n        now[5] = pos[1];\n      }\n    } else if (e.touches[0] && !r.touchData.didSelect // don't allow box selection to degrade to single finger events like panning\n    ) {\n      var start = r.touchData.start;\n      var last = r.touchData.last;\n      var near;\n      if (!r.hoverData.draggingEles && !r.swipePanning) {\n        near = r.findNearestElement(now[0], now[1], true, true);\n      }\n      if (capture && start != null) {\n        e.preventDefault();\n      }\n\n      // dragging nodes\n      if (capture && start != null && r.nodeIsDraggable(start)) {\n        if (isOverThresholdDrag) {\n          // then dragging can happen\n          var draggedEles = r.dragData.touchDragEles;\n          var justStartedDrag = !r.dragData.didDrag;\n          if (justStartedDrag) {\n            addNodesToDrag(draggedEles, {\n              inDragLayer: true\n            });\n          }\n          r.dragData.didDrag = true;\n          var totalShift = {\n            x: 0,\n            y: 0\n          };\n          if (number$1(disp[0]) && number$1(disp[1])) {\n            totalShift.x += disp[0];\n            totalShift.y += disp[1];\n            if (justStartedDrag) {\n              r.redrawHint('eles', true);\n              var dragDelta = r.touchData.dragDelta;\n              if (dragDelta && number$1(dragDelta[0]) && number$1(dragDelta[1])) {\n                totalShift.x += dragDelta[0];\n                totalShift.y += dragDelta[1];\n              }\n            }\n          }\n          r.hoverData.draggingEles = true;\n          draggedEles.silentShift(totalShift).emit('position drag');\n          r.redrawHint('drag', true);\n          if (r.touchData.startPosition[0] == earlier[0] && r.touchData.startPosition[1] == earlier[1]) {\n            r.redrawHint('eles', true);\n          }\n          r.redraw();\n        } else {\n          // otherwise keep track of drag delta for later\n          var dragDelta = r.touchData.dragDelta = r.touchData.dragDelta || [];\n          if (dragDelta.length === 0) {\n            dragDelta.push(disp[0]);\n            dragDelta.push(disp[1]);\n          } else {\n            dragDelta[0] += disp[0];\n            dragDelta[1] += disp[1];\n          }\n        }\n      }\n\n      // touchmove\n      {\n        triggerEvents(start || near, ['touchmove', 'tapdrag', 'vmousemove'], e, {\n          x: now[0],\n          y: now[1]\n        });\n        if ((!start || !start.grabbed()) && near != last) {\n          if (last) {\n            last.emit({\n              originalEvent: e,\n              type: 'tapdragout',\n              position: {\n                x: now[0],\n                y: now[1]\n              }\n            });\n          }\n          if (near) {\n            near.emit({\n              originalEvent: e,\n              type: 'tapdragover',\n              position: {\n                x: now[0],\n                y: now[1]\n              }\n            });\n          }\n        }\n        r.touchData.last = near;\n      }\n\n      // check to cancel taphold\n      if (capture) {\n        for (var i = 0; i < now.length; i++) {\n          if (now[i] && r.touchData.startPosition[i] && isOverThresholdDrag) {\n            r.touchData.singleTouchMoved = true;\n          }\n        }\n      }\n\n      // panning\n      if (capture && (start == null || start.pannable()) && cy.panningEnabled() && cy.userPanningEnabled()) {\n        var allowPassthrough = allowPanningPassthrough(start, r.touchData.starts);\n        if (allowPassthrough) {\n          e.preventDefault();\n          if (!r.data.bgActivePosistion) {\n            r.data.bgActivePosistion = array2point(r.touchData.startPosition);\n          }\n          if (r.swipePanning) {\n            cy.panBy({\n              x: disp[0] * zoom,\n              y: disp[1] * zoom\n            });\n            cy.emit('dragpan');\n          } else if (isOverThresholdDrag) {\n            r.swipePanning = true;\n            cy.panBy({\n              x: dx * zoom,\n              y: dy * zoom\n            });\n            cy.emit('dragpan');\n            if (start) {\n              start.unactivate();\n              r.redrawHint('select', true);\n              r.touchData.start = null;\n            }\n          }\n        }\n\n        // Re-project\n        var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);\n        now[0] = pos[0];\n        now[1] = pos[1];\n      }\n    }\n    for (var j = 0; j < now.length; j++) {\n      earlier[j] = now[j];\n    }\n\n    // the active bg indicator should be removed when making a swipe that is neither for dragging nodes or panning\n    if (capture && e.touches.length > 0 && !r.hoverData.draggingEles && !r.swipePanning && r.data.bgActivePosistion != null) {\n      r.data.bgActivePosistion = undefined;\n      r.redrawHint('select', true);\n      r.redraw();\n    }\n  }, false);\n  var touchcancelHandler;\n  r.registerBinding(containerWindow, 'touchcancel', touchcancelHandler = function touchcancelHandler(e) {\n    // eslint-disable-line no-unused-vars\n    var start = r.touchData.start;\n    r.touchData.capture = false;\n    if (start) {\n      start.unactivate();\n    }\n  });\n  var touchendHandler, didDoubleTouch, touchTimeout, prevTouchTimeStamp;\n  r.registerBinding(containerWindow, 'touchend', touchendHandler = function touchendHandler(e) {\n    // eslint-disable-line no-unused-vars\n    var start = r.touchData.start;\n    var capture = r.touchData.capture;\n    if (capture) {\n      if (e.touches.length === 0) {\n        r.touchData.capture = false;\n      }\n      e.preventDefault();\n    } else {\n      return;\n    }\n    var select = r.selection;\n    r.swipePanning = false;\n    r.hoverData.draggingEles = false;\n    var cy = r.cy;\n    var zoom = cy.zoom();\n    var now = r.touchData.now;\n    var earlier = r.touchData.earlier;\n    if (e.touches[0]) {\n      var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);\n      now[0] = pos[0];\n      now[1] = pos[1];\n    }\n    if (e.touches[1]) {\n      var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY);\n      now[2] = pos[0];\n      now[3] = pos[1];\n    }\n    if (e.touches[2]) {\n      var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY);\n      now[4] = pos[0];\n      now[5] = pos[1];\n    }\n    if (start) {\n      start.unactivate();\n    }\n    var ctxTapend;\n    if (r.touchData.cxt) {\n      ctxTapend = {\n        originalEvent: e,\n        type: 'cxttapend',\n        position: {\n          x: now[0],\n          y: now[1]\n        }\n      };\n      if (start) {\n        start.emit(ctxTapend);\n      } else {\n        cy.emit(ctxTapend);\n      }\n      if (!r.touchData.cxtDragged) {\n        var ctxTap = {\n          originalEvent: e,\n          type: 'cxttap',\n          position: {\n            x: now[0],\n            y: now[1]\n          }\n        };\n        if (start) {\n          start.emit(ctxTap);\n        } else {\n          cy.emit(ctxTap);\n        }\n      }\n      if (r.touchData.start) {\n        r.touchData.start._private.grabbed = false;\n      }\n      r.touchData.cxt = false;\n      r.touchData.start = null;\n      r.redraw();\n      return;\n    }\n\n    // no more box selection if we don't have three fingers\n    if (!e.touches[2] && cy.boxSelectionEnabled() && r.touchData.selecting) {\n      r.touchData.selecting = false;\n      var box = cy.collection(r.getAllInBox(select[0], select[1], select[2], select[3]));\n      select[0] = undefined;\n      select[1] = undefined;\n      select[2] = undefined;\n      select[3] = undefined;\n      select[4] = 0;\n      r.redrawHint('select', true);\n      cy.emit({\n        type: 'boxend',\n        originalEvent: e,\n        position: {\n          x: now[0],\n          y: now[1]\n        }\n      });\n      var eleWouldBeSelected = function eleWouldBeSelected(ele) {\n        return ele.selectable() && !ele.selected();\n      };\n      box.emit('box').stdFilter(eleWouldBeSelected).select().emit('boxselect');\n      if (box.nonempty()) {\n        r.redrawHint('eles', true);\n      }\n      r.redraw();\n    }\n    if (start != null) {\n      start.unactivate();\n    }\n    if (e.touches[2]) {\n      r.data.bgActivePosistion = undefined;\n      r.redrawHint('select', true);\n    } else if (e.touches[1]) ; else if (e.touches[0]) ; else if (!e.touches[0]) {\n      r.data.bgActivePosistion = undefined;\n      r.redrawHint('select', true);\n      var draggedEles = r.dragData.touchDragEles;\n      if (start != null) {\n        var startWasGrabbed = start._private.grabbed;\n        freeDraggedElements(draggedEles);\n        r.redrawHint('drag', true);\n        r.redrawHint('eles', true);\n        if (startWasGrabbed) {\n          start.emit('freeon');\n          draggedEles.emit('free');\n          if (r.dragData.didDrag) {\n            start.emit('dragfreeon');\n            draggedEles.emit('dragfree');\n          }\n        }\n        triggerEvents(start, ['touchend', 'tapend', 'vmouseup', 'tapdragout'], e, {\n          x: now[0],\n          y: now[1]\n        });\n        start.unactivate();\n        r.touchData.start = null;\n      } else {\n        var near = r.findNearestElement(now[0], now[1], true, true);\n        triggerEvents(near, ['touchend', 'tapend', 'vmouseup', 'tapdragout'], e, {\n          x: now[0],\n          y: now[1]\n        });\n      }\n      var dx = r.touchData.startPosition[0] - now[0];\n      var dx2 = dx * dx;\n      var dy = r.touchData.startPosition[1] - now[1];\n      var dy2 = dy * dy;\n      var dist2 = dx2 + dy2;\n      var rdist2 = dist2 * zoom * zoom;\n\n      // Tap event, roughly same as mouse click event for touch\n      if (!r.touchData.singleTouchMoved) {\n        if (!start) {\n          cy.$(':selected').unselect(['tapunselect']);\n        }\n        triggerEvents(start, ['tap', 'vclick'], e, {\n          x: now[0],\n          y: now[1]\n        });\n        didDoubleTouch = false;\n        if (e.timeStamp - prevTouchTimeStamp <= cy.multiClickDebounceTime()) {\n          touchTimeout && clearTimeout(touchTimeout);\n          didDoubleTouch = true;\n          prevTouchTimeStamp = null;\n          triggerEvents(start, ['dbltap', 'vdblclick'], e, {\n            x: now[0],\n            y: now[1]\n          });\n        } else {\n          touchTimeout = setTimeout(function () {\n            if (didDoubleTouch) return;\n            triggerEvents(start, ['onetap', 'voneclick'], e, {\n              x: now[0],\n              y: now[1]\n            });\n          }, cy.multiClickDebounceTime());\n          prevTouchTimeStamp = e.timeStamp;\n        }\n      }\n\n      // Prepare to select the currently touched node, only if it hasn't been dragged past a certain distance\n      if (start != null && !r.dragData.didDrag // didn't drag nodes around\n      && start._private.selectable && rdist2 < r.touchTapThreshold2 && !r.pinching // pinch to zoom should not affect selection\n      ) {\n        if (cy.selectionType() === 'single') {\n          cy.$(isSelected).unmerge(start).unselect(['tapunselect']);\n          start.select(['tapselect']);\n        } else {\n          if (start.selected()) {\n            start.unselect(['tapunselect']);\n          } else {\n            start.select(['tapselect']);\n          }\n        }\n        r.redrawHint('eles', true);\n      }\n      r.touchData.singleTouchMoved = true;\n    }\n    for (var j = 0; j < now.length; j++) {\n      earlier[j] = now[j];\n    }\n    r.dragData.didDrag = false; // reset for next touchstart\n\n    if (e.touches.length === 0) {\n      r.touchData.dragDelta = [];\n      r.touchData.startPosition = [null, null, null, null, null, null];\n      r.touchData.startGPosition = null;\n      r.touchData.didSelect = false;\n    }\n    if (e.touches.length < 2) {\n      if (e.touches.length === 1) {\n        // the old start global pos'n may not be the same finger that remains\n        r.touchData.startGPosition = [e.touches[0].clientX, e.touches[0].clientY];\n      }\n      r.pinching = false;\n      r.redrawHint('eles', true);\n      r.redraw();\n    }\n\n    //r.redraw();\n  }, false);\n\n  // fallback compatibility layer for ms pointer events\n  if (typeof TouchEvent === 'undefined') {\n    var pointers = [];\n    var makeTouch = function makeTouch(e) {\n      return {\n        clientX: e.clientX,\n        clientY: e.clientY,\n        force: 1,\n        identifier: e.pointerId,\n        pageX: e.pageX,\n        pageY: e.pageY,\n        radiusX: e.width / 2,\n        radiusY: e.height / 2,\n        screenX: e.screenX,\n        screenY: e.screenY,\n        target: e.target\n      };\n    };\n    var makePointer = function makePointer(e) {\n      return {\n        event: e,\n        touch: makeTouch(e)\n      };\n    };\n    var addPointer = function addPointer(e) {\n      pointers.push(makePointer(e));\n    };\n    var removePointer = function removePointer(e) {\n      for (var i = 0; i < pointers.length; i++) {\n        var p = pointers[i];\n        if (p.event.pointerId === e.pointerId) {\n          pointers.splice(i, 1);\n          return;\n        }\n      }\n    };\n    var updatePointer = function updatePointer(e) {\n      var p = pointers.filter(function (p) {\n        return p.event.pointerId === e.pointerId;\n      })[0];\n      p.event = e;\n      p.touch = makeTouch(e);\n    };\n    var addTouchesToEvent = function addTouchesToEvent(e) {\n      e.touches = pointers.map(function (p) {\n        return p.touch;\n      });\n    };\n    var pointerIsMouse = function pointerIsMouse(e) {\n      return e.pointerType === 'mouse' || e.pointerType === 4;\n    };\n    r.registerBinding(r.container, 'pointerdown', function (e) {\n      if (pointerIsMouse(e)) {\n        return;\n      } // mouse already handled\n\n      e.preventDefault();\n      addPointer(e);\n      addTouchesToEvent(e);\n      touchstartHandler(e);\n    });\n    r.registerBinding(r.container, 'pointerup', function (e) {\n      if (pointerIsMouse(e)) {\n        return;\n      } // mouse already handled\n\n      removePointer(e);\n      addTouchesToEvent(e);\n      touchendHandler(e);\n    });\n    r.registerBinding(r.container, 'pointercancel', function (e) {\n      if (pointerIsMouse(e)) {\n        return;\n      } // mouse already handled\n\n      removePointer(e);\n      addTouchesToEvent(e);\n      touchcancelHandler(e);\n    });\n    r.registerBinding(r.container, 'pointermove', function (e) {\n      if (pointerIsMouse(e)) {\n        return;\n      } // mouse already handled\n\n      e.preventDefault();\n      updatePointer(e);\n      addTouchesToEvent(e);\n      touchmoveHandler(e);\n    });\n  }\n};\n\nvar BRp$2 = {};\nBRp$2.generatePolygon = function (name, points) {\n  return this.nodeShapes[name] = {\n    renderer: this,\n    name: name,\n    points: points,\n    draw: function draw(context, centerX, centerY, width, height, cornerRadius) {\n      this.renderer.nodeShapeImpl('polygon', context, centerX, centerY, width, height, this.points);\n    },\n    intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding, cornerRadius) {\n      return polygonIntersectLine(x, y, this.points, nodeX, nodeY, width / 2, height / 2, padding);\n    },\n    checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY, cornerRadius) {\n      return pointInsidePolygon(x, y, this.points, centerX, centerY, width, height, [0, -1], padding);\n    }\n  };\n};\nBRp$2.generateEllipse = function () {\n  return this.nodeShapes['ellipse'] = {\n    renderer: this,\n    name: 'ellipse',\n    draw: function draw(context, centerX, centerY, width, height, cornerRadius) {\n      this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height);\n    },\n    intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding, cornerRadius) {\n      return intersectLineEllipse(x, y, nodeX, nodeY, width / 2 + padding, height / 2 + padding);\n    },\n    checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY, cornerRadius) {\n      return checkInEllipse(x, y, width, height, centerX, centerY, padding);\n    }\n  };\n};\nBRp$2.generateRoundPolygon = function (name, points) {\n  return this.nodeShapes[name] = {\n    renderer: this,\n    name: name,\n    points: points,\n    getOrCreateCorners: function getOrCreateCorners(centerX, centerY, width, height, cornerRadius, rs, field) {\n      if (rs[field] !== undefined && rs[field + '-cx'] === centerX && rs[field + '-cy'] === centerY) {\n        return rs[field];\n      }\n      rs[field] = new Array(points.length / 2);\n      rs[field + '-cx'] = centerX;\n      rs[field + '-cy'] = centerY;\n      var halfW = width / 2;\n      var halfH = height / 2;\n      cornerRadius = cornerRadius === 'auto' ? getRoundPolygonRadius(width, height) : cornerRadius;\n      var p = new Array(points.length / 2);\n      for (var _i = 0; _i < points.length / 2; _i++) {\n        p[_i] = {\n          x: centerX + halfW * points[_i * 2],\n          y: centerY + halfH * points[_i * 2 + 1]\n        };\n      }\n      var i,\n        p1,\n        p2,\n        p3,\n        len = p.length;\n      p1 = p[len - 1];\n      // for each point\n      for (i = 0; i < len; i++) {\n        p2 = p[i % len];\n        p3 = p[(i + 1) % len];\n        rs[field][i] = getRoundCorner(p1, p2, p3, cornerRadius);\n        p1 = p2;\n        p2 = p3;\n      }\n      return rs[field];\n    },\n    draw: function draw(context, centerX, centerY, width, height, cornerRadius, rs) {\n      this.renderer.nodeShapeImpl('round-polygon', context, centerX, centerY, width, height, this.points, this.getOrCreateCorners(centerX, centerY, width, height, cornerRadius, rs, 'drawCorners'));\n    },\n    intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding, cornerRadius, rs) {\n      return roundPolygonIntersectLine(x, y, this.points, nodeX, nodeY, width, height, padding, this.getOrCreateCorners(nodeX, nodeY, width, height, cornerRadius, rs, 'corners'));\n    },\n    checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY, cornerRadius, rs) {\n      return pointInsideRoundPolygon(x, y, this.points, centerX, centerY, width, height, this.getOrCreateCorners(centerX, centerY, width, height, cornerRadius, rs, 'corners'));\n    }\n  };\n};\nBRp$2.generateRoundRectangle = function () {\n  return this.nodeShapes['round-rectangle'] = this.nodeShapes['roundrectangle'] = {\n    renderer: this,\n    name: 'round-rectangle',\n    points: generateUnitNgonPointsFitToSquare(4, 0),\n    draw: function draw(context, centerX, centerY, width, height, cornerRadius) {\n      this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height, this.points, cornerRadius);\n    },\n    intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding, cornerRadius) {\n      return roundRectangleIntersectLine(x, y, nodeX, nodeY, width, height, padding, cornerRadius);\n    },\n    checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY, cornerRadius) {\n      var halfWidth = width / 2;\n      var halfHeight = height / 2;\n      cornerRadius = cornerRadius === 'auto' ? getRoundRectangleRadius(width, height) : cornerRadius;\n      cornerRadius = Math.min(halfWidth, halfHeight, cornerRadius);\n      var diam = cornerRadius * 2;\n\n      // Check hBox\n      if (pointInsidePolygon(x, y, this.points, centerX, centerY, width, height - diam, [0, -1], padding)) {\n        return true;\n      }\n\n      // Check vBox\n      if (pointInsidePolygon(x, y, this.points, centerX, centerY, width - diam, height, [0, -1], padding)) {\n        return true;\n      }\n\n      // Check top left quarter circle\n      if (checkInEllipse(x, y, diam, diam, centerX - halfWidth + cornerRadius, centerY - halfHeight + cornerRadius, padding)) {\n        return true;\n      }\n\n      // Check top right quarter circle\n      if (checkInEllipse(x, y, diam, diam, centerX + halfWidth - cornerRadius, centerY - halfHeight + cornerRadius, padding)) {\n        return true;\n      }\n\n      // Check bottom right quarter circle\n      if (checkInEllipse(x, y, diam, diam, centerX + halfWidth - cornerRadius, centerY + halfHeight - cornerRadius, padding)) {\n        return true;\n      }\n\n      // Check bottom left quarter circle\n      if (checkInEllipse(x, y, diam, diam, centerX - halfWidth + cornerRadius, centerY + halfHeight - cornerRadius, padding)) {\n        return true;\n      }\n      return false;\n    }\n  };\n};\nBRp$2.generateCutRectangle = function () {\n  return this.nodeShapes['cut-rectangle'] = this.nodeShapes['cutrectangle'] = {\n    renderer: this,\n    name: 'cut-rectangle',\n    cornerLength: getCutRectangleCornerLength(),\n    points: generateUnitNgonPointsFitToSquare(4, 0),\n    draw: function draw(context, centerX, centerY, width, height, cornerRadius) {\n      this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height, null, cornerRadius);\n    },\n    generateCutTrianglePts: function generateCutTrianglePts(width, height, centerX, centerY, cornerRadius) {\n      var cl = cornerRadius === 'auto' ? this.cornerLength : cornerRadius;\n      var hh = height / 2;\n      var hw = width / 2;\n      var xBegin = centerX - hw;\n      var xEnd = centerX + hw;\n      var yBegin = centerY - hh;\n      var yEnd = centerY + hh;\n\n      // points are in clockwise order, inner (imaginary) triangle pt on [4, 5]\n      return {\n        topLeft: [xBegin, yBegin + cl, xBegin + cl, yBegin, xBegin + cl, yBegin + cl],\n        topRight: [xEnd - cl, yBegin, xEnd, yBegin + cl, xEnd - cl, yBegin + cl],\n        bottomRight: [xEnd, yEnd - cl, xEnd - cl, yEnd, xEnd - cl, yEnd - cl],\n        bottomLeft: [xBegin + cl, yEnd, xBegin, yEnd - cl, xBegin + cl, yEnd - cl]\n      };\n    },\n    intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding, cornerRadius) {\n      var cPts = this.generateCutTrianglePts(width + 2 * padding, height + 2 * padding, nodeX, nodeY, cornerRadius);\n      var pts = [].concat.apply([], [cPts.topLeft.splice(0, 4), cPts.topRight.splice(0, 4), cPts.bottomRight.splice(0, 4), cPts.bottomLeft.splice(0, 4)]);\n      return polygonIntersectLine(x, y, pts, nodeX, nodeY);\n    },\n    checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY, cornerRadius) {\n      var cl = cornerRadius === 'auto' ? this.cornerLength : cornerRadius;\n      // Check hBox\n      if (pointInsidePolygon(x, y, this.points, centerX, centerY, width, height - 2 * cl, [0, -1], padding)) {\n        return true;\n      }\n\n      // Check vBox\n      if (pointInsidePolygon(x, y, this.points, centerX, centerY, width - 2 * cl, height, [0, -1], padding)) {\n        return true;\n      }\n      var cutTrianglePts = this.generateCutTrianglePts(width, height, centerX, centerY);\n      return pointInsidePolygonPoints(x, y, cutTrianglePts.topLeft) || pointInsidePolygonPoints(x, y, cutTrianglePts.topRight) || pointInsidePolygonPoints(x, y, cutTrianglePts.bottomRight) || pointInsidePolygonPoints(x, y, cutTrianglePts.bottomLeft);\n    }\n  };\n};\nBRp$2.generateBarrel = function () {\n  return this.nodeShapes['barrel'] = {\n    renderer: this,\n    name: 'barrel',\n    points: generateUnitNgonPointsFitToSquare(4, 0),\n    draw: function draw(context, centerX, centerY, width, height, cornerRadius) {\n      this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height);\n    },\n    intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding, cornerRadius) {\n      // use two fixed t values for the bezier curve approximation\n\n      var t0 = 0.15;\n      var t1 = 0.5;\n      var t2 = 0.85;\n      var bPts = this.generateBarrelBezierPts(width + 2 * padding, height + 2 * padding, nodeX, nodeY);\n      var approximateBarrelCurvePts = function approximateBarrelCurvePts(pts) {\n        // approximate curve pts based on the two t values\n        var m0 = qbezierPtAt({\n          x: pts[0],\n          y: pts[1]\n        }, {\n          x: pts[2],\n          y: pts[3]\n        }, {\n          x: pts[4],\n          y: pts[5]\n        }, t0);\n        var m1 = qbezierPtAt({\n          x: pts[0],\n          y: pts[1]\n        }, {\n          x: pts[2],\n          y: pts[3]\n        }, {\n          x: pts[4],\n          y: pts[5]\n        }, t1);\n        var m2 = qbezierPtAt({\n          x: pts[0],\n          y: pts[1]\n        }, {\n          x: pts[2],\n          y: pts[3]\n        }, {\n          x: pts[4],\n          y: pts[5]\n        }, t2);\n        return [pts[0], pts[1], m0.x, m0.y, m1.x, m1.y, m2.x, m2.y, pts[4], pts[5]];\n      };\n      var pts = [].concat(approximateBarrelCurvePts(bPts.topLeft), approximateBarrelCurvePts(bPts.topRight), approximateBarrelCurvePts(bPts.bottomRight), approximateBarrelCurvePts(bPts.bottomLeft));\n      return polygonIntersectLine(x, y, pts, nodeX, nodeY);\n    },\n    generateBarrelBezierPts: function generateBarrelBezierPts(width, height, centerX, centerY) {\n      var hh = height / 2;\n      var hw = width / 2;\n      var xBegin = centerX - hw;\n      var xEnd = centerX + hw;\n      var yBegin = centerY - hh;\n      var yEnd = centerY + hh;\n      var curveConstants = getBarrelCurveConstants(width, height);\n      var hOffset = curveConstants.heightOffset;\n      var wOffset = curveConstants.widthOffset;\n      var ctrlPtXOffset = curveConstants.ctrlPtOffsetPct * width;\n\n      // points are in clockwise order, inner (imaginary) control pt on [4, 5]\n      var pts = {\n        topLeft: [xBegin, yBegin + hOffset, xBegin + ctrlPtXOffset, yBegin, xBegin + wOffset, yBegin],\n        topRight: [xEnd - wOffset, yBegin, xEnd - ctrlPtXOffset, yBegin, xEnd, yBegin + hOffset],\n        bottomRight: [xEnd, yEnd - hOffset, xEnd - ctrlPtXOffset, yEnd, xEnd - wOffset, yEnd],\n        bottomLeft: [xBegin + wOffset, yEnd, xBegin + ctrlPtXOffset, yEnd, xBegin, yEnd - hOffset]\n      };\n      pts.topLeft.isTop = true;\n      pts.topRight.isTop = true;\n      pts.bottomLeft.isBottom = true;\n      pts.bottomRight.isBottom = true;\n      return pts;\n    },\n    checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY, cornerRadius) {\n      var curveConstants = getBarrelCurveConstants(width, height);\n      var hOffset = curveConstants.heightOffset;\n      var wOffset = curveConstants.widthOffset;\n\n      // Check hBox\n      if (pointInsidePolygon(x, y, this.points, centerX, centerY, width, height - 2 * hOffset, [0, -1], padding)) {\n        return true;\n      }\n\n      // Check vBox\n      if (pointInsidePolygon(x, y, this.points, centerX, centerY, width - 2 * wOffset, height, [0, -1], padding)) {\n        return true;\n      }\n      var barrelCurvePts = this.generateBarrelBezierPts(width, height, centerX, centerY);\n      var getCurveT = function getCurveT(x, y, curvePts) {\n        var x0 = curvePts[4];\n        var x1 = curvePts[2];\n        var x2 = curvePts[0];\n        var y0 = curvePts[5];\n        // var y1 = curvePts[ 3 ];\n        var y2 = curvePts[1];\n        var xMin = Math.min(x0, x2);\n        var xMax = Math.max(x0, x2);\n        var yMin = Math.min(y0, y2);\n        var yMax = Math.max(y0, y2);\n        if (xMin <= x && x <= xMax && yMin <= y && y <= yMax) {\n          var coeff = bezierPtsToQuadCoeff(x0, x1, x2);\n          var roots = solveQuadratic(coeff[0], coeff[1], coeff[2], x);\n          var validRoots = roots.filter(function (r) {\n            return 0 <= r && r <= 1;\n          });\n          if (validRoots.length > 0) {\n            return validRoots[0];\n          }\n        }\n        return null;\n      };\n      var curveRegions = Object.keys(barrelCurvePts);\n      for (var i = 0; i < curveRegions.length; i++) {\n        var corner = curveRegions[i];\n        var cornerPts = barrelCurvePts[corner];\n        var t = getCurveT(x, y, cornerPts);\n        if (t == null) {\n          continue;\n        }\n        var y0 = cornerPts[5];\n        var y1 = cornerPts[3];\n        var y2 = cornerPts[1];\n        var bezY = qbezierAt(y0, y1, y2, t);\n        if (cornerPts.isTop && bezY <= y) {\n          return true;\n        }\n        if (cornerPts.isBottom && y <= bezY) {\n          return true;\n        }\n      }\n      return false;\n    }\n  };\n};\nBRp$2.generateBottomRoundrectangle = function () {\n  return this.nodeShapes['bottom-round-rectangle'] = this.nodeShapes['bottomroundrectangle'] = {\n    renderer: this,\n    name: 'bottom-round-rectangle',\n    points: generateUnitNgonPointsFitToSquare(4, 0),\n    draw: function draw(context, centerX, centerY, width, height, cornerRadius) {\n      this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height, this.points, cornerRadius);\n    },\n    intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding, cornerRadius) {\n      var topStartX = nodeX - (width / 2 + padding);\n      var topStartY = nodeY - (height / 2 + padding);\n      var topEndY = topStartY;\n      var topEndX = nodeX + (width / 2 + padding);\n      var topIntersections = finiteLinesIntersect(x, y, nodeX, nodeY, topStartX, topStartY, topEndX, topEndY, false);\n      if (topIntersections.length > 0) {\n        return topIntersections;\n      }\n      return roundRectangleIntersectLine(x, y, nodeX, nodeY, width, height, padding, cornerRadius);\n    },\n    checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY, cornerRadius) {\n      cornerRadius = cornerRadius === 'auto' ? getRoundRectangleRadius(width, height) : cornerRadius;\n      var diam = 2 * cornerRadius;\n\n      // Check hBox\n      if (pointInsidePolygon(x, y, this.points, centerX, centerY, width, height - diam, [0, -1], padding)) {\n        return true;\n      }\n\n      // Check vBox\n      if (pointInsidePolygon(x, y, this.points, centerX, centerY, width - diam, height, [0, -1], padding)) {\n        return true;\n      }\n\n      // check non-rounded top side\n      var outerWidth = width / 2 + 2 * padding;\n      var outerHeight = height / 2 + 2 * padding;\n      var points = [centerX - outerWidth, centerY - outerHeight, centerX - outerWidth, centerY, centerX + outerWidth, centerY, centerX + outerWidth, centerY - outerHeight];\n      if (pointInsidePolygonPoints(x, y, points)) {\n        return true;\n      }\n\n      // Check bottom right quarter circle\n      if (checkInEllipse(x, y, diam, diam, centerX + width / 2 - cornerRadius, centerY + height / 2 - cornerRadius, padding)) {\n        return true;\n      }\n\n      // Check bottom left quarter circle\n      if (checkInEllipse(x, y, diam, diam, centerX - width / 2 + cornerRadius, centerY + height / 2 - cornerRadius, padding)) {\n        return true;\n      }\n      return false;\n    }\n  };\n};\nBRp$2.registerNodeShapes = function () {\n  var nodeShapes = this.nodeShapes = {};\n  var renderer = this;\n  this.generateEllipse();\n  this.generatePolygon('triangle', generateUnitNgonPointsFitToSquare(3, 0));\n  this.generateRoundPolygon('round-triangle', generateUnitNgonPointsFitToSquare(3, 0));\n  this.generatePolygon('rectangle', generateUnitNgonPointsFitToSquare(4, 0));\n  nodeShapes['square'] = nodeShapes['rectangle'];\n  this.generateRoundRectangle();\n  this.generateCutRectangle();\n  this.generateBarrel();\n  this.generateBottomRoundrectangle();\n  {\n    var diamondPoints = [0, 1, 1, 0, 0, -1, -1, 0];\n    this.generatePolygon('diamond', diamondPoints);\n    this.generateRoundPolygon('round-diamond', diamondPoints);\n  }\n  this.generatePolygon('pentagon', generateUnitNgonPointsFitToSquare(5, 0));\n  this.generateRoundPolygon('round-pentagon', generateUnitNgonPointsFitToSquare(5, 0));\n  this.generatePolygon('hexagon', generateUnitNgonPointsFitToSquare(6, 0));\n  this.generateRoundPolygon('round-hexagon', generateUnitNgonPointsFitToSquare(6, 0));\n  this.generatePolygon('heptagon', generateUnitNgonPointsFitToSquare(7, 0));\n  this.generateRoundPolygon('round-heptagon', generateUnitNgonPointsFitToSquare(7, 0));\n  this.generatePolygon('octagon', generateUnitNgonPointsFitToSquare(8, 0));\n  this.generateRoundPolygon('round-octagon', generateUnitNgonPointsFitToSquare(8, 0));\n  var star5Points = new Array(20);\n  {\n    var outerPoints = generateUnitNgonPoints(5, 0);\n    var innerPoints = generateUnitNgonPoints(5, Math.PI / 5);\n\n    // Outer radius is 1; inner radius of star is smaller\n    var innerRadius = 0.5 * (3 - Math.sqrt(5));\n    innerRadius *= 1.57;\n    for (var i = 0; i < innerPoints.length / 2; i++) {\n      innerPoints[i * 2] *= innerRadius;\n      innerPoints[i * 2 + 1] *= innerRadius;\n    }\n    for (var i = 0; i < 20 / 4; i++) {\n      star5Points[i * 4] = outerPoints[i * 2];\n      star5Points[i * 4 + 1] = outerPoints[i * 2 + 1];\n      star5Points[i * 4 + 2] = innerPoints[i * 2];\n      star5Points[i * 4 + 3] = innerPoints[i * 2 + 1];\n    }\n  }\n  star5Points = fitPolygonToSquare(star5Points);\n  this.generatePolygon('star', star5Points);\n  this.generatePolygon('vee', [-1, -1, 0, -0.333, 1, -1, 0, 1]);\n  this.generatePolygon('rhomboid', [-1, -1, 0.333, -1, 1, 1, -0.333, 1]);\n  this.generatePolygon('right-rhomboid', [-0.333, -1, 1, -1, 0.333, 1, -1, 1]);\n  this.nodeShapes['concavehexagon'] = this.generatePolygon('concave-hexagon', [-1, -0.95, -0.75, 0, -1, 0.95, 1, 0.95, 0.75, 0, 1, -0.95]);\n  {\n    var tagPoints = [-1, -1, 0.25, -1, 1, 0, 0.25, 1, -1, 1];\n    this.generatePolygon('tag', tagPoints);\n    this.generateRoundPolygon('round-tag', tagPoints);\n  }\n  nodeShapes.makePolygon = function (points) {\n    // use caching on user-specified polygons so they are as fast as native shapes\n\n    var key = points.join('$');\n    var name = 'polygon-' + key;\n    var shape;\n    if (shape = this[name]) {\n      // got cached shape\n      return shape;\n    }\n\n    // create and cache new shape\n    return renderer.generatePolygon(name, points);\n  };\n};\n\nvar BRp$1 = {};\nBRp$1.timeToRender = function () {\n  return this.redrawTotalTime / this.redrawCount;\n};\nBRp$1.redraw = function (options) {\n  options = options || staticEmptyObject();\n  var r = this;\n  if (r.averageRedrawTime === undefined) {\n    r.averageRedrawTime = 0;\n  }\n  if (r.lastRedrawTime === undefined) {\n    r.lastRedrawTime = 0;\n  }\n  if (r.lastDrawTime === undefined) {\n    r.lastDrawTime = 0;\n  }\n  r.requestedFrame = true;\n  r.renderOptions = options;\n};\nBRp$1.beforeRender = function (fn, priority) {\n  // the renderer can't add tick callbacks when destroyed\n  if (this.destroyed) {\n    return;\n  }\n  if (priority == null) {\n    error('Priority is not optional for beforeRender');\n  }\n  var cbs = this.beforeRenderCallbacks;\n  cbs.push({\n    fn: fn,\n    priority: priority\n  });\n\n  // higher priority callbacks executed first\n  cbs.sort(function (a, b) {\n    return b.priority - a.priority;\n  });\n};\nvar beforeRenderCallbacks = function beforeRenderCallbacks(r, willDraw, startTime) {\n  var cbs = r.beforeRenderCallbacks;\n  for (var i = 0; i < cbs.length; i++) {\n    cbs[i].fn(willDraw, startTime);\n  }\n};\nBRp$1.startRenderLoop = function () {\n  var r = this;\n  var cy = r.cy;\n  if (r.renderLoopStarted) {\n    return;\n  } else {\n    r.renderLoopStarted = true;\n  }\n  var renderFn = function renderFn(requestTime) {\n    if (r.destroyed) {\n      return;\n    }\n    if (cy.batching()) ; else if (r.requestedFrame && !r.skipFrame) {\n      beforeRenderCallbacks(r, true, requestTime);\n      var startTime = performanceNow();\n      r.render(r.renderOptions);\n      var endTime = r.lastDrawTime = performanceNow();\n      if (r.averageRedrawTime === undefined) {\n        r.averageRedrawTime = endTime - startTime;\n      }\n      if (r.redrawCount === undefined) {\n        r.redrawCount = 0;\n      }\n      r.redrawCount++;\n      if (r.redrawTotalTime === undefined) {\n        r.redrawTotalTime = 0;\n      }\n      var duration = endTime - startTime;\n      r.redrawTotalTime += duration;\n      r.lastRedrawTime = duration;\n\n      // use a weighted average with a bias from the previous average so we don't spike so easily\n      r.averageRedrawTime = r.averageRedrawTime / 2 + duration / 2;\n      r.requestedFrame = false;\n    } else {\n      beforeRenderCallbacks(r, false, requestTime);\n    }\n    r.skipFrame = false;\n    requestAnimationFrame(renderFn);\n  };\n  requestAnimationFrame(renderFn);\n};\n\nvar BaseRenderer = function BaseRenderer(options) {\n  this.init(options);\n};\nvar BR = BaseRenderer;\nvar BRp = BR.prototype;\nBRp.clientFunctions = ['redrawHint', 'render', 'renderTo', 'matchCanvasSize', 'nodeShapeImpl', 'arrowShapeImpl'];\nBRp.init = function (options) {\n  var r = this;\n  r.options = options;\n  r.cy = options.cy;\n  var ctr = r.container = options.cy.container();\n  var containerWindow = r.cy.window();\n\n  // prepend a stylesheet in the head such that\n  if (containerWindow) {\n    var document = containerWindow.document;\n    var head = document.head;\n    var stylesheetId = '__________cytoscape_stylesheet';\n    var className = '__________cytoscape_container';\n    var stylesheetAlreadyExists = document.getElementById(stylesheetId) != null;\n    if (ctr.className.indexOf(className) < 0) {\n      ctr.className = (ctr.className || '') + ' ' + className;\n    }\n    if (!stylesheetAlreadyExists) {\n      var stylesheet = document.createElement('style');\n      stylesheet.id = stylesheetId;\n      stylesheet.textContent = '.' + className + ' { position: relative; }';\n      head.insertBefore(stylesheet, head.children[0]); // first so lowest priority\n    }\n\n    var computedStyle = containerWindow.getComputedStyle(ctr);\n    var position = computedStyle.getPropertyValue('position');\n    if (position === 'static') {\n      warn('A Cytoscape container has style position:static and so can not use UI extensions properly');\n    }\n  }\n  r.selection = [undefined, undefined, undefined, undefined, 0]; // Coordinates for selection box, plus enabled flag\n\n  r.bezierProjPcts = [0.05, 0.225, 0.4, 0.5, 0.6, 0.775, 0.95];\n\n  //--Pointer-related data\n  r.hoverData = {\n    down: null,\n    last: null,\n    downTime: null,\n    triggerMode: null,\n    dragging: false,\n    initialPan: [null, null],\n    capture: false\n  };\n  r.dragData = {\n    possibleDragElements: []\n  };\n  r.touchData = {\n    start: null,\n    capture: false,\n    // These 3 fields related to tap, taphold events\n    startPosition: [null, null, null, null, null, null],\n    singleTouchStartTime: null,\n    singleTouchMoved: true,\n    now: [null, null, null, null, null, null],\n    earlier: [null, null, null, null, null, null]\n  };\n  r.redraws = 0;\n  r.showFps = options.showFps;\n  r.debug = options.debug;\n  r.hideEdgesOnViewport = options.hideEdgesOnViewport;\n  r.textureOnViewport = options.textureOnViewport;\n  r.wheelSensitivity = options.wheelSensitivity;\n  r.motionBlurEnabled = options.motionBlur; // on by default\n  r.forcedPixelRatio = number$1(options.pixelRatio) ? options.pixelRatio : null;\n  r.motionBlur = options.motionBlur; // for initial kick off\n  r.motionBlurOpacity = options.motionBlurOpacity;\n  r.motionBlurTransparency = 1 - r.motionBlurOpacity;\n  r.motionBlurPxRatio = 1;\n  r.mbPxRBlurry = 1; //0.8;\n  r.minMbLowQualFrames = 4;\n  r.fullQualityMb = false;\n  r.clearedForMotionBlur = [];\n  r.desktopTapThreshold = options.desktopTapThreshold;\n  r.desktopTapThreshold2 = options.desktopTapThreshold * options.desktopTapThreshold;\n  r.touchTapThreshold = options.touchTapThreshold;\n  r.touchTapThreshold2 = options.touchTapThreshold * options.touchTapThreshold;\n  r.tapholdDuration = 500;\n  r.bindings = [];\n  r.beforeRenderCallbacks = [];\n  r.beforeRenderPriorities = {\n    // higher priority execs before lower one\n    animations: 400,\n    eleCalcs: 300,\n    eleTxrDeq: 200,\n    lyrTxrDeq: 150,\n    lyrTxrSkip: 100\n  };\n  r.registerNodeShapes();\n  r.registerArrowShapes();\n  r.registerCalculationListeners();\n};\nBRp.notify = function (eventName, eles) {\n  var r = this;\n  var cy = r.cy;\n\n  // the renderer can't be notified after it's destroyed\n  if (this.destroyed) {\n    return;\n  }\n  if (eventName === 'init') {\n    r.load();\n    return;\n  }\n  if (eventName === 'destroy') {\n    r.destroy();\n    return;\n  }\n  if (eventName === 'add' || eventName === 'remove' || eventName === 'move' && cy.hasCompoundNodes() || eventName === 'load' || eventName === 'zorder' || eventName === 'mount') {\n    r.invalidateCachedZSortedEles();\n  }\n  if (eventName === 'viewport') {\n    r.redrawHint('select', true);\n  }\n  if (eventName === 'load' || eventName === 'resize' || eventName === 'mount') {\n    r.invalidateContainerClientCoordsCache();\n    r.matchCanvasSize(r.container);\n  }\n  r.redrawHint('eles', true);\n  r.redrawHint('drag', true);\n  this.startRenderLoop();\n  this.redraw();\n};\nBRp.destroy = function () {\n  var r = this;\n  r.destroyed = true;\n  r.cy.stopAnimationLoop();\n  for (var i = 0; i < r.bindings.length; i++) {\n    var binding = r.bindings[i];\n    var b = binding;\n    var tgt = b.target;\n    (tgt.off || tgt.removeEventListener).apply(tgt, b.args);\n  }\n  r.bindings = [];\n  r.beforeRenderCallbacks = [];\n  r.onUpdateEleCalcsFns = [];\n  if (r.removeObserver) {\n    r.removeObserver.disconnect();\n  }\n  if (r.styleObserver) {\n    r.styleObserver.disconnect();\n  }\n  if (r.resizeObserver) {\n    r.resizeObserver.disconnect();\n  }\n  if (r.labelCalcDiv) {\n    try {\n      document.body.removeChild(r.labelCalcDiv); // eslint-disable-line no-undef\n    } catch (e) {\n      // ie10 issue #1014\n    }\n  }\n};\nBRp.isHeadless = function () {\n  return false;\n};\n[BRp$f, BRp$5, BRp$4, BRp$3, BRp$2, BRp$1].forEach(function (props) {\n  extend(BRp, props);\n});\n\nvar fullFpsTime = 1000 / 60; // assume 60 frames per second\n\nvar defs = {\n  setupDequeueing: function setupDequeueing(opts) {\n    return function setupDequeueingImpl() {\n      var self = this;\n      var r = this.renderer;\n      if (self.dequeueingSetup) {\n        return;\n      } else {\n        self.dequeueingSetup = true;\n      }\n      var queueRedraw = debounce_1(function () {\n        r.redrawHint('eles', true);\n        r.redrawHint('drag', true);\n        r.redraw();\n      }, opts.deqRedrawThreshold);\n      var dequeue = function dequeue(willDraw, frameStartTime) {\n        var startTime = performanceNow();\n        var avgRenderTime = r.averageRedrawTime;\n        var renderTime = r.lastRedrawTime;\n        var deqd = [];\n        var extent = r.cy.extent();\n        var pixelRatio = r.getPixelRatio();\n\n        // if we aren't in a tick that causes a draw, then the rendered style\n        // queue won't automatically be flushed before dequeueing starts\n        if (!willDraw) {\n          r.flushRenderedStyleQueue();\n        }\n        while (true) {\n          // eslint-disable-line no-constant-condition\n          var now = performanceNow();\n          var duration = now - startTime;\n          var frameDuration = now - frameStartTime;\n          if (renderTime < fullFpsTime) {\n            // if we're rendering faster than the ideal fps, then do dequeueing\n            // during all of the remaining frame time\n\n            var timeAvailable = fullFpsTime - (willDraw ? avgRenderTime : 0);\n            if (frameDuration >= opts.deqFastCost * timeAvailable) {\n              break;\n            }\n          } else {\n            if (willDraw) {\n              if (duration >= opts.deqCost * renderTime || duration >= opts.deqAvgCost * avgRenderTime) {\n                break;\n              }\n            } else if (frameDuration >= opts.deqNoDrawCost * fullFpsTime) {\n              break;\n            }\n          }\n          var thisDeqd = opts.deq(self, pixelRatio, extent);\n          if (thisDeqd.length > 0) {\n            for (var i = 0; i < thisDeqd.length; i++) {\n              deqd.push(thisDeqd[i]);\n            }\n          } else {\n            break;\n          }\n        }\n\n        // callbacks on dequeue\n        if (deqd.length > 0) {\n          opts.onDeqd(self, deqd);\n          if (!willDraw && opts.shouldRedraw(self, deqd, pixelRatio, extent)) {\n            queueRedraw();\n          }\n        }\n      };\n      var priority = opts.priority || noop$1;\n      r.beforeRender(dequeue, priority(self));\n    };\n  }\n};\n\n// Allows lookups for (ele, lvl) => cache.\n// Uses keys so elements may share the same cache.\nvar ElementTextureCacheLookup = /*#__PURE__*/function () {\n  function ElementTextureCacheLookup(getKey) {\n    var doesEleInvalidateKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : falsify;\n    _classCallCheck(this, ElementTextureCacheLookup);\n    this.idsByKey = new Map$2();\n    this.keyForId = new Map$2();\n    this.cachesByLvl = new Map$2();\n    this.lvls = [];\n    this.getKey = getKey;\n    this.doesEleInvalidateKey = doesEleInvalidateKey;\n  }\n  _createClass(ElementTextureCacheLookup, [{\n    key: \"getIdsFor\",\n    value: function getIdsFor(key) {\n      if (key == null) {\n        error(\"Can not get id list for null key\");\n      }\n      var idsByKey = this.idsByKey;\n      var ids = this.idsByKey.get(key);\n      if (!ids) {\n        ids = new Set$1();\n        idsByKey.set(key, ids);\n      }\n      return ids;\n    }\n  }, {\n    key: \"addIdForKey\",\n    value: function addIdForKey(key, id) {\n      if (key != null) {\n        this.getIdsFor(key).add(id);\n      }\n    }\n  }, {\n    key: \"deleteIdForKey\",\n    value: function deleteIdForKey(key, id) {\n      if (key != null) {\n        this.getIdsFor(key)[\"delete\"](id);\n      }\n    }\n  }, {\n    key: \"getNumberOfIdsForKey\",\n    value: function getNumberOfIdsForKey(key) {\n      if (key == null) {\n        return 0;\n      } else {\n        return this.getIdsFor(key).size;\n      }\n    }\n  }, {\n    key: \"updateKeyMappingFor\",\n    value: function updateKeyMappingFor(ele) {\n      var id = ele.id();\n      var prevKey = this.keyForId.get(id);\n      var currKey = this.getKey(ele);\n      this.deleteIdForKey(prevKey, id);\n      this.addIdForKey(currKey, id);\n      this.keyForId.set(id, currKey);\n    }\n  }, {\n    key: \"deleteKeyMappingFor\",\n    value: function deleteKeyMappingFor(ele) {\n      var id = ele.id();\n      var prevKey = this.keyForId.get(id);\n      this.deleteIdForKey(prevKey, id);\n      this.keyForId[\"delete\"](id);\n    }\n  }, {\n    key: \"keyHasChangedFor\",\n    value: function keyHasChangedFor(ele) {\n      var id = ele.id();\n      var prevKey = this.keyForId.get(id);\n      var newKey = this.getKey(ele);\n      return prevKey !== newKey;\n    }\n  }, {\n    key: \"isInvalid\",\n    value: function isInvalid(ele) {\n      return this.keyHasChangedFor(ele) || this.doesEleInvalidateKey(ele);\n    }\n  }, {\n    key: \"getCachesAt\",\n    value: function getCachesAt(lvl) {\n      var cachesByLvl = this.cachesByLvl,\n        lvls = this.lvls;\n      var caches = cachesByLvl.get(lvl);\n      if (!caches) {\n        caches = new Map$2();\n        cachesByLvl.set(lvl, caches);\n        lvls.push(lvl);\n      }\n      return caches;\n    }\n  }, {\n    key: \"getCache\",\n    value: function getCache(key, lvl) {\n      return this.getCachesAt(lvl).get(key);\n    }\n  }, {\n    key: \"get\",\n    value: function get(ele, lvl) {\n      var key = this.getKey(ele);\n      var cache = this.getCache(key, lvl);\n\n      // getting for an element may need to add to the id list b/c eles can share keys\n      if (cache != null) {\n        this.updateKeyMappingFor(ele);\n      }\n      return cache;\n    }\n  }, {\n    key: \"getForCachedKey\",\n    value: function getForCachedKey(ele, lvl) {\n      var key = this.keyForId.get(ele.id()); // n.b. use cached key, not newly computed key\n      var cache = this.getCache(key, lvl);\n      return cache;\n    }\n  }, {\n    key: \"hasCache\",\n    value: function hasCache(key, lvl) {\n      return this.getCachesAt(lvl).has(key);\n    }\n  }, {\n    key: \"has\",\n    value: function has(ele, lvl) {\n      var key = this.getKey(ele);\n      return this.hasCache(key, lvl);\n    }\n  }, {\n    key: \"setCache\",\n    value: function setCache(key, lvl, cache) {\n      cache.key = key;\n      this.getCachesAt(lvl).set(key, cache);\n    }\n  }, {\n    key: \"set\",\n    value: function set(ele, lvl, cache) {\n      var key = this.getKey(ele);\n      this.setCache(key, lvl, cache);\n      this.updateKeyMappingFor(ele);\n    }\n  }, {\n    key: \"deleteCache\",\n    value: function deleteCache(key, lvl) {\n      this.getCachesAt(lvl)[\"delete\"](key);\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(ele, lvl) {\n      var key = this.getKey(ele);\n      this.deleteCache(key, lvl);\n    }\n  }, {\n    key: \"invalidateKey\",\n    value: function invalidateKey(key) {\n      var _this = this;\n      this.lvls.forEach(function (lvl) {\n        return _this.deleteCache(key, lvl);\n      });\n    }\n\n    // returns true if no other eles reference the invalidated cache (n.b. other eles may need the cache with the same key)\n  }, {\n    key: \"invalidate\",\n    value: function invalidate(ele) {\n      var id = ele.id();\n      var key = this.keyForId.get(id); // n.b. use stored key rather than current (potential key)\n\n      this.deleteKeyMappingFor(ele);\n      var entireKeyInvalidated = this.doesEleInvalidateKey(ele);\n      if (entireKeyInvalidated) {\n        // clear mapping for current key\n        this.invalidateKey(key);\n      }\n      return entireKeyInvalidated || this.getNumberOfIdsForKey(key) === 0;\n    }\n  }]);\n  return ElementTextureCacheLookup;\n}();\n\nvar minTxrH = 25; // the size of the texture cache for small height eles (special case)\nvar txrStepH = 50; // the min size of the regular cache, and the size it increases with each step up\nvar minLvl$1 = -4; // when scaling smaller than that we don't need to re-render\nvar maxLvl$1 = 3; // when larger than this scale just render directly (caching is not helpful)\nvar maxZoom$1 = 7.99; // beyond this zoom level, layered textures are not used\nvar eleTxrSpacing = 8; // spacing between elements on textures to avoid blitting overlaps\nvar defTxrWidth = 1024; // default/minimum texture width\nvar maxTxrW = 1024; // the maximum width of a texture\nvar maxTxrH = 1024; // the maximum height of a texture\nvar minUtility = 0.2; // if usage of texture is less than this, it is retired\nvar maxFullness = 0.8; // fullness of texture after which queue removal is checked\nvar maxFullnessChecks = 10; // dequeued after this many checks\nvar deqCost$1 = 0.15; // % of add'l rendering cost allowed for dequeuing ele caches each frame\nvar deqAvgCost$1 = 0.1; // % of add'l rendering cost compared to average overall redraw time\nvar deqNoDrawCost$1 = 0.9; // % of avg frame time that can be used for dequeueing when not drawing\nvar deqFastCost$1 = 0.9; // % of frame time to be used when >60fps\nvar deqRedrawThreshold$1 = 100; // time to batch redraws together from dequeueing to allow more dequeueing calcs to happen in the meanwhile\nvar maxDeqSize$1 = 1; // number of eles to dequeue and render at higher texture in each batch\n\nvar getTxrReasons = {\n  dequeue: 'dequeue',\n  downscale: 'downscale',\n  highQuality: 'highQuality'\n};\nvar initDefaults = defaults$g({\n  getKey: null,\n  doesEleInvalidateKey: falsify,\n  drawElement: null,\n  getBoundingBox: null,\n  getRotationPoint: null,\n  getRotationOffset: null,\n  isVisible: trueify,\n  allowEdgeTxrCaching: true,\n  allowParentTxrCaching: true\n});\nvar ElementTextureCache = function ElementTextureCache(renderer, initOptions) {\n  var self = this;\n  self.renderer = renderer;\n  self.onDequeues = [];\n  var opts = initDefaults(initOptions);\n  extend(self, opts);\n  self.lookup = new ElementTextureCacheLookup(opts.getKey, opts.doesEleInvalidateKey);\n  self.setupDequeueing();\n};\nvar ETCp = ElementTextureCache.prototype;\nETCp.reasons = getTxrReasons;\n\n// the list of textures in which new subtextures for elements can be placed\nETCp.getTextureQueue = function (txrH) {\n  var self = this;\n  self.eleImgCaches = self.eleImgCaches || {};\n  return self.eleImgCaches[txrH] = self.eleImgCaches[txrH] || [];\n};\n\n// the list of usused textures which can be recycled (in use in texture queue)\nETCp.getRetiredTextureQueue = function (txrH) {\n  var self = this;\n  var rtxtrQs = self.eleImgCaches.retired = self.eleImgCaches.retired || {};\n  var rtxtrQ = rtxtrQs[txrH] = rtxtrQs[txrH] || [];\n  return rtxtrQ;\n};\n\n// queue of element draw requests at different scale levels\nETCp.getElementQueue = function () {\n  var self = this;\n  var q = self.eleCacheQueue = self.eleCacheQueue || new heap(function (a, b) {\n    return b.reqs - a.reqs;\n  });\n  return q;\n};\n\n// queue of element draw requests at different scale levels (element id lookup)\nETCp.getElementKeyToQueue = function () {\n  var self = this;\n  var k2q = self.eleKeyToCacheQueue = self.eleKeyToCacheQueue || {};\n  return k2q;\n};\nETCp.getElement = function (ele, bb, pxRatio, lvl, reason) {\n  var self = this;\n  var r = this.renderer;\n  var zoom = r.cy.zoom();\n  var lookup = this.lookup;\n  if (!bb || bb.w === 0 || bb.h === 0 || isNaN(bb.w) || isNaN(bb.h) || !ele.visible() || ele.removed()) {\n    return null;\n  }\n  if (!self.allowEdgeTxrCaching && ele.isEdge() || !self.allowParentTxrCaching && ele.isParent()) {\n    return null;\n  }\n  if (lvl == null) {\n    lvl = Math.ceil(log2(zoom * pxRatio));\n  }\n  if (lvl < minLvl$1) {\n    lvl = minLvl$1;\n  } else if (zoom >= maxZoom$1 || lvl > maxLvl$1) {\n    return null;\n  }\n  var scale = Math.pow(2, lvl);\n  var eleScaledH = bb.h * scale;\n  var eleScaledW = bb.w * scale;\n  var scaledLabelShown = r.eleTextBiggerThanMin(ele, scale);\n  if (!this.isVisible(ele, scaledLabelShown)) {\n    return null;\n  }\n  var eleCache = lookup.get(ele, lvl);\n\n  // if this get was on an unused/invalidated cache, then restore the texture usage metric\n  if (eleCache && eleCache.invalidated) {\n    eleCache.invalidated = false;\n    eleCache.texture.invalidatedWidth -= eleCache.width;\n  }\n  if (eleCache) {\n    return eleCache;\n  }\n  var txrH; // which texture height this ele belongs to\n\n  if (eleScaledH <= minTxrH) {\n    txrH = minTxrH;\n  } else if (eleScaledH <= txrStepH) {\n    txrH = txrStepH;\n  } else {\n    txrH = Math.ceil(eleScaledH / txrStepH) * txrStepH;\n  }\n  if (eleScaledH > maxTxrH || eleScaledW > maxTxrW) {\n    return null; // caching large elements is not efficient\n  }\n\n  var txrQ = self.getTextureQueue(txrH);\n\n  // first try the second last one in case it has space at the end\n  var txr = txrQ[txrQ.length - 2];\n  var addNewTxr = function addNewTxr() {\n    return self.recycleTexture(txrH, eleScaledW) || self.addTexture(txrH, eleScaledW);\n  };\n\n  // try the last one if there is no second last one\n  if (!txr) {\n    txr = txrQ[txrQ.length - 1];\n  }\n\n  // if the last one doesn't exist, we need a first one\n  if (!txr) {\n    txr = addNewTxr();\n  }\n\n  // if there's no room in the current texture, we need a new one\n  if (txr.width - txr.usedWidth < eleScaledW) {\n    txr = addNewTxr();\n  }\n  var scalableFrom = function scalableFrom(otherCache) {\n    return otherCache && otherCache.scaledLabelShown === scaledLabelShown;\n  };\n  var deqing = reason && reason === getTxrReasons.dequeue;\n  var highQualityReq = reason && reason === getTxrReasons.highQuality;\n  var downscaleReq = reason && reason === getTxrReasons.downscale;\n  var higherCache; // the nearest cache with a higher level\n  for (var l = lvl + 1; l <= maxLvl$1; l++) {\n    var c = lookup.get(ele, l);\n    if (c) {\n      higherCache = c;\n      break;\n    }\n  }\n  var oneUpCache = higherCache && higherCache.level === lvl + 1 ? higherCache : null;\n  var downscale = function downscale() {\n    txr.context.drawImage(oneUpCache.texture.canvas, oneUpCache.x, 0, oneUpCache.width, oneUpCache.height, txr.usedWidth, 0, eleScaledW, eleScaledH);\n  };\n\n  // reset ele area in texture\n  txr.context.setTransform(1, 0, 0, 1, 0, 0);\n  txr.context.clearRect(txr.usedWidth, 0, eleScaledW, txrH);\n  if (scalableFrom(oneUpCache)) {\n    // then we can relatively cheaply rescale the existing image w/o rerendering\n    downscale();\n  } else if (scalableFrom(higherCache)) {\n    // then use the higher cache for now and queue the next level down\n    // to cheaply scale towards the smaller level\n\n    if (highQualityReq) {\n      for (var _l = higherCache.level; _l > lvl; _l--) {\n        oneUpCache = self.getElement(ele, bb, pxRatio, _l, getTxrReasons.downscale);\n      }\n      downscale();\n    } else {\n      self.queueElement(ele, higherCache.level - 1);\n      return higherCache;\n    }\n  } else {\n    var lowerCache; // the nearest cache with a lower level\n    if (!deqing && !highQualityReq && !downscaleReq) {\n      for (var _l2 = lvl - 1; _l2 >= minLvl$1; _l2--) {\n        var _c = lookup.get(ele, _l2);\n        if (_c) {\n          lowerCache = _c;\n          break;\n        }\n      }\n    }\n    if (scalableFrom(lowerCache)) {\n      // then use the lower quality cache for now and queue the better one for later\n\n      self.queueElement(ele, lvl);\n      return lowerCache;\n    }\n    txr.context.translate(txr.usedWidth, 0);\n    txr.context.scale(scale, scale);\n    this.drawElement(txr.context, ele, bb, scaledLabelShown, false);\n    txr.context.scale(1 / scale, 1 / scale);\n    txr.context.translate(-txr.usedWidth, 0);\n  }\n  eleCache = {\n    x: txr.usedWidth,\n    texture: txr,\n    level: lvl,\n    scale: scale,\n    width: eleScaledW,\n    height: eleScaledH,\n    scaledLabelShown: scaledLabelShown\n  };\n  txr.usedWidth += Math.ceil(eleScaledW + eleTxrSpacing);\n  txr.eleCaches.push(eleCache);\n  lookup.set(ele, lvl, eleCache);\n  self.checkTextureFullness(txr);\n  return eleCache;\n};\nETCp.invalidateElements = function (eles) {\n  for (var i = 0; i < eles.length; i++) {\n    this.invalidateElement(eles[i]);\n  }\n};\nETCp.invalidateElement = function (ele) {\n  var self = this;\n  var lookup = self.lookup;\n  var caches = [];\n  var invalid = lookup.isInvalid(ele);\n  if (!invalid) {\n    return; // override the invalidation request if the element key has not changed\n  }\n\n  for (var lvl = minLvl$1; lvl <= maxLvl$1; lvl++) {\n    var cache = lookup.getForCachedKey(ele, lvl);\n    if (cache) {\n      caches.push(cache);\n    }\n  }\n  var noOtherElesUseCache = lookup.invalidate(ele);\n  if (noOtherElesUseCache) {\n    for (var i = 0; i < caches.length; i++) {\n      var _cache = caches[i];\n      var txr = _cache.texture;\n\n      // remove space from the texture it belongs to\n      txr.invalidatedWidth += _cache.width;\n\n      // mark the cache as invalidated\n      _cache.invalidated = true;\n\n      // retire the texture if its utility is low\n      self.checkTextureUtility(txr);\n    }\n  }\n\n  // remove from queue since the old req was for the old state\n  self.removeFromQueue(ele);\n};\nETCp.checkTextureUtility = function (txr) {\n  // invalidate all entries in the cache if the cache size is small\n  if (txr.invalidatedWidth >= minUtility * txr.width) {\n    this.retireTexture(txr);\n  }\n};\nETCp.checkTextureFullness = function (txr) {\n  // if texture has been mostly filled and passed over several times, remove\n  // it from the queue so we don't need to waste time looking at it to put new things\n\n  var self = this;\n  var txrQ = self.getTextureQueue(txr.height);\n  if (txr.usedWidth / txr.width > maxFullness && txr.fullnessChecks >= maxFullnessChecks) {\n    removeFromArray(txrQ, txr);\n  } else {\n    txr.fullnessChecks++;\n  }\n};\nETCp.retireTexture = function (txr) {\n  var self = this;\n  var txrH = txr.height;\n  var txrQ = self.getTextureQueue(txrH);\n  var lookup = this.lookup;\n\n  // retire the texture from the active / searchable queue:\n\n  removeFromArray(txrQ, txr);\n  txr.retired = true;\n\n  // remove the refs from the eles to the caches:\n\n  var eleCaches = txr.eleCaches;\n  for (var i = 0; i < eleCaches.length; i++) {\n    var eleCache = eleCaches[i];\n    lookup.deleteCache(eleCache.key, eleCache.level);\n  }\n  clearArray(eleCaches);\n\n  // add the texture to a retired queue so it can be recycled in future:\n\n  var rtxtrQ = self.getRetiredTextureQueue(txrH);\n  rtxtrQ.push(txr);\n};\nETCp.addTexture = function (txrH, minW) {\n  var self = this;\n  var txrQ = self.getTextureQueue(txrH);\n  var txr = {};\n  txrQ.push(txr);\n  txr.eleCaches = [];\n  txr.height = txrH;\n  txr.width = Math.max(defTxrWidth, minW);\n  txr.usedWidth = 0;\n  txr.invalidatedWidth = 0;\n  txr.fullnessChecks = 0;\n  txr.canvas = self.renderer.makeOffscreenCanvas(txr.width, txr.height);\n  txr.context = txr.canvas.getContext('2d');\n  return txr;\n};\nETCp.recycleTexture = function (txrH, minW) {\n  var self = this;\n  var txrQ = self.getTextureQueue(txrH);\n  var rtxtrQ = self.getRetiredTextureQueue(txrH);\n  for (var i = 0; i < rtxtrQ.length; i++) {\n    var txr = rtxtrQ[i];\n    if (txr.width >= minW) {\n      txr.retired = false;\n      txr.usedWidth = 0;\n      txr.invalidatedWidth = 0;\n      txr.fullnessChecks = 0;\n      clearArray(txr.eleCaches);\n      txr.context.setTransform(1, 0, 0, 1, 0, 0);\n      txr.context.clearRect(0, 0, txr.width, txr.height);\n      removeFromArray(rtxtrQ, txr);\n      txrQ.push(txr);\n      return txr;\n    }\n  }\n};\nETCp.queueElement = function (ele, lvl) {\n  var self = this;\n  var q = self.getElementQueue();\n  var k2q = self.getElementKeyToQueue();\n  var key = this.getKey(ele);\n  var existingReq = k2q[key];\n  if (existingReq) {\n    // use the max lvl b/c in between lvls are cheap to make\n    existingReq.level = Math.max(existingReq.level, lvl);\n    existingReq.eles.merge(ele);\n    existingReq.reqs++;\n    q.updateItem(existingReq);\n  } else {\n    var req = {\n      eles: ele.spawn().merge(ele),\n      level: lvl,\n      reqs: 1,\n      key: key\n    };\n    q.push(req);\n    k2q[key] = req;\n  }\n};\nETCp.dequeue = function (pxRatio /*, extent*/) {\n  var self = this;\n  var q = self.getElementQueue();\n  var k2q = self.getElementKeyToQueue();\n  var dequeued = [];\n  var lookup = self.lookup;\n  for (var i = 0; i < maxDeqSize$1; i++) {\n    if (q.size() > 0) {\n      var req = q.pop();\n      var key = req.key;\n      var ele = req.eles[0]; // all eles have the same key\n      var cacheExists = lookup.hasCache(ele, req.level);\n\n      // clear out the key to req lookup\n      k2q[key] = null;\n\n      // dequeueing isn't necessary with an existing cache\n      if (cacheExists) {\n        continue;\n      }\n      dequeued.push(req);\n      var bb = self.getBoundingBox(ele);\n      self.getElement(ele, bb, pxRatio, req.level, getTxrReasons.dequeue);\n    } else {\n      break;\n    }\n  }\n  return dequeued;\n};\nETCp.removeFromQueue = function (ele) {\n  var self = this;\n  var q = self.getElementQueue();\n  var k2q = self.getElementKeyToQueue();\n  var key = this.getKey(ele);\n  var req = k2q[key];\n  if (req != null) {\n    if (req.eles.length === 1) {\n      // remove if last ele in the req\n      // bring to front of queue\n      req.reqs = MAX_INT$1;\n      q.updateItem(req);\n      q.pop(); // remove from queue\n\n      k2q[key] = null; // remove from lookup map\n    } else {\n      // otherwise just remove ele from req\n      req.eles.unmerge(ele);\n    }\n  }\n};\nETCp.onDequeue = function (fn) {\n  this.onDequeues.push(fn);\n};\nETCp.offDequeue = function (fn) {\n  removeFromArray(this.onDequeues, fn);\n};\nETCp.setupDequeueing = defs.setupDequeueing({\n  deqRedrawThreshold: deqRedrawThreshold$1,\n  deqCost: deqCost$1,\n  deqAvgCost: deqAvgCost$1,\n  deqNoDrawCost: deqNoDrawCost$1,\n  deqFastCost: deqFastCost$1,\n  deq: function deq(self, pxRatio, extent) {\n    return self.dequeue(pxRatio, extent);\n  },\n  onDeqd: function onDeqd(self, deqd) {\n    for (var i = 0; i < self.onDequeues.length; i++) {\n      var fn = self.onDequeues[i];\n      fn(deqd);\n    }\n  },\n  shouldRedraw: function shouldRedraw(self, deqd, pxRatio, extent) {\n    for (var i = 0; i < deqd.length; i++) {\n      var eles = deqd[i].eles;\n      for (var j = 0; j < eles.length; j++) {\n        var bb = eles[j].boundingBox();\n        if (boundingBoxesIntersect(bb, extent)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  },\n  priority: function priority(self) {\n    return self.renderer.beforeRenderPriorities.eleTxrDeq;\n  }\n});\n\nvar defNumLayers = 1; // default number of layers to use\nvar minLvl = -4; // when scaling smaller than that we don't need to re-render\nvar maxLvl = 2; // when larger than this scale just render directly (caching is not helpful)\nvar maxZoom = 3.99; // beyond this zoom level, layered textures are not used\nvar deqRedrawThreshold = 50; // time to batch redraws together from dequeueing to allow more dequeueing calcs to happen in the meanwhile\nvar refineEleDebounceTime = 50; // time to debounce sharper ele texture updates\nvar deqCost = 0.15; // % of add'l rendering cost allowed for dequeuing ele caches each frame\nvar deqAvgCost = 0.1; // % of add'l rendering cost compared to average overall redraw time\nvar deqNoDrawCost = 0.9; // % of avg frame time that can be used for dequeueing when not drawing\nvar deqFastCost = 0.9; // % of frame time to be used when >60fps\nvar maxDeqSize = 1; // number of eles to dequeue and render at higher texture in each batch\nvar invalidThreshold = 250; // time threshold for disabling b/c of invalidations\nvar maxLayerArea = 4000 * 4000; // layers can't be bigger than this\nvar maxLayerDim = 32767; // maximum size for the width/height of layer canvases\nvar useHighQualityEleTxrReqs = true; // whether to use high quality ele txr requests (generally faster and cheaper in the longterm)\n\n// var log = function(){ console.log.apply( console, arguments ); };\n\nvar LayeredTextureCache = function LayeredTextureCache(renderer) {\n  var self = this;\n  var r = self.renderer = renderer;\n  var cy = r.cy;\n  self.layersByLevel = {}; // e.g. 2 => [ layer1, layer2, ..., layerN ]\n\n  self.firstGet = true;\n  self.lastInvalidationTime = performanceNow() - 2 * invalidThreshold;\n  self.skipping = false;\n  self.eleTxrDeqs = cy.collection();\n  self.scheduleElementRefinement = debounce_1(function () {\n    self.refineElementTextures(self.eleTxrDeqs);\n    self.eleTxrDeqs.unmerge(self.eleTxrDeqs);\n  }, refineEleDebounceTime);\n  r.beforeRender(function (willDraw, now) {\n    if (now - self.lastInvalidationTime <= invalidThreshold) {\n      self.skipping = true;\n    } else {\n      self.skipping = false;\n    }\n  }, r.beforeRenderPriorities.lyrTxrSkip);\n  var qSort = function qSort(a, b) {\n    return b.reqs - a.reqs;\n  };\n  self.layersQueue = new heap(qSort);\n  self.setupDequeueing();\n};\nvar LTCp = LayeredTextureCache.prototype;\nvar layerIdPool = 0;\nvar MAX_INT = Math.pow(2, 53) - 1;\nLTCp.makeLayer = function (bb, lvl) {\n  var scale = Math.pow(2, lvl);\n  var w = Math.ceil(bb.w * scale);\n  var h = Math.ceil(bb.h * scale);\n  var canvas = this.renderer.makeOffscreenCanvas(w, h);\n  var layer = {\n    id: layerIdPool = ++layerIdPool % MAX_INT,\n    bb: bb,\n    level: lvl,\n    width: w,\n    height: h,\n    canvas: canvas,\n    context: canvas.getContext('2d'),\n    eles: [],\n    elesQueue: [],\n    reqs: 0\n  };\n\n  // log('make layer %s with w %s and h %s and lvl %s', layer.id, layer.width, layer.height, layer.level);\n\n  var cxt = layer.context;\n  var dx = -layer.bb.x1;\n  var dy = -layer.bb.y1;\n\n  // do the transform on creation to save cycles (it's the same for all eles)\n  cxt.scale(scale, scale);\n  cxt.translate(dx, dy);\n  return layer;\n};\nLTCp.getLayers = function (eles, pxRatio, lvl) {\n  var self = this;\n  var r = self.renderer;\n  var cy = r.cy;\n  var zoom = cy.zoom();\n  var firstGet = self.firstGet;\n  self.firstGet = false;\n\n  // log('--\\nget layers with %s eles', eles.length);\n  //log eles.map(function(ele){ return ele.id() }) );\n\n  if (lvl == null) {\n    lvl = Math.ceil(log2(zoom * pxRatio));\n    if (lvl < minLvl) {\n      lvl = minLvl;\n    } else if (zoom >= maxZoom || lvl > maxLvl) {\n      return null;\n    }\n  }\n  self.validateLayersElesOrdering(lvl, eles);\n  var layersByLvl = self.layersByLevel;\n  var scale = Math.pow(2, lvl);\n  var layers = layersByLvl[lvl] = layersByLvl[lvl] || [];\n  var bb;\n  var lvlComplete = self.levelIsComplete(lvl, eles);\n  var tmpLayers;\n  var checkTempLevels = function checkTempLevels() {\n    var canUseAsTmpLvl = function canUseAsTmpLvl(l) {\n      self.validateLayersElesOrdering(l, eles);\n      if (self.levelIsComplete(l, eles)) {\n        tmpLayers = layersByLvl[l];\n        return true;\n      }\n    };\n    var checkLvls = function checkLvls(dir) {\n      if (tmpLayers) {\n        return;\n      }\n      for (var l = lvl + dir; minLvl <= l && l <= maxLvl; l += dir) {\n        if (canUseAsTmpLvl(l)) {\n          break;\n        }\n      }\n    };\n    checkLvls(+1);\n    checkLvls(-1);\n\n    // remove the invalid layers; they will be replaced as needed later in this function\n    for (var i = layers.length - 1; i >= 0; i--) {\n      var layer = layers[i];\n      if (layer.invalid) {\n        removeFromArray(layers, layer);\n      }\n    }\n  };\n  if (!lvlComplete) {\n    // if the current level is incomplete, then use the closest, best quality layerset temporarily\n    // and later queue the current layerset so we can get the proper quality level soon\n\n    checkTempLevels();\n  } else {\n    // log('level complete, using existing layers\\n--');\n    return layers;\n  }\n  var getBb = function getBb() {\n    if (!bb) {\n      bb = makeBoundingBox();\n      for (var i = 0; i < eles.length; i++) {\n        updateBoundingBox(bb, eles[i].boundingBox());\n      }\n    }\n    return bb;\n  };\n  var makeLayer = function makeLayer(opts) {\n    opts = opts || {};\n    var after = opts.after;\n    getBb();\n    var w = Math.ceil(bb.w * scale);\n    var h = Math.ceil(bb.h * scale);\n    if (w > maxLayerDim || h > maxLayerDim) {\n      return null;\n    }\n    var area = w * h;\n    if (area > maxLayerArea) {\n      return null;\n    }\n    var layer = self.makeLayer(bb, lvl);\n    if (after != null) {\n      var index = layers.indexOf(after) + 1;\n      layers.splice(index, 0, layer);\n    } else if (opts.insert === undefined || opts.insert) {\n      // no after specified => first layer made so put at start\n      layers.unshift(layer);\n    }\n\n    // if( tmpLayers ){\n    //self.queueLayer( layer );\n    // }\n\n    return layer;\n  };\n  if (self.skipping && !firstGet) {\n    // log('skip layers');\n    return null;\n  }\n\n  // log('do layers');\n\n  var layer = null;\n  var maxElesPerLayer = eles.length / defNumLayers;\n  var allowLazyQueueing = !firstGet;\n  for (var i = 0; i < eles.length; i++) {\n    var ele = eles[i];\n    var rs = ele._private.rscratch;\n    var caches = rs.imgLayerCaches = rs.imgLayerCaches || {};\n\n    // log('look at ele', ele.id());\n\n    var existingLayer = caches[lvl];\n    if (existingLayer) {\n      // reuse layer for later eles\n      // log('reuse layer for', ele.id());\n      layer = existingLayer;\n      continue;\n    }\n    if (!layer || layer.eles.length >= maxElesPerLayer || !boundingBoxInBoundingBox(layer.bb, ele.boundingBox())) {\n      // log('make new layer for ele %s', ele.id());\n\n      layer = makeLayer({\n        insert: true,\n        after: layer\n      });\n\n      // if now layer can be built then we can't use layers at this level\n      if (!layer) {\n        return null;\n      }\n\n      // log('new layer with id %s', layer.id);\n    }\n\n    if (tmpLayers || allowLazyQueueing) {\n      // log('queue ele %s in layer %s', ele.id(), layer.id);\n      self.queueLayer(layer, ele);\n    } else {\n      // log('draw ele %s in layer %s', ele.id(), layer.id);\n      self.drawEleInLayer(layer, ele, lvl, pxRatio);\n    }\n    layer.eles.push(ele);\n    caches[lvl] = layer;\n  }\n\n  // log('--');\n\n  if (tmpLayers) {\n    // then we only queued the current layerset and can't draw it yet\n    return tmpLayers;\n  }\n  if (allowLazyQueueing) {\n    // log('lazy queue level', lvl);\n    return null;\n  }\n  return layers;\n};\n\n// a layer may want to use an ele cache of a higher level to avoid blurriness\n// so the layer level might not equal the ele level\nLTCp.getEleLevelForLayerLevel = function (lvl, pxRatio) {\n  return lvl;\n};\nLTCp.drawEleInLayer = function (layer, ele, lvl, pxRatio) {\n  var self = this;\n  var r = this.renderer;\n  var context = layer.context;\n  var bb = ele.boundingBox();\n  if (bb.w === 0 || bb.h === 0 || !ele.visible()) {\n    return;\n  }\n  lvl = self.getEleLevelForLayerLevel(lvl, pxRatio);\n  {\n    r.setImgSmoothing(context, false);\n  }\n  {\n    r.drawCachedElement(context, ele, null, null, lvl, useHighQualityEleTxrReqs);\n  }\n  {\n    r.setImgSmoothing(context, true);\n  }\n};\nLTCp.levelIsComplete = function (lvl, eles) {\n  var self = this;\n  var layers = self.layersByLevel[lvl];\n  if (!layers || layers.length === 0) {\n    return false;\n  }\n  var numElesInLayers = 0;\n  for (var i = 0; i < layers.length; i++) {\n    var layer = layers[i];\n\n    // if there are any eles needed to be drawn yet, the level is not complete\n    if (layer.reqs > 0) {\n      return false;\n    }\n\n    // if the layer is invalid, the level is not complete\n    if (layer.invalid) {\n      return false;\n    }\n    numElesInLayers += layer.eles.length;\n  }\n\n  // we should have exactly the number of eles passed in to be complete\n  if (numElesInLayers !== eles.length) {\n    return false;\n  }\n  return true;\n};\nLTCp.validateLayersElesOrdering = function (lvl, eles) {\n  var layers = this.layersByLevel[lvl];\n  if (!layers) {\n    return;\n  }\n\n  // if in a layer the eles are not in the same order, then the layer is invalid\n  // (i.e. there is an ele in between the eles in the layer)\n\n  for (var i = 0; i < layers.length; i++) {\n    var layer = layers[i];\n    var offset = -1;\n\n    // find the offset\n    for (var j = 0; j < eles.length; j++) {\n      if (layer.eles[0] === eles[j]) {\n        offset = j;\n        break;\n      }\n    }\n    if (offset < 0) {\n      // then the layer has nonexistent elements and is invalid\n      this.invalidateLayer(layer);\n      continue;\n    }\n\n    // the eles in the layer must be in the same continuous order, else the layer is invalid\n\n    var o = offset;\n    for (var j = 0; j < layer.eles.length; j++) {\n      if (layer.eles[j] !== eles[o + j]) {\n        // log('invalidate based on ordering', layer.id);\n\n        this.invalidateLayer(layer);\n        break;\n      }\n    }\n  }\n};\nLTCp.updateElementsInLayers = function (eles, update) {\n  var self = this;\n  var isEles = element(eles[0]);\n\n  // collect udpated elements (cascaded from the layers) and update each\n  // layer itself along the way\n  for (var i = 0; i < eles.length; i++) {\n    var req = isEles ? null : eles[i];\n    var ele = isEles ? eles[i] : eles[i].ele;\n    var rs = ele._private.rscratch;\n    var caches = rs.imgLayerCaches = rs.imgLayerCaches || {};\n    for (var l = minLvl; l <= maxLvl; l++) {\n      var layer = caches[l];\n      if (!layer) {\n        continue;\n      }\n\n      // if update is a request from the ele cache, then it affects only\n      // the matching level\n      if (req && self.getEleLevelForLayerLevel(layer.level) !== req.level) {\n        continue;\n      }\n      update(layer, ele, req);\n    }\n  }\n};\nLTCp.haveLayers = function () {\n  var self = this;\n  var haveLayers = false;\n  for (var l = minLvl; l <= maxLvl; l++) {\n    var layers = self.layersByLevel[l];\n    if (layers && layers.length > 0) {\n      haveLayers = true;\n      break;\n    }\n  }\n  return haveLayers;\n};\nLTCp.invalidateElements = function (eles) {\n  var self = this;\n  if (eles.length === 0) {\n    return;\n  }\n  self.lastInvalidationTime = performanceNow();\n\n  // log('update invalidate layer time from eles');\n\n  if (eles.length === 0 || !self.haveLayers()) {\n    return;\n  }\n  self.updateElementsInLayers(eles, function invalAssocLayers(layer, ele, req) {\n    self.invalidateLayer(layer);\n  });\n};\nLTCp.invalidateLayer = function (layer) {\n  // log('update invalidate layer time');\n\n  this.lastInvalidationTime = performanceNow();\n  if (layer.invalid) {\n    return;\n  } // save cycles\n\n  var lvl = layer.level;\n  var eles = layer.eles;\n  var layers = this.layersByLevel[lvl];\n\n  // log('invalidate layer', layer.id );\n\n  removeFromArray(layers, layer);\n  // layer.eles = [];\n\n  layer.elesQueue = [];\n  layer.invalid = true;\n  if (layer.replacement) {\n    layer.replacement.invalid = true;\n  }\n  for (var i = 0; i < eles.length; i++) {\n    var caches = eles[i]._private.rscratch.imgLayerCaches;\n    if (caches) {\n      caches[lvl] = null;\n    }\n  }\n};\nLTCp.refineElementTextures = function (eles) {\n  var self = this;\n\n  // log('refine', eles.length);\n\n  self.updateElementsInLayers(eles, function refineEachEle(layer, ele, req) {\n    var rLyr = layer.replacement;\n    if (!rLyr) {\n      rLyr = layer.replacement = self.makeLayer(layer.bb, layer.level);\n      rLyr.replaces = layer;\n      rLyr.eles = layer.eles;\n\n      // log('make replacement layer %s for %s with level %s', rLyr.id, layer.id, rLyr.level);\n    }\n\n    if (!rLyr.reqs) {\n      for (var i = 0; i < rLyr.eles.length; i++) {\n        self.queueLayer(rLyr, rLyr.eles[i]);\n      }\n\n      // log('queue replacement layer refinement', rLyr.id);\n    }\n  });\n};\n\nLTCp.enqueueElementRefinement = function (ele) {\n  this.eleTxrDeqs.merge(ele);\n  this.scheduleElementRefinement();\n};\nLTCp.queueLayer = function (layer, ele) {\n  var self = this;\n  var q = self.layersQueue;\n  var elesQ = layer.elesQueue;\n  var hasId = elesQ.hasId = elesQ.hasId || {};\n\n  // if a layer is going to be replaced, queuing is a waste of time\n  if (layer.replacement) {\n    return;\n  }\n  if (ele) {\n    if (hasId[ele.id()]) {\n      return;\n    }\n    elesQ.push(ele);\n    hasId[ele.id()] = true;\n  }\n  if (layer.reqs) {\n    layer.reqs++;\n    q.updateItem(layer);\n  } else {\n    layer.reqs = 1;\n    q.push(layer);\n  }\n};\nLTCp.dequeue = function (pxRatio) {\n  var self = this;\n  var q = self.layersQueue;\n  var deqd = [];\n  var eleDeqs = 0;\n  while (eleDeqs < maxDeqSize) {\n    if (q.size() === 0) {\n      break;\n    }\n    var layer = q.peek();\n\n    // if a layer has been or will be replaced, then don't waste time with it\n    if (layer.replacement) {\n      // log('layer %s in queue skipped b/c it already has a replacement', layer.id);\n      q.pop();\n      continue;\n    }\n\n    // if this is a replacement layer that has been superceded, then forget it\n    if (layer.replaces && layer !== layer.replaces.replacement) {\n      // log('layer is no longer the most uptodate replacement; dequeued', layer.id)\n      q.pop();\n      continue;\n    }\n    if (layer.invalid) {\n      // log('replacement layer %s is invalid; dequeued', layer.id);\n      q.pop();\n      continue;\n    }\n    var ele = layer.elesQueue.shift();\n    if (ele) {\n      // log('dequeue layer %s', layer.id);\n\n      self.drawEleInLayer(layer, ele, layer.level, pxRatio);\n      eleDeqs++;\n    }\n    if (deqd.length === 0) {\n      // we need only one entry in deqd to queue redrawing etc\n      deqd.push(true);\n    }\n\n    // if the layer has all its eles done, then remove from the queue\n    if (layer.elesQueue.length === 0) {\n      q.pop();\n      layer.reqs = 0;\n\n      // log('dequeue of layer %s complete', layer.id);\n\n      // when a replacement layer is dequeued, it replaces the old layer in the level\n      if (layer.replaces) {\n        self.applyLayerReplacement(layer);\n      }\n      self.requestRedraw();\n    }\n  }\n  return deqd;\n};\nLTCp.applyLayerReplacement = function (layer) {\n  var self = this;\n  var layersInLevel = self.layersByLevel[layer.level];\n  var replaced = layer.replaces;\n  var index = layersInLevel.indexOf(replaced);\n\n  // if the replaced layer is not in the active list for the level, then replacing\n  // refs would be a mistake (i.e. overwriting the true active layer)\n  if (index < 0 || replaced.invalid) {\n    // log('replacement layer would have no effect', layer.id);\n    return;\n  }\n  layersInLevel[index] = layer; // replace level ref\n\n  // replace refs in eles\n  for (var i = 0; i < layer.eles.length; i++) {\n    var _p = layer.eles[i]._private;\n    var cache = _p.imgLayerCaches = _p.imgLayerCaches || {};\n    if (cache) {\n      cache[layer.level] = layer;\n    }\n  }\n\n  // log('apply replacement layer %s over %s', layer.id, replaced.id);\n\n  self.requestRedraw();\n};\nLTCp.requestRedraw = debounce_1(function () {\n  var r = this.renderer;\n  r.redrawHint('eles', true);\n  r.redrawHint('drag', true);\n  r.redraw();\n}, 100);\nLTCp.setupDequeueing = defs.setupDequeueing({\n  deqRedrawThreshold: deqRedrawThreshold,\n  deqCost: deqCost,\n  deqAvgCost: deqAvgCost,\n  deqNoDrawCost: deqNoDrawCost,\n  deqFastCost: deqFastCost,\n  deq: function deq(self, pxRatio) {\n    return self.dequeue(pxRatio);\n  },\n  onDeqd: noop$1,\n  shouldRedraw: trueify,\n  priority: function priority(self) {\n    return self.renderer.beforeRenderPriorities.lyrTxrDeq;\n  }\n});\n\nvar CRp$a = {};\nvar impl;\nfunction polygon(context, points) {\n  for (var i = 0; i < points.length; i++) {\n    var pt = points[i];\n    context.lineTo(pt.x, pt.y);\n  }\n}\nfunction triangleBackcurve(context, points, controlPoint) {\n  var firstPt;\n  for (var i = 0; i < points.length; i++) {\n    var pt = points[i];\n    if (i === 0) {\n      firstPt = pt;\n    }\n    context.lineTo(pt.x, pt.y);\n  }\n  context.quadraticCurveTo(controlPoint.x, controlPoint.y, firstPt.x, firstPt.y);\n}\nfunction triangleTee(context, trianglePoints, teePoints) {\n  if (context.beginPath) {\n    context.beginPath();\n  }\n  var triPts = trianglePoints;\n  for (var i = 0; i < triPts.length; i++) {\n    var pt = triPts[i];\n    context.lineTo(pt.x, pt.y);\n  }\n  var teePts = teePoints;\n  var firstTeePt = teePoints[0];\n  context.moveTo(firstTeePt.x, firstTeePt.y);\n  for (var i = 1; i < teePts.length; i++) {\n    var pt = teePts[i];\n    context.lineTo(pt.x, pt.y);\n  }\n  if (context.closePath) {\n    context.closePath();\n  }\n}\nfunction circleTriangle(context, trianglePoints, rx, ry, r) {\n  if (context.beginPath) {\n    context.beginPath();\n  }\n  context.arc(rx, ry, r, 0, Math.PI * 2, false);\n  var triPts = trianglePoints;\n  var firstTrPt = triPts[0];\n  context.moveTo(firstTrPt.x, firstTrPt.y);\n  for (var i = 0; i < triPts.length; i++) {\n    var pt = triPts[i];\n    context.lineTo(pt.x, pt.y);\n  }\n  if (context.closePath) {\n    context.closePath();\n  }\n}\nfunction circle(context, rx, ry, r) {\n  context.arc(rx, ry, r, 0, Math.PI * 2, false);\n}\nCRp$a.arrowShapeImpl = function (name) {\n  return (impl || (impl = {\n    'polygon': polygon,\n    'triangle-backcurve': triangleBackcurve,\n    'triangle-tee': triangleTee,\n    'circle-triangle': circleTriangle,\n    'triangle-cross': triangleTee,\n    'circle': circle\n  }))[name];\n};\n\nvar CRp$9 = {};\nCRp$9.drawElement = function (context, ele, shiftToOriginWithBb, showLabel, showOverlay, showOpacity) {\n  var r = this;\n  if (ele.isNode()) {\n    r.drawNode(context, ele, shiftToOriginWithBb, showLabel, showOverlay, showOpacity);\n  } else {\n    r.drawEdge(context, ele, shiftToOriginWithBb, showLabel, showOverlay, showOpacity);\n  }\n};\nCRp$9.drawElementOverlay = function (context, ele) {\n  var r = this;\n  if (ele.isNode()) {\n    r.drawNodeOverlay(context, ele);\n  } else {\n    r.drawEdgeOverlay(context, ele);\n  }\n};\nCRp$9.drawElementUnderlay = function (context, ele) {\n  var r = this;\n  if (ele.isNode()) {\n    r.drawNodeUnderlay(context, ele);\n  } else {\n    r.drawEdgeUnderlay(context, ele);\n  }\n};\nCRp$9.drawCachedElementPortion = function (context, ele, eleTxrCache, pxRatio, lvl, reason, getRotation, getOpacity) {\n  var r = this;\n  var bb = eleTxrCache.getBoundingBox(ele);\n  if (bb.w === 0 || bb.h === 0) {\n    return;\n  } // ignore zero size case\n\n  var eleCache = eleTxrCache.getElement(ele, bb, pxRatio, lvl, reason);\n  if (eleCache != null) {\n    var opacity = getOpacity(r, ele);\n    if (opacity === 0) {\n      return;\n    }\n    var theta = getRotation(r, ele);\n    var x1 = bb.x1,\n      y1 = bb.y1,\n      w = bb.w,\n      h = bb.h;\n    var x, y, sx, sy, smooth;\n    if (theta !== 0) {\n      var rotPt = eleTxrCache.getRotationPoint(ele);\n      sx = rotPt.x;\n      sy = rotPt.y;\n      context.translate(sx, sy);\n      context.rotate(theta);\n      smooth = r.getImgSmoothing(context);\n      if (!smooth) {\n        r.setImgSmoothing(context, true);\n      }\n      var off = eleTxrCache.getRotationOffset(ele);\n      x = off.x;\n      y = off.y;\n    } else {\n      x = x1;\n      y = y1;\n    }\n    var oldGlobalAlpha;\n    if (opacity !== 1) {\n      oldGlobalAlpha = context.globalAlpha;\n      context.globalAlpha = oldGlobalAlpha * opacity;\n    }\n    context.drawImage(eleCache.texture.canvas, eleCache.x, 0, eleCache.width, eleCache.height, x, y, w, h);\n    if (opacity !== 1) {\n      context.globalAlpha = oldGlobalAlpha;\n    }\n    if (theta !== 0) {\n      context.rotate(-theta);\n      context.translate(-sx, -sy);\n      if (!smooth) {\n        r.setImgSmoothing(context, false);\n      }\n    }\n  } else {\n    eleTxrCache.drawElement(context, ele); // direct draw fallback\n  }\n};\n\nvar getZeroRotation = function getZeroRotation() {\n  return 0;\n};\nvar getLabelRotation = function getLabelRotation(r, ele) {\n  return r.getTextAngle(ele, null);\n};\nvar getSourceLabelRotation = function getSourceLabelRotation(r, ele) {\n  return r.getTextAngle(ele, 'source');\n};\nvar getTargetLabelRotation = function getTargetLabelRotation(r, ele) {\n  return r.getTextAngle(ele, 'target');\n};\nvar getOpacity = function getOpacity(r, ele) {\n  return ele.effectiveOpacity();\n};\nvar getTextOpacity = function getTextOpacity(e, ele) {\n  return ele.pstyle('text-opacity').pfValue * ele.effectiveOpacity();\n};\nCRp$9.drawCachedElement = function (context, ele, pxRatio, extent, lvl, requestHighQuality) {\n  var r = this;\n  var _r$data = r.data,\n    eleTxrCache = _r$data.eleTxrCache,\n    lblTxrCache = _r$data.lblTxrCache,\n    slbTxrCache = _r$data.slbTxrCache,\n    tlbTxrCache = _r$data.tlbTxrCache;\n  var bb = ele.boundingBox();\n  var reason = requestHighQuality === true ? eleTxrCache.reasons.highQuality : null;\n  if (bb.w === 0 || bb.h === 0 || !ele.visible()) {\n    return;\n  }\n  if (!extent || boundingBoxesIntersect(bb, extent)) {\n    var isEdge = ele.isEdge();\n    var badLine = ele.element()._private.rscratch.badLine;\n    r.drawElementUnderlay(context, ele);\n    r.drawCachedElementPortion(context, ele, eleTxrCache, pxRatio, lvl, reason, getZeroRotation, getOpacity);\n    if (!isEdge || !badLine) {\n      r.drawCachedElementPortion(context, ele, lblTxrCache, pxRatio, lvl, reason, getLabelRotation, getTextOpacity);\n    }\n    if (isEdge && !badLine) {\n      r.drawCachedElementPortion(context, ele, slbTxrCache, pxRatio, lvl, reason, getSourceLabelRotation, getTextOpacity);\n      r.drawCachedElementPortion(context, ele, tlbTxrCache, pxRatio, lvl, reason, getTargetLabelRotation, getTextOpacity);\n    }\n    r.drawElementOverlay(context, ele);\n  }\n};\nCRp$9.drawElements = function (context, eles) {\n  var r = this;\n  for (var i = 0; i < eles.length; i++) {\n    var ele = eles[i];\n    r.drawElement(context, ele);\n  }\n};\nCRp$9.drawCachedElements = function (context, eles, pxRatio, extent) {\n  var r = this;\n  for (var i = 0; i < eles.length; i++) {\n    var ele = eles[i];\n    r.drawCachedElement(context, ele, pxRatio, extent);\n  }\n};\nCRp$9.drawCachedNodes = function (context, eles, pxRatio, extent) {\n  var r = this;\n  for (var i = 0; i < eles.length; i++) {\n    var ele = eles[i];\n    if (!ele.isNode()) {\n      continue;\n    }\n    r.drawCachedElement(context, ele, pxRatio, extent);\n  }\n};\nCRp$9.drawLayeredElements = function (context, eles, pxRatio, extent) {\n  var r = this;\n  var layers = r.data.lyrTxrCache.getLayers(eles, pxRatio);\n  if (layers) {\n    for (var i = 0; i < layers.length; i++) {\n      var layer = layers[i];\n      var bb = layer.bb;\n      if (bb.w === 0 || bb.h === 0) {\n        continue;\n      }\n      context.drawImage(layer.canvas, bb.x1, bb.y1, bb.w, bb.h);\n    }\n  } else {\n    // fall back on plain caching if no layers\n    r.drawCachedElements(context, eles, pxRatio, extent);\n  }\n};\n\nvar CRp$8 = {};\nCRp$8.drawEdge = function (context, edge, shiftToOriginWithBb) {\n  var drawLabel = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  var shouldDrawOverlay = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n  var shouldDrawOpacity = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n  var r = this;\n  var rs = edge._private.rscratch;\n  if (shouldDrawOpacity && !edge.visible()) {\n    return;\n  }\n\n  // if bezier ctrl pts can not be calculated, then die\n  if (rs.badLine || rs.allpts == null || isNaN(rs.allpts[0])) {\n    // isNaN in case edge is impossible and browser bugs (e.g. safari)\n    return;\n  }\n  var bb;\n  if (shiftToOriginWithBb) {\n    bb = shiftToOriginWithBb;\n    context.translate(-bb.x1, -bb.y1);\n  }\n  var opacity = shouldDrawOpacity ? edge.pstyle('opacity').value : 1;\n  var lineOpacity = shouldDrawOpacity ? edge.pstyle('line-opacity').value : 1;\n  var curveStyle = edge.pstyle('curve-style').value;\n  var lineStyle = edge.pstyle('line-style').value;\n  var edgeWidth = edge.pstyle('width').pfValue;\n  var lineCap = edge.pstyle('line-cap').value;\n  var lineOutlineWidth = edge.pstyle('line-outline-width').value;\n  var lineOutlineColor = edge.pstyle('line-outline-color').value;\n  var effectiveLineOpacity = opacity * lineOpacity;\n  // separate arrow opacity would require arrow-opacity property\n  var effectiveArrowOpacity = opacity * lineOpacity;\n  var drawLine = function drawLine() {\n    var strokeOpacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : effectiveLineOpacity;\n    if (curveStyle === 'straight-triangle') {\n      r.eleStrokeStyle(context, edge, strokeOpacity);\n      r.drawEdgeTrianglePath(edge, context, rs.allpts);\n    } else {\n      context.lineWidth = edgeWidth;\n      context.lineCap = lineCap;\n      r.eleStrokeStyle(context, edge, strokeOpacity);\n      r.drawEdgePath(edge, context, rs.allpts, lineStyle);\n      context.lineCap = 'butt'; // reset for other drawing functions\n    }\n  };\n\n  var drawLineOutline = function drawLineOutline() {\n    var strokeOpacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : effectiveLineOpacity;\n    context.lineWidth = edgeWidth + lineOutlineWidth;\n    context.lineCap = lineCap;\n    if (lineOutlineWidth > 0) {\n      r.colorStrokeStyle(context, lineOutlineColor[0], lineOutlineColor[1], lineOutlineColor[2], strokeOpacity);\n    } else {\n      // do not draw any lineOutline\n      context.lineCap = 'butt'; // reset for other drawing functions\n      return;\n    }\n    if (curveStyle === 'straight-triangle') {\n      r.drawEdgeTrianglePath(edge, context, rs.allpts);\n    } else {\n      r.drawEdgePath(edge, context, rs.allpts, lineStyle);\n      context.lineCap = 'butt'; // reset for other drawing functions\n    }\n  };\n\n  var drawOverlay = function drawOverlay() {\n    if (!shouldDrawOverlay) {\n      return;\n    }\n    r.drawEdgeOverlay(context, edge);\n  };\n  var drawUnderlay = function drawUnderlay() {\n    if (!shouldDrawOverlay) {\n      return;\n    }\n    r.drawEdgeUnderlay(context, edge);\n  };\n  var drawArrows = function drawArrows() {\n    var arrowOpacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : effectiveArrowOpacity;\n    r.drawArrowheads(context, edge, arrowOpacity);\n  };\n  var drawText = function drawText() {\n    r.drawElementText(context, edge, null, drawLabel);\n  };\n  context.lineJoin = 'round';\n  var ghost = edge.pstyle('ghost').value === 'yes';\n  if (ghost) {\n    var gx = edge.pstyle('ghost-offset-x').pfValue;\n    var gy = edge.pstyle('ghost-offset-y').pfValue;\n    var ghostOpacity = edge.pstyle('ghost-opacity').value;\n    var effectiveGhostOpacity = effectiveLineOpacity * ghostOpacity;\n    context.translate(gx, gy);\n    drawLine(effectiveGhostOpacity);\n    drawArrows(effectiveGhostOpacity);\n    context.translate(-gx, -gy);\n  } else {\n    drawLineOutline();\n  }\n  drawUnderlay();\n  drawLine();\n  drawArrows();\n  drawOverlay();\n  drawText();\n  if (shiftToOriginWithBb) {\n    context.translate(bb.x1, bb.y1);\n  }\n};\nvar drawEdgeOverlayUnderlay = function drawEdgeOverlayUnderlay(overlayOrUnderlay) {\n  if (!['overlay', 'underlay'].includes(overlayOrUnderlay)) {\n    throw new Error('Invalid state');\n  }\n  return function (context, edge) {\n    if (!edge.visible()) {\n      return;\n    }\n    var opacity = edge.pstyle(\"\".concat(overlayOrUnderlay, \"-opacity\")).value;\n    if (opacity === 0) {\n      return;\n    }\n    var r = this;\n    var usePaths = r.usePaths();\n    var rs = edge._private.rscratch;\n    var padding = edge.pstyle(\"\".concat(overlayOrUnderlay, \"-padding\")).pfValue;\n    var width = 2 * padding;\n    var color = edge.pstyle(\"\".concat(overlayOrUnderlay, \"-color\")).value;\n    context.lineWidth = width;\n    if (rs.edgeType === 'self' && !usePaths) {\n      context.lineCap = 'butt';\n    } else {\n      context.lineCap = 'round';\n    }\n    r.colorStrokeStyle(context, color[0], color[1], color[2], opacity);\n    r.drawEdgePath(edge, context, rs.allpts, 'solid');\n  };\n};\nCRp$8.drawEdgeOverlay = drawEdgeOverlayUnderlay('overlay');\nCRp$8.drawEdgeUnderlay = drawEdgeOverlayUnderlay('underlay');\nCRp$8.drawEdgePath = function (edge, context, pts, type) {\n  var rs = edge._private.rscratch;\n  var canvasCxt = context;\n  var path;\n  var pathCacheHit = false;\n  var usePaths = this.usePaths();\n  var lineDashPattern = edge.pstyle('line-dash-pattern').pfValue;\n  var lineDashOffset = edge.pstyle('line-dash-offset').pfValue;\n  if (usePaths) {\n    var pathCacheKey = pts.join('$');\n    var keyMatches = rs.pathCacheKey && rs.pathCacheKey === pathCacheKey;\n    if (keyMatches) {\n      path = context = rs.pathCache;\n      pathCacheHit = true;\n    } else {\n      path = context = new Path2D();\n      rs.pathCacheKey = pathCacheKey;\n      rs.pathCache = path;\n    }\n  }\n  if (canvasCxt.setLineDash) {\n    // for very outofdate browsers\n    switch (type) {\n      case 'dotted':\n        canvasCxt.setLineDash([1, 1]);\n        break;\n      case 'dashed':\n        canvasCxt.setLineDash(lineDashPattern);\n        canvasCxt.lineDashOffset = lineDashOffset;\n        break;\n      case 'solid':\n        canvasCxt.setLineDash([]);\n        break;\n    }\n  }\n  if (!pathCacheHit && !rs.badLine) {\n    if (context.beginPath) {\n      context.beginPath();\n    }\n    context.moveTo(pts[0], pts[1]);\n    switch (rs.edgeType) {\n      case 'bezier':\n      case 'self':\n      case 'compound':\n      case 'multibezier':\n        for (var i = 2; i + 3 < pts.length; i += 4) {\n          context.quadraticCurveTo(pts[i], pts[i + 1], pts[i + 2], pts[i + 3]);\n        }\n        break;\n      case 'straight':\n      case 'haystack':\n        for (var _i = 2; _i + 1 < pts.length; _i += 2) {\n          context.lineTo(pts[_i], pts[_i + 1]);\n        }\n        break;\n      case 'segments':\n        if (rs.isRound) {\n          var _iterator = _createForOfIteratorHelper(rs.roundCorners),\n            _step;\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var corner = _step.value;\n              drawPreparedRoundCorner(context, corner);\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n          context.lineTo(pts[pts.length - 2], pts[pts.length - 1]);\n        } else {\n          for (var _i2 = 2; _i2 + 1 < pts.length; _i2 += 2) {\n            context.lineTo(pts[_i2], pts[_i2 + 1]);\n          }\n        }\n        break;\n    }\n  }\n  context = canvasCxt;\n  if (usePaths) {\n    context.stroke(path);\n  } else {\n    context.stroke();\n  }\n\n  // reset any line dashes\n  if (context.setLineDash) {\n    // for very outofdate browsers\n    context.setLineDash([]);\n  }\n};\nCRp$8.drawEdgeTrianglePath = function (edge, context, pts) {\n  // use line stroke style for triangle fill style\n  context.fillStyle = context.strokeStyle;\n  var edgeWidth = edge.pstyle('width').pfValue;\n  for (var i = 0; i + 1 < pts.length; i += 2) {\n    var vector = [pts[i + 2] - pts[i], pts[i + 3] - pts[i + 1]];\n    var length = Math.sqrt(vector[0] * vector[0] + vector[1] * vector[1]);\n    var normal = [vector[1] / length, -vector[0] / length];\n    var triangleHead = [normal[0] * edgeWidth / 2, normal[1] * edgeWidth / 2];\n    context.beginPath();\n    context.moveTo(pts[i] - triangleHead[0], pts[i + 1] - triangleHead[1]);\n    context.lineTo(pts[i] + triangleHead[0], pts[i + 1] + triangleHead[1]);\n    context.lineTo(pts[i + 2], pts[i + 3]);\n    context.closePath();\n    context.fill();\n  }\n};\nCRp$8.drawArrowheads = function (context, edge, opacity) {\n  var rs = edge._private.rscratch;\n  var isHaystack = rs.edgeType === 'haystack';\n  if (!isHaystack) {\n    this.drawArrowhead(context, edge, 'source', rs.arrowStartX, rs.arrowStartY, rs.srcArrowAngle, opacity);\n  }\n  this.drawArrowhead(context, edge, 'mid-target', rs.midX, rs.midY, rs.midtgtArrowAngle, opacity);\n  this.drawArrowhead(context, edge, 'mid-source', rs.midX, rs.midY, rs.midsrcArrowAngle, opacity);\n  if (!isHaystack) {\n    this.drawArrowhead(context, edge, 'target', rs.arrowEndX, rs.arrowEndY, rs.tgtArrowAngle, opacity);\n  }\n};\nCRp$8.drawArrowhead = function (context, edge, prefix, x, y, angle, opacity) {\n  if (isNaN(x) || x == null || isNaN(y) || y == null || isNaN(angle) || angle == null) {\n    return;\n  }\n  var self = this;\n  var arrowShape = edge.pstyle(prefix + '-arrow-shape').value;\n  if (arrowShape === 'none') {\n    return;\n  }\n  var arrowClearFill = edge.pstyle(prefix + '-arrow-fill').value === 'hollow' ? 'both' : 'filled';\n  var arrowFill = edge.pstyle(prefix + '-arrow-fill').value;\n  var edgeWidth = edge.pstyle('width').pfValue;\n  var pArrowWidth = edge.pstyle(prefix + '-arrow-width');\n  var arrowWidth = pArrowWidth.value === 'match-line' ? edgeWidth : pArrowWidth.pfValue;\n  if (pArrowWidth.units === '%') arrowWidth *= edgeWidth;\n  var edgeOpacity = edge.pstyle('opacity').value;\n  if (opacity === undefined) {\n    opacity = edgeOpacity;\n  }\n  var gco = context.globalCompositeOperation;\n  if (opacity !== 1 || arrowFill === 'hollow') {\n    // then extra clear is needed\n    context.globalCompositeOperation = 'destination-out';\n    self.colorFillStyle(context, 255, 255, 255, 1);\n    self.colorStrokeStyle(context, 255, 255, 255, 1);\n    self.drawArrowShape(edge, context, arrowClearFill, edgeWidth, arrowShape, arrowWidth, x, y, angle);\n    context.globalCompositeOperation = gco;\n  } // otherwise, the opaque arrow clears it for free :)\n\n  var color = edge.pstyle(prefix + '-arrow-color').value;\n  self.colorFillStyle(context, color[0], color[1], color[2], opacity);\n  self.colorStrokeStyle(context, color[0], color[1], color[2], opacity);\n  self.drawArrowShape(edge, context, arrowFill, edgeWidth, arrowShape, arrowWidth, x, y, angle);\n};\nCRp$8.drawArrowShape = function (edge, context, fill, edgeWidth, shape, shapeWidth, x, y, angle) {\n  var r = this;\n  var usePaths = this.usePaths() && shape !== 'triangle-cross';\n  var pathCacheHit = false;\n  var path;\n  var canvasContext = context;\n  var translation = {\n    x: x,\n    y: y\n  };\n  var scale = edge.pstyle('arrow-scale').value;\n  var size = this.getArrowWidth(edgeWidth, scale);\n  var shapeImpl = r.arrowShapes[shape];\n  if (usePaths) {\n    var cache = r.arrowPathCache = r.arrowPathCache || [];\n    var key = hashString(shape);\n    var cachedPath = cache[key];\n    if (cachedPath != null) {\n      path = context = cachedPath;\n      pathCacheHit = true;\n    } else {\n      path = context = new Path2D();\n      cache[key] = path;\n    }\n  }\n  if (!pathCacheHit) {\n    if (context.beginPath) {\n      context.beginPath();\n    }\n    if (usePaths) {\n      // store in the path cache with values easily manipulated later\n      shapeImpl.draw(context, 1, 0, {\n        x: 0,\n        y: 0\n      }, 1);\n    } else {\n      shapeImpl.draw(context, size, angle, translation, edgeWidth);\n    }\n    if (context.closePath) {\n      context.closePath();\n    }\n  }\n  context = canvasContext;\n  if (usePaths) {\n    // set transform to arrow position/orientation\n    context.translate(x, y);\n    context.rotate(angle);\n    context.scale(size, size);\n  }\n  if (fill === 'filled' || fill === 'both') {\n    if (usePaths) {\n      context.fill(path);\n    } else {\n      context.fill();\n    }\n  }\n  if (fill === 'hollow' || fill === 'both') {\n    context.lineWidth = shapeWidth / (usePaths ? size : 1);\n    context.lineJoin = 'miter';\n    if (usePaths) {\n      context.stroke(path);\n    } else {\n      context.stroke();\n    }\n  }\n  if (usePaths) {\n    // reset transform by applying inverse\n    context.scale(1 / size, 1 / size);\n    context.rotate(-angle);\n    context.translate(-x, -y);\n  }\n};\n\nvar CRp$7 = {};\nCRp$7.safeDrawImage = function (context, img, ix, iy, iw, ih, x, y, w, h) {\n  // detect problematic cases for old browsers with bad images (cheaper than try-catch)\n  if (iw <= 0 || ih <= 0 || w <= 0 || h <= 0) {\n    return;\n  }\n  try {\n    context.drawImage(img, ix, iy, iw, ih, x, y, w, h);\n  } catch (e) {\n    warn(e);\n  }\n};\nCRp$7.drawInscribedImage = function (context, img, node, index, nodeOpacity) {\n  var r = this;\n  var pos = node.position();\n  var nodeX = pos.x;\n  var nodeY = pos.y;\n  var styleObj = node.cy().style();\n  var getIndexedStyle = styleObj.getIndexedStyle.bind(styleObj);\n  var fit = getIndexedStyle(node, 'background-fit', 'value', index);\n  var repeat = getIndexedStyle(node, 'background-repeat', 'value', index);\n  var nodeW = node.width();\n  var nodeH = node.height();\n  var paddingX2 = node.padding() * 2;\n  var nodeTW = nodeW + (getIndexedStyle(node, 'background-width-relative-to', 'value', index) === 'inner' ? 0 : paddingX2);\n  var nodeTH = nodeH + (getIndexedStyle(node, 'background-height-relative-to', 'value', index) === 'inner' ? 0 : paddingX2);\n  var rs = node._private.rscratch;\n  var clip = getIndexedStyle(node, 'background-clip', 'value', index);\n  var shouldClip = clip === 'node';\n  var imgOpacity = getIndexedStyle(node, 'background-image-opacity', 'value', index) * nodeOpacity;\n  var smooth = getIndexedStyle(node, 'background-image-smoothing', 'value', index);\n  var cornerRadius = node.pstyle('corner-radius').value;\n  if (cornerRadius !== 'auto') cornerRadius = node.pstyle('corner-radius').pfValue;\n  var imgW = img.width || img.cachedW;\n  var imgH = img.height || img.cachedH;\n\n  // workaround for broken browsers like ie\n  if (null == imgW || null == imgH) {\n    document.body.appendChild(img); // eslint-disable-line no-undef\n\n    imgW = img.cachedW = img.width || img.offsetWidth;\n    imgH = img.cachedH = img.height || img.offsetHeight;\n    document.body.removeChild(img); // eslint-disable-line no-undef\n  }\n\n  var w = imgW;\n  var h = imgH;\n  if (getIndexedStyle(node, 'background-width', 'value', index) !== 'auto') {\n    if (getIndexedStyle(node, 'background-width', 'units', index) === '%') {\n      w = getIndexedStyle(node, 'background-width', 'pfValue', index) * nodeTW;\n    } else {\n      w = getIndexedStyle(node, 'background-width', 'pfValue', index);\n    }\n  }\n  if (getIndexedStyle(node, 'background-height', 'value', index) !== 'auto') {\n    if (getIndexedStyle(node, 'background-height', 'units', index) === '%') {\n      h = getIndexedStyle(node, 'background-height', 'pfValue', index) * nodeTH;\n    } else {\n      h = getIndexedStyle(node, 'background-height', 'pfValue', index);\n    }\n  }\n  if (w === 0 || h === 0) {\n    return; // no point in drawing empty image (and chrome is broken in this case)\n  }\n\n  if (fit === 'contain') {\n    var scale = Math.min(nodeTW / w, nodeTH / h);\n    w *= scale;\n    h *= scale;\n  } else if (fit === 'cover') {\n    var scale = Math.max(nodeTW / w, nodeTH / h);\n    w *= scale;\n    h *= scale;\n  }\n  var x = nodeX - nodeTW / 2; // left\n  var posXUnits = getIndexedStyle(node, 'background-position-x', 'units', index);\n  var posXPfVal = getIndexedStyle(node, 'background-position-x', 'pfValue', index);\n  if (posXUnits === '%') {\n    x += (nodeTW - w) * posXPfVal;\n  } else {\n    x += posXPfVal;\n  }\n  var offXUnits = getIndexedStyle(node, 'background-offset-x', 'units', index);\n  var offXPfVal = getIndexedStyle(node, 'background-offset-x', 'pfValue', index);\n  if (offXUnits === '%') {\n    x += (nodeTW - w) * offXPfVal;\n  } else {\n    x += offXPfVal;\n  }\n  var y = nodeY - nodeTH / 2; // top\n  var posYUnits = getIndexedStyle(node, 'background-position-y', 'units', index);\n  var posYPfVal = getIndexedStyle(node, 'background-position-y', 'pfValue', index);\n  if (posYUnits === '%') {\n    y += (nodeTH - h) * posYPfVal;\n  } else {\n    y += posYPfVal;\n  }\n  var offYUnits = getIndexedStyle(node, 'background-offset-y', 'units', index);\n  var offYPfVal = getIndexedStyle(node, 'background-offset-y', 'pfValue', index);\n  if (offYUnits === '%') {\n    y += (nodeTH - h) * offYPfVal;\n  } else {\n    y += offYPfVal;\n  }\n  if (rs.pathCache) {\n    x -= nodeX;\n    y -= nodeY;\n    nodeX = 0;\n    nodeY = 0;\n  }\n  var gAlpha = context.globalAlpha;\n  context.globalAlpha = imgOpacity;\n  var smoothingEnabled = r.getImgSmoothing(context);\n  var isSmoothingSwitched = false;\n  if (smooth === 'no' && smoothingEnabled) {\n    r.setImgSmoothing(context, false);\n    isSmoothingSwitched = true;\n  } else if (smooth === 'yes' && !smoothingEnabled) {\n    r.setImgSmoothing(context, true);\n    isSmoothingSwitched = true;\n  }\n  if (repeat === 'no-repeat') {\n    if (shouldClip) {\n      context.save();\n      if (rs.pathCache) {\n        context.clip(rs.pathCache);\n      } else {\n        r.nodeShapes[r.getNodeShape(node)].draw(context, nodeX, nodeY, nodeTW, nodeTH, cornerRadius, rs);\n        context.clip();\n      }\n    }\n    r.safeDrawImage(context, img, 0, 0, imgW, imgH, x, y, w, h);\n    if (shouldClip) {\n      context.restore();\n    }\n  } else {\n    var pattern = context.createPattern(img, repeat);\n    context.fillStyle = pattern;\n    r.nodeShapes[r.getNodeShape(node)].draw(context, nodeX, nodeY, nodeTW, nodeTH, cornerRadius, rs);\n    context.translate(x, y);\n    context.fill();\n    context.translate(-x, -y);\n  }\n  context.globalAlpha = gAlpha;\n  if (isSmoothingSwitched) {\n    r.setImgSmoothing(context, smoothingEnabled);\n  }\n};\n\nvar CRp$6 = {};\nCRp$6.eleTextBiggerThanMin = function (ele, scale) {\n  if (!scale) {\n    var zoom = ele.cy().zoom();\n    var pxRatio = this.getPixelRatio();\n    var lvl = Math.ceil(log2(zoom * pxRatio)); // the effective texture level\n\n    scale = Math.pow(2, lvl);\n  }\n  var computedSize = ele.pstyle('font-size').pfValue * scale;\n  var minSize = ele.pstyle('min-zoomed-font-size').pfValue;\n  if (computedSize < minSize) {\n    return false;\n  }\n  return true;\n};\nCRp$6.drawElementText = function (context, ele, shiftToOriginWithBb, force, prefix) {\n  var useEleOpacity = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n  var r = this;\n  if (force == null) {\n    if (useEleOpacity && !r.eleTextBiggerThanMin(ele)) {\n      return;\n    }\n  } else if (force === false) {\n    return;\n  }\n  if (ele.isNode()) {\n    var label = ele.pstyle('label');\n    if (!label || !label.value) {\n      return;\n    }\n    var justification = r.getLabelJustification(ele);\n    context.textAlign = justification;\n    context.textBaseline = 'bottom';\n  } else {\n    var badLine = ele.element()._private.rscratch.badLine;\n    var _label = ele.pstyle('label');\n    var srcLabel = ele.pstyle('source-label');\n    var tgtLabel = ele.pstyle('target-label');\n    if (badLine || (!_label || !_label.value) && (!srcLabel || !srcLabel.value) && (!tgtLabel || !tgtLabel.value)) {\n      return;\n    }\n    context.textAlign = 'center';\n    context.textBaseline = 'bottom';\n  }\n  var applyRotation = !shiftToOriginWithBb;\n  var bb;\n  if (shiftToOriginWithBb) {\n    bb = shiftToOriginWithBb;\n    context.translate(-bb.x1, -bb.y1);\n  }\n  if (prefix == null) {\n    r.drawText(context, ele, null, applyRotation, useEleOpacity);\n    if (ele.isEdge()) {\n      r.drawText(context, ele, 'source', applyRotation, useEleOpacity);\n      r.drawText(context, ele, 'target', applyRotation, useEleOpacity);\n    }\n  } else {\n    r.drawText(context, ele, prefix, applyRotation, useEleOpacity);\n  }\n  if (shiftToOriginWithBb) {\n    context.translate(bb.x1, bb.y1);\n  }\n};\nCRp$6.getFontCache = function (context) {\n  var cache;\n  this.fontCaches = this.fontCaches || [];\n  for (var i = 0; i < this.fontCaches.length; i++) {\n    cache = this.fontCaches[i];\n    if (cache.context === context) {\n      return cache;\n    }\n  }\n  cache = {\n    context: context\n  };\n  this.fontCaches.push(cache);\n  return cache;\n};\n\n// set up canvas context with font\n// returns transformed text string\nCRp$6.setupTextStyle = function (context, ele) {\n  var useEleOpacity = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  // Font style\n  var labelStyle = ele.pstyle('font-style').strValue;\n  var labelSize = ele.pstyle('font-size').pfValue + 'px';\n  var labelFamily = ele.pstyle('font-family').strValue;\n  var labelWeight = ele.pstyle('font-weight').strValue;\n  var opacity = useEleOpacity ? ele.effectiveOpacity() * ele.pstyle('text-opacity').value : 1;\n  var outlineOpacity = ele.pstyle('text-outline-opacity').value * opacity;\n  var color = ele.pstyle('color').value;\n  var outlineColor = ele.pstyle('text-outline-color').value;\n  context.font = labelStyle + ' ' + labelWeight + ' ' + labelSize + ' ' + labelFamily;\n  context.lineJoin = 'round'; // so text outlines aren't jagged\n\n  this.colorFillStyle(context, color[0], color[1], color[2], opacity);\n  this.colorStrokeStyle(context, outlineColor[0], outlineColor[1], outlineColor[2], outlineOpacity);\n};\n\n// TODO ensure re-used\nfunction roundRect(ctx, x, y, width, height) {\n  var radius = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 5;\n  var stroke = arguments.length > 6 ? arguments[6] : undefined;\n  ctx.beginPath();\n  ctx.moveTo(x + radius, y);\n  ctx.lineTo(x + width - radius, y);\n  ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n  ctx.lineTo(x + width, y + height - radius);\n  ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n  ctx.lineTo(x + radius, y + height);\n  ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n  ctx.lineTo(x, y + radius);\n  ctx.quadraticCurveTo(x, y, x + radius, y);\n  ctx.closePath();\n  if (stroke) ctx.stroke();else ctx.fill();\n}\nCRp$6.getTextAngle = function (ele, prefix) {\n  var theta;\n  var _p = ele._private;\n  var rscratch = _p.rscratch;\n  var pdash = prefix ? prefix + '-' : '';\n  var rotation = ele.pstyle(pdash + 'text-rotation');\n  var textAngle = getPrefixedProperty(rscratch, 'labelAngle', prefix);\n  if (rotation.strValue === 'autorotate') {\n    theta = ele.isEdge() ? textAngle : 0;\n  } else if (rotation.strValue === 'none') {\n    theta = 0;\n  } else {\n    theta = rotation.pfValue;\n  }\n  return theta;\n};\nCRp$6.drawText = function (context, ele, prefix) {\n  var applyRotation = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  var useEleOpacity = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n  var _p = ele._private;\n  var rscratch = _p.rscratch;\n  var parentOpacity = useEleOpacity ? ele.effectiveOpacity() : 1;\n  if (useEleOpacity && (parentOpacity === 0 || ele.pstyle('text-opacity').value === 0)) {\n    return;\n  }\n\n  // use 'main' as an alias for the main label (i.e. null prefix)\n  if (prefix === 'main') {\n    prefix = null;\n  }\n  var textX = getPrefixedProperty(rscratch, 'labelX', prefix);\n  var textY = getPrefixedProperty(rscratch, 'labelY', prefix);\n  var orgTextX, orgTextY; // used for rotation\n  var text = this.getLabelText(ele, prefix);\n  if (text != null && text !== '' && !isNaN(textX) && !isNaN(textY)) {\n    this.setupTextStyle(context, ele, useEleOpacity);\n    var pdash = prefix ? prefix + '-' : '';\n    var textW = getPrefixedProperty(rscratch, 'labelWidth', prefix);\n    var textH = getPrefixedProperty(rscratch, 'labelHeight', prefix);\n    var marginX = ele.pstyle(pdash + 'text-margin-x').pfValue;\n    var marginY = ele.pstyle(pdash + 'text-margin-y').pfValue;\n    var isEdge = ele.isEdge();\n    var halign = ele.pstyle('text-halign').value;\n    var valign = ele.pstyle('text-valign').value;\n    if (isEdge) {\n      halign = 'center';\n      valign = 'center';\n    }\n    textX += marginX;\n    textY += marginY;\n    var theta;\n    if (!applyRotation) {\n      theta = 0;\n    } else {\n      theta = this.getTextAngle(ele, prefix);\n    }\n    if (theta !== 0) {\n      orgTextX = textX;\n      orgTextY = textY;\n      context.translate(orgTextX, orgTextY);\n      context.rotate(theta);\n      textX = 0;\n      textY = 0;\n    }\n    switch (valign) {\n      case 'top':\n        break;\n      case 'center':\n        textY += textH / 2;\n        break;\n      case 'bottom':\n        textY += textH;\n        break;\n    }\n    var backgroundOpacity = ele.pstyle('text-background-opacity').value;\n    var borderOpacity = ele.pstyle('text-border-opacity').value;\n    var textBorderWidth = ele.pstyle('text-border-width').pfValue;\n    var backgroundPadding = ele.pstyle('text-background-padding').pfValue;\n    var styleShape = ele.pstyle('text-background-shape').strValue;\n    var rounded = styleShape.indexOf('round') === 0;\n    var roundRadius = 2;\n    if (backgroundOpacity > 0 || textBorderWidth > 0 && borderOpacity > 0) {\n      var bgX = textX - backgroundPadding;\n      switch (halign) {\n        case 'left':\n          bgX -= textW;\n          break;\n        case 'center':\n          bgX -= textW / 2;\n          break;\n      }\n      var bgY = textY - textH - backgroundPadding;\n      var bgW = textW + 2 * backgroundPadding;\n      var bgH = textH + 2 * backgroundPadding;\n      if (backgroundOpacity > 0) {\n        var textFill = context.fillStyle;\n        var textBackgroundColor = ele.pstyle('text-background-color').value;\n        context.fillStyle = 'rgba(' + textBackgroundColor[0] + ',' + textBackgroundColor[1] + ',' + textBackgroundColor[2] + ',' + backgroundOpacity * parentOpacity + ')';\n        if (rounded) {\n          roundRect(context, bgX, bgY, bgW, bgH, roundRadius);\n        } else {\n          context.fillRect(bgX, bgY, bgW, bgH);\n        }\n        context.fillStyle = textFill;\n      }\n      if (textBorderWidth > 0 && borderOpacity > 0) {\n        var textStroke = context.strokeStyle;\n        var textLineWidth = context.lineWidth;\n        var textBorderColor = ele.pstyle('text-border-color').value;\n        var textBorderStyle = ele.pstyle('text-border-style').value;\n        context.strokeStyle = 'rgba(' + textBorderColor[0] + ',' + textBorderColor[1] + ',' + textBorderColor[2] + ',' + borderOpacity * parentOpacity + ')';\n        context.lineWidth = textBorderWidth;\n        if (context.setLineDash) {\n          // for very outofdate browsers\n          switch (textBorderStyle) {\n            case 'dotted':\n              context.setLineDash([1, 1]);\n              break;\n            case 'dashed':\n              context.setLineDash([4, 2]);\n              break;\n            case 'double':\n              context.lineWidth = textBorderWidth / 4; // 50% reserved for white between the two borders\n              context.setLineDash([]);\n              break;\n            case 'solid':\n              context.setLineDash([]);\n              break;\n          }\n        }\n        if (rounded) {\n          roundRect(context, bgX, bgY, bgW, bgH, roundRadius, 'stroke');\n        } else {\n          context.strokeRect(bgX, bgY, bgW, bgH);\n        }\n        if (textBorderStyle === 'double') {\n          var whiteWidth = textBorderWidth / 2;\n          if (rounded) {\n            roundRect(context, bgX + whiteWidth, bgY + whiteWidth, bgW - whiteWidth * 2, bgH - whiteWidth * 2, roundRadius, 'stroke');\n          } else {\n            context.strokeRect(bgX + whiteWidth, bgY + whiteWidth, bgW - whiteWidth * 2, bgH - whiteWidth * 2);\n          }\n        }\n        if (context.setLineDash) {\n          // for very outofdate browsers\n          context.setLineDash([]);\n        }\n        context.lineWidth = textLineWidth;\n        context.strokeStyle = textStroke;\n      }\n    }\n    var lineWidth = 2 * ele.pstyle('text-outline-width').pfValue; // *2 b/c the stroke is drawn centred on the middle\n\n    if (lineWidth > 0) {\n      context.lineWidth = lineWidth;\n    }\n    if (ele.pstyle('text-wrap').value === 'wrap') {\n      var lines = getPrefixedProperty(rscratch, 'labelWrapCachedLines', prefix);\n      var lineHeight = getPrefixedProperty(rscratch, 'labelLineHeight', prefix);\n      var halfTextW = textW / 2;\n      var justification = this.getLabelJustification(ele);\n      if (justification === 'auto') ; else if (halign === 'left') {\n        // auto justification : right\n        if (justification === 'left') {\n          textX += -textW;\n        } else if (justification === 'center') {\n          textX += -halfTextW;\n        } // else same as auto\n      } else if (halign === 'center') {\n        // auto justfication : center\n        if (justification === 'left') {\n          textX += -halfTextW;\n        } else if (justification === 'right') {\n          textX += halfTextW;\n        } // else same as auto\n      } else if (halign === 'right') {\n        // auto justification : left\n        if (justification === 'center') {\n          textX += halfTextW;\n        } else if (justification === 'right') {\n          textX += textW;\n        } // else same as auto\n      }\n\n      switch (valign) {\n        case 'top':\n          textY -= (lines.length - 1) * lineHeight;\n          break;\n        case 'center':\n        case 'bottom':\n          textY -= (lines.length - 1) * lineHeight;\n          break;\n      }\n      for (var l = 0; l < lines.length; l++) {\n        if (lineWidth > 0) {\n          context.strokeText(lines[l], textX, textY);\n        }\n        context.fillText(lines[l], textX, textY);\n        textY += lineHeight;\n      }\n    } else {\n      if (lineWidth > 0) {\n        context.strokeText(text, textX, textY);\n      }\n      context.fillText(text, textX, textY);\n    }\n    if (theta !== 0) {\n      context.rotate(-theta);\n      context.translate(-orgTextX, -orgTextY);\n    }\n  }\n};\n\n/* global Path2D */\nvar CRp$5 = {};\nCRp$5.drawNode = function (context, node, shiftToOriginWithBb) {\n  var drawLabel = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  var shouldDrawOverlay = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n  var shouldDrawOpacity = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n  var r = this;\n  var nodeWidth, nodeHeight;\n  var _p = node._private;\n  var rs = _p.rscratch;\n  var pos = node.position();\n  if (!number$1(pos.x) || !number$1(pos.y)) {\n    return; // can't draw node with undefined position\n  }\n\n  if (shouldDrawOpacity && !node.visible()) {\n    return;\n  }\n  var eleOpacity = shouldDrawOpacity ? node.effectiveOpacity() : 1;\n  var usePaths = r.usePaths();\n  var path;\n  var pathCacheHit = false;\n  var padding = node.padding();\n  nodeWidth = node.width() + 2 * padding;\n  nodeHeight = node.height() + 2 * padding;\n\n  //\n  // setup shift\n\n  var bb;\n  if (shiftToOriginWithBb) {\n    bb = shiftToOriginWithBb;\n    context.translate(-bb.x1, -bb.y1);\n  }\n\n  //\n  // load bg image\n\n  var bgImgProp = node.pstyle('background-image');\n  var urls = bgImgProp.value;\n  var urlDefined = new Array(urls.length);\n  var image = new Array(urls.length);\n  var numImages = 0;\n  for (var i = 0; i < urls.length; i++) {\n    var url = urls[i];\n    var defd = urlDefined[i] = url != null && url !== 'none';\n    if (defd) {\n      var bgImgCrossOrigin = node.cy().style().getIndexedStyle(node, 'background-image-crossorigin', 'value', i);\n      numImages++;\n\n      // get image, and if not loaded then ask to redraw when later loaded\n      image[i] = r.getCachedImage(url, bgImgCrossOrigin, function () {\n        _p.backgroundTimestamp = Date.now();\n        node.emitAndNotify('background');\n      });\n    }\n  }\n\n  //\n  // setup styles\n\n  var darkness = node.pstyle('background-blacken').value;\n  var borderWidth = node.pstyle('border-width').pfValue;\n  var bgOpacity = node.pstyle('background-opacity').value * eleOpacity;\n  var borderColor = node.pstyle('border-color').value;\n  var borderStyle = node.pstyle('border-style').value;\n  var borderJoin = node.pstyle('border-join').value;\n  var borderCap = node.pstyle('border-cap').value;\n  var borderPosition = node.pstyle('border-position').value;\n  var borderPattern = node.pstyle('border-dash-pattern').pfValue;\n  var borderOffset = node.pstyle('border-dash-offset').pfValue;\n  var borderOpacity = node.pstyle('border-opacity').value * eleOpacity;\n  var outlineWidth = node.pstyle('outline-width').pfValue;\n  var outlineColor = node.pstyle('outline-color').value;\n  var outlineStyle = node.pstyle('outline-style').value;\n  var outlineOpacity = node.pstyle('outline-opacity').value * eleOpacity;\n  var outlineOffset = node.pstyle('outline-offset').value;\n  var cornerRadius = node.pstyle('corner-radius').value;\n  if (cornerRadius !== 'auto') cornerRadius = node.pstyle('corner-radius').pfValue;\n  var setupShapeColor = function setupShapeColor() {\n    var bgOpy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : bgOpacity;\n    r.eleFillStyle(context, node, bgOpy);\n  };\n  var setupBorderColor = function setupBorderColor() {\n    var bdrOpy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : borderOpacity;\n    r.colorStrokeStyle(context, borderColor[0], borderColor[1], borderColor[2], bdrOpy);\n  };\n  var setupOutlineColor = function setupOutlineColor() {\n    var otlnOpy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : outlineOpacity;\n    r.colorStrokeStyle(context, outlineColor[0], outlineColor[1], outlineColor[2], otlnOpy);\n  };\n\n  //\n  // setup shape\n\n  var getPath = function getPath(width, height, shape, points) {\n    var pathCache = r.nodePathCache = r.nodePathCache || [];\n    var key = hashStrings(shape === 'polygon' ? shape + ',' + points.join(',') : shape, '' + height, '' + width, '' + cornerRadius);\n    var cachedPath = pathCache[key];\n    var path;\n    var cacheHit = false;\n    if (cachedPath != null) {\n      path = cachedPath;\n      cacheHit = true;\n      rs.pathCache = path;\n    } else {\n      path = new Path2D();\n      pathCache[key] = rs.pathCache = path;\n    }\n    return {\n      path: path,\n      cacheHit: cacheHit\n    };\n  };\n  var styleShape = node.pstyle('shape').strValue;\n  var shapePts = node.pstyle('shape-polygon-points').pfValue;\n  if (usePaths) {\n    context.translate(pos.x, pos.y);\n    var shapePath = getPath(nodeWidth, nodeHeight, styleShape, shapePts);\n    path = shapePath.path;\n    pathCacheHit = shapePath.cacheHit;\n  }\n  var drawShape = function drawShape() {\n    if (!pathCacheHit) {\n      var npos = pos;\n      if (usePaths) {\n        npos = {\n          x: 0,\n          y: 0\n        };\n      }\n      r.nodeShapes[r.getNodeShape(node)].draw(path || context, npos.x, npos.y, nodeWidth, nodeHeight, cornerRadius, rs);\n    }\n    if (usePaths) {\n      context.fill(path);\n    } else {\n      context.fill();\n    }\n  };\n  var drawImages = function drawImages() {\n    var nodeOpacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : eleOpacity;\n    var inside = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var prevBging = _p.backgrounding;\n    var totalCompleted = 0;\n    for (var _i = 0; _i < image.length; _i++) {\n      var bgContainment = node.cy().style().getIndexedStyle(node, 'background-image-containment', 'value', _i);\n      if (inside && bgContainment === 'over' || !inside && bgContainment === 'inside') {\n        totalCompleted++;\n        continue;\n      }\n      if (urlDefined[_i] && image[_i].complete && !image[_i].error) {\n        totalCompleted++;\n        r.drawInscribedImage(context, image[_i], node, _i, nodeOpacity);\n      }\n    }\n    _p.backgrounding = !(totalCompleted === numImages);\n    if (prevBging !== _p.backgrounding) {\n      // update style b/c :backgrounding state changed\n      node.updateStyle(false);\n    }\n  };\n  var drawPie = function drawPie() {\n    var redrawShape = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var pieOpacity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : eleOpacity;\n    if (r.hasPie(node)) {\n      r.drawPie(context, node, pieOpacity);\n\n      // redraw/restore path if steps after pie need it\n      if (redrawShape) {\n        if (!usePaths) {\n          r.nodeShapes[r.getNodeShape(node)].draw(context, pos.x, pos.y, nodeWidth, nodeHeight, cornerRadius, rs);\n        }\n      }\n    }\n  };\n  var darken = function darken() {\n    var darkenOpacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : eleOpacity;\n    var opacity = (darkness > 0 ? darkness : -darkness) * darkenOpacity;\n    var c = darkness > 0 ? 0 : 255;\n    if (darkness !== 0) {\n      r.colorFillStyle(context, c, c, c, opacity);\n      if (usePaths) {\n        context.fill(path);\n      } else {\n        context.fill();\n      }\n    }\n  };\n  var drawBorder = function drawBorder() {\n    if (borderWidth > 0) {\n      context.lineWidth = borderWidth;\n      context.lineCap = borderCap;\n      context.lineJoin = borderJoin;\n      if (context.setLineDash) {\n        // for very outofdate browsers\n        switch (borderStyle) {\n          case 'dotted':\n            context.setLineDash([1, 1]);\n            break;\n          case 'dashed':\n            context.setLineDash(borderPattern);\n            context.lineDashOffset = borderOffset;\n            break;\n          case 'solid':\n          case 'double':\n            context.setLineDash([]);\n            break;\n        }\n      }\n      if (borderPosition !== 'center') {\n        context.save();\n        context.lineWidth *= 2;\n        if (borderPosition === 'inside') {\n          usePaths ? context.clip(path) : context.clip();\n        } else {\n          var region = new Path2D();\n          region.rect(-nodeWidth / 2 - borderWidth, -nodeHeight / 2 - borderWidth, nodeWidth + 2 * borderWidth, nodeHeight + 2 * borderWidth);\n          region.addPath(path);\n          context.clip(region, 'evenodd');\n        }\n        usePaths ? context.stroke(path) : context.stroke();\n        context.restore();\n      } else {\n        usePaths ? context.stroke(path) : context.stroke();\n      }\n      if (borderStyle === 'double') {\n        context.lineWidth = borderWidth / 3;\n        var gco = context.globalCompositeOperation;\n        context.globalCompositeOperation = 'destination-out';\n        if (usePaths) {\n          context.stroke(path);\n        } else {\n          context.stroke();\n        }\n        context.globalCompositeOperation = gco;\n      }\n\n      // reset in case we changed the border style\n      if (context.setLineDash) {\n        // for very outofdate browsers\n        context.setLineDash([]);\n      }\n    }\n  };\n  var drawOutline = function drawOutline() {\n    if (outlineWidth > 0) {\n      context.lineWidth = outlineWidth;\n      context.lineCap = 'butt';\n      if (context.setLineDash) {\n        // for very outofdate browsers\n        switch (outlineStyle) {\n          case 'dotted':\n            context.setLineDash([1, 1]);\n            break;\n          case 'dashed':\n            context.setLineDash([4, 2]);\n            break;\n          case 'solid':\n          case 'double':\n            context.setLineDash([]);\n            break;\n        }\n      }\n      var npos = pos;\n      if (usePaths) {\n        npos = {\n          x: 0,\n          y: 0\n        };\n      }\n      var shape = r.getNodeShape(node);\n      var bWidth = borderWidth;\n      if (borderPosition === 'inside') bWidth = 0;\n      if (borderPosition === 'outside') bWidth *= 2;\n      var scaleX = (nodeWidth + bWidth + (outlineWidth + outlineOffset)) / nodeWidth;\n      var scaleY = (nodeHeight + bWidth + (outlineWidth + outlineOffset)) / nodeHeight;\n      var sWidth = nodeWidth * scaleX;\n      var sHeight = nodeHeight * scaleY;\n      var points = r.nodeShapes[shape].points;\n      var _path;\n      if (usePaths) {\n        var outlinePath = getPath(sWidth, sHeight, shape, points);\n        _path = outlinePath.path;\n      }\n\n      // draw the outline path, either by using expanded points or by scaling \n      // the dimensions, depending on shape\n      if (shape === \"ellipse\") {\n        r.drawEllipsePath(_path || context, npos.x, npos.y, sWidth, sHeight);\n      } else if (['round-diamond', 'round-heptagon', 'round-hexagon', 'round-octagon', 'round-pentagon', 'round-polygon', 'round-triangle', 'round-tag'].includes(shape)) {\n        var sMult = 0;\n        var offsetX = 0;\n        var offsetY = 0;\n        if (shape === 'round-diamond') {\n          sMult = (bWidth + outlineOffset + outlineWidth) * 1.4;\n        } else if (shape === 'round-heptagon') {\n          sMult = (bWidth + outlineOffset + outlineWidth) * 1.075;\n          offsetY = -(bWidth / 2 + outlineOffset + outlineWidth) / 35;\n        } else if (shape === 'round-hexagon') {\n          sMult = (bWidth + outlineOffset + outlineWidth) * 1.12;\n        } else if (shape === 'round-pentagon') {\n          sMult = (bWidth + outlineOffset + outlineWidth) * 1.13;\n          offsetY = -(bWidth / 2 + outlineOffset + outlineWidth) / 15;\n        } else if (shape === 'round-tag') {\n          sMult = (bWidth + outlineOffset + outlineWidth) * 1.12;\n          offsetX = (bWidth / 2 + outlineWidth + outlineOffset) * .07;\n        } else if (shape === 'round-triangle') {\n          sMult = (bWidth + outlineOffset + outlineWidth) * (Math.PI / 2);\n          offsetY = -(bWidth + outlineOffset / 2 + outlineWidth) / Math.PI;\n        }\n        if (sMult !== 0) {\n          scaleX = (nodeWidth + sMult) / nodeWidth;\n          sWidth = nodeWidth * scaleX;\n          if (!['round-hexagon', 'round-tag'].includes(shape)) {\n            scaleY = (nodeHeight + sMult) / nodeHeight;\n            sHeight = nodeHeight * scaleY;\n          }\n        }\n        cornerRadius = cornerRadius === 'auto' ? getRoundPolygonRadius(sWidth, sHeight) : cornerRadius;\n        var halfW = sWidth / 2;\n        var halfH = sHeight / 2;\n        var radius = cornerRadius + (bWidth + outlineWidth + outlineOffset) / 2;\n        var p = new Array(points.length / 2);\n        var corners = new Array(points.length / 2);\n        for (var _i3 = 0; _i3 < points.length / 2; _i3++) {\n          p[_i3] = {\n            x: npos.x + offsetX + halfW * points[_i3 * 2],\n            y: npos.y + offsetY + halfH * points[_i3 * 2 + 1]\n          };\n        }\n        var _i2,\n          p1,\n          p2,\n          p3,\n          len = p.length;\n        p1 = p[len - 1];\n        // for each point\n        for (_i2 = 0; _i2 < len; _i2++) {\n          p2 = p[_i2 % len];\n          p3 = p[(_i2 + 1) % len];\n          corners[_i2] = getRoundCorner(p1, p2, p3, radius);\n          p1 = p2;\n          p2 = p3;\n        }\n        r.drawRoundPolygonPath(_path || context, npos.x + offsetX, npos.y + offsetY, nodeWidth * scaleX, nodeHeight * scaleY, points, corners);\n      } else if (['roundrectangle', 'round-rectangle'].includes(shape)) {\n        cornerRadius = cornerRadius === 'auto' ? getRoundRectangleRadius(sWidth, sHeight) : cornerRadius;\n        r.drawRoundRectanglePath(_path || context, npos.x, npos.y, sWidth, sHeight, cornerRadius + (bWidth + outlineWidth + outlineOffset) / 2);\n      } else if (['cutrectangle', 'cut-rectangle'].includes(shape)) {\n        cornerRadius = cornerRadius === 'auto' ? getCutRectangleCornerLength() : cornerRadius;\n        r.drawCutRectanglePath(_path || context, npos.x, npos.y, sWidth, sHeight, null, cornerRadius + (bWidth + outlineWidth + outlineOffset) / 4);\n      } else if (['bottomroundrectangle', 'bottom-round-rectangle'].includes(shape)) {\n        cornerRadius = cornerRadius === 'auto' ? getRoundRectangleRadius(sWidth, sHeight) : cornerRadius;\n        r.drawBottomRoundRectanglePath(_path || context, npos.x, npos.y, sWidth, sHeight, cornerRadius + (bWidth + outlineWidth + outlineOffset) / 2);\n      } else if (shape === \"barrel\") {\n        r.drawBarrelPath(_path || context, npos.x, npos.y, sWidth, sHeight);\n      } else if (shape.startsWith(\"polygon\") || ['rhomboid', 'right-rhomboid', 'round-tag', 'tag', 'vee'].includes(shape)) {\n        var pad = (bWidth + outlineWidth + outlineOffset) / nodeWidth;\n        points = joinLines(expandPolygon(points, pad));\n        r.drawPolygonPath(_path || context, npos.x, npos.y, nodeWidth, nodeHeight, points);\n      } else {\n        var _pad = (bWidth + outlineWidth + outlineOffset) / nodeWidth;\n        points = joinLines(expandPolygon(points, -_pad));\n        r.drawPolygonPath(_path || context, npos.x, npos.y, nodeWidth, nodeHeight, points);\n      }\n      if (usePaths) {\n        context.stroke(_path);\n      } else {\n        context.stroke();\n      }\n      if (outlineStyle === 'double') {\n        context.lineWidth = bWidth / 3;\n        var gco = context.globalCompositeOperation;\n        context.globalCompositeOperation = 'destination-out';\n        if (usePaths) {\n          context.stroke(_path);\n        } else {\n          context.stroke();\n        }\n        context.globalCompositeOperation = gco;\n      }\n\n      // reset in case we changed the border style\n      if (context.setLineDash) {\n        // for very outofdate browsers\n        context.setLineDash([]);\n      }\n    }\n  };\n  var drawOverlay = function drawOverlay() {\n    if (shouldDrawOverlay) {\n      r.drawNodeOverlay(context, node, pos, nodeWidth, nodeHeight);\n    }\n  };\n  var drawUnderlay = function drawUnderlay() {\n    if (shouldDrawOverlay) {\n      r.drawNodeUnderlay(context, node, pos, nodeWidth, nodeHeight);\n    }\n  };\n  var drawText = function drawText() {\n    r.drawElementText(context, node, null, drawLabel);\n  };\n  var ghost = node.pstyle('ghost').value === 'yes';\n  if (ghost) {\n    var gx = node.pstyle('ghost-offset-x').pfValue;\n    var gy = node.pstyle('ghost-offset-y').pfValue;\n    var ghostOpacity = node.pstyle('ghost-opacity').value;\n    var effGhostOpacity = ghostOpacity * eleOpacity;\n    context.translate(gx, gy);\n    setupOutlineColor();\n    drawOutline();\n    setupShapeColor(ghostOpacity * bgOpacity);\n    drawShape();\n    drawImages(effGhostOpacity, true);\n    setupBorderColor(ghostOpacity * borderOpacity);\n    drawBorder();\n    drawPie(darkness !== 0 || borderWidth !== 0);\n    drawImages(effGhostOpacity, false);\n    darken(effGhostOpacity);\n    context.translate(-gx, -gy);\n  }\n  if (usePaths) {\n    context.translate(-pos.x, -pos.y);\n  }\n  drawUnderlay();\n  if (usePaths) {\n    context.translate(pos.x, pos.y);\n  }\n  setupOutlineColor();\n  drawOutline();\n  setupShapeColor();\n  drawShape();\n  drawImages(eleOpacity, true);\n  setupBorderColor();\n  drawBorder();\n  drawPie(darkness !== 0 || borderWidth !== 0);\n  drawImages(eleOpacity, false);\n  darken();\n  if (usePaths) {\n    context.translate(-pos.x, -pos.y);\n  }\n  drawText();\n  drawOverlay();\n\n  //\n  // clean up shift\n\n  if (shiftToOriginWithBb) {\n    context.translate(bb.x1, bb.y1);\n  }\n};\nvar drawNodeOverlayUnderlay = function drawNodeOverlayUnderlay(overlayOrUnderlay) {\n  if (!['overlay', 'underlay'].includes(overlayOrUnderlay)) {\n    throw new Error('Invalid state');\n  }\n  return function (context, node, pos, nodeWidth, nodeHeight) {\n    var r = this;\n    if (!node.visible()) {\n      return;\n    }\n    var padding = node.pstyle(\"\".concat(overlayOrUnderlay, \"-padding\")).pfValue;\n    var opacity = node.pstyle(\"\".concat(overlayOrUnderlay, \"-opacity\")).value;\n    var color = node.pstyle(\"\".concat(overlayOrUnderlay, \"-color\")).value;\n    var shape = node.pstyle(\"\".concat(overlayOrUnderlay, \"-shape\")).value;\n    var radius = node.pstyle(\"\".concat(overlayOrUnderlay, \"-corner-radius\")).value;\n    if (opacity > 0) {\n      pos = pos || node.position();\n      if (nodeWidth == null || nodeHeight == null) {\n        var _padding = node.padding();\n        nodeWidth = node.width() + 2 * _padding;\n        nodeHeight = node.height() + 2 * _padding;\n      }\n      r.colorFillStyle(context, color[0], color[1], color[2], opacity);\n      r.nodeShapes[shape].draw(context, pos.x, pos.y, nodeWidth + padding * 2, nodeHeight + padding * 2, radius);\n      context.fill();\n    }\n  };\n};\nCRp$5.drawNodeOverlay = drawNodeOverlayUnderlay('overlay');\nCRp$5.drawNodeUnderlay = drawNodeOverlayUnderlay('underlay');\n\n// does the node have at least one pie piece?\nCRp$5.hasPie = function (node) {\n  node = node[0]; // ensure ele ref\n\n  return node._private.hasPie;\n};\nCRp$5.drawPie = function (context, node, nodeOpacity, pos) {\n  node = node[0]; // ensure ele ref\n  pos = pos || node.position();\n  var cyStyle = node.cy().style();\n  var pieSize = node.pstyle('pie-size');\n  var x = pos.x;\n  var y = pos.y;\n  var nodeW = node.width();\n  var nodeH = node.height();\n  var radius = Math.min(nodeW, nodeH) / 2; // must fit in node\n  var lastPercent = 0; // what % to continue drawing pie slices from on [0, 1]\n  var usePaths = this.usePaths();\n  if (usePaths) {\n    x = 0;\n    y = 0;\n  }\n  if (pieSize.units === '%') {\n    radius = radius * pieSize.pfValue;\n  } else if (pieSize.pfValue !== undefined) {\n    radius = pieSize.pfValue / 2;\n  }\n  for (var i = 1; i <= cyStyle.pieBackgroundN; i++) {\n    // 1..N\n    var size = node.pstyle('pie-' + i + '-background-size').value;\n    var color = node.pstyle('pie-' + i + '-background-color').value;\n    var opacity = node.pstyle('pie-' + i + '-background-opacity').value * nodeOpacity;\n    var percent = size / 100; // map integer range [0, 100] to [0, 1]\n\n    // percent can't push beyond 1\n    if (percent + lastPercent > 1) {\n      percent = 1 - lastPercent;\n    }\n    var angleStart = 1.5 * Math.PI + 2 * Math.PI * lastPercent; // start at 12 o'clock and go clockwise\n    var angleDelta = 2 * Math.PI * percent;\n    var angleEnd = angleStart + angleDelta;\n\n    // ignore if\n    // - zero size\n    // - we're already beyond the full circle\n    // - adding the current slice would go beyond the full circle\n    if (size === 0 || lastPercent >= 1 || lastPercent + percent > 1) {\n      continue;\n    }\n    context.beginPath();\n    context.moveTo(x, y);\n    context.arc(x, y, radius, angleStart, angleEnd);\n    context.closePath();\n    this.colorFillStyle(context, color[0], color[1], color[2], opacity);\n    context.fill();\n    lastPercent += percent;\n  }\n};\n\nvar CRp$4 = {};\nvar motionBlurDelay = 100;\n\n// var isFirefox = typeof InstallTrigger !== 'undefined';\n\nCRp$4.getPixelRatio = function () {\n  var context = this.data.contexts[0];\n  if (this.forcedPixelRatio != null) {\n    return this.forcedPixelRatio;\n  }\n  var containerWindow = this.cy.window();\n  var backingStore = context.backingStorePixelRatio || context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;\n  return (containerWindow.devicePixelRatio || 1) / backingStore; // eslint-disable-line no-undef\n};\n\nCRp$4.paintCache = function (context) {\n  var caches = this.paintCaches = this.paintCaches || [];\n  var needToCreateCache = true;\n  var cache;\n  for (var i = 0; i < caches.length; i++) {\n    cache = caches[i];\n    if (cache.context === context) {\n      needToCreateCache = false;\n      break;\n    }\n  }\n  if (needToCreateCache) {\n    cache = {\n      context: context\n    };\n    caches.push(cache);\n  }\n  return cache;\n};\nCRp$4.createGradientStyleFor = function (context, shapeStyleName, ele, fill, opacity) {\n  var gradientStyle;\n  var usePaths = this.usePaths();\n  var colors = ele.pstyle(shapeStyleName + '-gradient-stop-colors').value,\n    positions = ele.pstyle(shapeStyleName + '-gradient-stop-positions').pfValue;\n  if (fill === 'radial-gradient') {\n    if (ele.isEdge()) {\n      var start = ele.sourceEndpoint(),\n        end = ele.targetEndpoint(),\n        mid = ele.midpoint();\n      var d1 = dist(start, mid);\n      var d2 = dist(end, mid);\n      gradientStyle = context.createRadialGradient(mid.x, mid.y, 0, mid.x, mid.y, Math.max(d1, d2));\n    } else {\n      var pos = usePaths ? {\n          x: 0,\n          y: 0\n        } : ele.position(),\n        width = ele.paddedWidth(),\n        height = ele.paddedHeight();\n      gradientStyle = context.createRadialGradient(pos.x, pos.y, 0, pos.x, pos.y, Math.max(width, height));\n    }\n  } else {\n    if (ele.isEdge()) {\n      var _start = ele.sourceEndpoint(),\n        _end = ele.targetEndpoint();\n      gradientStyle = context.createLinearGradient(_start.x, _start.y, _end.x, _end.y);\n    } else {\n      var _pos = usePaths ? {\n          x: 0,\n          y: 0\n        } : ele.position(),\n        _width = ele.paddedWidth(),\n        _height = ele.paddedHeight(),\n        halfWidth = _width / 2,\n        halfHeight = _height / 2;\n      var direction = ele.pstyle('background-gradient-direction').value;\n      switch (direction) {\n        case 'to-bottom':\n          gradientStyle = context.createLinearGradient(_pos.x, _pos.y - halfHeight, _pos.x, _pos.y + halfHeight);\n          break;\n        case 'to-top':\n          gradientStyle = context.createLinearGradient(_pos.x, _pos.y + halfHeight, _pos.x, _pos.y - halfHeight);\n          break;\n        case 'to-left':\n          gradientStyle = context.createLinearGradient(_pos.x + halfWidth, _pos.y, _pos.x - halfWidth, _pos.y);\n          break;\n        case 'to-right':\n          gradientStyle = context.createLinearGradient(_pos.x - halfWidth, _pos.y, _pos.x + halfWidth, _pos.y);\n          break;\n        case 'to-bottom-right':\n        case 'to-right-bottom':\n          gradientStyle = context.createLinearGradient(_pos.x - halfWidth, _pos.y - halfHeight, _pos.x + halfWidth, _pos.y + halfHeight);\n          break;\n        case 'to-top-right':\n        case 'to-right-top':\n          gradientStyle = context.createLinearGradient(_pos.x - halfWidth, _pos.y + halfHeight, _pos.x + halfWidth, _pos.y - halfHeight);\n          break;\n        case 'to-bottom-left':\n        case 'to-left-bottom':\n          gradientStyle = context.createLinearGradient(_pos.x + halfWidth, _pos.y - halfHeight, _pos.x - halfWidth, _pos.y + halfHeight);\n          break;\n        case 'to-top-left':\n        case 'to-left-top':\n          gradientStyle = context.createLinearGradient(_pos.x + halfWidth, _pos.y + halfHeight, _pos.x - halfWidth, _pos.y - halfHeight);\n          break;\n      }\n    }\n  }\n  if (!gradientStyle) return null; // invalid gradient style\n\n  var hasPositions = positions.length === colors.length;\n  var length = colors.length;\n  for (var i = 0; i < length; i++) {\n    gradientStyle.addColorStop(hasPositions ? positions[i] : i / (length - 1), 'rgba(' + colors[i][0] + ',' + colors[i][1] + ',' + colors[i][2] + ',' + opacity + ')');\n  }\n  return gradientStyle;\n};\nCRp$4.gradientFillStyle = function (context, ele, fill, opacity) {\n  var gradientStyle = this.createGradientStyleFor(context, 'background', ele, fill, opacity);\n  if (!gradientStyle) return null; // error\n  context.fillStyle = gradientStyle;\n};\nCRp$4.colorFillStyle = function (context, r, g, b, a) {\n  context.fillStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n  // turn off for now, seems context does its own caching\n\n  // var cache = this.paintCache(context);\n\n  // var fillStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n\n  // if( cache.fillStyle !== fillStyle ){\n  //   context.fillStyle = cache.fillStyle = fillStyle;\n  // }\n};\n\nCRp$4.eleFillStyle = function (context, ele, opacity) {\n  var backgroundFill = ele.pstyle('background-fill').value;\n  if (backgroundFill === 'linear-gradient' || backgroundFill === 'radial-gradient') {\n    this.gradientFillStyle(context, ele, backgroundFill, opacity);\n  } else {\n    var backgroundColor = ele.pstyle('background-color').value;\n    this.colorFillStyle(context, backgroundColor[0], backgroundColor[1], backgroundColor[2], opacity);\n  }\n};\nCRp$4.gradientStrokeStyle = function (context, ele, fill, opacity) {\n  var gradientStyle = this.createGradientStyleFor(context, 'line', ele, fill, opacity);\n  if (!gradientStyle) return null; // error\n  context.strokeStyle = gradientStyle;\n};\nCRp$4.colorStrokeStyle = function (context, r, g, b, a) {\n  context.strokeStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n  // turn off for now, seems context does its own caching\n\n  // var cache = this.paintCache(context);\n\n  // var strokeStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n\n  // if( cache.strokeStyle !== strokeStyle ){\n  //   context.strokeStyle = cache.strokeStyle = strokeStyle;\n  // }\n};\n\nCRp$4.eleStrokeStyle = function (context, ele, opacity) {\n  var lineFill = ele.pstyle('line-fill').value;\n  if (lineFill === 'linear-gradient' || lineFill === 'radial-gradient') {\n    this.gradientStrokeStyle(context, ele, lineFill, opacity);\n  } else {\n    var lineColor = ele.pstyle('line-color').value;\n    this.colorStrokeStyle(context, lineColor[0], lineColor[1], lineColor[2], opacity);\n  }\n};\n\n// Resize canvas\nCRp$4.matchCanvasSize = function (container) {\n  var r = this;\n  var data = r.data;\n  var bb = r.findContainerClientCoords();\n  var width = bb[2];\n  var height = bb[3];\n  var pixelRatio = r.getPixelRatio();\n  var mbPxRatio = r.motionBlurPxRatio;\n  if (container === r.data.bufferCanvases[r.MOTIONBLUR_BUFFER_NODE] || container === r.data.bufferCanvases[r.MOTIONBLUR_BUFFER_DRAG]) {\n    pixelRatio = mbPxRatio;\n  }\n  var canvasWidth = width * pixelRatio;\n  var canvasHeight = height * pixelRatio;\n  var canvas;\n  if (canvasWidth === r.canvasWidth && canvasHeight === r.canvasHeight) {\n    return; // save cycles if same\n  }\n\n  r.fontCaches = null; // resizing resets the style\n\n  var canvasContainer = data.canvasContainer;\n  canvasContainer.style.width = width + 'px';\n  canvasContainer.style.height = height + 'px';\n  for (var i = 0; i < r.CANVAS_LAYERS; i++) {\n    canvas = data.canvases[i];\n    canvas.width = canvasWidth;\n    canvas.height = canvasHeight;\n    canvas.style.width = width + 'px';\n    canvas.style.height = height + 'px';\n  }\n  for (var i = 0; i < r.BUFFER_COUNT; i++) {\n    canvas = data.bufferCanvases[i];\n    canvas.width = canvasWidth;\n    canvas.height = canvasHeight;\n    canvas.style.width = width + 'px';\n    canvas.style.height = height + 'px';\n  }\n  r.textureMult = 1;\n  if (pixelRatio <= 1) {\n    canvas = data.bufferCanvases[r.TEXTURE_BUFFER];\n    r.textureMult = 2;\n    canvas.width = canvasWidth * r.textureMult;\n    canvas.height = canvasHeight * r.textureMult;\n  }\n  r.canvasWidth = canvasWidth;\n  r.canvasHeight = canvasHeight;\n};\nCRp$4.renderTo = function (cxt, zoom, pan, pxRatio) {\n  this.render({\n    forcedContext: cxt,\n    forcedZoom: zoom,\n    forcedPan: pan,\n    drawAllLayers: true,\n    forcedPxRatio: pxRatio\n  });\n};\nCRp$4.render = function (options) {\n  options = options || staticEmptyObject();\n  var forcedContext = options.forcedContext;\n  var drawAllLayers = options.drawAllLayers;\n  var drawOnlyNodeLayer = options.drawOnlyNodeLayer;\n  var forcedZoom = options.forcedZoom;\n  var forcedPan = options.forcedPan;\n  var r = this;\n  var pixelRatio = options.forcedPxRatio === undefined ? this.getPixelRatio() : options.forcedPxRatio;\n  var cy = r.cy;\n  var data = r.data;\n  var needDraw = data.canvasNeedsRedraw;\n  var textureDraw = r.textureOnViewport && !forcedContext && (r.pinching || r.hoverData.dragging || r.swipePanning || r.data.wheelZooming);\n  var motionBlur = options.motionBlur !== undefined ? options.motionBlur : r.motionBlur;\n  var mbPxRatio = r.motionBlurPxRatio;\n  var hasCompoundNodes = cy.hasCompoundNodes();\n  var inNodeDragGesture = r.hoverData.draggingEles;\n  var inBoxSelection = r.hoverData.selecting || r.touchData.selecting ? true : false;\n  motionBlur = motionBlur && !forcedContext && r.motionBlurEnabled && !inBoxSelection;\n  var motionBlurFadeEffect = motionBlur;\n  if (!forcedContext) {\n    if (r.prevPxRatio !== pixelRatio) {\n      r.invalidateContainerClientCoordsCache();\n      r.matchCanvasSize(r.container);\n      r.redrawHint('eles', true);\n      r.redrawHint('drag', true);\n    }\n    r.prevPxRatio = pixelRatio;\n  }\n  if (!forcedContext && r.motionBlurTimeout) {\n    clearTimeout(r.motionBlurTimeout);\n  }\n  if (motionBlur) {\n    if (r.mbFrames == null) {\n      r.mbFrames = 0;\n    }\n    r.mbFrames++;\n    if (r.mbFrames < 3) {\n      // need several frames before even high quality motionblur\n      motionBlurFadeEffect = false;\n    }\n\n    // go to lower quality blurry frames when several m/b frames have been rendered (avoids flashing)\n    if (r.mbFrames > r.minMbLowQualFrames) {\n      //r.fullQualityMb = false;\n      r.motionBlurPxRatio = r.mbPxRBlurry;\n    }\n  }\n  if (r.clearingMotionBlur) {\n    r.motionBlurPxRatio = 1;\n  }\n\n  // b/c drawToContext() may be async w.r.t. redraw(), keep track of last texture frame\n  // because a rogue async texture frame would clear needDraw\n  if (r.textureDrawLastFrame && !textureDraw) {\n    needDraw[r.NODE] = true;\n    needDraw[r.SELECT_BOX] = true;\n  }\n  var style = cy.style();\n  var zoom = cy.zoom();\n  var effectiveZoom = forcedZoom !== undefined ? forcedZoom : zoom;\n  var pan = cy.pan();\n  var effectivePan = {\n    x: pan.x,\n    y: pan.y\n  };\n  var vp = {\n    zoom: zoom,\n    pan: {\n      x: pan.x,\n      y: pan.y\n    }\n  };\n  var prevVp = r.prevViewport;\n  var viewportIsDiff = prevVp === undefined || vp.zoom !== prevVp.zoom || vp.pan.x !== prevVp.pan.x || vp.pan.y !== prevVp.pan.y;\n\n  // we want the low quality motionblur only when the viewport is being manipulated etc (where it's not noticed)\n  if (!viewportIsDiff && !(inNodeDragGesture && !hasCompoundNodes)) {\n    r.motionBlurPxRatio = 1;\n  }\n  if (forcedPan) {\n    effectivePan = forcedPan;\n  }\n\n  // apply pixel ratio\n\n  effectiveZoom *= pixelRatio;\n  effectivePan.x *= pixelRatio;\n  effectivePan.y *= pixelRatio;\n  var eles = r.getCachedZSortedEles();\n  function mbclear(context, x, y, w, h) {\n    var gco = context.globalCompositeOperation;\n    context.globalCompositeOperation = 'destination-out';\n    r.colorFillStyle(context, 255, 255, 255, r.motionBlurTransparency);\n    context.fillRect(x, y, w, h);\n    context.globalCompositeOperation = gco;\n  }\n  function setContextTransform(context, clear) {\n    var ePan, eZoom, w, h;\n    if (!r.clearingMotionBlur && (context === data.bufferContexts[r.MOTIONBLUR_BUFFER_NODE] || context === data.bufferContexts[r.MOTIONBLUR_BUFFER_DRAG])) {\n      ePan = {\n        x: pan.x * mbPxRatio,\n        y: pan.y * mbPxRatio\n      };\n      eZoom = zoom * mbPxRatio;\n      w = r.canvasWidth * mbPxRatio;\n      h = r.canvasHeight * mbPxRatio;\n    } else {\n      ePan = effectivePan;\n      eZoom = effectiveZoom;\n      w = r.canvasWidth;\n      h = r.canvasHeight;\n    }\n    context.setTransform(1, 0, 0, 1, 0, 0);\n    if (clear === 'motionBlur') {\n      mbclear(context, 0, 0, w, h);\n    } else if (!forcedContext && (clear === undefined || clear)) {\n      context.clearRect(0, 0, w, h);\n    }\n    if (!drawAllLayers) {\n      context.translate(ePan.x, ePan.y);\n      context.scale(eZoom, eZoom);\n    }\n    if (forcedPan) {\n      context.translate(forcedPan.x, forcedPan.y);\n    }\n    if (forcedZoom) {\n      context.scale(forcedZoom, forcedZoom);\n    }\n  }\n  if (!textureDraw) {\n    r.textureDrawLastFrame = false;\n  }\n  if (textureDraw) {\n    r.textureDrawLastFrame = true;\n    if (!r.textureCache) {\n      r.textureCache = {};\n      r.textureCache.bb = cy.mutableElements().boundingBox();\n      r.textureCache.texture = r.data.bufferCanvases[r.TEXTURE_BUFFER];\n      var cxt = r.data.bufferContexts[r.TEXTURE_BUFFER];\n      cxt.setTransform(1, 0, 0, 1, 0, 0);\n      cxt.clearRect(0, 0, r.canvasWidth * r.textureMult, r.canvasHeight * r.textureMult);\n      r.render({\n        forcedContext: cxt,\n        drawOnlyNodeLayer: true,\n        forcedPxRatio: pixelRatio * r.textureMult\n      });\n      var vp = r.textureCache.viewport = {\n        zoom: cy.zoom(),\n        pan: cy.pan(),\n        width: r.canvasWidth,\n        height: r.canvasHeight\n      };\n      vp.mpan = {\n        x: (0 - vp.pan.x) / vp.zoom,\n        y: (0 - vp.pan.y) / vp.zoom\n      };\n    }\n    needDraw[r.DRAG] = false;\n    needDraw[r.NODE] = false;\n    var context = data.contexts[r.NODE];\n    var texture = r.textureCache.texture;\n    var vp = r.textureCache.viewport;\n    context.setTransform(1, 0, 0, 1, 0, 0);\n    if (motionBlur) {\n      mbclear(context, 0, 0, vp.width, vp.height);\n    } else {\n      context.clearRect(0, 0, vp.width, vp.height);\n    }\n    var outsideBgColor = style.core('outside-texture-bg-color').value;\n    var outsideBgOpacity = style.core('outside-texture-bg-opacity').value;\n    r.colorFillStyle(context, outsideBgColor[0], outsideBgColor[1], outsideBgColor[2], outsideBgOpacity);\n    context.fillRect(0, 0, vp.width, vp.height);\n    var zoom = cy.zoom();\n    setContextTransform(context, false);\n    context.clearRect(vp.mpan.x, vp.mpan.y, vp.width / vp.zoom / pixelRatio, vp.height / vp.zoom / pixelRatio);\n    context.drawImage(texture, vp.mpan.x, vp.mpan.y, vp.width / vp.zoom / pixelRatio, vp.height / vp.zoom / pixelRatio);\n  } else if (r.textureOnViewport && !forcedContext) {\n    // clear the cache since we don't need it\n    r.textureCache = null;\n  }\n  var extent = cy.extent();\n  var vpManip = r.pinching || r.hoverData.dragging || r.swipePanning || r.data.wheelZooming || r.hoverData.draggingEles || r.cy.animated();\n  var hideEdges = r.hideEdgesOnViewport && vpManip;\n  var needMbClear = [];\n  needMbClear[r.NODE] = !needDraw[r.NODE] && motionBlur && !r.clearedForMotionBlur[r.NODE] || r.clearingMotionBlur;\n  if (needMbClear[r.NODE]) {\n    r.clearedForMotionBlur[r.NODE] = true;\n  }\n  needMbClear[r.DRAG] = !needDraw[r.DRAG] && motionBlur && !r.clearedForMotionBlur[r.DRAG] || r.clearingMotionBlur;\n  if (needMbClear[r.DRAG]) {\n    r.clearedForMotionBlur[r.DRAG] = true;\n  }\n  if (needDraw[r.NODE] || drawAllLayers || drawOnlyNodeLayer || needMbClear[r.NODE]) {\n    var useBuffer = motionBlur && !needMbClear[r.NODE] && mbPxRatio !== 1;\n    var context = forcedContext || (useBuffer ? r.data.bufferContexts[r.MOTIONBLUR_BUFFER_NODE] : data.contexts[r.NODE]);\n    var clear = motionBlur && !useBuffer ? 'motionBlur' : undefined;\n    setContextTransform(context, clear);\n    if (hideEdges) {\n      r.drawCachedNodes(context, eles.nondrag, pixelRatio, extent);\n    } else {\n      r.drawLayeredElements(context, eles.nondrag, pixelRatio, extent);\n    }\n    if (r.debug) {\n      r.drawDebugPoints(context, eles.nondrag);\n    }\n    if (!drawAllLayers && !motionBlur) {\n      needDraw[r.NODE] = false;\n    }\n  }\n  if (!drawOnlyNodeLayer && (needDraw[r.DRAG] || drawAllLayers || needMbClear[r.DRAG])) {\n    var useBuffer = motionBlur && !needMbClear[r.DRAG] && mbPxRatio !== 1;\n    var context = forcedContext || (useBuffer ? r.data.bufferContexts[r.MOTIONBLUR_BUFFER_DRAG] : data.contexts[r.DRAG]);\n    setContextTransform(context, motionBlur && !useBuffer ? 'motionBlur' : undefined);\n    if (hideEdges) {\n      r.drawCachedNodes(context, eles.drag, pixelRatio, extent);\n    } else {\n      r.drawCachedElements(context, eles.drag, pixelRatio, extent);\n    }\n    if (r.debug) {\n      r.drawDebugPoints(context, eles.drag);\n    }\n    if (!drawAllLayers && !motionBlur) {\n      needDraw[r.DRAG] = false;\n    }\n  }\n  if (r.showFps || !drawOnlyNodeLayer && needDraw[r.SELECT_BOX] && !drawAllLayers) {\n    var context = forcedContext || data.contexts[r.SELECT_BOX];\n    setContextTransform(context);\n    if (r.selection[4] == 1 && (r.hoverData.selecting || r.touchData.selecting)) {\n      var zoom = r.cy.zoom();\n      var borderWidth = style.core('selection-box-border-width').value / zoom;\n      context.lineWidth = borderWidth;\n      context.fillStyle = 'rgba(' + style.core('selection-box-color').value[0] + ',' + style.core('selection-box-color').value[1] + ',' + style.core('selection-box-color').value[2] + ',' + style.core('selection-box-opacity').value + ')';\n      context.fillRect(r.selection[0], r.selection[1], r.selection[2] - r.selection[0], r.selection[3] - r.selection[1]);\n      if (borderWidth > 0) {\n        context.strokeStyle = 'rgba(' + style.core('selection-box-border-color').value[0] + ',' + style.core('selection-box-border-color').value[1] + ',' + style.core('selection-box-border-color').value[2] + ',' + style.core('selection-box-opacity').value + ')';\n        context.strokeRect(r.selection[0], r.selection[1], r.selection[2] - r.selection[0], r.selection[3] - r.selection[1]);\n      }\n    }\n    if (data.bgActivePosistion && !r.hoverData.selecting) {\n      var zoom = r.cy.zoom();\n      var pos = data.bgActivePosistion;\n      context.fillStyle = 'rgba(' + style.core('active-bg-color').value[0] + ',' + style.core('active-bg-color').value[1] + ',' + style.core('active-bg-color').value[2] + ',' + style.core('active-bg-opacity').value + ')';\n      context.beginPath();\n      context.arc(pos.x, pos.y, style.core('active-bg-size').pfValue / zoom, 0, 2 * Math.PI);\n      context.fill();\n    }\n    var timeToRender = r.lastRedrawTime;\n    if (r.showFps && timeToRender) {\n      timeToRender = Math.round(timeToRender);\n      var fps = Math.round(1000 / timeToRender);\n      context.setTransform(1, 0, 0, 1, 0, 0);\n      context.fillStyle = 'rgba(255, 0, 0, 0.75)';\n      context.strokeStyle = 'rgba(255, 0, 0, 0.75)';\n      context.lineWidth = 1;\n      context.fillText('1 frame = ' + timeToRender + ' ms = ' + fps + ' fps', 0, 20);\n      var maxFps = 60;\n      context.strokeRect(0, 30, 250, 20);\n      context.fillRect(0, 30, 250 * Math.min(fps / maxFps, 1), 20);\n    }\n    if (!drawAllLayers) {\n      needDraw[r.SELECT_BOX] = false;\n    }\n  }\n\n  // motionblur: blit rendered blurry frames\n  if (motionBlur && mbPxRatio !== 1) {\n    var cxtNode = data.contexts[r.NODE];\n    var txtNode = r.data.bufferCanvases[r.MOTIONBLUR_BUFFER_NODE];\n    var cxtDrag = data.contexts[r.DRAG];\n    var txtDrag = r.data.bufferCanvases[r.MOTIONBLUR_BUFFER_DRAG];\n    var drawMotionBlur = function drawMotionBlur(cxt, txt, needClear) {\n      cxt.setTransform(1, 0, 0, 1, 0, 0);\n      if (needClear || !motionBlurFadeEffect) {\n        cxt.clearRect(0, 0, r.canvasWidth, r.canvasHeight);\n      } else {\n        mbclear(cxt, 0, 0, r.canvasWidth, r.canvasHeight);\n      }\n      var pxr = mbPxRatio;\n      cxt.drawImage(txt,\n      // img\n      0, 0,\n      // sx, sy\n      r.canvasWidth * pxr, r.canvasHeight * pxr,\n      // sw, sh\n      0, 0,\n      // x, y\n      r.canvasWidth, r.canvasHeight // w, h\n      );\n    };\n\n    if (needDraw[r.NODE] || needMbClear[r.NODE]) {\n      drawMotionBlur(cxtNode, txtNode, needMbClear[r.NODE]);\n      needDraw[r.NODE] = false;\n    }\n    if (needDraw[r.DRAG] || needMbClear[r.DRAG]) {\n      drawMotionBlur(cxtDrag, txtDrag, needMbClear[r.DRAG]);\n      needDraw[r.DRAG] = false;\n    }\n  }\n  r.prevViewport = vp;\n  if (r.clearingMotionBlur) {\n    r.clearingMotionBlur = false;\n    r.motionBlurCleared = true;\n    r.motionBlur = true;\n  }\n  if (motionBlur) {\n    r.motionBlurTimeout = setTimeout(function () {\n      r.motionBlurTimeout = null;\n      r.clearedForMotionBlur[r.NODE] = false;\n      r.clearedForMotionBlur[r.DRAG] = false;\n      r.motionBlur = false;\n      r.clearingMotionBlur = !textureDraw;\n      r.mbFrames = 0;\n      needDraw[r.NODE] = true;\n      needDraw[r.DRAG] = true;\n      r.redraw();\n    }, motionBlurDelay);\n  }\n  if (!forcedContext) {\n    cy.emit('render');\n  }\n};\n\nvar CRp$3 = {};\n\n// @O Polygon drawing\nCRp$3.drawPolygonPath = function (context, x, y, width, height, points) {\n  var halfW = width / 2;\n  var halfH = height / 2;\n  if (context.beginPath) {\n    context.beginPath();\n  }\n  context.moveTo(x + halfW * points[0], y + halfH * points[1]);\n  for (var i = 1; i < points.length / 2; i++) {\n    context.lineTo(x + halfW * points[i * 2], y + halfH * points[i * 2 + 1]);\n  }\n  context.closePath();\n};\nCRp$3.drawRoundPolygonPath = function (context, x, y, width, height, points, corners) {\n  corners.forEach(function (corner) {\n    return drawPreparedRoundCorner(context, corner);\n  });\n  context.closePath();\n};\n\n// Round rectangle drawing\nCRp$3.drawRoundRectanglePath = function (context, x, y, width, height, radius) {\n  var halfWidth = width / 2;\n  var halfHeight = height / 2;\n  var cornerRadius = radius === 'auto' ? getRoundRectangleRadius(width, height) : Math.min(radius, halfHeight, halfWidth);\n  if (context.beginPath) {\n    context.beginPath();\n  }\n\n  // Start at top middle\n  context.moveTo(x, y - halfHeight);\n  // Arc from middle top to right side\n  context.arcTo(x + halfWidth, y - halfHeight, x + halfWidth, y, cornerRadius);\n  // Arc from right side to bottom\n  context.arcTo(x + halfWidth, y + halfHeight, x, y + halfHeight, cornerRadius);\n  // Arc from bottom to left side\n  context.arcTo(x - halfWidth, y + halfHeight, x - halfWidth, y, cornerRadius);\n  // Arc from left side to topBorder\n  context.arcTo(x - halfWidth, y - halfHeight, x, y - halfHeight, cornerRadius);\n  // Join line\n  context.lineTo(x, y - halfHeight);\n  context.closePath();\n};\nCRp$3.drawBottomRoundRectanglePath = function (context, x, y, width, height, radius) {\n  var halfWidth = width / 2;\n  var halfHeight = height / 2;\n  var cornerRadius = radius === 'auto' ? getRoundRectangleRadius(width, height) : radius;\n  if (context.beginPath) {\n    context.beginPath();\n  }\n\n  // Start at top middle\n  context.moveTo(x, y - halfHeight);\n  context.lineTo(x + halfWidth, y - halfHeight);\n  context.lineTo(x + halfWidth, y);\n  context.arcTo(x + halfWidth, y + halfHeight, x, y + halfHeight, cornerRadius);\n  context.arcTo(x - halfWidth, y + halfHeight, x - halfWidth, y, cornerRadius);\n  context.lineTo(x - halfWidth, y - halfHeight);\n  context.lineTo(x, y - halfHeight);\n  context.closePath();\n};\nCRp$3.drawCutRectanglePath = function (context, x, y, width, height, points, corners) {\n  var halfWidth = width / 2;\n  var halfHeight = height / 2;\n  var cornerLength = corners === 'auto' ? getCutRectangleCornerLength() : corners;\n  if (context.beginPath) {\n    context.beginPath();\n  }\n  context.moveTo(x - halfWidth + cornerLength, y - halfHeight);\n  context.lineTo(x + halfWidth - cornerLength, y - halfHeight);\n  context.lineTo(x + halfWidth, y - halfHeight + cornerLength);\n  context.lineTo(x + halfWidth, y + halfHeight - cornerLength);\n  context.lineTo(x + halfWidth - cornerLength, y + halfHeight);\n  context.lineTo(x - halfWidth + cornerLength, y + halfHeight);\n  context.lineTo(x - halfWidth, y + halfHeight - cornerLength);\n  context.lineTo(x - halfWidth, y - halfHeight + cornerLength);\n  context.closePath();\n};\nCRp$3.drawBarrelPath = function (context, x, y, width, height) {\n  var halfWidth = width / 2;\n  var halfHeight = height / 2;\n  var xBegin = x - halfWidth;\n  var xEnd = x + halfWidth;\n  var yBegin = y - halfHeight;\n  var yEnd = y + halfHeight;\n  var barrelCurveConstants = getBarrelCurveConstants(width, height);\n  var wOffset = barrelCurveConstants.widthOffset;\n  var hOffset = barrelCurveConstants.heightOffset;\n  var ctrlPtXOffset = barrelCurveConstants.ctrlPtOffsetPct * wOffset;\n  if (context.beginPath) {\n    context.beginPath();\n  }\n  context.moveTo(xBegin, yBegin + hOffset);\n  context.lineTo(xBegin, yEnd - hOffset);\n  context.quadraticCurveTo(xBegin + ctrlPtXOffset, yEnd, xBegin + wOffset, yEnd);\n  context.lineTo(xEnd - wOffset, yEnd);\n  context.quadraticCurveTo(xEnd - ctrlPtXOffset, yEnd, xEnd, yEnd - hOffset);\n  context.lineTo(xEnd, yBegin + hOffset);\n  context.quadraticCurveTo(xEnd - ctrlPtXOffset, yBegin, xEnd - wOffset, yBegin);\n  context.lineTo(xBegin + wOffset, yBegin);\n  context.quadraticCurveTo(xBegin + ctrlPtXOffset, yBegin, xBegin, yBegin + hOffset);\n  context.closePath();\n};\nvar sin0 = Math.sin(0);\nvar cos0 = Math.cos(0);\nvar sin = {};\nvar cos = {};\nvar ellipseStepSize = Math.PI / 40;\nfor (var i = 0 * Math.PI; i < 2 * Math.PI; i += ellipseStepSize) {\n  sin[i] = Math.sin(i);\n  cos[i] = Math.cos(i);\n}\nCRp$3.drawEllipsePath = function (context, centerX, centerY, width, height) {\n  if (context.beginPath) {\n    context.beginPath();\n  }\n  if (context.ellipse) {\n    context.ellipse(centerX, centerY, width / 2, height / 2, 0, 0, 2 * Math.PI);\n  } else {\n    var xPos, yPos;\n    var rw = width / 2;\n    var rh = height / 2;\n    for (var i = 0 * Math.PI; i < 2 * Math.PI; i += ellipseStepSize) {\n      xPos = centerX - rw * sin[i] * sin0 + rw * cos[i] * cos0;\n      yPos = centerY + rh * cos[i] * sin0 + rh * sin[i] * cos0;\n      if (i === 0) {\n        context.moveTo(xPos, yPos);\n      } else {\n        context.lineTo(xPos, yPos);\n      }\n    }\n  }\n  context.closePath();\n};\n\n/* global atob, ArrayBuffer, Uint8Array, Blob */\nvar CRp$2 = {};\nCRp$2.createBuffer = function (w, h) {\n  var buffer = document.createElement('canvas'); // eslint-disable-line no-undef\n  buffer.width = w;\n  buffer.height = h;\n  return [buffer, buffer.getContext('2d')];\n};\nCRp$2.bufferCanvasImage = function (options) {\n  var cy = this.cy;\n  var eles = cy.mutableElements();\n  var bb = eles.boundingBox();\n  var ctrRect = this.findContainerClientCoords();\n  var width = options.full ? Math.ceil(bb.w) : ctrRect[2];\n  var height = options.full ? Math.ceil(bb.h) : ctrRect[3];\n  var specdMaxDims = number$1(options.maxWidth) || number$1(options.maxHeight);\n  var pxRatio = this.getPixelRatio();\n  var scale = 1;\n  if (options.scale !== undefined) {\n    width *= options.scale;\n    height *= options.scale;\n    scale = options.scale;\n  } else if (specdMaxDims) {\n    var maxScaleW = Infinity;\n    var maxScaleH = Infinity;\n    if (number$1(options.maxWidth)) {\n      maxScaleW = scale * options.maxWidth / width;\n    }\n    if (number$1(options.maxHeight)) {\n      maxScaleH = scale * options.maxHeight / height;\n    }\n    scale = Math.min(maxScaleW, maxScaleH);\n    width *= scale;\n    height *= scale;\n  }\n  if (!specdMaxDims) {\n    width *= pxRatio;\n    height *= pxRatio;\n    scale *= pxRatio;\n  }\n  var buffCanvas = document.createElement('canvas'); // eslint-disable-line no-undef\n\n  buffCanvas.width = width;\n  buffCanvas.height = height;\n  buffCanvas.style.width = width + 'px';\n  buffCanvas.style.height = height + 'px';\n  var buffCxt = buffCanvas.getContext('2d');\n\n  // Rasterize the layers, but only if container has nonzero size\n  if (width > 0 && height > 0) {\n    buffCxt.clearRect(0, 0, width, height);\n    buffCxt.globalCompositeOperation = 'source-over';\n    var zsortedEles = this.getCachedZSortedEles();\n    if (options.full) {\n      // draw the full bounds of the graph\n      buffCxt.translate(-bb.x1 * scale, -bb.y1 * scale);\n      buffCxt.scale(scale, scale);\n      this.drawElements(buffCxt, zsortedEles);\n      buffCxt.scale(1 / scale, 1 / scale);\n      buffCxt.translate(bb.x1 * scale, bb.y1 * scale);\n    } else {\n      // draw the current view\n      var pan = cy.pan();\n      var translation = {\n        x: pan.x * scale,\n        y: pan.y * scale\n      };\n      scale *= cy.zoom();\n      buffCxt.translate(translation.x, translation.y);\n      buffCxt.scale(scale, scale);\n      this.drawElements(buffCxt, zsortedEles);\n      buffCxt.scale(1 / scale, 1 / scale);\n      buffCxt.translate(-translation.x, -translation.y);\n    }\n\n    // need to fill bg at end like this in order to fill cleared transparent pixels in jpgs\n    if (options.bg) {\n      buffCxt.globalCompositeOperation = 'destination-over';\n      buffCxt.fillStyle = options.bg;\n      buffCxt.rect(0, 0, width, height);\n      buffCxt.fill();\n    }\n  }\n  return buffCanvas;\n};\nfunction b64ToBlob(b64, mimeType) {\n  var bytes = atob(b64);\n  var buff = new ArrayBuffer(bytes.length);\n  var buffUint8 = new Uint8Array(buff);\n  for (var i = 0; i < bytes.length; i++) {\n    buffUint8[i] = bytes.charCodeAt(i);\n  }\n  return new Blob([buff], {\n    type: mimeType\n  });\n}\nfunction b64UriToB64(b64uri) {\n  var i = b64uri.indexOf(',');\n  return b64uri.substr(i + 1);\n}\nfunction output(options, canvas, mimeType) {\n  var getB64Uri = function getB64Uri() {\n    return canvas.toDataURL(mimeType, options.quality);\n  };\n  switch (options.output) {\n    case 'blob-promise':\n      return new Promise$1(function (resolve, reject) {\n        try {\n          canvas.toBlob(function (blob) {\n            if (blob != null) {\n              resolve(blob);\n            } else {\n              reject(new Error('`canvas.toBlob()` sent a null value in its callback'));\n            }\n          }, mimeType, options.quality);\n        } catch (err) {\n          reject(err);\n        }\n      });\n    case 'blob':\n      return b64ToBlob(b64UriToB64(getB64Uri()), mimeType);\n    case 'base64':\n      return b64UriToB64(getB64Uri());\n    case 'base64uri':\n    default:\n      return getB64Uri();\n  }\n}\nCRp$2.png = function (options) {\n  return output(options, this.bufferCanvasImage(options), 'image/png');\n};\nCRp$2.jpg = function (options) {\n  return output(options, this.bufferCanvasImage(options), 'image/jpeg');\n};\n\nvar CRp$1 = {};\nCRp$1.nodeShapeImpl = function (name, context, centerX, centerY, width, height, points, corners) {\n  switch (name) {\n    case 'ellipse':\n      return this.drawEllipsePath(context, centerX, centerY, width, height);\n    case 'polygon':\n      return this.drawPolygonPath(context, centerX, centerY, width, height, points);\n    case 'round-polygon':\n      return this.drawRoundPolygonPath(context, centerX, centerY, width, height, points, corners);\n    case 'roundrectangle':\n    case 'round-rectangle':\n      return this.drawRoundRectanglePath(context, centerX, centerY, width, height, corners);\n    case 'cutrectangle':\n    case 'cut-rectangle':\n      return this.drawCutRectanglePath(context, centerX, centerY, width, height, points, corners);\n    case 'bottomroundrectangle':\n    case 'bottom-round-rectangle':\n      return this.drawBottomRoundRectanglePath(context, centerX, centerY, width, height, corners);\n    case 'barrel':\n      return this.drawBarrelPath(context, centerX, centerY, width, height);\n  }\n};\n\nvar CR = CanvasRenderer;\nvar CRp = CanvasRenderer.prototype;\nCRp.CANVAS_LAYERS = 3;\n//\nCRp.SELECT_BOX = 0;\nCRp.DRAG = 1;\nCRp.NODE = 2;\nCRp.BUFFER_COUNT = 3;\n//\nCRp.TEXTURE_BUFFER = 0;\nCRp.MOTIONBLUR_BUFFER_NODE = 1;\nCRp.MOTIONBLUR_BUFFER_DRAG = 2;\nfunction CanvasRenderer(options) {\n  var r = this;\n  var containerWindow = r.cy.window();\n  var document = containerWindow.document;\n  r.data = {\n    canvases: new Array(CRp.CANVAS_LAYERS),\n    contexts: new Array(CRp.CANVAS_LAYERS),\n    canvasNeedsRedraw: new Array(CRp.CANVAS_LAYERS),\n    bufferCanvases: new Array(CRp.BUFFER_COUNT),\n    bufferContexts: new Array(CRp.CANVAS_LAYERS)\n  };\n  var tapHlOffAttr = '-webkit-tap-highlight-color';\n  var tapHlOffStyle = 'rgba(0,0,0,0)';\n  r.data.canvasContainer = document.createElement('div'); // eslint-disable-line no-undef\n  var containerStyle = r.data.canvasContainer.style;\n  r.data.canvasContainer.style[tapHlOffAttr] = tapHlOffStyle;\n  containerStyle.position = 'relative';\n  containerStyle.zIndex = '0';\n  containerStyle.overflow = 'hidden';\n  var container = options.cy.container();\n  container.appendChild(r.data.canvasContainer);\n  container.style[tapHlOffAttr] = tapHlOffStyle;\n  var styleMap = {\n    '-webkit-user-select': 'none',\n    '-moz-user-select': '-moz-none',\n    'user-select': 'none',\n    '-webkit-tap-highlight-color': 'rgba(0,0,0,0)',\n    'outline-style': 'none'\n  };\n  if (ms()) {\n    styleMap['-ms-touch-action'] = 'none';\n    styleMap['touch-action'] = 'none';\n  }\n  for (var i = 0; i < CRp.CANVAS_LAYERS; i++) {\n    var canvas = r.data.canvases[i] = document.createElement('canvas'); // eslint-disable-line no-undef\n    r.data.contexts[i] = canvas.getContext('2d');\n    Object.keys(styleMap).forEach(function (k) {\n      canvas.style[k] = styleMap[k];\n    });\n    canvas.style.position = 'absolute';\n    canvas.setAttribute('data-id', 'layer' + i);\n    canvas.style.zIndex = String(CRp.CANVAS_LAYERS - i);\n    r.data.canvasContainer.appendChild(canvas);\n    r.data.canvasNeedsRedraw[i] = false;\n  }\n  r.data.topCanvas = r.data.canvases[0];\n  r.data.canvases[CRp.NODE].setAttribute('data-id', 'layer' + CRp.NODE + '-node');\n  r.data.canvases[CRp.SELECT_BOX].setAttribute('data-id', 'layer' + CRp.SELECT_BOX + '-selectbox');\n  r.data.canvases[CRp.DRAG].setAttribute('data-id', 'layer' + CRp.DRAG + '-drag');\n  for (var i = 0; i < CRp.BUFFER_COUNT; i++) {\n    r.data.bufferCanvases[i] = document.createElement('canvas'); // eslint-disable-line no-undef\n    r.data.bufferContexts[i] = r.data.bufferCanvases[i].getContext('2d');\n    r.data.bufferCanvases[i].style.position = 'absolute';\n    r.data.bufferCanvases[i].setAttribute('data-id', 'buffer' + i);\n    r.data.bufferCanvases[i].style.zIndex = String(-i - 1);\n    r.data.bufferCanvases[i].style.visibility = 'hidden';\n    //r.data.canvasContainer.appendChild(r.data.bufferCanvases[i]);\n  }\n\n  r.pathsEnabled = true;\n  var emptyBb = makeBoundingBox();\n  var getBoxCenter = function getBoxCenter(bb) {\n    return {\n      x: (bb.x1 + bb.x2) / 2,\n      y: (bb.y1 + bb.y2) / 2\n    };\n  };\n  var getCenterOffset = function getCenterOffset(bb) {\n    return {\n      x: -bb.w / 2,\n      y: -bb.h / 2\n    };\n  };\n  var backgroundTimestampHasChanged = function backgroundTimestampHasChanged(ele) {\n    var _p = ele[0]._private;\n    var same = _p.oldBackgroundTimestamp === _p.backgroundTimestamp;\n    return !same;\n  };\n  var getStyleKey = function getStyleKey(ele) {\n    return ele[0]._private.nodeKey;\n  };\n  var getLabelKey = function getLabelKey(ele) {\n    return ele[0]._private.labelStyleKey;\n  };\n  var getSourceLabelKey = function getSourceLabelKey(ele) {\n    return ele[0]._private.sourceLabelStyleKey;\n  };\n  var getTargetLabelKey = function getTargetLabelKey(ele) {\n    return ele[0]._private.targetLabelStyleKey;\n  };\n  var drawElement = function drawElement(context, ele, bb, scaledLabelShown, useEleOpacity) {\n    return r.drawElement(context, ele, bb, false, false, useEleOpacity);\n  };\n  var drawLabel = function drawLabel(context, ele, bb, scaledLabelShown, useEleOpacity) {\n    return r.drawElementText(context, ele, bb, scaledLabelShown, 'main', useEleOpacity);\n  };\n  var drawSourceLabel = function drawSourceLabel(context, ele, bb, scaledLabelShown, useEleOpacity) {\n    return r.drawElementText(context, ele, bb, scaledLabelShown, 'source', useEleOpacity);\n  };\n  var drawTargetLabel = function drawTargetLabel(context, ele, bb, scaledLabelShown, useEleOpacity) {\n    return r.drawElementText(context, ele, bb, scaledLabelShown, 'target', useEleOpacity);\n  };\n  var getElementBox = function getElementBox(ele) {\n    ele.boundingBox();\n    return ele[0]._private.bodyBounds;\n  };\n  var getLabelBox = function getLabelBox(ele) {\n    ele.boundingBox();\n    return ele[0]._private.labelBounds.main || emptyBb;\n  };\n  var getSourceLabelBox = function getSourceLabelBox(ele) {\n    ele.boundingBox();\n    return ele[0]._private.labelBounds.source || emptyBb;\n  };\n  var getTargetLabelBox = function getTargetLabelBox(ele) {\n    ele.boundingBox();\n    return ele[0]._private.labelBounds.target || emptyBb;\n  };\n  var isLabelVisibleAtScale = function isLabelVisibleAtScale(ele, scaledLabelShown) {\n    return scaledLabelShown;\n  };\n  var getElementRotationPoint = function getElementRotationPoint(ele) {\n    return getBoxCenter(getElementBox(ele));\n  };\n  var addTextMargin = function addTextMargin(prefix, pt, ele) {\n    var pre = prefix ? prefix + '-' : '';\n    return {\n      x: pt.x + ele.pstyle(pre + 'text-margin-x').pfValue,\n      y: pt.y + ele.pstyle(pre + 'text-margin-y').pfValue\n    };\n  };\n  var getRsPt = function getRsPt(ele, x, y) {\n    var rs = ele[0]._private.rscratch;\n    return {\n      x: rs[x],\n      y: rs[y]\n    };\n  };\n  var getLabelRotationPoint = function getLabelRotationPoint(ele) {\n    return addTextMargin('', getRsPt(ele, 'labelX', 'labelY'), ele);\n  };\n  var getSourceLabelRotationPoint = function getSourceLabelRotationPoint(ele) {\n    return addTextMargin('source', getRsPt(ele, 'sourceLabelX', 'sourceLabelY'), ele);\n  };\n  var getTargetLabelRotationPoint = function getTargetLabelRotationPoint(ele) {\n    return addTextMargin('target', getRsPt(ele, 'targetLabelX', 'targetLabelY'), ele);\n  };\n  var getElementRotationOffset = function getElementRotationOffset(ele) {\n    return getCenterOffset(getElementBox(ele));\n  };\n  var getSourceLabelRotationOffset = function getSourceLabelRotationOffset(ele) {\n    return getCenterOffset(getSourceLabelBox(ele));\n  };\n  var getTargetLabelRotationOffset = function getTargetLabelRotationOffset(ele) {\n    return getCenterOffset(getTargetLabelBox(ele));\n  };\n  var getLabelRotationOffset = function getLabelRotationOffset(ele) {\n    var bb = getLabelBox(ele);\n    var p = getCenterOffset(getLabelBox(ele));\n    if (ele.isNode()) {\n      switch (ele.pstyle('text-halign').value) {\n        case 'left':\n          p.x = -bb.w - (bb.leftPad || 0);\n          break;\n        case 'right':\n          p.x = -(bb.rightPad || 0);\n          break;\n      }\n      switch (ele.pstyle('text-valign').value) {\n        case 'top':\n          p.y = -bb.h - (bb.topPad || 0);\n          break;\n        case 'bottom':\n          p.y = -(bb.botPad || 0);\n          break;\n      }\n    }\n    return p;\n  };\n  var eleTxrCache = r.data.eleTxrCache = new ElementTextureCache(r, {\n    getKey: getStyleKey,\n    doesEleInvalidateKey: backgroundTimestampHasChanged,\n    drawElement: drawElement,\n    getBoundingBox: getElementBox,\n    getRotationPoint: getElementRotationPoint,\n    getRotationOffset: getElementRotationOffset,\n    allowEdgeTxrCaching: false,\n    allowParentTxrCaching: false\n  });\n  var lblTxrCache = r.data.lblTxrCache = new ElementTextureCache(r, {\n    getKey: getLabelKey,\n    drawElement: drawLabel,\n    getBoundingBox: getLabelBox,\n    getRotationPoint: getLabelRotationPoint,\n    getRotationOffset: getLabelRotationOffset,\n    isVisible: isLabelVisibleAtScale\n  });\n  var slbTxrCache = r.data.slbTxrCache = new ElementTextureCache(r, {\n    getKey: getSourceLabelKey,\n    drawElement: drawSourceLabel,\n    getBoundingBox: getSourceLabelBox,\n    getRotationPoint: getSourceLabelRotationPoint,\n    getRotationOffset: getSourceLabelRotationOffset,\n    isVisible: isLabelVisibleAtScale\n  });\n  var tlbTxrCache = r.data.tlbTxrCache = new ElementTextureCache(r, {\n    getKey: getTargetLabelKey,\n    drawElement: drawTargetLabel,\n    getBoundingBox: getTargetLabelBox,\n    getRotationPoint: getTargetLabelRotationPoint,\n    getRotationOffset: getTargetLabelRotationOffset,\n    isVisible: isLabelVisibleAtScale\n  });\n  var lyrTxrCache = r.data.lyrTxrCache = new LayeredTextureCache(r);\n  r.onUpdateEleCalcs(function invalidateTextureCaches(willDraw, eles) {\n    // each cache should check for sub-key diff to see that the update affects that cache particularly\n    eleTxrCache.invalidateElements(eles);\n    lblTxrCache.invalidateElements(eles);\n    slbTxrCache.invalidateElements(eles);\n    tlbTxrCache.invalidateElements(eles);\n\n    // any change invalidates the layers\n    lyrTxrCache.invalidateElements(eles);\n\n    // update the old bg timestamp so diffs can be done in the ele txr caches\n    for (var _i = 0; _i < eles.length; _i++) {\n      var _p = eles[_i]._private;\n      _p.oldBackgroundTimestamp = _p.backgroundTimestamp;\n    }\n  });\n  var refineInLayers = function refineInLayers(reqs) {\n    for (var i = 0; i < reqs.length; i++) {\n      lyrTxrCache.enqueueElementRefinement(reqs[i].ele);\n    }\n  };\n  eleTxrCache.onDequeue(refineInLayers);\n  lblTxrCache.onDequeue(refineInLayers);\n  slbTxrCache.onDequeue(refineInLayers);\n  tlbTxrCache.onDequeue(refineInLayers);\n}\nCRp.redrawHint = function (group, bool) {\n  var r = this;\n  switch (group) {\n    case 'eles':\n      r.data.canvasNeedsRedraw[CRp.NODE] = bool;\n      break;\n    case 'drag':\n      r.data.canvasNeedsRedraw[CRp.DRAG] = bool;\n      break;\n    case 'select':\n      r.data.canvasNeedsRedraw[CRp.SELECT_BOX] = bool;\n      break;\n  }\n};\n\n// whether to use Path2D caching for drawing\nvar pathsImpld = typeof Path2D !== 'undefined';\nCRp.path2dEnabled = function (on) {\n  if (on === undefined) {\n    return this.pathsEnabled;\n  }\n  this.pathsEnabled = on ? true : false;\n};\nCRp.usePaths = function () {\n  return pathsImpld && this.pathsEnabled;\n};\nCRp.setImgSmoothing = function (context, bool) {\n  if (context.imageSmoothingEnabled != null) {\n    context.imageSmoothingEnabled = bool;\n  } else {\n    context.webkitImageSmoothingEnabled = bool;\n    context.mozImageSmoothingEnabled = bool;\n    context.msImageSmoothingEnabled = bool;\n  }\n};\nCRp.getImgSmoothing = function (context) {\n  if (context.imageSmoothingEnabled != null) {\n    return context.imageSmoothingEnabled;\n  } else {\n    return context.webkitImageSmoothingEnabled || context.mozImageSmoothingEnabled || context.msImageSmoothingEnabled;\n  }\n};\nCRp.makeOffscreenCanvas = function (width, height) {\n  var canvas;\n  if ((typeof OffscreenCanvas === \"undefined\" ? \"undefined\" : _typeof(OffscreenCanvas)) !== (\"undefined\" )) {\n    canvas = new OffscreenCanvas(width, height);\n  } else {\n    var containerWindow = this.cy.window();\n    var document = containerWindow.document;\n    canvas = document.createElement('canvas'); // eslint-disable-line no-undef\n    canvas.width = width;\n    canvas.height = height;\n  }\n  return canvas;\n};\n[CRp$a, CRp$9, CRp$8, CRp$7, CRp$6, CRp$5, CRp$4, CRp$3, CRp$2, CRp$1].forEach(function (props) {\n  extend(CRp, props);\n});\n\nvar renderer = [{\n  name: 'null',\n  impl: NullRenderer\n}, {\n  name: 'base',\n  impl: BR\n}, {\n  name: 'canvas',\n  impl: CR\n}];\n\nvar incExts = [{\n  type: 'layout',\n  extensions: layout\n}, {\n  type: 'renderer',\n  extensions: renderer\n}];\n\n// registered extensions to cytoscape, indexed by name\nvar extensions = {};\n\n// registered modules for extensions, indexed by name\nvar modules = {};\nfunction setExtension(type, name, registrant) {\n  var ext = registrant;\n  var overrideErr = function overrideErr(field) {\n    warn('Can not register `' + name + '` for `' + type + '` since `' + field + '` already exists in the prototype and can not be overridden');\n  };\n  if (type === 'core') {\n    if (Core.prototype[name]) {\n      return overrideErr(name);\n    } else {\n      Core.prototype[name] = registrant;\n    }\n  } else if (type === 'collection') {\n    if (Collection.prototype[name]) {\n      return overrideErr(name);\n    } else {\n      Collection.prototype[name] = registrant;\n    }\n  } else if (type === 'layout') {\n    // fill in missing layout functions in the prototype\n\n    var Layout = function Layout(options) {\n      this.options = options;\n      registrant.call(this, options);\n\n      // make sure layout has _private for use w/ std apis like .on()\n      if (!plainObject(this._private)) {\n        this._private = {};\n      }\n      this._private.cy = options.cy;\n      this._private.listeners = [];\n      this.createEmitter();\n    };\n    var layoutProto = Layout.prototype = Object.create(registrant.prototype);\n    var optLayoutFns = [];\n    for (var i = 0; i < optLayoutFns.length; i++) {\n      var fnName = optLayoutFns[i];\n      layoutProto[fnName] = layoutProto[fnName] || function () {\n        return this;\n      };\n    }\n\n    // either .start() or .run() is defined, so autogen the other\n    if (layoutProto.start && !layoutProto.run) {\n      layoutProto.run = function () {\n        this.start();\n        return this;\n      };\n    } else if (!layoutProto.start && layoutProto.run) {\n      layoutProto.start = function () {\n        this.run();\n        return this;\n      };\n    }\n    var regStop = registrant.prototype.stop;\n    layoutProto.stop = function () {\n      var opts = this.options;\n      if (opts && opts.animate) {\n        var anis = this.animations;\n        if (anis) {\n          for (var _i = 0; _i < anis.length; _i++) {\n            anis[_i].stop();\n          }\n        }\n      }\n      if (regStop) {\n        regStop.call(this);\n      } else {\n        this.emit('layoutstop');\n      }\n      return this;\n    };\n    if (!layoutProto.destroy) {\n      layoutProto.destroy = function () {\n        return this;\n      };\n    }\n    layoutProto.cy = function () {\n      return this._private.cy;\n    };\n    var getCy = function getCy(layout) {\n      return layout._private.cy;\n    };\n    var emitterOpts = {\n      addEventFields: function addEventFields(layout, evt) {\n        evt.layout = layout;\n        evt.cy = getCy(layout);\n        evt.target = layout;\n      },\n      bubble: function bubble() {\n        return true;\n      },\n      parent: function parent(layout) {\n        return getCy(layout);\n      }\n    };\n    extend(layoutProto, {\n      createEmitter: function createEmitter() {\n        this._private.emitter = new Emitter(emitterOpts, this);\n        return this;\n      },\n      emitter: function emitter() {\n        return this._private.emitter;\n      },\n      on: function on(evt, cb) {\n        this.emitter().on(evt, cb);\n        return this;\n      },\n      one: function one(evt, cb) {\n        this.emitter().one(evt, cb);\n        return this;\n      },\n      once: function once(evt, cb) {\n        this.emitter().one(evt, cb);\n        return this;\n      },\n      removeListener: function removeListener(evt, cb) {\n        this.emitter().removeListener(evt, cb);\n        return this;\n      },\n      removeAllListeners: function removeAllListeners() {\n        this.emitter().removeAllListeners();\n        return this;\n      },\n      emit: function emit(evt, params) {\n        this.emitter().emit(evt, params);\n        return this;\n      }\n    });\n    define.eventAliasesOn(layoutProto);\n    ext = Layout; // replace with our wrapped layout\n  } else if (type === 'renderer' && name !== 'null' && name !== 'base') {\n    // user registered renderers inherit from base\n\n    var BaseRenderer = getExtension('renderer', 'base');\n    var bProto = BaseRenderer.prototype;\n    var RegistrantRenderer = registrant;\n    var rProto = registrant.prototype;\n    var Renderer = function Renderer() {\n      BaseRenderer.apply(this, arguments);\n      RegistrantRenderer.apply(this, arguments);\n    };\n    var proto = Renderer.prototype;\n    for (var pName in bProto) {\n      var pVal = bProto[pName];\n      var existsInR = rProto[pName] != null;\n      if (existsInR) {\n        return overrideErr(pName);\n      }\n      proto[pName] = pVal; // take impl from base\n    }\n\n    for (var _pName in rProto) {\n      proto[_pName] = rProto[_pName]; // take impl from registrant\n    }\n\n    bProto.clientFunctions.forEach(function (name) {\n      proto[name] = proto[name] || function () {\n        error('Renderer does not implement `renderer.' + name + '()` on its prototype');\n      };\n    });\n    ext = Renderer;\n  } else if (type === '__proto__' || type === 'constructor' || type === 'prototype') {\n    // to avoid potential prototype pollution\n    return error(type + ' is an illegal type to be registered, possibly lead to prototype pollutions');\n  }\n  return setMap({\n    map: extensions,\n    keys: [type, name],\n    value: ext\n  });\n}\nfunction getExtension(type, name) {\n  return getMap({\n    map: extensions,\n    keys: [type, name]\n  });\n}\nfunction setModule(type, name, moduleType, moduleName, registrant) {\n  return setMap({\n    map: modules,\n    keys: [type, name, moduleType, moduleName],\n    value: registrant\n  });\n}\nfunction getModule(type, name, moduleType, moduleName) {\n  return getMap({\n    map: modules,\n    keys: [type, name, moduleType, moduleName]\n  });\n}\nvar extension = function extension() {\n  // e.g. extension('renderer', 'svg')\n  if (arguments.length === 2) {\n    return getExtension.apply(null, arguments);\n  }\n\n  // e.g. extension('renderer', 'svg', { ... })\n  else if (arguments.length === 3) {\n    return setExtension.apply(null, arguments);\n  }\n\n  // e.g. extension('renderer', 'svg', 'nodeShape', 'ellipse')\n  else if (arguments.length === 4) {\n    return getModule.apply(null, arguments);\n  }\n\n  // e.g. extension('renderer', 'svg', 'nodeShape', 'ellipse', { ... })\n  else if (arguments.length === 5) {\n    return setModule.apply(null, arguments);\n  } else {\n    error('Invalid extension access syntax');\n  }\n};\n\n// allows a core instance to access extensions internally\nCore.prototype.extension = extension;\n\n// included extensions\nincExts.forEach(function (group) {\n  group.extensions.forEach(function (ext) {\n    setExtension(group.type, ext.name, ext.impl);\n  });\n});\n\n// a dummy stylesheet object that doesn't need a reference to the core\n// (useful for init)\nvar Stylesheet = function Stylesheet() {\n  if (!(this instanceof Stylesheet)) {\n    return new Stylesheet();\n  }\n  this.length = 0;\n};\nvar sheetfn = Stylesheet.prototype;\nsheetfn.instanceString = function () {\n  return 'stylesheet';\n};\n\n// just store the selector to be parsed later\nsheetfn.selector = function (selector) {\n  var i = this.length++;\n  this[i] = {\n    selector: selector,\n    properties: []\n  };\n  return this; // chaining\n};\n\n// just store the property to be parsed later\nsheetfn.css = function (name, value) {\n  var i = this.length - 1;\n  if (string(name)) {\n    this[i].properties.push({\n      name: name,\n      value: value\n    });\n  } else if (plainObject(name)) {\n    var map = name;\n    var propNames = Object.keys(map);\n    for (var j = 0; j < propNames.length; j++) {\n      var key = propNames[j];\n      var mapVal = map[key];\n      if (mapVal == null) {\n        continue;\n      }\n      var prop = Style.properties[key] || Style.properties[dash2camel(key)];\n      if (prop == null) {\n        continue;\n      }\n      var _name = prop.name;\n      var _value = mapVal;\n      this[i].properties.push({\n        name: _name,\n        value: _value\n      });\n    }\n  }\n  return this; // chaining\n};\n\nsheetfn.style = sheetfn.css;\n\n// generate a real style object from the dummy stylesheet\nsheetfn.generateStyle = function (cy) {\n  var style = new Style(cy);\n  return this.appendToStyle(style);\n};\n\n// append a dummy stylesheet object on a real style object\nsheetfn.appendToStyle = function (style) {\n  for (var i = 0; i < this.length; i++) {\n    var context = this[i];\n    var selector = context.selector;\n    var props = context.properties;\n    style.selector(selector); // apply selector\n\n    for (var j = 0; j < props.length; j++) {\n      var prop = props[j];\n      style.css(prop.name, prop.value); // apply property\n    }\n  }\n\n  return style;\n};\n\nvar version = \"3.30.3\";\n\nvar cytoscape = function cytoscape(options) {\n  // if no options specified, use default\n  if (options === undefined) {\n    options = {};\n  }\n\n  // create instance\n  if (plainObject(options)) {\n    return new Core(options);\n  }\n\n  // allow for registration of extensions\n  else if (string(options)) {\n    return extension.apply(extension, arguments);\n  }\n};\n\n// e.g. cytoscape.use( require('cytoscape-foo'), bar )\ncytoscape.use = function (ext) {\n  var args = Array.prototype.slice.call(arguments, 1); // args to pass to ext\n\n  args.unshift(cytoscape); // cytoscape is first arg to ext\n\n  ext.apply(null, args);\n  return this;\n};\ncytoscape.warnings = function (bool) {\n  return warnings(bool);\n};\n\n// replaced by build system\ncytoscape.version = version;\n\n// expose public apis (mostly for extensions)\ncytoscape.stylesheet = cytoscape.Stylesheet = Stylesheet;\n\nexport { cytoscape as default };\n"]}