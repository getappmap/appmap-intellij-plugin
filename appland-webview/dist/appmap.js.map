{"version":3,"sources":["../appmap.js"],"names":[],"mappings":";;;;;;;;AAAA,iBAAA,EAAA,CAAA;AAOA,SAAS,YAAe,GAAA;AACtB,EAAM,MAAA,QAAA,GAAW,IAAI,gBAAA,CAAiB,oBAAM,CAAA,CAAA;AAQ5C,EAAS,SAAA,OAAA,CAAQ,YAAY,aAAe,EAAA;AAC1C,IAAA,IAAI,MAAM,IAAI,mBAAA;AAAA,MACV;AAAA,QACE,EAAI,EAAA,MAAA;AAAA,QACJ,MAAA,EAAQ,CAAC,CAAA,KAAM,CAAE,CAAA,EAAA,EAAkB,EAAC,GAAK,EAAA,IAAA,EAAM,KAAO,EAAA,UAAA,EAAW,CAAA;AAAA,QACjE,OAAU,GAAA;AAER,UAAA,oBAAA,CAAO,WAAY,CAAA,EAAC,OAAS,EAAA,gBAAA,EAAiB,CAAA,CAAA;AAAA,SAChD;AAAA,QACA,OAAS,EAAA;AAAA,UACP,MAAM,WAAW,UAAY,EAAA;AAC3B,YAAI,IAAA;AACF,cAAK,IAAA,CAAA,KAAA,CAAM,EAAG,CAAA,QAAA,CAAS,UAAU,CAAA,CAAA;AAAA,qBAC1B,CAAG,EAAA;AACV,cAAQ,OAAA,CAAA,KAAA,CAAM,sBAAsB,CAAC,CAAA,CAAA;AAAA,aACvC;AAAA,WACF;AAAA,UACA,MAAM,SAAS,UAAY,EAAA;AACzB,YAAI,IAAA;AACF,cAAK,IAAA,CAAA,KAAA,CAAM,EAAG,CAAA,QAAA,CAAS,UAAU,CAAA,CAAA;AAAA,qBAC1B,CAAG,EAAA;AACV,cAAQ,OAAA,CAAA,KAAA,CAAM,uBAA0B,GAAA,UAAA,EAAY,CAAC,CAAA,CAAA;AAAA,aACvD;AAAA,WACF;AAAA,UACA,gBAAmB,GAAA;AACjB,YAAK,IAAA,CAAA,KAAA,CAAM,GAAG,gBAAiB,EAAA,CAAA;AAAA,WACjC;AAAA,UACA,mBAAmB,OAAS,EAAA;AAC1B,YAAK,IAAA,CAAA,KAAA,CAAM,EAAG,CAAA,aAAA,CAAc,OAAO,CAAA,CAAA;AAAA,WACrC;AAAA,SACF;AAAA,OACF;AAAA,KACJ,CAAA;AAEA,IAAqB,oBAAA,CAAA,GAAA,EAAK,sBAAQ,QAAQ,CAAA,CAAA;AAE1C,IAAI,GAAA,CAAA,GAAA,CAAI,qBAAuB,EAAA,CAAA,QAAA,KAAY,oBAAO,CAAA,WAAA,CAAY,EAAC,OAAA,EAAS,qBAAuB,EAAA,SAAA,EAAW,QAAQ,EAAC,CAAC,CAAA,CAAA;AAEpH,IAAA,IAAI,aAAe,EAAA;AAEjB,MAAA,UAAA,CAAW,MAAM;AACf,QAAA,GAAA,CAAI,WAAW,aAAa,CAAA,CAAA;AAAA,SAC3B,CAAC,CAAA,CAAA;AAAA,KACN;AAAA,GACF;AAGA,EAAA,QAAA,CAAS,GAAG,MAAQ,EAAA,CAAC,EAAC,IAAM,EAAA,QAAA,EAAU,OAAW,KAAA;AAC/C,IAAQ,OAAA,CAAA,KAAA,IAAS,EAAC,EAAG,QAAQ,CAAA,CAAA;AAAA,GAC9B,CAAA,CAAA;AAGD,EAAA,oBAAA,CAAO,WAAY,CAAA,EAAC,OAAS,EAAA,OAAA,EAAQ,CAAA,CAAA;AACvC,CAAA;AAEA,mBAAA,CAAI,IAAI,EAAM,CAAA,CAAA;AACd,YAAa,EAAA","file":"appmap.js","sourcesContent":["import Vue from 'vue';\nimport { default as plugin, VVsCodeExtension } from '@appland/components'; // eslint-disable-line import/no-named-default\nimport MessagePublisher from 'messagePublisher';\nimport vscode from 'vsCodeBridge';\nimport handleAppMapMessages from \"handleAppMapMessages\";\nimport '@appland/diagrams/dist/style.css';\n\nfunction mountWebview() {\n  const messages = new MessagePublisher(vscode);\n\n  /**\n   * Mount the Vue application with the properties passed to this function.\n   * Loads AppMap content if it was passed to this function.\n   * @param properties Initial properties for the Vue component\n   * @param appMapContent JSON   content of the AppMap file\n   */\n  function doMount(properties, appMapContent) {\n    let app = new Vue(\n        {\n          el: '#app',\n          render: (h) => h(VVsCodeExtension, {ref: 'ui', props: properties}),\n          mounted() {\n            // tell the Java host to apply the initial state\n            vscode.postMessage({command: 'webviewMounted'});\n          },\n          methods: {\n            async loadAppMap(appmapData) {\n              try {\n                this.$refs.ui.loadData(appmapData);\n              } catch (e) {\n                console.error(\"error parsing JSON\", e);\n              }\n            },\n            async setState(jsonString) {\n              try {\n                this.$refs.ui.setState(jsonString);\n              } catch (e) {\n                console.error(\"error setting state: \" + jsonString, e);\n              }\n            },\n            showInstructions() {\n              this.$refs.ui.showInstructions();\n            },\n            updateSavedFilters(filters) {\n              this.$refs.ui.updateFilters(filters);\n            },\n          }\n        }\n    )\n\n    handleAppMapMessages(app, vscode, messages);\n\n    app.$on('ask-navie-about-map', filePath => vscode.postMessage({command: 'ask-navie-about-map', mapFsPath: filePath}))\n\n    if (appMapContent) {\n      // queue loadAppMap to avoid applying it immediately (which would turn off the progress spinner)\n      setTimeout(() => {\n        app.loadAppMap(appMapContent);\n      }, 0);\n    }\n  }\n\n  // called by the Java host after it received \"ready\", which is sent below\n  messages.on('init', ({data: initData, props}) => {\n    doMount(props || {}, initData)\n  })\n\n  // \"ready\" activates the Java host, which then sends the init message\n  vscode.postMessage({command: 'ready'});\n}\n\nVue.use(plugin);\nmountWebview();\n"]}