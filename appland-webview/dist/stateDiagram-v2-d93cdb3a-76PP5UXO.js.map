{"version":3,"sources":["../node_modules/mermaid/dist/stateDiagram-v2-d93cdb3a.js"],"names":[],"mappings":"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","file":"stateDiagram-v2-d93cdb3a-76PP5UXO.js","sourcesContent":["import { D as DEFAULT_STATE_TYPE, a as DIVIDER_TYPE, S as STMT_RELATION, b as STMT_STATE, c as DEFAULT_NESTED_DOC_DIR, p as parser, d as db, s as styles } from \"./styles-6aaf32cf.js\";\nimport * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\nimport { select } from \"d3\";\nimport { l as log, c as getConfig, u as utils, i as configureSvgSize, e as common } from \"./mermaid-b5860b54.js\";\nimport { r as render } from \"./index-3862675e.js\";\nimport \"ts-dedent\";\nimport \"dayjs\";\nimport \"@braintree/sanitize-url\";\nimport \"dompurify\";\nimport \"khroma\";\nimport \"lodash-es/memoize.js\";\nimport \"lodash-es/merge.js\";\nimport \"stylis\";\nimport \"lodash-es/isEmpty.js\";\nimport \"dagre-d3-es/src/dagre/index.js\";\nimport \"dagre-d3-es/src/graphlib/json.js\";\nimport \"./edges-e0da2a9e.js\";\nimport \"./createText-2e5e7dd3.js\";\nimport \"mdast-util-from-markdown\";\nconst SHAPE_STATE = \"rect\";\nconst SHAPE_STATE_WITH_DESC = \"rectWithTitle\";\nconst SHAPE_START = \"start\";\nconst SHAPE_END = \"end\";\nconst SHAPE_DIVIDER = \"divider\";\nconst SHAPE_GROUP = \"roundedWithTitle\";\nconst SHAPE_NOTE = \"note\";\nconst SHAPE_NOTEGROUP = \"noteGroup\";\nconst CSS_DIAGRAM = \"statediagram\";\nconst CSS_STATE = \"state\";\nconst CSS_DIAGRAM_STATE = `${CSS_DIAGRAM}-${CSS_STATE}`;\nconst CSS_EDGE = \"transition\";\nconst CSS_NOTE = \"note\";\nconst CSS_NOTE_EDGE = \"note-edge\";\nconst CSS_EDGE_NOTE_EDGE = `${CSS_EDGE} ${CSS_NOTE_EDGE}`;\nconst CSS_DIAGRAM_NOTE = `${CSS_DIAGRAM}-${CSS_NOTE}`;\nconst CSS_CLUSTER = \"cluster\";\nconst CSS_DIAGRAM_CLUSTER = `${CSS_DIAGRAM}-${CSS_CLUSTER}`;\nconst CSS_CLUSTER_ALT = \"cluster-alt\";\nconst CSS_DIAGRAM_CLUSTER_ALT = `${CSS_DIAGRAM}-${CSS_CLUSTER_ALT}`;\nconst PARENT = \"parent\";\nconst NOTE = \"note\";\nconst DOMID_STATE = \"state\";\nconst DOMID_TYPE_SPACER = \"----\";\nconst NOTE_ID = `${DOMID_TYPE_SPACER}${NOTE}`;\nconst PARENT_ID = `${DOMID_TYPE_SPACER}${PARENT}`;\nconst G_EDGE_STYLE = \"fill:none\";\nconst G_EDGE_ARROWHEADSTYLE = \"fill: #333\";\nconst G_EDGE_LABELPOS = \"c\";\nconst G_EDGE_LABELTYPE = \"text\";\nconst G_EDGE_THICKNESS = \"normal\";\nlet nodeDb = {};\nlet graphItemCount = 0;\nconst setConf = function(cnf) {\n  const keys = Object.keys(cnf);\n  for (const key of keys) {\n    cnf[key];\n  }\n};\nconst getClasses = function(text, diagramObj) {\n  diagramObj.db.extract(diagramObj.db.getRootDocV2());\n  return diagramObj.db.getClasses();\n};\nfunction getClassesFromDbInfo(dbInfoItem) {\n  if (dbInfoItem === void 0 || dbInfoItem === null) {\n    return \"\";\n  } else {\n    if (dbInfoItem.classes) {\n      return dbInfoItem.classes.join(\" \");\n    } else {\n      return \"\";\n    }\n  }\n}\nfunction stateDomId(itemId = \"\", counter = 0, type = \"\", typeSpacer = DOMID_TYPE_SPACER) {\n  const typeStr = type !== null && type.length > 0 ? `${typeSpacer}${type}` : \"\";\n  return `${DOMID_STATE}-${itemId}${typeStr}-${counter}`;\n}\nconst setupNode = (g, parent, parsedItem, diagramStates, diagramDb, altFlag) => {\n  const itemId = parsedItem.id;\n  const classStr = getClassesFromDbInfo(diagramStates[itemId]);\n  if (itemId !== \"root\") {\n    let shape = SHAPE_STATE;\n    if (parsedItem.start === true) {\n      shape = SHAPE_START;\n    }\n    if (parsedItem.start === false) {\n      shape = SHAPE_END;\n    }\n    if (parsedItem.type !== DEFAULT_STATE_TYPE) {\n      shape = parsedItem.type;\n    }\n    if (!nodeDb[itemId]) {\n      nodeDb[itemId] = {\n        id: itemId,\n        shape,\n        description: common.sanitizeText(itemId, getConfig()),\n        classes: `${classStr} ${CSS_DIAGRAM_STATE}`\n      };\n    }\n    const newNode = nodeDb[itemId];\n    if (parsedItem.description) {\n      if (Array.isArray(newNode.description)) {\n        newNode.shape = SHAPE_STATE_WITH_DESC;\n        newNode.description.push(parsedItem.description);\n      } else {\n        if (newNode.description.length > 0) {\n          newNode.shape = SHAPE_STATE_WITH_DESC;\n          if (newNode.description === itemId) {\n            newNode.description = [parsedItem.description];\n          } else {\n            newNode.description = [newNode.description, parsedItem.description];\n          }\n        } else {\n          newNode.shape = SHAPE_STATE;\n          newNode.description = parsedItem.description;\n        }\n      }\n      newNode.description = common.sanitizeTextOrArray(newNode.description, getConfig());\n    }\n    if (newNode.description.length === 1 && newNode.shape === SHAPE_STATE_WITH_DESC) {\n      newNode.shape = SHAPE_STATE;\n    }\n    if (!newNode.type && parsedItem.doc) {\n      log.info(\"Setting cluster for \", itemId, getDir(parsedItem));\n      newNode.type = \"group\";\n      newNode.dir = getDir(parsedItem);\n      newNode.shape = parsedItem.type === DIVIDER_TYPE ? SHAPE_DIVIDER : SHAPE_GROUP;\n      newNode.classes = newNode.classes + \" \" + CSS_DIAGRAM_CLUSTER + \" \" + (altFlag ? CSS_DIAGRAM_CLUSTER_ALT : \"\");\n    }\n    const nodeData = {\n      labelStyle: \"\",\n      shape: newNode.shape,\n      labelText: newNode.description,\n      // typeof newNode.description === 'object'\n      //   ? newNode.description[0]\n      //   : newNode.description,\n      classes: newNode.classes,\n      style: \"\",\n      //styles.style,\n      id: itemId,\n      dir: newNode.dir,\n      domId: stateDomId(itemId, graphItemCount),\n      type: newNode.type,\n      padding: 15\n      //getConfig().flowchart.padding\n    };\n    nodeData.centerLabel = true;\n    if (parsedItem.note) {\n      const noteData = {\n        labelStyle: \"\",\n        shape: SHAPE_NOTE,\n        labelText: parsedItem.note.text,\n        classes: CSS_DIAGRAM_NOTE,\n        // useHtmlLabels: false,\n        style: \"\",\n        // styles.style,\n        id: itemId + NOTE_ID + \"-\" + graphItemCount,\n        domId: stateDomId(itemId, graphItemCount, NOTE),\n        type: newNode.type,\n        padding: 15\n        //getConfig().flowchart.padding\n      };\n      const groupData = {\n        labelStyle: \"\",\n        shape: SHAPE_NOTEGROUP,\n        labelText: parsedItem.note.text,\n        classes: newNode.classes,\n        style: \"\",\n        // styles.style,\n        id: itemId + PARENT_ID,\n        domId: stateDomId(itemId, graphItemCount, PARENT),\n        type: \"group\",\n        padding: 0\n        //getConfig().flowchart.padding\n      };\n      graphItemCount++;\n      const parentNodeId = itemId + PARENT_ID;\n      g.setNode(parentNodeId, groupData);\n      g.setNode(noteData.id, noteData);\n      g.setNode(itemId, nodeData);\n      g.setParent(itemId, parentNodeId);\n      g.setParent(noteData.id, parentNodeId);\n      let from = itemId;\n      let to = noteData.id;\n      if (parsedItem.note.position === \"left of\") {\n        from = noteData.id;\n        to = itemId;\n      }\n      g.setEdge(from, to, {\n        arrowhead: \"none\",\n        arrowType: \"\",\n        style: G_EDGE_STYLE,\n        labelStyle: \"\",\n        classes: CSS_EDGE_NOTE_EDGE,\n        arrowheadStyle: G_EDGE_ARROWHEADSTYLE,\n        labelpos: G_EDGE_LABELPOS,\n        labelType: G_EDGE_LABELTYPE,\n        thickness: G_EDGE_THICKNESS\n      });\n    } else {\n      g.setNode(itemId, nodeData);\n    }\n  }\n  if (parent && parent.id !== \"root\") {\n    log.trace(\"Setting node \", itemId, \" to be child of its parent \", parent.id);\n    g.setParent(itemId, parent.id);\n  }\n  if (parsedItem.doc) {\n    log.trace(\"Adding nodes children \");\n    setupDoc(g, parsedItem, parsedItem.doc, diagramStates, diagramDb, !altFlag);\n  }\n};\nconst setupDoc = (g, parentParsedItem, doc, diagramStates, diagramDb, altFlag) => {\n  log.trace(\"items\", doc);\n  doc.forEach((item) => {\n    switch (item.stmt) {\n      case STMT_STATE:\n        setupNode(g, parentParsedItem, item, diagramStates, diagramDb, altFlag);\n        break;\n      case DEFAULT_STATE_TYPE:\n        setupNode(g, parentParsedItem, item, diagramStates, diagramDb, altFlag);\n        break;\n      case STMT_RELATION:\n        {\n          setupNode(g, parentParsedItem, item.state1, diagramStates, diagramDb, altFlag);\n          setupNode(g, parentParsedItem, item.state2, diagramStates, diagramDb, altFlag);\n          const edgeData = {\n            id: \"edge\" + graphItemCount,\n            arrowhead: \"normal\",\n            arrowTypeEnd: \"arrow_barb\",\n            style: G_EDGE_STYLE,\n            labelStyle: \"\",\n            label: common.sanitizeText(item.description, getConfig()),\n            arrowheadStyle: G_EDGE_ARROWHEADSTYLE,\n            labelpos: G_EDGE_LABELPOS,\n            labelType: G_EDGE_LABELTYPE,\n            thickness: G_EDGE_THICKNESS,\n            classes: CSS_EDGE\n          };\n          g.setEdge(item.state1.id, item.state2.id, edgeData, graphItemCount);\n          graphItemCount++;\n        }\n        break;\n    }\n  });\n};\nconst getDir = (parsedItem, defaultDir = DEFAULT_NESTED_DOC_DIR) => {\n  let dir = defaultDir;\n  if (parsedItem.doc) {\n    for (let i = 0; i < parsedItem.doc.length; i++) {\n      const parsedItemDoc = parsedItem.doc[i];\n      if (parsedItemDoc.stmt === \"dir\") {\n        dir = parsedItemDoc.value;\n      }\n    }\n  }\n  return dir;\n};\nconst draw = async function(text, id, _version, diag) {\n  log.info(\"Drawing state diagram (v2)\", id);\n  nodeDb = {};\n  diag.db.getDirection();\n  const { securityLevel, state: conf } = getConfig();\n  const nodeSpacing = conf.nodeSpacing || 50;\n  const rankSpacing = conf.rankSpacing || 50;\n  log.info(diag.db.getRootDocV2());\n  diag.db.extract(diag.db.getRootDocV2());\n  log.info(diag.db.getRootDocV2());\n  const diagramStates = diag.db.getStates();\n  const g = new graphlib.Graph({\n    multigraph: true,\n    compound: true\n  }).setGraph({\n    rankdir: getDir(diag.db.getRootDocV2()),\n    nodesep: nodeSpacing,\n    ranksep: rankSpacing,\n    marginx: 8,\n    marginy: 8\n  }).setDefaultEdgeLabel(function() {\n    return {};\n  });\n  setupNode(g, void 0, diag.db.getRootDocV2(), diagramStates, diag.db, true);\n  let sandboxElement;\n  if (securityLevel === \"sandbox\") {\n    sandboxElement = select(\"#i\" + id);\n  }\n  const root = securityLevel === \"sandbox\" ? select(sandboxElement.nodes()[0].contentDocument.body) : select(\"body\");\n  const svg = root.select(`[id=\"${id}\"]`);\n  const element = root.select(\"#\" + id + \" g\");\n  await render(element, g, [\"barb\"], CSS_DIAGRAM, id);\n  const padding = 8;\n  utils.insertTitle(svg, \"statediagramTitleText\", conf.titleTopMargin, diag.db.getDiagramTitle());\n  const bounds = svg.node().getBBox();\n  const width = bounds.width + padding * 2;\n  const height = bounds.height + padding * 2;\n  svg.attr(\"class\", CSS_DIAGRAM);\n  const svgBounds = svg.node().getBBox();\n  configureSvgSize(svg, height, width, conf.useMaxWidth);\n  const vBox = `${svgBounds.x - padding} ${svgBounds.y - padding} ${width} ${height}`;\n  log.debug(`viewBox ${vBox}`);\n  svg.attr(\"viewBox\", vBox);\n  const labels = document.querySelectorAll('[id=\"' + id + '\"] .edgeLabel .label');\n  for (const label of labels) {\n    const dim = label.getBBox();\n    const rect = document.createElementNS(\"http://www.w3.org/2000/svg\", SHAPE_STATE);\n    rect.setAttribute(\"rx\", 0);\n    rect.setAttribute(\"ry\", 0);\n    rect.setAttribute(\"width\", dim.width);\n    rect.setAttribute(\"height\", dim.height);\n    label.insertBefore(rect, label.firstChild);\n  }\n};\nconst renderer = {\n  setConf,\n  getClasses,\n  draw\n};\nconst diagram = {\n  parser,\n  db,\n  renderer,\n  styles,\n  init: (cnf) => {\n    if (!cnf.state) {\n      cnf.state = {};\n    }\n    cnf.state.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;\n    db.clear();\n  }\n};\nexport {\n  diagram\n};\n"]}