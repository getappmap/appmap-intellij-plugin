{"version":3,"sources":["../handleAppMapMessages.js"],"names":[],"mappings":";;;AAAA,iBAAA,EAAA,CAAA;AAIe,SAAR,oBAAA,CAAsC,GAAK,EAAA,MAAA,EAAQ,QAAU,EAAA;AAElE,EAAI,GAAA,CAAA,GAAA,CAAI,YAAc,EAAA,CAAC,QAAa,KAAA,MAAA,CAAO,WAAY,CAAA,EAAC,OAAS,EAAA,YAAA,EAAc,QAAQ,EAAC,CAAC,CAAA,CAAA;AACzF,EAAI,GAAA,CAAA,GAAA,CAAI,kBAAkB,MAAM,MAAA,CAAO,YAAY,EAAC,OAAA,EAAS,gBAAgB,EAAC,CAAC,CAAA,CAAA;AAC/E,EAAI,GAAA,CAAA,GAAA,CAAI,gBAAgB,MAAM,MAAA,CAAO,YAAY,EAAC,OAAA,EAAS,cAAc,EAAC,CAAC,CAAA,CAAA;AAC3E,EAAI,GAAA,CAAA,GAAA,CAAI,wBAAwB,MAAM,MAAA,CAAO,YAAY,EAAC,OAAA,EAAS,sBAAsB,EAAC,CAAC,CAAA,CAAA;AAC3F,EAAI,GAAA,CAAA,GAAA,CAAI,qBAAqB,MAAM,MAAA,CAAO,YAAY,EAAC,OAAA,EAAS,mBAAmB,EAAC,CAAC,CAAA,CAAA;AACrF,EAAI,GAAA,CAAA,GAAA,CAAI,UAAY,EAAA,CAAC,KAAU,KAAA,MAAA,CAAO,WAAY,CAAA,EAAC,OAAS,EAAA,UAAA,EAAY,KAAK,EAAC,CAAC,CAAA,CAAA;AAC/E,EAAI,GAAA,CAAA,GAAA,CAAI,uBAAyB,EAAA,CAAC,QAAa,KAAA,MAAA,CAAO,WAAY,CAAA,EAAC,OAAS,EAAA,uBAAA,EAAyB,QAAQ,EAAC,CAAC,CAAA,CAAA;AAC/G,EAAI,GAAA,CAAA,GAAA,CAAI,gBAAgB,MAAM,MAAA,CAAO,YAAY,EAAC,OAAA,EAAS,cAAc,EAAC,CAAC,CAAA,CAAA;AAC3E,EAAI,GAAA,CAAA,GAAA,CAAI,WAAa,EAAA,CAAC,SAAc,KAAA,MAAA,CAAO,WAAY,CAAA,EAAC,OAAS,EAAA,WAAA,EAAa,SAAS,EAAC,CAAC,CAAA,CAAA;AACzF,EAAI,GAAA,CAAA,GAAA,CAAI,YAAc,EAAA,CAAC,UAAe,KAAA,MAAA,CAAO,WAAY,CAAA,EAAC,OAAS,EAAA,YAAA,EAAc,UAAU,EAAC,CAAC,CAAA,CAAA;AAC7F,EAAI,GAAA,CAAA,GAAA,CAAI,0BAA4B,EAAA,CAAC,QAAa,KAAA;AAChD,IAAA,GAAA,CAAI,MAAM,2BAA6B,EAAA,EAAC,QAAU,EAAA,WAAA,EAAa,UAAS,CAAA,CAAA;AAAA,GACzE,CAAA,CAAA;AACD,EAAI,GAAA,CAAA,GAAA,CAAI,YAAc,EAAA,CAAC,MAAW,KAAA,MAAA,CAAO,WAAY,CAAA,EAAC,OAAS,EAAA,YAAA,EAAc,MAAM,EAAC,CAAC,CAAA,CAAA;AACrF,EAAI,GAAA,CAAA,GAAA,CAAI,cAAgB,EAAA,CAAC,MAAW,KAAA,MAAA,CAAO,WAAY,CAAA,EAAC,OAAS,EAAA,cAAA,EAAgB,MAAM,EAAC,CAAC,CAAA,CAAA;AACzF,EAAI,GAAA,CAAA,GAAA,CAAI,eAAiB,EAAA,CAAC,MAAW,KAAA,MAAA,CAAO,WAAY,CAAA,EAAC,OAAS,EAAA,eAAA,EAAiB,MAAM,EAAC,CAAC,CAAA,CAAA;AAG3F,EAAS,QAAA,CAAA,EAAA,CAAG,cAAc,CAAC,EAAC,MAAU,KAAA,GAAA,CAAI,UAAW,CAAA,IAAI,CAAC,CAAA,CAAA;AAC1D,EAAS,QAAA,CAAA,EAAA,CAAG,kBAAkB,CAAC,IAAA,KAAS,IAAI,QAAS,CAAA,IAAA,CAAK,KAAK,CAAC,CAAA,CAAA;AAChE,EAAA,QAAA,CAAS,EAAG,CAAA,wBAAA,EAA0B,MAAM,GAAA,CAAI,kBAAkB,CAAA,CAAA;AAClE,EAAS,QAAA,CAAA,EAAA,CAAG,sBAAsB,CAAC,EAAC,MAAU,KAAA,GAAA,CAAI,kBAAmB,CAAA,IAAI,CAAC,CAAA,CAAA;AAC5E","file":"chunk-IFYTZTYP.js","sourcesContent":["/**\n * Installs common message handling for the messages supported by the AppMap view.\n * This function must only handle messages, which are valid for all webviews capable of rendering AppMaps.\n */\nexport default function handleAppMapMessages(app, vscode, messages) {\n  // messages emitted by the webview\n  app.$on('viewSource', (location) => vscode.postMessage({command: 'viewSource', location}))\n  app.$on('clearSelection', () => vscode.postMessage({command: 'clearSelection'}))\n  app.$on('uploadAppmap', () => vscode.postMessage({command: 'uploadAppMap'}))\n  app.$on('sidebarSearchFocused', () => vscode.postMessage({command: 'sidebarSearchFocused'}))\n  app.$on('clickFilterButton', () => vscode.postMessage({command: 'clickFilterButton'}))\n  app.$on('clickTab', (tabId) => vscode.postMessage({command: 'clickTab', tabId}))\n  app.$on('selectObjectInSidebar', (category) => vscode.postMessage({command: 'selectObjectInSidebar', category}))\n  app.$on('resetDiagram', () => vscode.postMessage({command: 'resetDiagram'}))\n  app.$on('exportSVG', (svgString) => vscode.postMessage({command: 'exportSVG', svgString}))\n  app.$on('exportJSON', (appmapData) => vscode.postMessage({command: 'exportJSON', appmapData}))\n  app.$on('request-resolve-location', (location) => {\n    app.$emit('response-resolve-location', {location, externalUrl: location});\n  });\n  app.$on('saveFilter', (filter) => vscode.postMessage({command: 'saveFilter', filter}))\n  app.$on('deleteFilter', (filter) => vscode.postMessage({command: 'deleteFilter', filter}))\n  app.$on('defaultFilter', (filter) => vscode.postMessage({command: 'defaultFilter', filter}))\n\n  // messages emitted by the Java host\n  messages.on('loadAppMap', ({data}) => app.loadAppMap(data))\n  messages.on('setAppMapState', (json) => app.setState(json.state))\n  messages.on('showAppMapInstructions', () => app.showInstructions())\n  messages.on('updateSavedFilters', ({data}) => app.updateSavedFilters(data))\n}\n"]}