{"version":3,"sources":["../node_modules/base64-js/index.js","../node_modules/ieee754/index.js","../node_modules/isarray/index.js","../node_modules/node-libs-browser/node_modules/buffer/index.js","../node_modules/process/browser.js","../polyfillShim.js"],"names":["len","i","len2","Buffer","byteLength","process","e","Object","_global"],"mappings":"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","file":"chunk-NBJJPFWB.js","sourcesContent":["'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/* eslint-disable */\nvar _globalThis = (function (Object) {\n  function get() {\n    var _global = this || self;\n\n    delete Object.prototype.__magic__;\n    return _global;\n  }\n\n  if (typeof globalThis === \"object\") {\n    return globalThis;\n  }\n\n  if (this) {\n    return get();\n  } else {\n    Object.defineProperty(Object.prototype, \"__magic__\", {\n      configurable: true,\n      get: get,\n    });\n    var _global = __magic__;\n    return _global;\n  }\n})(Object);\n\nimport { Buffer } from \"buffer\";\nimport process from \"process\";\nvar _global = _globalThis;\nexport { Buffer, process, _global as global };\n"]}