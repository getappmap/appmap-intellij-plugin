{"version":3,"sources":["../node_modules/mermaid/dist/flowDiagram-66a62f08.js","../node_modules/dagre-d3-es/src/index.js","../node_modules/dagre-d3-es/src/dagre-js/render.js","../node_modules/dagre-d3-es/src/dagre-js/arrows.js","../node_modules/dagre-d3-es/src/dagre-js/create-clusters.js","../node_modules/dagre-d3-es/src/dagre-js/label/add-label.js","../node_modules/dagre-d3-es/src/dagre-js/label/add-svg-label.js","../node_modules/dagre-d3-es/src/dagre-js/label/add-text-label.js","../node_modules/dagre-d3-es/src/dagre-js/create-edge-labels.js","../node_modules/dagre-d3-es/src/dagre-js/create-edge-paths.js","../node_modules/dagre-d3-es/src/dagre-js/intersect/intersect-node.js","../node_modules/dagre-d3-es/src/dagre-js/create-nodes.js","../node_modules/dagre-d3-es/src/dagre-js/position-clusters.js","../node_modules/dagre-d3-es/src/dagre-js/position-edge-labels.js","../node_modules/dagre-d3-es/src/dagre-js/position-nodes.js","../node_modules/dagre-d3-es/src/dagre-js/shapes.js","../node_modules/dagre-d3-es/src/dagre-js/intersect/intersect-circle.js","../node_modules/dagre-d3-es/src/dagre-js/intersect/intersect-ellipse.js","../node_modules/dagre-d3-es/src/dagre-js/intersect/intersect-polygon.js","../node_modules/dagre-d3-es/src/dagre-js/intersect/intersect-line.js","../node_modules/dagre-d3-es/src/dagre-js/intersect/intersect-rect.js","../node_modules/dagre-d3-es/src/dagre-js/intersect/index.js"],"names":["location","arrows","e","shapes","svg","normal","rect"],"mappings":";;;;;;;;;;;AAAA,iBAAA,EAAA,CAAA;;;ACAA,iBAAA,EAAA,CAAA;;;ACAA,iBAAA,EAAA,CAAA;;;ACAA,iBAAA,EAAA,CAAA;AAIA,IAAI,MAAS,GAAA;AAAA,EACX,MAAA;AAAA,EACA,GAAA;AAAA,EACA,UAAA;AACF,CAAA,CAAA;AAEA,SAAS,UAAU,KAAO,EAAA;AACxB,EAAS,MAAA,GAAA,KAAA,CAAA;AACX,CAAA;AAEA,SAAS,MAAO,CAAA,MAAA,EAAQ,EAAI,EAAA,IAAA,EAAM,IAAM,EAAA;AACtC,EAAA,IAAI,MAAS,GAAA,MAAA,CACV,MAAO,CAAA,QAAQ,EACf,IAAK,CAAA,IAAA,EAAM,EAAE,CAAA,CACb,KAAK,SAAW,EAAA,WAAW,CAC3B,CAAA,IAAA,CAAK,QAAQ,CAAC,CAAA,CACd,IAAK,CAAA,MAAA,EAAQ,CAAC,CACd,CAAA,IAAA,CAAK,aAAe,EAAA,aAAa,EACjC,IAAK,CAAA,aAAA,EAAe,CAAC,CAAA,CACrB,KAAK,cAAgB,EAAA,CAAC,CACtB,CAAA,IAAA,CAAK,UAAU,MAAM,CAAA,CAAA;AAExB,EAAA,IAAI,IAAO,GAAA,MAAA,CACR,MAAO,CAAA,MAAM,EACb,IAAK,CAAA,GAAA,EAAK,uBAAuB,CAAA,CACjC,MAAM,cAAgB,EAAA,CAAC,CACvB,CAAA,KAAA,CAAM,oBAAoB,KAAK,CAAA,CAAA;AAClC,EAAK,UAAW,CAAA,IAAA,EAAM,IAAK,CAAA,IAAA,GAAO,OAAO,CAAC,CAAA,CAAA;AAC1C,EAAI,IAAA,IAAA,CAAK,IAAO,GAAA,OAAO,CAAG,EAAA;AACxB,IAAA,IAAA,CAAK,IAAK,CAAA,OAAA,EAAS,IAAK,CAAA,IAAA,GAAO,OAAO,CAAC,CAAA,CAAA;AAAA,GACzC;AACF,CAAA;AAEA,SAAS,GAAI,CAAA,MAAA,EAAQ,EAAI,EAAA,IAAA,EAAM,IAAM,EAAA;AACnC,EAAA,IAAI,MAAS,GAAA,MAAA,CACV,MAAO,CAAA,QAAQ,EACf,IAAK,CAAA,IAAA,EAAM,EAAE,CAAA,CACb,KAAK,SAAW,EAAA,WAAW,CAC3B,CAAA,IAAA,CAAK,QAAQ,CAAC,CAAA,CACd,IAAK,CAAA,MAAA,EAAQ,CAAC,CACd,CAAA,IAAA,CAAK,aAAe,EAAA,aAAa,EACjC,IAAK,CAAA,aAAA,EAAe,CAAC,CAAA,CACrB,KAAK,cAAgB,EAAA,CAAC,CACtB,CAAA,IAAA,CAAK,UAAU,MAAM,CAAA,CAAA;AAExB,EAAA,IAAI,IAAO,GAAA,MAAA,CACR,MAAO,CAAA,MAAM,EACb,IAAK,CAAA,GAAA,EAAK,6BAA6B,CAAA,CACvC,MAAM,cAAgB,EAAA,CAAC,CACvB,CAAA,KAAA,CAAM,oBAAoB,KAAK,CAAA,CAAA;AAClC,EAAK,UAAW,CAAA,IAAA,EAAM,IAAK,CAAA,IAAA,GAAO,OAAO,CAAC,CAAA,CAAA;AAC1C,EAAI,IAAA,IAAA,CAAK,IAAO,GAAA,OAAO,CAAG,EAAA;AACxB,IAAA,IAAA,CAAK,IAAK,CAAA,OAAA,EAAS,IAAK,CAAA,IAAA,GAAO,OAAO,CAAC,CAAA,CAAA;AAAA,GACzC;AACF,CAAA;AAEA,SAAS,UAAW,CAAA,MAAA,EAAQ,EAAI,EAAA,IAAA,EAAM,IAAM,EAAA;AAC1C,EAAA,IAAI,MAAS,GAAA,MAAA,CACV,MAAO,CAAA,QAAQ,EACf,IAAK,CAAA,IAAA,EAAM,EAAE,CAAA,CACb,KAAK,SAAW,EAAA,WAAW,CAC3B,CAAA,IAAA,CAAK,QAAQ,CAAC,CAAA,CACd,IAAK,CAAA,MAAA,EAAQ,CAAC,CACd,CAAA,IAAA,CAAK,aAAe,EAAA,aAAa,EACjC,IAAK,CAAA,aAAA,EAAe,CAAC,CAAA,CACrB,KAAK,cAAgB,EAAA,CAAC,CACtB,CAAA,IAAA,CAAK,UAAU,MAAM,CAAA,CAAA;AAExB,EAAA,IAAI,IAAO,GAAA,MAAA,CACR,MAAO,CAAA,MAAM,EACb,IAAK,CAAA,GAAA,EAAK,cAAc,CAAA,CACxB,MAAM,cAAgB,EAAA,CAAC,CACvB,CAAA,KAAA,CAAM,oBAAoB,KAAK,CAAA,CAAA;AAClC,EAAK,UAAW,CAAA,IAAA,EAAM,IAAK,CAAA,IAAA,GAAO,OAAO,CAAC,CAAA,CAAA;AAC1C,EAAI,IAAA,IAAA,CAAK,IAAO,GAAA,OAAO,CAAG,EAAA;AACxB,IAAA,IAAA,CAAK,IAAK,CAAA,OAAA,EAAS,IAAK,CAAA,IAAA,GAAO,OAAO,CAAC,CAAA,CAAA;AAAA,GACzC;AACF,CAAA;;;ACjFA,iBAAA,EAAA,CAAA;;;ACAA,iBAAA,EAAA,CAAA;;;ACAA,iBAAA,EAAA,CAAA;AAIA,SAAS,WAAA,CAAY,MAAM,IAAM,EAAA;AAC/B,EAAA,IAAI,OAAU,GAAA,IAAA,CAAA;AAEd,EAAA,OAAA,CAAQ,IAAK,EAAA,CAAE,WAAY,CAAA,IAAA,CAAK,KAAK,CAAA,CAAA;AAErC,EAAK,UAAA,CAAW,OAAS,EAAA,IAAA,CAAK,UAAU,CAAA,CAAA;AAExC,EAAO,OAAA,OAAA,CAAA;AACT,CAAA;;;ACZA,iBAAA,EAAA,CAAA;AAOA,SAAS,YAAA,CAAa,MAAM,IAAM,EAAA;AAChC,EAAI,IAAA,OAAA,GAAU,IAAK,CAAA,MAAA,CAAO,MAAM,CAAA,CAAA;AAEhC,EAAA,IAAI,QAAQ,sBAAuB,CAAA,IAAA,CAAK,KAAK,CAAA,CAAE,MAAM,IAAI,CAAA,CAAA;AACzD,EAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,KAAA,CAAM,QAAQ,CAAK,EAAA,EAAA;AACrC,IAAA,OAAA,CACG,OAAO,OAAO,CAAA,CACd,KAAK,WAAa,EAAA,UAAU,EAC5B,IAAK,CAAA,IAAA,EAAM,KAAK,CAAA,CAChB,KAAK,GAAK,EAAA,GAAG,EACb,IAAK,CAAA,KAAA,CAAM,CAAC,CAAC,CAAA,CAAA;AAAA,GAClB;AAEA,EAAK,UAAA,CAAW,OAAS,EAAA,IAAA,CAAK,UAAU,CAAA,CAAA;AAExC,EAAO,OAAA,OAAA,CAAA;AACT,CAAA;AAEA,SAAS,uBAAuB,IAAM,EAAA;AACpC,EAAA,IAAI,OAAU,GAAA,EAAA,CAAA;AACd,EAAA,IAAI,OAAU,GAAA,KAAA,CAAA;AACd,EAAI,IAAA,EAAA,CAAA;AACJ,EAAA,KAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,IAAK,CAAA,MAAA,EAAQ,EAAE,CAAG,EAAA;AACpC,IAAA,EAAA,GAAK,KAAK,CAAC,CAAA,CAAA;AACX,IAAA,IAAI,OAAS,EAAA;AACX,MAAA,QAAQ,EAAI;AAAA,QACV,KAAK,GAAA;AACH,UAAW,OAAA,IAAA,IAAA,CAAA;AACX,UAAA,MAAA;AAAA,QACF;AACE,UAAW,OAAA,IAAA,EAAA,CAAA;AAAA,OACf;AACA,MAAU,OAAA,GAAA,KAAA,CAAA;AAAA,KACZ,MAAA,IAAW,OAAO,IAAM,EAAA;AACtB,MAAU,OAAA,GAAA,IAAA,CAAA;AAAA,KACL,MAAA;AACL,MAAW,OAAA,IAAA,EAAA,CAAA;AAAA,KACb;AAAA,GACF;AACA,EAAO,OAAA,OAAA,CAAA;AACT,CAAA;;;AFzCA,SAAS,QAAA,CAAS,IAAM,EAAA,IAAA,EAAMA,SAAU,EAAA;AACtC,EAAA,IAAI,QAAQ,IAAK,CAAA,KAAA,CAAA;AACjB,EAAI,IAAA,QAAA,GAAW,IAAK,CAAA,MAAA,CAAO,GAAG,CAAA,CAAA;AAI9B,EAAI,IAAA,IAAA,CAAK,cAAc,KAAO,EAAA;AAC5B,IAAA,WAAA,CAAY,UAAU,IAAI,CAAA,CAAA;AAAA,aACjB,OAAO,KAAA,KAAU,QAAY,IAAA,IAAA,CAAK,cAAc,MAAQ,EAAA;AACjE,IAAA,YAAA,CAAa,UAAU,IAAI,CAAA,CAAA;AAAA,GACtB,MAAA;AACL,IAAA,YAAA,CAAa,UAAU,IAAI,CAAA,CAAA;AAAA,GAC7B;AAEA,EAAA,IAAI,SAAY,GAAA,QAAA,CAAS,IAAK,EAAA,CAAE,OAAQ,EAAA,CAAA;AACxC,EAAI,IAAA,CAAA,CAAA;AACJ,EAAA,QAAQA,SAAU;AAAA,IAChB,KAAK,KAAA;AACH,MAAI,CAAA,GAAA,CAAC,KAAK,MAAS,GAAA,CAAA,CAAA;AACnB,MAAA,MAAA;AAAA,IACF,KAAK,QAAA;AACH,MAAI,CAAA,GAAA,IAAA,CAAK,MAAS,GAAA,CAAA,GAAI,SAAU,CAAA,MAAA,CAAA;AAChC,MAAA,MAAA;AAAA,IACF;AACE,MAAI,CAAA,GAAA,CAAC,UAAU,MAAS,GAAA,CAAA,CAAA;AAAA,GAC5B;AACA,EAAS,QAAA,CAAA,IAAA,CAAK,aAAa,YAAe,GAAA,CAAC,UAAU,KAAQ,GAAA,CAAA,GAAI,GAAM,GAAA,CAAA,GAAI,GAAG,CAAA,CAAA;AAE9E,EAAO,OAAA,QAAA,CAAA;AACT,CAAA;;;AD7BA,IAAI,cAAA,GAAiB,SAAU,SAAA,EAAW,CAAG,EAAA;AAC3C,EAAA,IAAI,WAAW,CAAE,CAAA,KAAA,EAAQ,CAAA,MAAA,CAAO,SAAU,CAAG,EAAA;AAC3C,IAAY,OAAA,UAAA,CAAW,GAAG,CAAC,CAAA,CAAA;AAAA,GAC5B,CAAA,CAAA;AACD,EAAI,IAAA,WAAA,GAAc,UAAU,SAAU,CAAA,WAAW,EAAE,IAAK,CAAA,QAAA,EAAU,SAAU,CAAG,EAAA;AAC7E,IAAO,OAAA,CAAA,CAAA;AAAA,GACR,CAAA,CAAA;AAED,EAAK,eAAA,CAAgB,WAAY,CAAA,IAAA,EAAQ,EAAA,CAAC,EAAE,KAAM,CAAA,SAAA,EAAW,CAAC,CAAA,CAAE,MAAO,EAAA,CAAA;AAEvE,EAAA,IAAI,cAAiB,GAAA,WAAA,CAClB,KAAM,EAAA,CACN,OAAO,GAAG,CAAA,CACV,IAAK,CAAA,OAAA,EAAS,SAAS,CAAA,CACvB,IAAK,CAAA,IAAA,EAAM,SAAU,CAAG,EAAA;AACvB,IAAI,IAAA,IAAA,GAAO,CAAE,CAAA,IAAA,CAAK,CAAC,CAAA,CAAA;AACnB,IAAA,OAAO,IAAK,CAAA,EAAA,CAAA;AAAA,GACb,EACA,KAAM,CAAA,SAAA,EAAW,CAAC,CAClB,CAAA,IAAA,CAAK,SAAU,CAAG,EAAA;AACjB,IAAI,IAAA,IAAA,GAAO,CAAE,CAAA,IAAA,CAAK,CAAC,CAAA,CAAA;AACnB,IAAI,IAAA,SAAA,GAAe,eAAO,IAAI,CAAA,CAAA;AAC9B,IAAG,cAAO,CAAA,IAAI,CAAE,CAAA,MAAA,CAAO,MAAM,CAAA,CAAA;AAC7B,IAAA,IAAI,aAAa,SAAU,CAAA,MAAA,CAAO,GAAG,CAAE,CAAA,IAAA,CAAK,SAAS,OAAO,CAAA,CAAA;AAC5D,IAAS,QAAA,CAAA,UAAA,EAAY,IAAM,EAAA,IAAA,CAAK,eAAe,CAAA,CAAA;AAAA,GAChD,CAAA,CAAA;AAEH,EAAc,WAAA,GAAA,WAAA,CAAY,MAAM,cAAc,CAAA,CAAA;AAE9C,EAAA,WAAA,GAAmB,gBAAgB,WAAa,EAAA,CAAC,CAAE,CAAA,KAAA,CAAM,WAAW,CAAC,CAAA,CAAA;AAErE,EAAA,WAAA,CAAY,SAAU,CAAA,MAAM,CAAE,CAAA,IAAA,CAAK,SAAU,CAAG,EAAA;AAC9C,IAAI,IAAA,IAAA,GAAO,CAAE,CAAA,IAAA,CAAK,CAAC,CAAA,CAAA;AACnB,IAAI,IAAA,UAAA,GAAgB,eAAO,IAAI,CAAA,CAAA;AAC/B,IAAK,UAAA,CAAW,UAAY,EAAA,IAAA,CAAK,KAAK,CAAA,CAAA;AAAA,GACvC,CAAA,CAAA;AAED,EAAO,OAAA,WAAA,CAAA;AACT,CAAA,CAAA;AAEA,SAAS,kBAAkB,KAAO,EAAA;AAChC,EAAiB,cAAA,GAAA,KAAA,CAAA;AACnB,CAAA;;;AIhDA,iBAAA,EAAA,CAAA;AAOA,IAAI,gBAAA,GAAmB,SAAU,SAAA,EAAW,CAAG,EAAA;AAC7C,EAAI,IAAA,aAAA,GAAgB,SACjB,CAAA,SAAA,CAAU,aAAa,CAAA,CACvB,KAAK,CAAE,CAAA,KAAA,EAAS,EAAA,SAAU,CAAG,EAAA;AAC5B,IAAA,OAAY,SAAS,CAAC,CAAA,CAAA;AAAA,GACvB,CAAA,CACA,OAAQ,CAAA,QAAA,EAAU,IAAI,CAAA,CAAA;AAEzB,EAAc,aAAA,CAAA,IAAA,GAAO,MAAO,EAAA,CAAA;AAC5B,EAAc,aAAA,CAAA,KAAA,EAAQ,CAAA,MAAA,CAAO,GAAG,CAAA,CAAE,OAAQ,CAAA,WAAA,EAAa,IAAI,CAAA,CAAE,KAAM,CAAA,SAAA,EAAW,CAAC,CAAA,CAAA;AAE/E,EAAgB,aAAA,GAAA,SAAA,CAAU,UAAU,aAAa,CAAA,CAAA;AAEjD,EAAc,aAAA,CAAA,IAAA,CAAK,SAAU,CAAG,EAAA;AAC9B,IAAI,IAAA,IAAA,GAAU,eAAO,IAAI,CAAA,CAAA;AACzB,IAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,CAAA,CAAE,MAAO,EAAA,CAAA;AAC7B,IAAI,IAAA,IAAA,GAAO,CAAE,CAAA,IAAA,CAAK,CAAC,CAAA,CAAA;AACnB,IAAI,IAAA,KAAA,GAAQ,QAAS,CAAA,IAAA,EAAM,CAAE,CAAA,IAAA,CAAK,CAAC,CAAA,EAAG,CAAC,CAAA,CAAE,OAAQ,CAAA,OAAA,EAAS,IAAI,CAAA,CAAA;AAC9D,IAAA,IAAI,IAAO,GAAA,KAAA,CAAM,IAAK,EAAA,CAAE,OAAQ,EAAA,CAAA;AAEhC,IAAA,IAAI,KAAK,OAAS,EAAA;AAChB,MAAM,KAAA,CAAA,IAAA,CAAK,IAAM,EAAA,IAAA,CAAK,OAAO,CAAA,CAAA;AAAA,KAC/B;AACA,IAAA,IAAI,CAAG,WAAA,CAAI,IAAM,EAAA,OAAO,CAAG,EAAA;AACzB,MAAA,IAAA,CAAK,QAAQ,IAAK,CAAA,KAAA,CAAA;AAAA,KACpB;AACA,IAAA,IAAI,CAAG,WAAA,CAAI,IAAM,EAAA,QAAQ,CAAG,EAAA;AAC1B,MAAA,IAAA,CAAK,SAAS,IAAK,CAAA,MAAA,CAAA;AAAA,KACrB;AAAA,GACD,CAAA,CAAA;AAED,EAAI,IAAA,aAAA,CAAA;AAEJ,EAAA,IAAI,cAAc,IAAM,EAAA;AACtB,IAAA,aAAA,GAAgB,cAAc,IAAK,EAAA,CAAA;AAAA,GAC9B,MAAA;AACL,IAAgB,aAAA,GAAA,aAAA,CAAc,UAAU,IAAI,CAAA,CAAA;AAAA,GAC9C;AAEA,EAAK,eAAA,CAAgB,eAAe,CAAC,CAAA,CAAE,MAAM,SAAW,EAAA,CAAC,EAAE,MAAO,EAAA,CAAA;AAElE,EAAO,OAAA,aAAA,CAAA;AACT,CAAA,CAAA;AAEA,SAAS,oBAAoB,KAAO,EAAA;AAClC,EAAmB,gBAAA,GAAA,KAAA,CAAA;AACrB,CAAA;;;ACrDA,iBAAA,EAAA,CAAA;;;ACAA,iBAAA,EAAA,CAAA;AAEA,SAAS,aAAA,CAAc,MAAM,KAAO,EAAA;AAClC,EAAO,OAAA,IAAA,CAAK,UAAU,KAAK,CAAA,CAAA;AAC7B,CAAA;;;ADGA,IAAI,eAAkB,GAAA,SAAU,SAAW,EAAA,CAAA,EAAGC,OAAQ,EAAA;AACpD,EAAI,IAAA,aAAA,GAAgB,SACjB,CAAA,SAAA,CAAU,YAAY,CAAA,CACtB,KAAK,CAAE,CAAA,KAAA,EAAS,EAAA,SAAU,CAAG,EAAA;AAC5B,IAAA,OAAY,SAAS,CAAC,CAAA,CAAA;AAAA,GACvB,CAAA,CACA,OAAQ,CAAA,QAAA,EAAU,IAAI,CAAA,CAAA;AAEzB,EAAI,IAAA,QAAA,GAAW,KAAM,CAAA,aAAA,EAAe,CAAC,CAAA,CAAA;AACrC,EAAA,IAAA,CAAK,eAAe,CAAC,CAAA,CAAA;AAErB,EAAA,IAAI,WAAW,aAAc,CAAA,KAAA,KAAU,SAAY,aAAc,CAAA,KAAA,CAAM,QAAQ,CAAI,GAAA,aAAA,CAAA;AACnF,EAAK,gBAAgB,QAAU,EAAA,CAAC,CAAE,CAAA,KAAA,CAAM,WAAW,CAAC,CAAA,CAAA;AAGpD,EAAS,QAAA,CAAA,IAAA,CAAK,SAAU,CAAG,EAAA;AACzB,IAAI,IAAA,OAAA,GAAa,eAAO,IAAI,CAAA,CAAA;AAC5B,IAAI,IAAA,IAAA,GAAO,CAAE,CAAA,IAAA,CAAK,CAAC,CAAA,CAAA;AACnB,IAAA,IAAA,CAAK,IAAO,GAAA,IAAA,CAAA;AAEZ,IAAA,IAAI,KAAK,EAAI,EAAA;AACX,MAAQ,OAAA,CAAA,IAAA,CAAK,IAAM,EAAA,IAAA,CAAK,EAAE,CAAA,CAAA;AAAA,KAC5B;AAEA,IAAK,UAAA;AAAA,MACH,OAAA;AAAA,MACA,KAAK,OAAO,CAAA;AAAA,MAAA,CACX,OAAQ,CAAA,OAAA,CAAQ,QAAQ,CAAA,GAAI,YAAY,EAAM,IAAA,UAAA;AAAA,KACjD,CAAA;AAAA,GACD,CAAA,CAAA;AAED,EAAA,QAAA,CAAS,SAAU,CAAA,WAAW,CAAE,CAAA,IAAA,CAAK,SAAU,CAAG,EAAA;AAChD,IAAI,IAAA,IAAA,GAAO,CAAE,CAAA,IAAA,CAAK,CAAC,CAAA,CAAA;AACnB,IAAK,IAAA,CAAA,WAAA,GAAgB,iBAAS,WAAW,CAAA,CAAA;AAEzC,IAAA,IAAI,UACD,cAAO,CAAA,IAAI,CACX,CAAA,IAAA,CAAK,cAAc,WAAY;AAC9B,MAAA,OAAO,SAAS,eAAgB,CAAA,QAAA,CAAS,IAAM,EAAA,IAAA,CAAK,WAAW,CAAI,GAAA,GAAA,CAAA;AAAA,KACpE,CAAA,CACA,KAAM,CAAA,MAAA,EAAQ,MAAM,CAAA,CAAA;AAEvB,IAAK,gBAAgB,OAAS,EAAA,CAAC,EAAE,IAAK,CAAA,GAAA,EAAK,SAAUC,EAAG,EAAA;AACtD,MAAO,OAAA,UAAA,CAAW,GAAGA,EAAC,CAAA,CAAA;AAAA,KACvB,CAAA,CAAA;AAED,IAAK,UAAA,CAAW,OAAS,EAAA,IAAA,CAAK,KAAK,CAAA,CAAA;AAAA,GACpC,CAAA,CAAA;AAED,EAAS,QAAA,CAAA,SAAA,CAAU,QAAQ,CAAA,CAAE,MAAO,EAAA,CAAA;AACpC,EAAA,QAAA,CAAS,SAAU,CAAA,MAAM,CAAE,CAAA,IAAA,CAAK,SAAU,CAAG,EAAA;AAC3C,IAAI,IAAA,IAAA,GAAO,CAAE,CAAA,IAAA,CAAK,CAAC,CAAA,CAAA;AACnB,IAAI,IAAA,SAAA,GAAYD,OAAO,CAAA,IAAA,CAAK,SAAS,CAAA,CAAA;AACrC,IAAA,SAAA,CAAa,eAAO,IAAI,CAAA,EAAG,IAAK,CAAA,WAAA,EAAa,MAAM,WAAW,CAAA,CAAA;AAAA,GAC/D,CAAA,CAAA;AAED,EAAO,OAAA,QAAA,CAAA;AACT,CAAA,CAAA;AAEA,SAAS,mBAAmB,KAAO,EAAA;AACjC,EAAkB,eAAA,GAAA,KAAA,CAAA;AACpB,CAAA;AAEA,SAAS,eAAA,CAAgB,KAAK,UAAY,EAAA;AACxC,EAAA,IAAI,OAAU,GAAA,GAAA,CAAI,KAAM,CAAA,GAAG,EAAE,CAAC,CAAA,CAAA;AAC9B,EAAA,OAAO,UAAU,GAAM,GAAA,UAAA,CAAA;AACzB,CAAA;AAEA,SAAS,UAAA,CAAW,GAAG,CAAG,EAAA;AACxB,EAAI,IAAA,IAAA,GAAO,CAAE,CAAA,IAAA,CAAK,CAAC,CAAA,CAAA;AACnB,EAAA,IAAI,IAAO,GAAA,CAAA,CAAE,IAAK,CAAA,CAAA,CAAE,CAAC,CAAA,CAAA;AACrB,EAAA,IAAI,IAAO,GAAA,CAAA,CAAE,IAAK,CAAA,CAAA,CAAE,CAAC,CAAA,CAAA;AACrB,EAAI,IAAA,MAAA,GAAS,KAAK,MAAO,CAAA,KAAA,CAAM,GAAG,IAAK,CAAA,MAAA,CAAO,SAAS,CAAC,CAAA,CAAA;AACxD,EAAA,MAAA,CAAO,QAAQ,aAAc,CAAA,IAAA,EAAM,MAAO,CAAA,CAAC,CAAC,CAAC,CAAA,CAAA;AAC7C,EAAO,MAAA,CAAA,IAAA,CAAK,cAAc,IAAM,EAAA,MAAA,CAAO,OAAO,MAAS,GAAA,CAAC,CAAC,CAAC,CAAA,CAAA;AAE1D,EAAO,OAAA,UAAA,CAAW,MAAM,MAAM,CAAA,CAAA;AAChC,CAAA;AAEA,SAAS,UAAA,CAAW,MAAM,MAAQ,EAAA;AAEhC,EAAA,IAAI,QAAW,YAAW,IAAA,GAAA,CAAI,OAC3B,CAAA,CAAA,CAAE,SAAU,CAAG,EAAA;AACd,IAAA,OAAO,CAAE,CAAA,CAAA,CAAA;AAAA,GACV,CAAA,CACA,CAAE,CAAA,SAAU,CAAG,EAAA;AACd,IAAA,OAAO,CAAE,CAAA,CAAA,CAAA;AAAA,GACV,CAAA,CAAA;AAEH,EAAA,CAAC,IAAK,CAAA,KAAA,IAAS,IAAK,CAAA,WAAA,EAAa,KAAK,KAAK,CAAA,CAAA;AAE3C,EAAA,OAAO,KAAK,MAAM,CAAA,CAAA;AACpB,CAAA;AAEA,SAAS,UAAU,IAAM,EAAA;AACvB,EAAI,IAAA,IAAA,GAAO,KAAK,OAAQ,EAAA,CAAA;AACxB,EAAA,IAAI,SAAS,IAAK,CAAA,eAAA,CACf,cACA,CAAA,OAAA,GACA,QAAS,CAAA,IAAA,CAAK,YAAa,EAAC,EAC5B,SAAU,CAAA,IAAA,CAAK,QAAQ,CAAG,EAAA,IAAA,CAAK,SAAS,CAAC,CAAA,CAAA;AAC5C,EAAA,OAAO,EAAE,CAAG,EAAA,MAAA,CAAO,CAAG,EAAA,CAAA,EAAG,OAAO,CAAE,EAAA,CAAA;AACpC,CAAA;AAEA,SAAS,KAAA,CAAM,UAAU,CAAG,EAAA;AAC1B,EAAA,IAAI,aAAgB,GAAA,QAAA,CAAS,KAAM,EAAA,CAAE,MAAO,CAAA,GAAG,CAAE,CAAA,IAAA,CAAK,OAAS,EAAA,UAAU,CAAE,CAAA,KAAA,CAAM,WAAW,CAAC,CAAA,CAAA;AAC7F,EACG,aAAA,CAAA,MAAA,CAAO,MAAM,CAAA,CACb,IAAK,CAAA,OAAA,EAAS,MAAM,CACpB,CAAA,IAAA,CAAK,GAAK,EAAA,SAAU,CAAG,EAAA;AACtB,IAAI,IAAA,IAAA,GAAO,CAAE,CAAA,IAAA,CAAK,CAAC,CAAA,CAAA;AACnB,IAAA,IAAI,UAAa,GAAA,CAAA,CAAE,IAAK,CAAA,CAAA,CAAE,CAAC,CAAE,CAAA,IAAA,CAAA;AAC7B,IAAA,IAAI,SAAW,aAAM,CAAA,IAAA,CAAK,OAAO,MAAM,CAAA,CAAE,IAAI,WAAY;AACvD,MAAA,OAAO,UAAU,UAAU,CAAA,CAAA;AAAA,KAC5B,CAAA,CAAA;AACD,IAAO,OAAA,UAAA,CAAW,MAAM,MAAM,CAAA,CAAA;AAAA,GAC/B,CAAA,CAAA;AACH,EAAA,aAAA,CAAc,OAAO,MAAM,CAAA,CAAA;AAC3B,EAAO,OAAA,aAAA,CAAA;AACT,CAAA;AAEA,SAAS,IAAA,CAAK,UAAU,CAAG,EAAA;AACzB,EAAI,IAAA,WAAA,GAAc,SAAS,IAAK,EAAA,CAAA;AAChC,EAAK,eAAA,CAAgB,aAAa,CAAC,CAAA,CAAE,MAAM,SAAW,EAAA,CAAC,EAAE,MAAO,EAAA,CAAA;AAClE,CAAA;;;AEnIA,iBAAA,EAAA,CAAA;AAOA,IAAI,WAAc,GAAA,SAAU,SAAW,EAAA,CAAA,EAAGE,OAAQ,EAAA;AAChD,EAAA,IAAI,cAAc,CAAE,CAAA,KAAA,EAAQ,CAAA,MAAA,CAAO,SAAU,CAAG,EAAA;AAC9C,IAAO,OAAA,CAAM,UAAW,CAAA,CAAA,EAAG,CAAC,CAAA,CAAA;AAAA,GAC7B,CAAA,CAAA;AACD,EAAI,IAAA,QAAA,GAAW,UACZ,SAAU,CAAA,QAAQ,EAClB,IAAK,CAAA,WAAA,EAAa,SAAU,CAAG,EAAA;AAC9B,IAAO,OAAA,CAAA,CAAA;AAAA,GACR,CAAA,CACA,OAAQ,CAAA,QAAA,EAAU,IAAI,CAAA,CAAA;AAEzB,EAAS,QAAA,CAAA,IAAA,GAAO,MAAO,EAAA,CAAA;AAEvB,EAAS,QAAA,CAAA,KAAA,EAAQ,CAAA,MAAA,CAAO,GAAG,CAAA,CAAE,IAAK,CAAA,OAAA,EAAS,MAAM,CAAA,CAAE,KAAM,CAAA,SAAA,EAAW,CAAC,CAAA,CAAA;AAErE,EAAW,QAAA,GAAA,SAAA,CAAU,UAAU,QAAQ,CAAA,CAAA;AAEvC,EAAS,QAAA,CAAA,IAAA,CAAK,SAAU,CAAG,EAAA;AACzB,IAAI,IAAA,IAAA,GAAO,CAAE,CAAA,IAAA,CAAK,CAAC,CAAA,CAAA;AACnB,IAAI,IAAA,SAAA,GAAe,eAAO,IAAI,CAAA,CAAA;AAC9B,IAAK,UAAA;AAAA,MACH,SAAA;AAAA,MACA,KAAK,OAAO,CAAA;AAAA,MAAA,CACX,SAAU,CAAA,OAAA,CAAQ,QAAQ,CAAA,GAAI,YAAY,EAAM,IAAA,MAAA;AAAA,KACnD,CAAA;AAEA,IAAU,SAAA,CAAA,MAAA,CAAO,SAAS,CAAA,CAAE,MAAO,EAAA,CAAA;AACnC,IAAA,IAAI,aAAa,SAAU,CAAA,MAAA,CAAO,GAAG,CAAE,CAAA,IAAA,CAAK,SAAS,OAAO,CAAA,CAAA;AAC5D,IAAI,IAAA,QAAA,GAAW,QAAS,CAAA,UAAA,EAAY,IAAI,CAAA,CAAA;AACxC,IAAI,IAAA,KAAA,GAAQA,OAAO,CAAA,IAAA,CAAK,KAAK,CAAA,CAAA;AAC7B,IAAI,IAAA,IAAA,GAAS,aAAK,QAAS,CAAA,IAAA,GAAO,OAAQ,EAAA,EAAG,SAAS,QAAQ,CAAA,CAAA;AAE9D,IAAA,IAAA,CAAK,IAAO,GAAA,IAAA,CAAA;AAEZ,IAAA,IAAI,KAAK,EAAI,EAAA;AACX,MAAU,SAAA,CAAA,IAAA,CAAK,IAAM,EAAA,IAAA,CAAK,EAAE,CAAA,CAAA;AAAA,KAC9B;AACA,IAAA,IAAI,KAAK,OAAS,EAAA;AAChB,MAAW,UAAA,CAAA,IAAA,CAAK,IAAM,EAAA,IAAA,CAAK,OAAO,CAAA,CAAA;AAAA,KACpC;AAEA,IAAM,IAAA,WAAA,CAAI,IAAM,EAAA,OAAO,CAAG,EAAA;AACxB,MAAA,IAAA,CAAK,QAAQ,IAAK,CAAA,KAAA,CAAA;AAAA,KACpB;AACA,IAAM,IAAA,WAAA,CAAI,IAAM,EAAA,QAAQ,CAAG,EAAA;AACzB,MAAA,IAAA,CAAK,SAAS,IAAK,CAAA,MAAA,CAAA;AAAA,KACrB;AAEA,IAAK,IAAA,CAAA,KAAA,IAAS,IAAK,CAAA,WAAA,GAAc,IAAK,CAAA,YAAA,CAAA;AACtC,IAAK,IAAA,CAAA,MAAA,IAAU,IAAK,CAAA,UAAA,GAAa,IAAK,CAAA,aAAA,CAAA;AACtC,IAAW,UAAA,CAAA,IAAA;AAAA,MACT,WAAA;AAAA,MACA,YAAA,GAAA,CACG,IAAK,CAAA,WAAA,GAAc,IAAK,CAAA,YAAA,IAAgB,CACzC,GAAA,GAAA,GAAA,CACC,IAAK,CAAA,UAAA,GAAa,IAAK,CAAA,aAAA,IAAiB,CACzC,GAAA,GAAA;AAAA,KACJ,CAAA;AAEA,IAAI,IAAA,IAAA,GAAU,eAAO,IAAI,CAAA,CAAA;AACzB,IAAK,IAAA,CAAA,MAAA,CAAO,kBAAkB,CAAA,CAAE,MAAO,EAAA,CAAA;AACvC,IAAI,IAAA,QAAA,GAAW,MAAM,IAAM,EAAA,IAAA,EAAM,IAAI,CAAE,CAAA,OAAA,CAAQ,mBAAmB,IAAI,CAAA,CAAA;AACtE,IAAK,UAAA,CAAW,QAAU,EAAA,IAAA,CAAK,KAAK,CAAA,CAAA;AAEpC,IAAA,IAAI,SAAY,GAAA,QAAA,CAAS,IAAK,EAAA,CAAE,OAAQ,EAAA,CAAA;AACxC,IAAA,IAAA,CAAK,QAAQ,SAAU,CAAA,KAAA,CAAA;AACvB,IAAA,IAAA,CAAK,SAAS,SAAU,CAAA,MAAA,CAAA;AAAA,GACzB,CAAA,CAAA;AAED,EAAI,IAAA,aAAA,CAAA;AAEJ,EAAA,IAAI,SAAS,IAAM,EAAA;AACjB,IAAA,aAAA,GAAgB,SAAS,IAAK,EAAA,CAAA;AAAA,GACzB,MAAA;AACL,IAAgB,aAAA,GAAA,QAAA,CAAS,UAAU,IAAI,CAAA,CAAA;AAAA,GACzC;AAEA,EAAK,eAAA,CAAgB,eAAe,CAAC,CAAA,CAAE,MAAM,SAAW,EAAA,CAAC,EAAE,MAAO,EAAA,CAAA;AAElE,EAAO,OAAA,QAAA,CAAA;AACT,CAAA,CAAA;AAEA,SAAS,eAAe,KAAO,EAAA;AAC7B,EAAc,WAAA,GAAA,KAAA,CAAA;AAChB,CAAA;;;AC3FA,iBAAA,EAAA,CAAA;AAKA,SAAS,gBAAA,CAAiB,WAAW,CAAG,EAAA;AACtC,EAAI,IAAA,OAAA,GAAU,SAAU,CAAA,MAAA,CAAO,WAAY;AACzC,IAAA,OAAO,CAAI,cAAA,CAAO,IAAI,CAAA,CAAE,QAAQ,QAAQ,CAAA,CAAA;AAAA,GACzC,CAAA,CAAA;AAED,EAAA,SAAS,UAAU,CAAG,EAAA;AACpB,IAAI,IAAA,IAAA,GAAO,CAAE,CAAA,IAAA,CAAK,CAAC,CAAA,CAAA;AACnB,IAAA,OAAO,YAAe,GAAA,IAAA,CAAK,CAAI,GAAA,GAAA,GAAM,KAAK,CAAI,GAAA,GAAA,CAAA;AAAA,GAChD;AAEA,EAAQ,OAAA,CAAA,IAAA,CAAK,aAAa,SAAS,CAAA,CAAA;AAEnC,EAAK,eAAA,CAAgB,SAAW,EAAA,CAAC,CAAE,CAAA,KAAA,CAAM,WAAW,CAAC,CAAA,CAAE,IAAK,CAAA,WAAA,EAAa,SAAS,CAAA,CAAA;AAElF,EACG,eAAA,CAAgB,OAAQ,CAAA,SAAA,CAAU,MAAM,CAAA,EAAG,CAAC,CAC5C,CAAA,IAAA,CAAK,OAAS,EAAA,SAAU,CAAG,EAAA;AAC1B,IAAO,OAAA,CAAA,CAAE,IAAK,CAAA,CAAC,CAAE,CAAA,KAAA,CAAA;AAAA,GAClB,CAAA,CACA,IAAK,CAAA,QAAA,EAAU,SAAU,CAAG,EAAA;AAC3B,IAAO,OAAA,CAAA,CAAE,IAAK,CAAA,CAAC,CAAE,CAAA,MAAA,CAAA;AAAA,GAClB,CAAA,CACA,IAAK,CAAA,GAAA,EAAK,SAAU,CAAG,EAAA;AACtB,IAAI,IAAA,IAAA,GAAO,CAAE,CAAA,IAAA,CAAK,CAAC,CAAA,CAAA;AACnB,IAAO,OAAA,CAAC,KAAK,KAAQ,GAAA,CAAA,CAAA;AAAA,GACtB,CAAA,CACA,IAAK,CAAA,GAAA,EAAK,SAAU,CAAG,EAAA;AACtB,IAAI,IAAA,IAAA,GAAO,CAAE,CAAA,IAAA,CAAK,CAAC,CAAA,CAAA;AACnB,IAAO,OAAA,CAAC,KAAK,MAAS,GAAA,CAAA,CAAA;AAAA,GACvB,CAAA,CAAA;AACL,CAAA;;;ACnCA,iBAAA,EAAA,CAAA;AAMA,SAAS,kBAAA,CAAmB,WAAW,CAAG,EAAA;AACxC,EAAI,IAAA,OAAA,GAAU,SAAU,CAAA,MAAA,CAAO,WAAY;AACzC,IAAA,OAAO,CAAI,cAAA,CAAO,IAAI,CAAA,CAAE,QAAQ,QAAQ,CAAA,CAAA;AAAA,GACzC,CAAA,CAAA;AAED,EAAA,SAAS,UAAU,CAAG,EAAA;AACpB,IAAI,IAAA,IAAA,GAAO,CAAE,CAAA,IAAA,CAAK,CAAC,CAAA,CAAA;AACnB,IAAS,OAAA,WAAA,CAAI,IAAM,EAAA,GAAG,CAAI,GAAA,YAAA,GAAe,KAAK,CAAI,GAAA,GAAA,GAAM,IAAK,CAAA,CAAA,GAAI,GAAM,GAAA,EAAA,CAAA;AAAA,GACzE;AAEA,EAAQ,OAAA,CAAA,IAAA,CAAK,aAAa,SAAS,CAAA,CAAA;AAEnC,EAAK,eAAA,CAAgB,SAAW,EAAA,CAAC,CAAE,CAAA,KAAA,CAAM,WAAW,CAAC,CAAA,CAAE,IAAK,CAAA,WAAA,EAAa,SAAS,CAAA,CAAA;AACpF,CAAA;;;ACnBA,iBAAA,EAAA,CAAA;AAKA,SAAS,aAAA,CAAc,WAAW,CAAG,EAAA;AACnC,EAAI,IAAA,OAAA,GAAU,SAAU,CAAA,MAAA,CAAO,WAAY;AACzC,IAAA,OAAO,CAAI,cAAA,CAAO,IAAI,CAAA,CAAE,QAAQ,QAAQ,CAAA,CAAA;AAAA,GACzC,CAAA,CAAA;AAED,EAAA,SAAS,UAAU,CAAG,EAAA;AACpB,IAAI,IAAA,IAAA,GAAO,CAAE,CAAA,IAAA,CAAK,CAAC,CAAA,CAAA;AACnB,IAAA,OAAO,YAAe,GAAA,IAAA,CAAK,CAAI,GAAA,GAAA,GAAM,KAAK,CAAI,GAAA,GAAA,CAAA;AAAA,GAChD;AAEA,EAAQ,OAAA,CAAA,IAAA,CAAK,aAAa,SAAS,CAAA,CAAA;AAEnC,EAAK,eAAA,CAAgB,SAAW,EAAA,CAAC,CAAE,CAAA,KAAA,CAAM,WAAW,CAAC,CAAA,CAAE,IAAK,CAAA,WAAA,EAAa,SAAS,CAAA,CAAA;AACpF,CAAA;;;AClBA,iBAAA,EAAA,CAAA;;;ACAA,iBAAA,EAAA,CAAA;;;ACAA,iBAAA,EAAA,CAAA;AAEA,SAAS,gBAAiB,CAAA,IAAA,EAAM,EAAI,EAAA,EAAA,EAAI,KAAO,EAAA;AAG7C,EAAA,IAAI,KAAK,IAAK,CAAA,CAAA,CAAA;AACd,EAAA,IAAI,KAAK,IAAK,CAAA,CAAA,CAAA;AAEd,EAAI,IAAA,EAAA,GAAK,KAAK,KAAM,CAAA,CAAA,CAAA;AACpB,EAAI,IAAA,EAAA,GAAK,KAAK,KAAM,CAAA,CAAA,CAAA;AAEpB,EAAI,IAAA,GAAA,GAAM,IAAK,CAAA,IAAA,CAAK,EAAK,GAAA,EAAA,GAAK,KAAK,EAAK,GAAA,EAAA,GAAK,EAAK,GAAA,EAAA,GAAK,EAAE,CAAA,CAAA;AAEzD,EAAA,IAAI,KAAK,IAAK,CAAA,GAAA,CAAK,EAAK,GAAA,EAAA,GAAK,KAAM,GAAG,CAAA,CAAA;AACtC,EAAI,IAAA,KAAA,CAAM,IAAI,EAAI,EAAA;AAChB,IAAA,EAAA,GAAK,CAAC,EAAA,CAAA;AAAA,GACR;AACA,EAAA,IAAI,KAAK,IAAK,CAAA,GAAA,CAAK,EAAK,GAAA,EAAA,GAAK,KAAM,GAAG,CAAA,CAAA;AACtC,EAAI,IAAA,KAAA,CAAM,IAAI,EAAI,EAAA;AAChB,IAAA,EAAA,GAAK,CAAC,EAAA,CAAA;AAAA,GACR;AAEA,EAAA,OAAO,EAAE,CAAG,EAAA,EAAA,GAAK,EAAI,EAAA,CAAA,EAAG,KAAK,EAAG,EAAA,CAAA;AAClC,CAAA;;;ADnBA,SAAS,eAAA,CAAgB,IAAM,EAAA,EAAA,EAAI,KAAO,EAAA;AACxC,EAAA,OAAO,gBAAiB,CAAA,IAAA,EAAM,EAAI,EAAA,EAAA,EAAI,KAAK,CAAA,CAAA;AAC7C,CAAA;;;AENA,iBAAA,EAAA,CAAA;;;ACAA,iBAAA,EAAA,CAAA;AAMA,SAAS,aAAc,CAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA;AAIrC,EAAA,IAAI,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,CAAA;AACxB,EAAI,IAAA,EAAA,EAAI,IAAI,EAAI,EAAA,EAAA,CAAA;AAChB,EAAA,IAAI,OAAO,MAAQ,EAAA,GAAA,CAAA;AACnB,EAAA,IAAI,CAAG,EAAA,CAAA,CAAA;AAIP,EAAK,EAAA,GAAA,EAAA,CAAG,IAAI,EAAG,CAAA,CAAA,CAAA;AACf,EAAK,EAAA,GAAA,EAAA,CAAG,IAAI,EAAG,CAAA,CAAA,CAAA;AACf,EAAA,EAAA,GAAK,GAAG,CAAI,GAAA,EAAA,CAAG,CAAI,GAAA,EAAA,CAAG,IAAI,EAAG,CAAA,CAAA,CAAA;AAG7B,EAAA,EAAA,GAAK,EAAK,GAAA,EAAA,CAAG,CAAI,GAAA,EAAA,GAAK,GAAG,CAAI,GAAA,EAAA,CAAA;AAC7B,EAAA,EAAA,GAAK,EAAK,GAAA,EAAA,CAAG,CAAI,GAAA,EAAA,GAAK,GAAG,CAAI,GAAA,EAAA,CAAA;AAI7B,EAAA,IAAI,OAAO,CAAK,IAAA,EAAA,KAAO,KAAK,QAAS,CAAA,EAAA,EAAI,EAAE,CAAG,EAAA;AAC5C,IAAA,OAAA;AAAA,GACF;AAGA,EAAK,EAAA,GAAA,EAAA,CAAG,IAAI,EAAG,CAAA,CAAA,CAAA;AACf,EAAK,EAAA,GAAA,EAAA,CAAG,IAAI,EAAG,CAAA,CAAA,CAAA;AACf,EAAA,EAAA,GAAK,GAAG,CAAI,GAAA,EAAA,CAAG,CAAI,GAAA,EAAA,CAAG,IAAI,EAAG,CAAA,CAAA,CAAA;AAG7B,EAAA,EAAA,GAAK,EAAK,GAAA,EAAA,CAAG,CAAI,GAAA,EAAA,GAAK,GAAG,CAAI,GAAA,EAAA,CAAA;AAC7B,EAAA,EAAA,GAAK,EAAK,GAAA,EAAA,CAAG,CAAI,GAAA,EAAA,GAAK,GAAG,CAAI,GAAA,EAAA,CAAA;AAK7B,EAAA,IAAI,OAAO,CAAK,IAAA,EAAA,KAAO,KAAK,QAAS,CAAA,EAAA,EAAI,EAAE,CAAG,EAAA;AAC5C,IAAA,OAAA;AAAA,GACF;AAGA,EAAQ,KAAA,GAAA,EAAA,GAAK,KAAK,EAAK,GAAA,EAAA,CAAA;AACvB,EAAA,IAAI,UAAU,CAAG,EAAA;AACf,IAAA,OAAA;AAAA,GACF;AAEA,EAAS,MAAA,GAAA,IAAA,CAAK,GAAI,CAAA,KAAA,GAAQ,CAAC,CAAA,CAAA;AAK3B,EAAM,GAAA,GAAA,EAAA,GAAK,KAAK,EAAK,GAAA,EAAA,CAAA;AACrB,EAAA,CAAA,GAAI,MAAM,CAAK,GAAA,CAAA,GAAA,GAAM,MAAU,IAAA,KAAA,GAAA,CAAS,MAAM,MAAU,IAAA,KAAA,CAAA;AAExD,EAAM,GAAA,GAAA,EAAA,GAAK,KAAK,EAAK,GAAA,EAAA,CAAA;AACrB,EAAA,CAAA,GAAI,MAAM,CAAK,GAAA,CAAA,GAAA,GAAM,MAAU,IAAA,KAAA,GAAA,CAAS,MAAM,MAAU,IAAA,KAAA,CAAA;AAExD,EAAO,OAAA,EAAE,GAAM,CAAK,EAAA,CAAA;AACtB,CAAA;AAEA,SAAS,QAAA,CAAS,IAAI,EAAI,EAAA;AACxB,EAAA,OAAO,KAAK,EAAK,GAAA,CAAA,CAAA;AACnB,CAAA;;;AD7DA,SAAS,gBAAA,CAAiB,IAAM,EAAA,UAAA,EAAY,KAAO,EAAA;AACjD,EAAA,IAAI,KAAK,IAAK,CAAA,CAAA,CAAA;AACd,EAAA,IAAI,KAAK,IAAK,CAAA,CAAA,CAAA;AAEd,EAAA,IAAI,gBAAgB,EAAC,CAAA;AAErB,EAAA,IAAI,OAAO,MAAO,CAAA,iBAAA,CAAA;AAClB,EAAA,IAAI,OAAO,MAAO,CAAA,iBAAA,CAAA;AAClB,EAAW,UAAA,CAAA,OAAA,CAAQ,SAAU,KAAO,EAAA;AAClC,IAAA,IAAA,GAAO,IAAK,CAAA,GAAA,CAAI,IAAM,EAAA,KAAA,CAAM,CAAC,CAAA,CAAA;AAC7B,IAAA,IAAA,GAAO,IAAK,CAAA,GAAA,CAAI,IAAM,EAAA,KAAA,CAAM,CAAC,CAAA,CAAA;AAAA,GAC9B,CAAA,CAAA;AAED,EAAA,IAAI,IAAO,GAAA,EAAA,GAAK,IAAK,CAAA,KAAA,GAAQ,CAAI,GAAA,IAAA,CAAA;AACjC,EAAA,IAAI,GAAM,GAAA,EAAA,GAAK,IAAK,CAAA,MAAA,GAAS,CAAI,GAAA,IAAA,CAAA;AAEjC,EAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,UAAA,CAAW,QAAQ,CAAK,EAAA,EAAA;AAC1C,IAAI,IAAA,EAAA,GAAK,WAAW,CAAC,CAAA,CAAA;AACrB,IAAI,IAAA,EAAA,GAAK,WAAW,CAAI,GAAA,UAAA,CAAW,SAAS,CAAI,GAAA,CAAA,GAAI,IAAI,CAAC,CAAA,CAAA;AACzD,IAAA,IAAI,SAAY,GAAA,aAAA;AAAA,MACd,IAAA;AAAA,MACA,KAAA;AAAA,MACA,EAAE,GAAG,IAAO,GAAA,EAAA,CAAG,GAAG,CAAG,EAAA,GAAA,GAAM,GAAG,CAAE,EAAA;AAAA,MAChC,EAAE,GAAG,IAAO,GAAA,EAAA,CAAG,GAAG,CAAG,EAAA,GAAA,GAAM,GAAG,CAAE,EAAA;AAAA,KAClC,CAAA;AACA,IAAA,IAAI,SAAW,EAAA;AACb,MAAA,aAAA,CAAc,KAAK,SAAS,CAAA,CAAA;AAAA,KAC9B;AAAA,GACF;AAEA,EAAI,IAAA,CAAC,cAAc,MAAQ,EAAA;AACzB,IAAQ,OAAA,CAAA,GAAA,CAAI,6CAA6C,IAAI,CAAA,CAAA;AAC7D,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAEA,EAAI,IAAA,aAAA,CAAc,SAAS,CAAG,EAAA;AAE5B,IAAc,aAAA,CAAA,IAAA,CAAK,SAAU,CAAA,EAAG,CAAG,EAAA;AACjC,MAAI,IAAA,GAAA,GAAM,CAAE,CAAA,CAAA,GAAI,KAAM,CAAA,CAAA,CAAA;AACtB,MAAI,IAAA,GAAA,GAAM,CAAE,CAAA,CAAA,GAAI,KAAM,CAAA,CAAA,CAAA;AACtB,MAAA,IAAI,QAAQ,IAAK,CAAA,IAAA,CAAK,GAAM,GAAA,GAAA,GAAM,MAAM,GAAG,CAAA,CAAA;AAE3C,MAAI,IAAA,GAAA,GAAM,CAAE,CAAA,CAAA,GAAI,KAAM,CAAA,CAAA,CAAA;AACtB,MAAI,IAAA,GAAA,GAAM,CAAE,CAAA,CAAA,GAAI,KAAM,CAAA,CAAA,CAAA;AACtB,MAAA,IAAI,QAAQ,IAAK,CAAA,IAAA,CAAK,GAAM,GAAA,GAAA,GAAM,MAAM,GAAG,CAAA,CAAA;AAE3C,MAAA,OAAO,KAAQ,GAAA,KAAA,GAAQ,CAAK,CAAA,GAAA,KAAA,KAAU,QAAQ,CAAI,GAAA,CAAA,CAAA;AAAA,KACnD,CAAA,CAAA;AAAA,GACH;AACA,EAAA,OAAO,cAAc,CAAC,CAAA,CAAA;AACxB,CAAA;;;AE1DA,iBAAA,EAAA,CAAA;AAEA,SAAS,aAAA,CAAc,MAAM,KAAO,EAAA;AAClC,EAAA,IAAI,IAAI,IAAK,CAAA,CAAA,CAAA;AACb,EAAA,IAAI,IAAI,IAAK,CAAA,CAAA,CAAA;AAIb,EAAI,IAAA,EAAA,GAAK,MAAM,CAAI,GAAA,CAAA,CAAA;AACnB,EAAI,IAAA,EAAA,GAAK,MAAM,CAAI,GAAA,CAAA,CAAA;AACnB,EAAI,IAAA,CAAA,GAAI,KAAK,KAAQ,GAAA,CAAA,CAAA;AACrB,EAAI,IAAA,CAAA,GAAI,KAAK,MAAS,GAAA,CAAA,CAAA;AAEtB,EAAA,IAAI,EAAI,EAAA,EAAA,CAAA;AACR,EAAI,IAAA,IAAA,CAAK,IAAI,EAAE,CAAA,GAAI,IAAI,IAAK,CAAA,GAAA,CAAI,EAAE,CAAA,GAAI,CAAG,EAAA;AAEvC,IAAA,IAAI,KAAK,CAAG,EAAA;AACV,MAAA,CAAA,GAAI,CAAC,CAAA,CAAA;AAAA,KACP;AACA,IAAA,EAAA,GAAK,EAAO,KAAA,CAAA,GAAI,CAAK,GAAA,CAAA,GAAI,EAAM,GAAA,EAAA,CAAA;AAC/B,IAAK,EAAA,GAAA,CAAA,CAAA;AAAA,GACA,MAAA;AAEL,IAAA,IAAI,KAAK,CAAG,EAAA;AACV,MAAA,CAAA,GAAI,CAAC,CAAA,CAAA;AAAA,KACP;AACA,IAAK,EAAA,GAAA,CAAA,CAAA;AACL,IAAA,EAAA,GAAK,EAAO,KAAA,CAAA,GAAI,CAAK,GAAA,CAAA,GAAI,EAAM,GAAA,EAAA,CAAA;AAAA,GACjC;AAEA,EAAA,OAAO,EAAE,CAAG,EAAA,CAAA,GAAI,EAAI,EAAA,CAAA,EAAG,IAAI,EAAG,EAAA,CAAA;AAChC,CAAA;;;ALxBA,IAAI,MAAS,GAAA;AAAA,EACX,IAAA;AAAA,EACA,OAAA;AAAA,EACA,MAAA;AAAA,EACA,OAAA;AACF,CAAA,CAAA;AAEA,SAAS,UAAU,KAAO,EAAA;AACxB,EAAS,MAAA,GAAA,KAAA,CAAA;AACX,CAAA;AAEA,SAAS,IAAA,CAAK,MAAQ,EAAA,IAAA,EAAM,IAAM,EAAA;AAChC,EAAA,IAAI,WAAW,MACZ,CAAA,MAAA,CAAO,MAAQ,EAAA,cAAc,EAC7B,IAAK,CAAA,IAAA,EAAM,IAAK,CAAA,EAAE,EAClB,IAAK,CAAA,IAAA,EAAM,KAAK,EAAE,CAAA,CAClB,KAAK,GAAK,EAAA,CAAC,IAAK,CAAA,KAAA,GAAQ,CAAC,CACzB,CAAA,IAAA,CAAK,GAAK,EAAA,CAAC,KAAK,MAAS,GAAA,CAAC,CAC1B,CAAA,IAAA,CAAK,SAAS,IAAK,CAAA,KAAK,EACxB,IAAK,CAAA,QAAA,EAAU,KAAK,MAAM,CAAA,CAAA;AAE7B,EAAK,IAAA,CAAA,SAAA,GAAY,SAAU,KAAO,EAAA;AAChC,IAAO,OAAA,aAAA,CAAc,MAAM,KAAK,CAAA,CAAA;AAAA,GAClC,CAAA;AAEA,EAAO,OAAA,QAAA,CAAA;AACT,CAAA;AAEA,SAAS,OAAA,CAAQ,MAAQ,EAAA,IAAA,EAAM,IAAM,EAAA;AACnC,EAAI,IAAA,EAAA,GAAK,KAAK,KAAQ,GAAA,CAAA,CAAA;AACtB,EAAI,IAAA,EAAA,GAAK,KAAK,MAAS,GAAA,CAAA,CAAA;AACvB,EAAI,IAAA,QAAA,GAAW,MACZ,CAAA,MAAA,CAAO,SAAW,EAAA,cAAc,CAChC,CAAA,IAAA,CAAK,GAAK,EAAA,CAAC,IAAK,CAAA,KAAA,GAAQ,CAAC,CAAA,CACzB,KAAK,GAAK,EAAA,CAAC,IAAK,CAAA,MAAA,GAAS,CAAC,CAAA,CAC1B,IAAK,CAAA,IAAA,EAAM,EAAE,CAAA,CACb,IAAK,CAAA,IAAA,EAAM,EAAE,CAAA,CAAA;AAEhB,EAAK,IAAA,CAAA,SAAA,GAAY,SAAU,KAAO,EAAA;AAChC,IAAA,OAAO,gBAAiB,CAAA,IAAA,EAAM,EAAI,EAAA,EAAA,EAAI,KAAK,CAAA,CAAA;AAAA,GAC7C,CAAA;AAEA,EAAO,OAAA,QAAA,CAAA;AACT,CAAA;AAEA,SAAS,MAAA,CAAO,MAAQ,EAAA,IAAA,EAAM,IAAM,EAAA;AAClC,EAAA,IAAI,IAAI,IAAK,CAAA,GAAA,CAAI,KAAK,KAAO,EAAA,IAAA,CAAK,MAAM,CAAI,GAAA,CAAA,CAAA;AAC5C,EAAI,IAAA,QAAA,GAAW,OACZ,MAAO,CAAA,QAAA,EAAU,cAAc,CAC/B,CAAA,IAAA,CAAK,GAAK,EAAA,CAAC,IAAK,CAAA,KAAA,GAAQ,CAAC,CACzB,CAAA,IAAA,CAAK,KAAK,CAAC,IAAA,CAAK,SAAS,CAAC,CAAA,CAC1B,IAAK,CAAA,GAAA,EAAK,CAAC,CAAA,CAAA;AAEd,EAAK,IAAA,CAAA,SAAA,GAAY,SAAU,KAAO,EAAA;AAChC,IAAO,OAAA,eAAA,CAAgB,IAAM,EAAA,CAAA,EAAG,KAAK,CAAA,CAAA;AAAA,GACvC,CAAA;AAEA,EAAO,OAAA,QAAA,CAAA;AACT,CAAA;AAKA,SAAS,OAAA,CAAQ,MAAQ,EAAA,IAAA,EAAM,IAAM,EAAA;AACnC,EAAA,IAAI,CAAK,GAAA,IAAA,CAAK,KAAQ,GAAA,IAAA,CAAK,KAAS,GAAA,CAAA,CAAA;AACpC,EAAA,IAAI,CAAK,GAAA,IAAA,CAAK,MAAS,GAAA,IAAA,CAAK,KAAS,GAAA,CAAA,CAAA;AACrC,EAAA,IAAI,MAAS,GAAA;AAAA,IACX,EAAE,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAC,CAAE,EAAA;AAAA,IACd,EAAE,CAAA,EAAG,CAAC,CAAA,EAAG,GAAG,CAAE,EAAA;AAAA,IACd,EAAE,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAE,EAAA;AAAA,IACb,EAAE,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAE,EAAA;AAAA,GACf,CAAA;AACA,EAAA,IAAI,QAAW,GAAA,MAAA,CAAO,MAAO,CAAA,SAAA,EAAW,cAAc,CAAE,CAAA,IAAA;AAAA,IACtD,QAAA;AAAA,IACA,MAAA,CACG,GAAI,CAAA,SAAU,CAAG,EAAA;AAChB,MAAO,OAAA,CAAA,CAAE,CAAI,GAAA,GAAA,GAAM,CAAE,CAAA,CAAA,CAAA;AAAA,KACtB,CACA,CAAA,IAAA,CAAK,GAAG,CAAA;AAAA,GACb,CAAA;AAEA,EAAK,IAAA,CAAA,SAAA,GAAY,SAAU,CAAG,EAAA;AAC5B,IAAO,OAAA,gBAAA,CAAiB,IAAM,EAAA,MAAA,EAAQ,CAAC,CAAA,CAAA;AAAA,GACzC,CAAA;AAEA,EAAO,OAAA,QAAA,CAAA;AACT,CAAA;;;Ab7EA,SAAS,MAAS,GAAA;AAChB,EAAI,IAAA,EAAA,GAAK,SAAUC,IAAAA,EAAK,CAAG,EAAA;AACzB,IAAA,eAAA,CAAgB,CAAC,CAAA,CAAA;AAEjB,IAAI,IAAA,WAAA,GAAc,mBAAoBA,CAAAA,IAAAA,EAAK,QAAQ,CAAA,CAAA;AACnD,IAAI,IAAA,aAAA,GAAgB,mBAAoB,CAAA,WAAA,EAAa,UAAU,CAAA,CAAA;AAC/D,IAAI,IAAA,cAAA,GAAiB,mBAAoB,CAAA,WAAA,EAAa,WAAW,CAAA,CAAA;AACjE,IAAA,IAAI,aAAa,gBAAiB,CAAA,mBAAA,CAAoB,WAAa,EAAA,YAAY,GAAG,CAAC,CAAA,CAAA;AACnF,IAAA,IAAI,QAAQ,WAAY,CAAA,mBAAA,CAAoB,aAAa,OAAO,CAAA,EAAG,GAAG,MAAM,CAAA,CAAA;AAE5E,IAAA,MAAA,CAAO,CAAC,CAAA,CAAA;AAER,IAAA,aAAA,CAAc,OAAO,CAAC,CAAA,CAAA;AACtB,IAAA,kBAAA,CAAmB,YAAY,CAAC,CAAA,CAAA;AAChC,IAAgB,eAAA,CAAA,cAAA,EAAgB,GAAG,MAAM,CAAA,CAAA;AAEzC,IAAI,IAAA,QAAA,GAAW,cAAe,CAAA,aAAA,EAAe,CAAC,CAAA,CAAA;AAC9C,IAAA,gBAAA,CAAiB,UAAU,CAAC,CAAA,CAAA;AAE5B,IAAA,gBAAA,CAAiB,CAAC,CAAA,CAAA;AAAA,GACpB,CAAA;AAEA,EAAG,EAAA,CAAA,WAAA,GAAc,SAAU,KAAO,EAAA;AAChC,IAAI,IAAA,CAAC,SAAU,CAAA,MAAA,EAAe,OAAA,WAAA,CAAA;AAC9B,IAAA,cAAA,CAAe,KAAK,CAAA,CAAA;AACpB,IAAO,OAAA,EAAA,CAAA;AAAA,GACT,CAAA;AAEA,EAAG,EAAA,CAAA,cAAA,GAAiB,SAAU,KAAO,EAAA;AACnC,IAAI,IAAA,CAAC,SAAU,CAAA,MAAA,EAAe,OAAA,cAAA,CAAA;AAC9B,IAAA,iBAAA,CAAkB,KAAK,CAAA,CAAA;AACvB,IAAO,OAAA,EAAA,CAAA;AAAA,GACT,CAAA;AAEA,EAAG,EAAA,CAAA,gBAAA,GAAmB,SAAU,KAAO,EAAA;AACrC,IAAI,IAAA,CAAC,SAAU,CAAA,MAAA,EAAe,OAAA,gBAAA,CAAA;AAC9B,IAAA,mBAAA,CAAoB,KAAK,CAAA,CAAA;AACzB,IAAO,OAAA,EAAA,CAAA;AAAA,GACT,CAAA;AAEA,EAAG,EAAA,CAAA,eAAA,GAAkB,SAAU,KAAO,EAAA;AACpC,IAAI,IAAA,CAAC,SAAU,CAAA,MAAA,EAAe,OAAA,eAAA,CAAA;AAC9B,IAAA,kBAAA,CAAmB,KAAK,CAAA,CAAA;AACxB,IAAO,OAAA,EAAA,CAAA;AAAA,GACT,CAAA;AAEA,EAAG,EAAA,CAAA,MAAA,GAAS,SAAU,KAAO,EAAA;AAC3B,IAAI,IAAA,CAAC,SAAU,CAAA,MAAA,EAAe,OAAA,MAAA,CAAA;AAC9B,IAAA,SAAA,CAAU,KAAK,CAAA,CAAA;AACf,IAAO,OAAA,EAAA,CAAA;AAAA,GACT,CAAA;AAEA,EAAG,EAAA,CAAA,MAAA,GAAS,SAAU,KAAO,EAAA;AAC3B,IAAI,IAAA,CAAC,SAAU,CAAA,MAAA,EAAe,OAAA,MAAA,CAAA;AAC9B,IAAA,SAAA,CAAU,KAAK,CAAA,CAAA;AACf,IAAO,OAAA,EAAA,CAAA;AAAA,GACT,CAAA;AAEA,EAAO,OAAA,EAAA,CAAA;AACT,CAAA;AAEA,IAAI,kBAAqB,GAAA;AAAA,EACvB,WAAa,EAAA,EAAA;AAAA,EACb,YAAc,EAAA,EAAA;AAAA,EACd,UAAY,EAAA,EAAA;AAAA,EACZ,aAAe,EAAA,EAAA;AAAA,EACf,EAAI,EAAA,CAAA;AAAA,EACJ,EAAI,EAAA,CAAA;AAAA,EACJ,KAAO,EAAA,MAAA;AACT,CAAA,CAAA;AAEA,IAAI,kBAAqB,GAAA;AAAA,EACvB,SAAW,EAAA,QAAA;AAAA,EACX,KAAU,EAAA,cAAA;AACZ,CAAA,CAAA;AAEA,SAAS,gBAAgB,CAAG,EAAA;AAC1B,EAAA,CAAA,CAAE,KAAM,EAAA,CAAE,OAAQ,CAAA,SAAU,CAAG,EAAA;AAC7B,IAAI,IAAA,IAAA,GAAO,CAAE,CAAA,IAAA,CAAK,CAAC,CAAA,CAAA;AACnB,IAAI,IAAA,CAAG,WAAI,CAAA,IAAA,EAAM,OAAO,CAAA,IAAK,CAAC,CAAE,CAAA,QAAA,CAAS,CAAC,CAAA,CAAE,MAAQ,EAAA;AAClD,MAAA,IAAA,CAAK,KAAQ,GAAA,CAAA,CAAA;AAAA,KACf;AAEA,IAAM,IAAA,WAAA,CAAI,IAAM,EAAA,UAAU,CAAG,EAAA;AAC3B,MAAE,iBAAS,IAAM,EAAA;AAAA,QACf,aAAa,IAAK,CAAA,QAAA;AAAA,QAClB,cAAc,IAAK,CAAA,QAAA;AAAA,OACpB,CAAA,CAAA;AAAA,KACH;AAEA,IAAM,IAAA,WAAA,CAAI,IAAM,EAAA,UAAU,CAAG,EAAA;AAC3B,MAAE,iBAAS,IAAM,EAAA;AAAA,QACf,YAAY,IAAK,CAAA,QAAA;AAAA,QACjB,eAAe,IAAK,CAAA,QAAA;AAAA,OACrB,CAAA,CAAA;AAAA,KACH;AAEA,IAAM,IAAA,WAAA,CAAI,IAAM,EAAA,SAAS,CAAG,EAAA;AAC1B,MAAE,iBAAS,IAAM,EAAA;AAAA,QACf,aAAa,IAAK,CAAA,OAAA;AAAA,QAClB,cAAc,IAAK,CAAA,OAAA;AAAA,QACnB,YAAY,IAAK,CAAA,OAAA;AAAA,QACjB,eAAe,IAAK,CAAA,OAAA;AAAA,OACrB,CAAA,CAAA;AAAA,KACH;AAEA,IAAE,gBAAA,CAAS,MAAM,kBAAkB,CAAA,CAAA;AAEnC,IAAE,eAAA,CAAK,CAAC,aAAe,EAAA,cAAA,EAAgB,cAAc,eAAe,CAAA,EAAG,SAAU,CAAG,EAAA;AAClF,MAAA,IAAA,CAAK,CAAC,CAAA,GAAI,MAAO,CAAA,IAAA,CAAK,CAAC,CAAC,CAAA,CAAA;AAAA,KACzB,CAAA,CAAA;AAGD,IAAM,IAAA,WAAA,CAAI,IAAM,EAAA,OAAO,CAAG,EAAA;AACxB,MAAA,IAAA,CAAK,aAAa,IAAK,CAAA,KAAA,CAAA;AAAA,KACzB;AACA,IAAM,IAAA,WAAA,CAAI,IAAM,EAAA,QAAQ,CAAG,EAAA;AACzB,MAAA,IAAA,CAAK,cAAc,IAAK,CAAA,MAAA,CAAA;AAAA,KAC1B;AAAA,GACD,CAAA,CAAA;AAED,EAAA,CAAA,CAAE,KAAM,EAAA,CAAE,OAAQ,CAAA,SAAU,CAAG,EAAA;AAC7B,IAAI,IAAA,IAAA,GAAO,CAAE,CAAA,IAAA,CAAK,CAAC,CAAA,CAAA;AACnB,IAAA,IAAI,CAAG,WAAA,CAAI,IAAM,EAAA,OAAO,CAAG,EAAA;AACzB,MAAA,IAAA,CAAK,KAAQ,GAAA,EAAA,CAAA;AAAA,KACf;AACA,IAAE,gBAAA,CAAS,MAAM,kBAAkB,CAAA,CAAA;AAAA,GACpC,CAAA,CAAA;AACH,CAAA;AAEA,SAAS,iBAAiB,CAAG,EAAA;AAC3B,EAAE,eAAK,CAAA,CAAA,CAAE,KAAM,EAAA,EAAG,SAAU,CAAG,EAAA;AAC7B,IAAI,IAAA,IAAA,GAAO,CAAE,CAAA,IAAA,CAAK,CAAC,CAAA,CAAA;AAGnB,IAAM,IAAA,WAAA,CAAI,IAAM,EAAA,YAAY,CAAG,EAAA;AAC7B,MAAA,IAAA,CAAK,QAAQ,IAAK,CAAA,UAAA,CAAA;AAAA,KACb,MAAA;AACL,MAAA,OAAO,IAAK,CAAA,KAAA,CAAA;AAAA,KACd;AAEA,IAAM,IAAA,WAAA,CAAI,IAAM,EAAA,aAAa,CAAG,EAAA;AAC9B,MAAA,IAAA,CAAK,SAAS,IAAK,CAAA,WAAA,CAAA;AAAA,KACd,MAAA;AACL,MAAA,OAAO,IAAK,CAAA,MAAA,CAAA;AAAA,KACd;AAEA,IAAA,OAAO,IAAK,CAAA,UAAA,CAAA;AACZ,IAAA,OAAO,IAAK,CAAA,WAAA,CAAA;AAAA,GACb,CAAA,CAAA;AACH,CAAA;AAEA,SAAS,mBAAA,CAAoB,MAAM,IAAM,EAAA;AACvC,EAAA,IAAI,SAAY,GAAA,IAAA,CAAK,MAAO,CAAA,IAAA,GAAO,IAAI,CAAA,CAAA;AACvC,EAAI,IAAA,SAAA,CAAU,OAAS,EAAA;AACrB,IAAA,SAAA,GAAY,KAAK,MAAO,CAAA,GAAG,CAAE,CAAA,IAAA,CAAK,SAAS,IAAI,CAAA,CAAA;AAAA,GACjD;AACA,EAAO,OAAA,SAAA,CAAA;AACT,CAAA;;;AmB9KA,iBAAA,EAAA,CAAA;;;ArBUO,OAAA,CAAA,YAAA,EAAA,EAAA,CAAA,EAAA;AACA,OAAA,CAAA,iBAAA,EAAA,EAAA,CAAA,EAAA;AACA,OAAA,CAAA,aAAA,EAAA,EAAA,CAAA,EAAA;AACA,OAAA,CAAA,cAAA,EAAA,EAAA,CAAA,EAAA;AAYP,SAAS,QAAA,CAAS,MAAQ,EAAA,IAAA,EAAM,IAAM,EAAA;AACpC,EAAA,MAAM,IAAI,IAAK,CAAA,KAAA,CAAA;AACf,EAAA,MAAM,IAAI,IAAK,CAAA,MAAA,CAAA;AACf,EAAM,MAAA,CAAA,GAAA,CAAK,IAAI,CAAK,IAAA,GAAA,CAAA;AACpB,EAAA,MAAM,MAAS,GAAA;AAAA,IACb,EAAE,CAAA,EAAG,CAAI,GAAA,CAAA,EAAG,GAAG,CAAE,EAAA;AAAA,IACjB,EAAE,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAC,IAAI,CAAE,EAAA;AAAA,IAClB,EAAE,CAAG,EAAA,CAAA,GAAI,CAAG,EAAA,CAAA,EAAG,CAAC,CAAE,EAAA;AAAA,IAClB,EAAE,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAC,IAAI,CAAE,EAAA;AAAA,GACpB,CAAA;AACA,EAAA,MAAM,QAAW,GAAA,kBAAA,CAAmB,MAAQ,EAAA,CAAA,EAAG,GAAG,MAAM,CAAA,CAAA;AACxD,EAAK,IAAA,CAAA,SAAA,GAAY,SAAS,KAAO,EAAA;AAC/B,IAAO,OAAA,gBAAA,CAAiB,IAAM,EAAA,MAAA,EAAQ,KAAK,CAAA,CAAA;AAAA,GAC7C,CAAA;AACA,EAAO,OAAA,QAAA,CAAA;AACT,CAAA;AACA,SAAS,OAAA,CAAQ,MAAQ,EAAA,IAAA,EAAM,IAAM,EAAA;AACnC,EAAA,MAAM,CAAI,GAAA,CAAA,CAAA;AACV,EAAA,MAAM,IAAI,IAAK,CAAA,MAAA,CAAA;AACf,EAAA,MAAM,IAAI,CAAI,GAAA,CAAA,CAAA;AACd,EAAM,MAAA,CAAA,GAAI,IAAK,CAAA,KAAA,GAAQ,CAAI,GAAA,CAAA,CAAA;AAC3B,EAAA,MAAM,MAAS,GAAA;AAAA,IACb,EAAE,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAE,EAAA;AAAA,IACb,EAAE,CAAA,EAAG,CAAI,GAAA,CAAA,EAAG,GAAG,CAAE,EAAA;AAAA,IACjB,EAAE,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAC,IAAI,CAAE,EAAA;AAAA,IAClB,EAAE,CAAG,EAAA,CAAA,GAAI,CAAG,EAAA,CAAA,EAAG,CAAC,CAAE,EAAA;AAAA,IAClB,EAAE,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAC,CAAE,EAAA;AAAA,IACd,EAAE,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAC,IAAI,CAAE,EAAA;AAAA,GACpB,CAAA;AACA,EAAA,MAAM,QAAW,GAAA,kBAAA,CAAmB,MAAQ,EAAA,CAAA,EAAG,GAAG,MAAM,CAAA,CAAA;AACxD,EAAK,IAAA,CAAA,SAAA,GAAY,SAAS,KAAO,EAAA;AAC/B,IAAO,OAAA,gBAAA,CAAiB,IAAM,EAAA,MAAA,EAAQ,KAAK,CAAA,CAAA;AAAA,GAC7C,CAAA;AACA,EAAO,OAAA,QAAA,CAAA;AACT,CAAA;AACA,SAAS,mBAAA,CAAoB,MAAQ,EAAA,IAAA,EAAM,IAAM,EAAA;AAC/C,EAAA,MAAM,IAAI,IAAK,CAAA,KAAA,CAAA;AACf,EAAA,MAAM,IAAI,IAAK,CAAA,MAAA,CAAA;AACf,EAAA,MAAM,MAAS,GAAA;AAAA,IACb,EAAE,CAAG,EAAA,CAAC,CAAI,GAAA,CAAA,EAAG,GAAG,CAAE,EAAA;AAAA,IAClB,EAAE,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAE,EAAA;AAAA,IACb,EAAE,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAC,CAAE,EAAA;AAAA,IACd,EAAE,CAAG,EAAA,CAAC,IAAI,CAAG,EAAA,CAAA,EAAG,CAAC,CAAE,EAAA;AAAA,IACnB,EAAE,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAC,IAAI,CAAE,EAAA;AAAA,GACpB,CAAA;AACA,EAAA,MAAM,QAAW,GAAA,kBAAA,CAAmB,MAAQ,EAAA,CAAA,EAAG,GAAG,MAAM,CAAA,CAAA;AACxD,EAAK,IAAA,CAAA,SAAA,GAAY,SAAS,KAAO,EAAA;AAC/B,IAAO,OAAA,gBAAA,CAAiB,IAAM,EAAA,MAAA,EAAQ,KAAK,CAAA,CAAA;AAAA,GAC7C,CAAA;AACA,EAAO,OAAA,QAAA,CAAA;AACT,CAAA;AACA,SAAS,UAAA,CAAW,MAAQ,EAAA,IAAA,EAAM,IAAM,EAAA;AACtC,EAAA,MAAM,IAAI,IAAK,CAAA,KAAA,CAAA;AACf,EAAA,MAAM,IAAI,IAAK,CAAA,MAAA,CAAA;AACf,EAAA,MAAM,MAAS,GAAA;AAAA,IACb,EAAE,CAAG,EAAA,CAAA,CAAA,GAAK,CAAI,GAAA,CAAA,EAAG,GAAG,CAAE,EAAA;AAAA,IACtB,EAAE,CAAG,EAAA,CAAA,GAAI,CAAI,GAAA,CAAA,EAAG,GAAG,CAAE,EAAA;AAAA,IACrB,EAAE,GAAG,CAAI,GAAA,CAAA,GAAI,IAAI,CAAG,EAAA,CAAA,EAAG,CAAC,CAAE,EAAA;AAAA,IAC1B,EAAE,CAAG,EAAA,CAAA,GAAI,CAAG,EAAA,CAAA,EAAG,CAAC,CAAE,EAAA;AAAA,GACpB,CAAA;AACA,EAAA,MAAM,QAAW,GAAA,kBAAA,CAAmB,MAAQ,EAAA,CAAA,EAAG,GAAG,MAAM,CAAA,CAAA;AACxD,EAAK,IAAA,CAAA,SAAA,GAAY,SAAS,KAAO,EAAA;AAC/B,IAAO,OAAA,gBAAA,CAAiB,IAAM,EAAA,MAAA,EAAQ,KAAK,CAAA,CAAA;AAAA,GAC7C,CAAA;AACA,EAAO,OAAA,QAAA,CAAA;AACT,CAAA;AACA,SAAS,SAAA,CAAU,MAAQ,EAAA,IAAA,EAAM,IAAM,EAAA;AACrC,EAAA,MAAM,IAAI,IAAK,CAAA,KAAA,CAAA;AACf,EAAA,MAAM,IAAI,IAAK,CAAA,MAAA,CAAA;AACf,EAAA,MAAM,MAAS,GAAA;AAAA,IACb,EAAE,CAAG,EAAA,CAAA,GAAI,CAAI,GAAA,CAAA,EAAG,GAAG,CAAE,EAAA;AAAA,IACrB,EAAE,CAAG,EAAA,CAAA,GAAI,CAAI,GAAA,CAAA,EAAG,GAAG,CAAE,EAAA;AAAA,IACrB,EAAE,GAAG,CAAI,GAAA,CAAA,GAAI,IAAI,CAAG,EAAA,CAAA,EAAG,CAAC,CAAE,EAAA;AAAA,IAC1B,EAAE,CAAG,EAAA,CAAC,IAAI,CAAG,EAAA,CAAA,EAAG,CAAC,CAAE,EAAA;AAAA,GACrB,CAAA;AACA,EAAA,MAAM,QAAW,GAAA,kBAAA,CAAmB,MAAQ,EAAA,CAAA,EAAG,GAAG,MAAM,CAAA,CAAA;AACxD,EAAK,IAAA,CAAA,SAAA,GAAY,SAAS,KAAO,EAAA;AAC/B,IAAO,OAAA,gBAAA,CAAiB,IAAM,EAAA,MAAA,EAAQ,KAAK,CAAA,CAAA;AAAA,GAC7C,CAAA;AACA,EAAO,OAAA,QAAA,CAAA;AACT,CAAA;AACA,SAAS,SAAA,CAAU,MAAQ,EAAA,IAAA,EAAM,IAAM,EAAA;AACrC,EAAA,MAAM,IAAI,IAAK,CAAA,KAAA,CAAA;AACf,EAAA,MAAM,IAAI,IAAK,CAAA,MAAA,CAAA;AACf,EAAA,MAAM,MAAS,GAAA;AAAA,IACb,EAAE,CAAG,EAAA,CAAA,CAAA,GAAK,CAAI,GAAA,CAAA,EAAG,GAAG,CAAE,EAAA;AAAA,IACtB,EAAE,CAAG,EAAA,CAAA,GAAI,IAAI,CAAI,GAAA,CAAA,EAAG,GAAG,CAAE,EAAA;AAAA,IACzB,EAAE,CAAG,EAAA,CAAA,GAAI,IAAI,CAAG,EAAA,CAAA,EAAG,CAAC,CAAE,EAAA;AAAA,IACtB,EAAE,CAAG,EAAA,CAAA,GAAI,CAAG,EAAA,CAAA,EAAG,CAAC,CAAE,EAAA;AAAA,GACpB,CAAA;AACA,EAAA,MAAM,QAAW,GAAA,kBAAA,CAAmB,MAAQ,EAAA,CAAA,EAAG,GAAG,MAAM,CAAA,CAAA;AACxD,EAAK,IAAA,CAAA,SAAA,GAAY,SAAS,KAAO,EAAA;AAC/B,IAAO,OAAA,gBAAA,CAAiB,IAAM,EAAA,MAAA,EAAQ,KAAK,CAAA,CAAA;AAAA,GAC7C,CAAA;AACA,EAAO,OAAA,QAAA,CAAA;AACT,CAAA;AACA,SAAS,aAAA,CAAc,MAAQ,EAAA,IAAA,EAAM,IAAM,EAAA;AACzC,EAAA,MAAM,IAAI,IAAK,CAAA,KAAA,CAAA;AACf,EAAA,MAAM,IAAI,IAAK,CAAA,MAAA,CAAA;AACf,EAAA,MAAM,MAAS,GAAA;AAAA,IACb,EAAE,CAAA,EAAG,CAAI,GAAA,CAAA,EAAG,GAAG,CAAE,EAAA;AAAA,IACjB,EAAE,CAAG,EAAA,CAAA,GAAI,CAAI,GAAA,CAAA,EAAG,GAAG,CAAE,EAAA;AAAA,IACrB,EAAE,GAAG,CAAI,GAAA,CAAA,GAAI,IAAI,CAAG,EAAA,CAAA,EAAG,CAAC,CAAE,EAAA;AAAA,IAC1B,EAAE,CAAG,EAAA,CAAA,CAAA,GAAK,IAAI,CAAG,EAAA,CAAA,EAAG,CAAC,CAAE,EAAA;AAAA,GACzB,CAAA;AACA,EAAA,MAAM,QAAW,GAAA,kBAAA,CAAmB,MAAQ,EAAA,CAAA,EAAG,GAAG,MAAM,CAAA,CAAA;AACxD,EAAK,IAAA,CAAA,SAAA,GAAY,SAAS,KAAO,EAAA;AAC/B,IAAO,OAAA,gBAAA,CAAiB,IAAM,EAAA,MAAA,EAAQ,KAAK,CAAA,CAAA;AAAA,GAC7C,CAAA;AACA,EAAO,OAAA,QAAA,CAAA;AACT,CAAA;AACA,SAAS,oBAAA,CAAqB,MAAQ,EAAA,IAAA,EAAM,IAAM,EAAA;AAChD,EAAA,MAAM,IAAI,IAAK,CAAA,KAAA,CAAA;AACf,EAAA,MAAM,IAAI,IAAK,CAAA,MAAA,CAAA;AACf,EAAA,MAAM,MAAS,GAAA;AAAA,IACb,EAAE,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAE,EAAA;AAAA,IACb,EAAE,CAAG,EAAA,CAAA,GAAI,CAAI,GAAA,CAAA,EAAG,GAAG,CAAE,EAAA;AAAA,IACrB,EAAE,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAC,IAAI,CAAE,EAAA;AAAA,IAClB,EAAE,CAAG,EAAA,CAAA,GAAI,IAAI,CAAG,EAAA,CAAA,EAAG,CAAC,CAAE,EAAA;AAAA,IACtB,EAAE,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAC,CAAE,EAAA;AAAA,GAChB,CAAA;AACA,EAAA,MAAM,QAAW,GAAA,kBAAA,CAAmB,MAAQ,EAAA,CAAA,EAAG,GAAG,MAAM,CAAA,CAAA;AACxD,EAAK,IAAA,CAAA,SAAA,GAAY,SAAS,KAAO,EAAA;AAC/B,IAAO,OAAA,gBAAA,CAAiB,IAAM,EAAA,MAAA,EAAQ,KAAK,CAAA,CAAA;AAAA,GAC7C,CAAA;AACA,EAAO,OAAA,QAAA,CAAA;AACT,CAAA;AACA,SAAS,OAAA,CAAQ,MAAQ,EAAA,IAAA,EAAM,IAAM,EAAA;AACnC,EAAA,MAAM,IAAI,IAAK,CAAA,MAAA,CAAA;AACf,EAAM,MAAA,CAAA,GAAI,IAAK,CAAA,KAAA,GAAQ,CAAI,GAAA,CAAA,CAAA;AAC3B,EAAA,MAAM,QAAW,GAAA,MAAA,CAAO,MAAO,CAAA,MAAA,EAAQ,cAAc,CAAE,CAAA,IAAA,CAAK,IAAM,EAAA,CAAA,GAAI,CAAC,CAAE,CAAA,IAAA,CAAK,IAAM,EAAA,CAAA,GAAI,CAAC,CAAE,CAAA,IAAA,CAAK,GAAK,EAAA,CAAC,CAAI,GAAA,CAAC,CAAE,CAAA,IAAA,CAAK,KAAK,CAAC,CAAA,GAAI,CAAC,CAAA,CAAE,KAAK,OAAS,EAAA,CAAC,CAAE,CAAA,IAAA,CAAK,UAAU,CAAC,CAAA,CAAA;AAChK,EAAK,IAAA,CAAA,SAAA,GAAY,SAAS,KAAO,EAAA;AAC/B,IAAO,OAAA,aAAA,CAAc,MAAM,KAAK,CAAA,CAAA;AAAA,GAClC,CAAA;AACA,EAAO,OAAA,QAAA,CAAA;AACT,CAAA;AACA,SAAS,UAAA,CAAW,MAAQ,EAAA,IAAA,EAAM,IAAM,EAAA;AACtC,EAAA,MAAM,IAAI,IAAK,CAAA,KAAA,CAAA;AACf,EAAA,MAAM,IAAI,IAAK,CAAA,MAAA,CAAA;AACf,EAAA,MAAM,MAAS,GAAA;AAAA,IACb,EAAE,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAE,EAAA;AAAA,IACb,EAAE,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAE,EAAA;AAAA,IACb,EAAE,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAC,CAAE,EAAA;AAAA,IACd,EAAE,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAC,CAAE,EAAA;AAAA,IACd,EAAE,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAE,EAAA;AAAA,IACb,EAAE,CAAA,EAAG,CAAI,CAAA,EAAA,CAAA,EAAG,CAAE,EAAA;AAAA,IACd,EAAE,CAAA,EAAG,CAAI,GAAA,CAAA,EAAG,GAAG,CAAE,EAAA;AAAA,IACjB,EAAE,CAAG,EAAA,CAAA,GAAI,CAAG,EAAA,CAAA,EAAG,CAAC,CAAE,EAAA;AAAA,IAClB,EAAE,CAAA,EAAG,CAAI,CAAA,EAAA,CAAA,EAAG,CAAC,CAAE,EAAA;AAAA,IACf,EAAE,CAAA,EAAG,CAAI,CAAA,EAAA,CAAA,EAAG,CAAE,EAAA;AAAA,GAChB,CAAA;AACA,EAAA,MAAM,QAAW,GAAA,kBAAA,CAAmB,MAAQ,EAAA,CAAA,EAAG,GAAG,MAAM,CAAA,CAAA;AACxD,EAAK,IAAA,CAAA,SAAA,GAAY,SAAS,KAAO,EAAA;AAC/B,IAAO,OAAA,gBAAA,CAAiB,IAAM,EAAA,MAAA,EAAQ,KAAK,CAAA,CAAA;AAAA,GAC7C,CAAA;AACA,EAAO,OAAA,QAAA,CAAA;AACT,CAAA;AACA,SAAS,QAAA,CAAS,MAAQ,EAAA,IAAA,EAAM,IAAM,EAAA;AACpC,EAAA,MAAM,IAAI,IAAK,CAAA,KAAA,CAAA;AACf,EAAA,MAAM,KAAK,CAAI,GAAA,CAAA,CAAA;AACf,EAAM,MAAA,EAAA,GAAK,EAAM,IAAA,GAAA,GAAM,CAAI,GAAA,EAAA,CAAA,CAAA;AAC3B,EAAM,MAAA,CAAA,GAAI,KAAK,MAAS,GAAA,EAAA,CAAA;AACxB,EAAM,MAAA,KAAA,GAAQ,MAAS,GAAA,EAAA,GAAK,KAAQ,GAAA,EAAA,GAAK,MAAM,EAAK,GAAA,SAAA,GAAY,CAAI,GAAA,OAAA,GAAU,EAAK,GAAA,GAAA,GAAM,KAAK,SAAY,GAAA,CAAC,CAAI,GAAA,SAAA,GAAY,CAAI,GAAA,KAAA,GAAQ,EAAK,GAAA,GAAA,GAAM,EAAK,GAAA,SAAA,GAAY,CAAI,GAAA,SAAA,GAAY,CAAC,CAAA,CAAA;AACpL,EAAM,MAAA,QAAA,GAAW,MAAO,CAAA,IAAA,CAAK,gBAAkB,EAAA,EAAE,EAAE,MAAO,CAAA,MAAA,EAAQ,cAAc,CAAA,CAAE,IAAK,CAAA,GAAA,EAAK,KAAK,CAAE,CAAA,IAAA,CAAK,WAAa,EAAA,YAAA,GAAe,CAAC,CAAA,GAAI,CAAI,GAAA,GAAA,GAAM,EAAE,CAAA,GAAI,CAAI,GAAA,EAAA,CAAA,GAAM,GAAG,CAAA,CAAA;AACtK,EAAK,IAAA,CAAA,SAAA,GAAY,SAAS,KAAO,EAAA;AAC/B,IAAM,MAAA,GAAA,GAAM,aAAc,CAAA,IAAA,EAAM,KAAK,CAAA,CAAA;AACrC,IAAM,MAAA,CAAA,GAAI,GAAI,CAAA,CAAA,GAAI,IAAK,CAAA,CAAA,CAAA;AACvB,IAAI,IAAA,EAAA,IAAM,CAAM,KAAA,IAAA,CAAK,GAAI,CAAA,CAAC,CAAI,GAAA,IAAA,CAAK,KAAQ,GAAA,CAAA,IAAK,IAAK,CAAA,GAAA,CAAI,CAAC,CAAA,IAAK,KAAK,KAAQ,GAAA,CAAA,IAAK,IAAK,CAAA,GAAA,CAAI,GAAI,CAAA,CAAA,GAAI,IAAK,CAAA,CAAC,CAAI,GAAA,IAAA,CAAK,MAAS,GAAA,CAAA,GAAI,EAAK,CAAA,EAAA;AACjI,MAAA,IAAI,IAAI,EAAK,GAAA,EAAA,IAAM,CAAI,GAAA,CAAA,GAAI,KAAK,EAAK,GAAA,EAAA,CAAA,CAAA,CAAA;AACrC,MAAA,IAAI,KAAK,CAAG,EAAA;AACV,QAAI,CAAA,GAAA,IAAA,CAAK,KAAK,CAAC,CAAA,CAAA;AAAA,OACjB;AACA,MAAA,CAAA,GAAI,EAAK,GAAA,CAAA,CAAA;AACT,MAAA,IAAI,KAAM,CAAA,CAAA,GAAI,IAAK,CAAA,CAAA,GAAI,CAAG,EAAA;AACxB,QAAA,CAAA,GAAI,CAAC,CAAA,CAAA;AAAA,OACP;AACA,MAAA,GAAA,CAAI,CAAK,IAAA,CAAA,CAAA;AAAA,KACX;AACA,IAAO,OAAA,GAAA,CAAA;AAAA,GACT,CAAA;AACA,EAAO,OAAA,QAAA,CAAA;AACT,CAAA;AACA,SAAS,YAAY,OAAS,EAAA;AAC5B,EAAQ,OAAA,CAAA,MAAA,GAAS,QAAW,GAAA,QAAA,CAAA;AAC5B,EAAQ,OAAA,CAAA,MAAA,GAAS,OAAU,GAAA,OAAA,CAAA;AAC3B,EAAQ,OAAA,CAAA,MAAA,GAAS,OAAU,GAAA,OAAA,CAAA;AAC3B,EAAQ,OAAA,CAAA,MAAA,GAAS,UAAa,GAAA,UAAA,CAAA;AAC9B,EAAQ,OAAA,CAAA,MAAA,GAAS,QAAW,GAAA,QAAA,CAAA;AAC5B,EAAQ,OAAA,CAAA,MAAA,GAAS,mBAAsB,GAAA,mBAAA,CAAA;AACvC,EAAQ,OAAA,CAAA,MAAA,GAAS,UAAa,GAAA,UAAA,CAAA;AAC9B,EAAQ,OAAA,CAAA,MAAA,GAAS,SAAY,GAAA,SAAA,CAAA;AAC7B,EAAQ,OAAA,CAAA,MAAA,GAAS,SAAY,GAAA,SAAA,CAAA;AAC7B,EAAQ,OAAA,CAAA,MAAA,GAAS,aAAgB,GAAA,aAAA,CAAA;AACjC,EAAQ,OAAA,CAAA,MAAA,GAAS,oBAAuB,GAAA,oBAAA,CAAA;AAC1C,CAAA;AACA,SAAS,cAAc,QAAU,EAAA;AAC/B,EAAS,QAAA,CAAA,EAAE,UAAU,CAAA,CAAA;AACrB,EAAS,QAAA,CAAA,EAAE,SAAS,CAAA,CAAA;AACpB,EAAS,QAAA,CAAA,EAAE,SAAS,CAAA,CAAA;AACpB,EAAS,QAAA,CAAA,EAAE,YAAY,CAAA,CAAA;AACvB,EAAS,QAAA,CAAA,EAAE,UAAU,CAAA,CAAA;AACrB,EAAS,QAAA,CAAA,EAAE,qBAAqB,CAAA,CAAA;AAChC,EAAS,QAAA,CAAA,EAAE,YAAY,CAAA,CAAA;AACvB,EAAS,QAAA,CAAA,EAAE,WAAW,CAAA,CAAA;AACtB,EAAS,QAAA,CAAA,EAAE,WAAW,CAAA,CAAA;AACtB,EAAS,QAAA,CAAA,EAAE,eAAe,CAAA,CAAA;AAC1B,EAAS,QAAA,CAAA,EAAE,sBAAsB,CAAA,CAAA;AACnC,CAAA;AACA,SAAS,kBAAmB,CAAA,MAAA,EAAQ,CAAG,EAAA,CAAA,EAAG,MAAQ,EAAA;AAChD,EAAA,OAAO,MAAO,CAAA,MAAA,CAAO,SAAW,EAAA,cAAc,CAAE,CAAA,IAAA;AAAA,IAC9C,QAAA;AAAA,IACA,MAAA,CAAO,GAAI,CAAA,SAAS,CAAG,EAAA;AACrB,MAAO,OAAA,CAAA,CAAE,CAAI,GAAA,GAAA,GAAM,CAAE,CAAA,CAAA,CAAA;AAAA,KACtB,CAAE,CAAA,IAAA,CAAK,GAAG,CAAA;AAAA,GACb,CAAE,IAAK,CAAA,WAAA,EAAa,YAAe,GAAA,CAAC,IAAI,CAAI,GAAA,GAAA,GAAM,CAAI,GAAA,CAAA,GAAI,GAAG,CAAA,CAAA;AAC/D,CAAA;AACA,IAAM,eAAkB,GAAA;AAAA,EACtB,WAAA;AAAA,EACA,aAAA;AACF,CAAA,CAAA;AACA,IAAM,OAAO,EAAC,CAAA;AACd,IAAM,OAAA,GAAU,SAAS,GAAK,EAAA;AAC5B,EAAM,MAAA,IAAA,GAAO,MAAO,CAAA,IAAA,CAAK,GAAG,CAAA,CAAA;AAC5B,EAAA,KAAA,MAAW,OAAO,IAAM,EAAA;AACtB,IAAK,IAAA,CAAA,GAAG,CAAI,GAAA,GAAA,CAAI,GAAG,CAAA,CAAA;AAAA,GACrB;AACF,CAAA,CAAA;AACA,IAAM,cAAc,eAAe,IAAA,EAAM,GAAG,KAAO,EAAA,IAAA,EAAM,MAAM,OAAS,EAAA;AACtE,EAAA,MAAMA,IAAM,GAAA,CAAC,IAAO,GAAA,cAAA,CAAO,CAAQ,KAAA,EAAA,KAAK,CAAI,EAAA,CAAA,CAAA,GAAI,IAAK,CAAA,MAAA,CAAO,CAAQ,KAAA,EAAA,KAAK,CAAI,EAAA,CAAA,CAAA,CAAA;AAC7E,EAAM,MAAA,GAAA,GAAM,CAAC,IAAA,GAAO,QAAW,GAAA,IAAA,CAAA;AAC/B,EAAM,MAAA,IAAA,GAAO,MAAO,CAAA,IAAA,CAAK,IAAI,CAAA,CAAA;AAC7B,EAAA,KAAA,MAAW,MAAM,IAAM,EAAA;AACrB,IAAM,MAAA,MAAA,GAAS,KAAK,EAAE,CAAA,CAAA;AACtB,IAAA,IAAI,QAAW,GAAA,SAAA,CAAA;AACf,IAAI,IAAA,MAAA,CAAO,OAAQ,CAAA,MAAA,GAAS,CAAG,EAAA;AAC7B,MAAW,QAAA,GAAA,MAAA,CAAO,OAAQ,CAAA,IAAA,CAAK,GAAG,CAAA,CAAA;AAAA,KACpC;AACA,IAAM,MAAA,MAAA,GAAS,kBAAmB,CAAA,MAAA,CAAO,MAAM,CAAA,CAAA;AAC/C,IAAA,IAAI,aAAa,MAAO,CAAA,IAAA,KAAS,KAAS,CAAA,GAAA,MAAA,CAAO,OAAO,MAAO,CAAA,EAAA,CAAA;AAC/D,IAAI,IAAA,UAAA,CAAA;AACJ,IAAA,IAAI,QAAS,CAAA,SAAA,EAAY,CAAA,SAAA,CAAU,UAAU,CAAG,EAAA;AAC9C,MAAA,MAAM,IAAO,GAAA;AAAA,QACX,OAAO,MAAM,WAAA;AAAA,UACX,UAAW,CAAA,OAAA;AAAA,YACT,sBAAA;AAAA;AAAA,YAEA,CAAC,CAAM,KAAA,CAAA,UAAA,EAAa,EAAE,OAAQ,CAAA,GAAA,EAAK,GAAG,CAAC,CAAA,MAAA,CAAA;AAAA,WACzC;AAAA,UACA,SAAU,EAAA;AAAA,SACZ;AAAA,OACF,CAAA;AACA,MAAA,UAAA,GAAa,YAAaA,CAAAA,IAAAA,EAAK,IAAI,CAAA,CAAE,IAAK,EAAA,CAAA;AAC1C,MAAW,UAAA,CAAA,UAAA,CAAW,YAAY,UAAU,CAAA,CAAA;AAAA,KACvC,MAAA;AACL,MAAA,MAAM,QAAW,GAAA,GAAA,CAAI,eAAgB,CAAA,4BAAA,EAA8B,MAAM,CAAA,CAAA;AACzE,MAAA,QAAA,CAAS,aAAa,OAAS,EAAA,MAAA,CAAO,WAAW,OAAQ,CAAA,QAAA,EAAU,OAAO,CAAC,CAAA,CAAA;AAC3E,MAAA,MAAM,IAAO,GAAA,UAAA,CAAW,KAAM,CAAA,QAAA,CAAO,cAAc,CAAA,CAAA;AACnD,MAAA,KAAA,MAAW,OAAO,IAAM,EAAA;AACtB,QAAA,MAAM,KAAQ,GAAA,GAAA,CAAI,eAAgB,CAAA,4BAAA,EAA8B,OAAO,CAAA,CAAA;AACvE,QAAM,KAAA,CAAA,cAAA,CAAe,sCAAwC,EAAA,WAAA,EAAa,UAAU,CAAA,CAAA;AACpF,QAAM,KAAA,CAAA,YAAA,CAAa,MAAM,KAAK,CAAA,CAAA;AAC9B,QAAM,KAAA,CAAA,YAAA,CAAa,KAAK,GAAG,CAAA,CAAA;AAC3B,QAAA,KAAA,CAAM,WAAc,GAAA,GAAA,CAAA;AACpB,QAAA,QAAA,CAAS,YAAY,KAAK,CAAA,CAAA;AAAA,OAC5B;AACA,MAAa,UAAA,GAAA,QAAA,CAAA;AAAA,KACf;AACA,IAAA,IAAI,MAAS,GAAA,CAAA,CAAA;AACb,IAAA,IAAI,MAAS,GAAA,EAAA,CAAA;AACb,IAAA,QAAQ,OAAO,IAAM;AAAA,MACnB,KAAK,OAAA;AACH,QAAS,MAAA,GAAA,CAAA,CAAA;AACT,QAAS,MAAA,GAAA,MAAA,CAAA;AACT,QAAA,MAAA;AAAA,MACF,KAAK,QAAA;AACH,QAAS,MAAA,GAAA,MAAA,CAAA;AACT,QAAA,MAAA;AAAA,MACF,KAAK,SAAA;AACH,QAAS,MAAA,GAAA,UAAA,CAAA;AACT,QAAA,MAAA;AAAA,MACF,KAAK,SAAA;AACH,QAAS,MAAA,GAAA,SAAA,CAAA;AACT,QAAA,MAAA;AAAA,MACF,KAAK,KAAA;AACH,QAAS,MAAA,GAAA,qBAAA,CAAA;AACT,QAAA,MAAA;AAAA,MACF,KAAK,YAAA;AACH,QAAS,MAAA,GAAA,YAAA,CAAA;AACT,QAAA,MAAA;AAAA,MACF,KAAK,WAAA;AACH,QAAS,MAAA,GAAA,WAAA,CAAA;AACT,QAAA,MAAA;AAAA,MACF,KAAK,WAAA;AACH,QAAS,MAAA,GAAA,WAAA,CAAA;AACT,QAAA,MAAA;AAAA,MACF,KAAK,eAAA;AACH,QAAS,MAAA,GAAA,eAAA,CAAA;AACT,QAAA,MAAA;AAAA,MACF,KAAK,WAAA;AACH,QAAS,MAAA,GAAA,qBAAA,CAAA;AACT,QAAA,MAAA;AAAA,MACF,KAAK,QAAA;AACH,QAAS,MAAA,GAAA,QAAA,CAAA;AACT,QAAA,MAAA;AAAA,MACF,KAAK,SAAA;AACH,QAAS,MAAA,GAAA,SAAA,CAAA;AACT,QAAA,MAAA;AAAA,MACF,KAAK,SAAA;AACH,QAAS,MAAA,GAAA,SAAA,CAAA;AACT,QAAA,MAAA;AAAA,MACF,KAAK,YAAA;AACH,QAAS,MAAA,GAAA,YAAA,CAAA;AACT,QAAA,MAAA;AAAA,MACF,KAAK,UAAA;AACH,QAAS,MAAA,GAAA,UAAA,CAAA;AACT,QAAA,MAAA;AAAA,MACF,KAAK,OAAA;AACH,QAAS,MAAA,GAAA,MAAA,CAAA;AACT,QAAA,MAAA;AAAA,MACF;AACE,QAAS,MAAA,GAAA,MAAA,CAAA;AAAA,KACb;AACA,IAAA,KAAA,CAAI,IAAK,CAAA,aAAA,EAAe,MAAO,CAAA,EAAA,EAAI,OAAO,KAAK,CAAA,CAAA;AAC/C,IAAA,CAAA,CAAE,QAAQ,OAAQ,CAAA,EAAA,CAAG,WAAY,CAAA,MAAA,CAAO,EAAE,CAAG,EAAA;AAAA,MAC3C,SAAW,EAAA,KAAA;AAAA,MACX,YAAY,MAAO,CAAA,UAAA;AAAA,MACnB,KAAO,EAAA,MAAA;AAAA,MACP,KAAO,EAAA,UAAA;AAAA,MACP,EAAI,EAAA,MAAA;AAAA,MACJ,EAAI,EAAA,MAAA;AAAA,MACJ,KAAO,EAAA,QAAA;AAAA,MACP,OAAO,MAAO,CAAA,KAAA;AAAA,MACd,EAAI,EAAA,OAAA,CAAQ,EAAG,CAAA,WAAA,CAAY,OAAO,EAAE,CAAA;AAAA,KACrC,CAAA,CAAA;AAAA,GACH;AACF,CAAA,CAAA;AACA,IAAM,QAAW,GAAA,eAAe,KAAO,EAAA,CAAA,EAAG,OAAS,EAAA;AACjD,EAAA,IAAI,GAAM,GAAA,CAAA,CAAA;AACV,EAAI,IAAA,YAAA,CAAA;AACJ,EAAI,IAAA,iBAAA,CAAA;AACJ,EAAI,IAAA,KAAA,CAAM,iBAAiB,KAAQ,CAAA,EAAA;AACjC,IAAM,MAAA,aAAA,GAAgB,kBAAmB,CAAA,KAAA,CAAM,YAAY,CAAA,CAAA;AAC3D,IAAA,YAAA,GAAe,aAAc,CAAA,KAAA,CAAA;AAC7B,IAAA,iBAAA,GAAoB,aAAc,CAAA,UAAA,CAAA;AAAA,GACpC;AACA,EAAA,KAAA,MAAW,QAAQ,KAAO,EAAA;AACxB,IAAA,GAAA,EAAA,CAAA;AACA,IAAA,MAAM,MAAS,GAAA,IAAA,GAAO,IAAK,CAAA,KAAA,GAAQ,MAAM,IAAK,CAAA,GAAA,CAAA;AAC9C,IAAM,MAAA,aAAA,GAAgB,QAAQ,IAAK,CAAA,KAAA,CAAA;AACnC,IAAM,MAAA,WAAA,GAAc,QAAQ,IAAK,CAAA,GAAA,CAAA;AACjC,IAAA,MAAM,WAAW,EAAC,CAAA;AAClB,IAAI,IAAA,IAAA,CAAK,SAAS,YAAc,EAAA;AAC9B,MAAA,QAAA,CAAS,SAAY,GAAA,MAAA,CAAA;AAAA,KAChB,MAAA;AACL,MAAA,QAAA,CAAS,SAAY,GAAA,QAAA,CAAA;AAAA,KACvB;AACA,IAAA,IAAI,KAAQ,GAAA,EAAA,CAAA;AACZ,IAAA,IAAI,UAAa,GAAA,EAAA,CAAA;AACjB,IAAI,IAAA,IAAA,CAAK,UAAU,KAAQ,CAAA,EAAA;AACzB,MAAM,MAAA,MAAA,GAAS,kBAAmB,CAAA,IAAA,CAAK,KAAK,CAAA,CAAA;AAC5C,MAAA,KAAA,GAAQ,MAAO,CAAA,KAAA,CAAA;AACf,MAAA,UAAA,GAAa,MAAO,CAAA,UAAA,CAAA;AAAA,KACf,MAAA;AACL,MAAA,QAAQ,KAAK,MAAQ;AAAA,QACnB,KAAK,QAAA;AACH,UAAQ,KAAA,GAAA,WAAA,CAAA;AACR,UAAA,IAAI,iBAAiB,KAAQ,CAAA,EAAA;AAC3B,YAAQ,KAAA,GAAA,YAAA,CAAA;AAAA,WACV;AACA,UAAA,IAAI,sBAAsB,KAAQ,CAAA,EAAA;AAChC,YAAa,UAAA,GAAA,iBAAA,CAAA;AAAA,WACf;AACA,UAAA,MAAA;AAAA,QACF,KAAK,QAAA;AACH,UAAQ,KAAA,GAAA,gDAAA,CAAA;AACR,UAAA,MAAA;AAAA,QACF,KAAK,OAAA;AACH,UAAQ,KAAA,GAAA,gCAAA,CAAA;AACR,UAAA,MAAA;AAAA,OACJ;AAAA,KACF;AACA,IAAA,QAAA,CAAS,KAAQ,GAAA,KAAA,CAAA;AACjB,IAAA,QAAA,CAAS,UAAa,GAAA,UAAA,CAAA;AACtB,IAAI,IAAA,IAAA,CAAK,gBAAgB,KAAQ,CAAA,EAAA;AAC/B,MAAA,QAAA,CAAS,KAAQ,GAAA,kBAAA,CAAmB,IAAK,CAAA,WAAA,EAAa,cAAW,CAAA,CAAA;AAAA,KACnE,MAAA,IAAW,KAAM,CAAA,kBAAA,KAAuB,KAAQ,CAAA,EAAA;AAC9C,MAAA,QAAA,CAAS,KAAQ,GAAA,kBAAA,CAAmB,KAAM,CAAA,kBAAA,EAAoB,cAAW,CAAA,CAAA;AAAA,KACpE,MAAA;AACL,MAAA,QAAA,CAAS,KAAQ,GAAA,kBAAA,CAAmB,IAAK,CAAA,KAAA,EAAO,cAAW,CAAA,CAAA;AAAA,KAC7D;AACA,IAAI,IAAA,IAAA,CAAK,SAAS,KAAQ,CAAA,EAAA;AACxB,MAAI,IAAA,IAAA,CAAK,UAAU,KAAQ,CAAA,EAAA;AACzB,QAAA,QAAA,CAAS,cAAiB,GAAA,YAAA,CAAA;AAAA,OAC5B;AAAA,KACK,MAAA;AACL,MAAA,QAAA,CAAS,cAAiB,GAAA,YAAA,CAAA;AAC1B,MAAA,QAAA,CAAS,QAAW,GAAA,GAAA,CAAA;AACpB,MAAA,IAAI,QAAS,CAAA,SAAA,EAAY,CAAA,SAAA,CAAU,UAAU,CAAG,EAAA;AAC9C,QAAA,QAAA,CAAS,SAAY,GAAA,MAAA,CAAA;AACrB,QAAS,QAAA,CAAA,KAAA,GAAQ,CAAe,YAAA,EAAA,MAAM,CAAwB,qBAAA,EAAA,aAAa,CAAO,IAAA,EAAA,WAAW,CAAY,SAAA,EAAA,QAAA,CAAS,UAAU,CAAA,EAAA,EAAK,MAAM,WAAA;AAAA,UACrI,KAAK,IAAK,CAAA,OAAA;AAAA,YACR,sBAAA;AAAA;AAAA,YAEA,CAAC,CAAM,KAAA,CAAA,UAAA,EAAa,EAAE,OAAQ,CAAA,GAAA,EAAK,GAAG,CAAC,CAAA,MAAA,CAAA;AAAA,WACzC;AAAA,UACA,SAAU,EAAA;AAAA,SACX,CAAA,OAAA,CAAA,CAAA;AAAA,OACI,MAAA;AACL,QAAA,QAAA,CAAS,SAAY,GAAA,MAAA,CAAA;AACrB,QAAA,QAAA,CAAS,QAAQ,IAAK,CAAA,IAAA,CAAK,OAAQ,CAAA,QAAA,CAAO,gBAAgB,IAAI,CAAA,CAAA;AAC9D,QAAI,IAAA,IAAA,CAAK,UAAU,KAAQ,CAAA,EAAA;AACzB,UAAS,QAAA,CAAA,KAAA,GAAQ,SAAS,KAAS,IAAA,6CAAA,CAAA;AAAA,SACrC;AACA,QAAA,QAAA,CAAS,UAAa,GAAA,QAAA,CAAS,UAAW,CAAA,OAAA,CAAQ,UAAU,OAAO,CAAA,CAAA;AAAA,OACrE;AAAA,KACF;AACA,IAAA,QAAA,CAAS,EAAK,GAAA,MAAA,CAAA;AACd,IAAS,QAAA,CAAA,KAAA,GAAQ,gBAAgB,GAAM,GAAA,WAAA,CAAA;AACvC,IAAS,QAAA,CAAA,MAAA,GAAS,KAAK,MAAU,IAAA,CAAA,CAAA;AACjC,IAAA,CAAA,CAAE,OAAQ,CAAA,OAAA,CAAQ,EAAG,CAAA,WAAA,CAAY,KAAK,KAAK,CAAA,EAAG,OAAQ,CAAA,EAAA,CAAG,WAAY,CAAA,IAAA,CAAK,GAAG,CAAA,EAAG,UAAU,GAAG,CAAA,CAAA;AAAA,GAC/F;AACF,CAAA,CAAA;AACA,IAAM,UAAA,GAAa,SAAS,IAAA,EAAM,OAAS,EAAA;AACzC,EAAA,KAAA,CAAI,KAAK,oBAAoB,CAAA,CAAA;AAC7B,EAAO,OAAA,OAAA,CAAQ,GAAG,UAAW,EAAA,CAAA;AAC/B,CAAA,CAAA;AACA,IAAM,IAAO,GAAA,eAAe,IAAM,EAAA,EAAA,EAAI,UAAU,OAAS,EAAA;AACvD,EAAA,KAAA,CAAI,KAAK,mBAAmB,CAAA,CAAA;AAC5B,EAAA,MAAM,EAAE,aAAA,EAAe,SAAW,EAAA,KAAA,KAAU,SAAU,EAAA,CAAA;AACtD,EAAI,IAAA,cAAA,CAAA;AACJ,EAAA,IAAI,kBAAkB,SAAW,EAAA;AAC/B,IAAiB,cAAA,GAAA,cAAA,CAAO,OAAO,EAAE,CAAA,CAAA;AAAA,GACnC;AACA,EAAA,MAAM,IAAO,GAAA,aAAA,KAAkB,SAAY,GAAA,cAAA,CAAO,cAAe,CAAA,KAAA,EAAQ,CAAA,CAAC,CAAE,CAAA,eAAA,CAAgB,IAAI,CAAA,GAAI,eAAO,MAAM,CAAA,CAAA;AACjH,EAAM,MAAA,GAAA,GAAM,kBAAkB,SAAY,GAAA,cAAA,CAAe,OAAQ,CAAA,CAAC,EAAE,eAAkB,GAAA,QAAA,CAAA;AACtF,EAAI,IAAA,GAAA,GAAM,OAAQ,CAAA,EAAA,CAAG,YAAa,EAAA,CAAA;AAClC,EAAA,IAAI,QAAQ,KAAQ,CAAA,EAAA;AAClB,IAAM,GAAA,GAAA,IAAA,CAAA;AAAA,GACR;AACA,EAAM,MAAA,WAAA,GAAc,MAAM,WAAe,IAAA,EAAA,CAAA;AACzC,EAAM,MAAA,WAAA,GAAc,MAAM,WAAe,IAAA,EAAA,CAAA;AACzC,EAAM,MAAA,CAAA,GAAI,IAAa,KAAM,CAAA;AAAA,IAC3B,UAAY,EAAA,IAAA;AAAA,IACZ,QAAU,EAAA,IAAA;AAAA,GACX,EAAE,QAAS,CAAA;AAAA,IACV,OAAS,EAAA,GAAA;AAAA,IACT,OAAS,EAAA,WAAA;AAAA,IACT,OAAS,EAAA,WAAA;AAAA,IACT,OAAS,EAAA,CAAA;AAAA,IACT,OAAS,EAAA,CAAA;AAAA,GACV,CAAE,CAAA,mBAAA,CAAoB,WAAW;AAChC,IAAA,OAAO,EAAC,CAAA;AAAA,GACT,CAAA,CAAA;AACD,EAAI,IAAA,IAAA,CAAA;AACJ,EAAM,MAAA,SAAA,GAAY,OAAQ,CAAA,EAAA,CAAG,YAAa,EAAA,CAAA;AAC1C,EAAA,KAAA,IAAS,KAAK,SAAU,CAAA,MAAA,GAAS,CAAG,EAAA,EAAA,IAAM,GAAG,EAAM,EAAA,EAAA;AACjD,IAAA,IAAA,GAAO,UAAU,EAAE,CAAA,CAAA;AACnB,IAAQ,OAAA,CAAA,EAAA,CAAG,UAAU,IAAK,CAAA,EAAA,EAAI,KAAK,KAAO,EAAA,OAAA,EAAS,KAAQ,CAAA,EAAA,IAAA,CAAK,OAAO,CAAA,CAAA;AAAA,GACzE;AACA,EAAM,MAAA,IAAA,GAAO,OAAQ,CAAA,EAAA,CAAG,WAAY,EAAA,CAAA;AACpC,EAAI,KAAA,CAAA,IAAA,CAAK,gBAAgB,IAAI,CAAA,CAAA;AAC7B,EAAM,MAAA,KAAA,GAAQ,OAAQ,CAAA,EAAA,CAAG,QAAS,EAAA,CAAA;AAClC,EAAA,IAAI,CAAI,GAAA,CAAA,CAAA;AACR,EAAA,KAAK,IAAI,SAAU,CAAA,MAAA,GAAS,CAAG,EAAA,CAAA,IAAK,GAAG,CAAK,EAAA,EAAA;AAC1C,IAAA,IAAA,GAAO,UAAU,CAAC,CAAA,CAAA;AAClB,IAAU,iBAAA,CAAA,SAAS,CAAE,CAAA,MAAA,CAAO,MAAM,CAAA,CAAA;AAClC,IAAA,KAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,IAAK,CAAA,KAAA,CAAM,QAAQ,CAAK,EAAA,EAAA;AAC1C,MAAI,KAAA,CAAA,IAAA;AAAA,QACF,kBAAA;AAAA,QACA,IAAA,CAAK,MAAM,CAAC,CAAA;AAAA,QACZ,QAAQ,EAAG,CAAA,WAAA,CAAY,IAAK,CAAA,KAAA,CAAM,CAAC,CAAC,CAAA;AAAA,QACpC,OAAQ,CAAA,EAAA,CAAG,WAAY,CAAA,IAAA,CAAK,EAAE,CAAA;AAAA,OAChC,CAAA;AACA,MAAA,CAAA,CAAE,SAAU,CAAA,OAAA,CAAQ,EAAG,CAAA,WAAA,CAAY,KAAK,KAAM,CAAA,CAAC,CAAC,CAAA,EAAG,OAAQ,CAAA,EAAA,CAAG,WAAY,CAAA,IAAA,CAAK,EAAE,CAAC,CAAA,CAAA;AAAA,KACpF;AAAA,GACF;AACA,EAAA,MAAM,YAAY,IAAM,EAAA,CAAA,EAAG,EAAI,EAAA,IAAA,EAAM,KAAK,OAAO,CAAA,CAAA;AACjD,EAAM,MAAA,QAAA,CAAS,KAAO,EAAA,CAAA,EAAG,OAAO,CAAA,CAAA;AAChC,EAAM,MAAA,QAAA,GAAW,IAAI,MAAO,EAAA,CAAA;AAC5B,EAAA,eAAA,CAAgB,YAAY,QAAQ,CAAA,CAAA;AACpC,EAAS,QAAA,CAAA,MAAA,GAAS,IAAO,GAAA,SAASC,QAAO,MAAQ,EAAA,GAAA,EAAK,MAAM,IAAM,EAAA;AAChE,IAAA,MAAM,MAAS,GAAA,MAAA,CAAO,MAAO,CAAA,QAAQ,EAAE,IAAK,CAAA,IAAA,EAAM,GAAG,CAAA,CAAE,KAAK,SAAW,EAAA,WAAW,CAAE,CAAA,IAAA,CAAK,QAAQ,CAAC,CAAA,CAAE,IAAK,CAAA,MAAA,EAAQ,CAAC,CAAE,CAAA,IAAA,CAAK,aAAe,EAAA,aAAa,EAAE,IAAK,CAAA,aAAA,EAAe,CAAC,CAAA,CAAE,KAAK,cAAgB,EAAA,CAAC,CAAE,CAAA,IAAA,CAAK,UAAU,MAAM,CAAA,CAAA;AAC3N,IAAA,MAAM,OAAO,MAAO,CAAA,MAAA,CAAO,MAAM,CAAE,CAAA,IAAA,CAAK,KAAK,qBAAqB,CAAA,CAAA;AAClE,IAAA,UAAA,CAAW,IAAM,EAAA,IAAA,CAAK,IAAO,GAAA,OAAO,CAAC,CAAA,CAAA;AAAA,GACvC,CAAA;AACA,EAAA,QAAA,CAAS,QAAS,CAAA,MAAA,GAAS,SAASA,OAAAA,CAAO,QAAQ,GAAK,EAAA;AACtD,IAAA,MAAM,MAAS,GAAA,MAAA,CAAO,MAAO,CAAA,QAAQ,EAAE,IAAK,CAAA,IAAA,EAAM,GAAG,CAAA,CAAE,KAAK,SAAW,EAAA,WAAW,CAAE,CAAA,IAAA,CAAK,QAAQ,CAAC,CAAA,CAAE,IAAK,CAAA,MAAA,EAAQ,CAAC,CAAE,CAAA,IAAA,CAAK,aAAe,EAAA,aAAa,EAAE,IAAK,CAAA,aAAA,EAAe,CAAC,CAAA,CAAE,KAAK,cAAgB,EAAA,CAAC,CAAE,CAAA,IAAA,CAAK,UAAU,MAAM,CAAA,CAAA;AAC3N,IAAA,MAAA,CAAO,OAAO,MAAM,CAAA,CAAE,IAAK,CAAA,GAAA,EAAK,uBAAuB,CAAE,CAAA,IAAA,CAAK,OAAS,EAAA,eAAe,EAAE,KAAM,CAAA,cAAA,EAAgB,CAAC,CAAE,CAAA,KAAA,CAAM,oBAAoB,KAAK,CAAA,CAAA;AAAA,GAClJ,CAAA;AACA,EAAA,MAAMD,IAAM,GAAA,IAAA,CAAK,MAAO,CAAA,CAAA,KAAA,EAAQ,EAAE,CAAI,EAAA,CAAA,CAAA,CAAA;AACtC,EAAA,MAAM,OAAU,GAAA,IAAA,CAAK,MAAO,CAAA,GAAA,GAAM,KAAK,IAAI,CAAA,CAAA;AAC3C,EAAA,QAAA,CAAS,SAAS,CAAC,CAAA,CAAA;AACnB,EAAA,OAAA,CAAQ,SAAU,CAAA,QAAQ,CAAE,CAAA,IAAA,CAAK,SAAS,WAAW;AACnD,IAAA,OAAO,OAAQ,CAAA,EAAA,CAAG,UAAW,CAAA,IAAA,CAAK,EAAE,CAAA,CAAA;AAAA,GACrC,CAAA,CAAA;AACD,EAAQ,OAAA,CAAA,EAAA,CAAG,UAAW,CAAA,UAAA,GAAa,CAAC,CAAA,CAAA;AACpC,EAAA,KAAK,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,SAAA,CAAU,QAAQ,CAAK,EAAA,EAAA;AACrC,IAAA,IAAA,GAAO,UAAU,CAAC,CAAA,CAAA;AAClB,IAAI,IAAA,IAAA,CAAK,UAAU,WAAa,EAAA;AAC9B,MAAA,MAAM,eAAe,GAAI,CAAA,gBAAA;AAAA,QACvB,GAAA,GAAM,KAAK,QAAW,GAAA,OAAA,CAAQ,GAAG,WAAY,CAAA,IAAA,CAAK,EAAE,CAAI,GAAA,SAAA;AAAA,OAC1D,CAAA;AACA,MAAA,MAAM,YAAY,GAAI,CAAA,gBAAA;AAAA,QACpB,GAAA,GAAM,KAAK,QAAW,GAAA,OAAA,CAAQ,GAAG,WAAY,CAAA,IAAA,CAAK,EAAE,CAAI,GAAA,IAAA;AAAA,OAC1D,CAAA;AACA,MAAA,MAAM,IAAO,GAAA,YAAA,CAAa,CAAC,CAAA,CAAE,EAAE,OAAQ,CAAA,KAAA,CAAA;AACvC,MAAA,MAAM,IAAO,GAAA,YAAA,CAAa,CAAC,CAAA,CAAE,EAAE,OAAQ,CAAA,KAAA,CAAA;AACvC,MAAA,MAAM,MAAS,GAAA,YAAA,CAAa,CAAC,CAAA,CAAE,MAAM,OAAQ,CAAA,KAAA,CAAA;AAC7C,MAAA,MAAM,OAAU,GAAA,cAAA,CAAO,SAAU,CAAA,CAAC,CAAC,CAAA,CAAA;AACnC,MAAM,MAAA,EAAA,GAAK,OAAQ,CAAA,MAAA,CAAO,QAAQ,CAAA,CAAA;AAClC,MAAG,EAAA,CAAA,IAAA,CAAK,aAAa,CAAa,UAAA,EAAA,IAAA,GAAO,SAAS,CAAC,CAAA,EAAA,EAAK,IAAO,GAAA,EAAE,CAAG,CAAA,CAAA,CAAA,CAAA;AACpE,MAAG,EAAA,CAAA,IAAA,CAAK,IAAM,EAAA,EAAA,GAAK,MAAM,CAAA,CAAA;AACzB,MAAA,KAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,IAAK,CAAA,OAAA,CAAQ,QAAQ,CAAK,EAAA,EAAA;AAC5C,QAAA,SAAA,CAAU,CAAC,CAAE,CAAA,SAAA,CAAU,IAAI,IAAK,CAAA,OAAA,CAAQ,CAAC,CAAC,CAAA,CAAA;AAAA,OAC5C;AAAA,KACF;AAAA,GACF;AACA,EAAI,IAAA,CAAC,MAAM,UAAY,EAAA;AACrB,IAAA,MAAM,MAAS,GAAA,GAAA,CAAI,gBAAiB,CAAA,OAAA,GAAU,KAAK,sBAAsB,CAAA,CAAA;AACzE,IAAA,KAAA,MAAW,SAAS,MAAQ,EAAA;AAC1B,MAAM,MAAA,GAAA,GAAM,MAAM,OAAQ,EAAA,CAAA;AAC1B,MAAA,MAAME,KAAO,GAAA,GAAA,CAAI,eAAgB,CAAA,4BAAA,EAA8B,MAAM,CAAA,CAAA;AACrE,MAAAA,KAAAA,CAAK,YAAa,CAAA,IAAA,EAAM,CAAC,CAAA,CAAA;AACzB,MAAAA,KAAAA,CAAK,YAAa,CAAA,IAAA,EAAM,CAAC,CAAA,CAAA;AACzB,MAAAA,KAAK,CAAA,YAAA,CAAa,OAAS,EAAA,GAAA,CAAI,KAAK,CAAA,CAAA;AACpC,MAAAA,KAAK,CAAA,YAAA,CAAa,QAAU,EAAA,GAAA,CAAI,MAAM,CAAA,CAAA;AACtC,MAAM,KAAA,CAAA,YAAA,CAAaA,KAAM,EAAA,KAAA,CAAM,UAAU,CAAA,CAAA;AAAA,KAC3C;AAAA,GACF;AACA,EAAA,mBAAA,CAAkB,CAAGF,EAAAA,IAAAA,EAAK,KAAM,CAAA,cAAA,EAAgB,MAAM,WAAW,CAAA,CAAA;AACjE,EAAM,MAAA,IAAA,GAAO,MAAO,CAAA,IAAA,CAAK,IAAI,CAAA,CAAA;AAC7B,EAAK,IAAA,CAAA,OAAA,CAAQ,SAAS,GAAK,EAAA;AACzB,IAAM,MAAA,MAAA,GAAS,KAAK,GAAG,CAAA,CAAA;AACvB,IAAA,IAAI,OAAO,IAAM,EAAA;AACf,MAAM,MAAA,IAAA,GAAO,IAAK,CAAA,MAAA,CAAO,GAAM,GAAA,EAAA,GAAK,QAAW,GAAA,OAAA,CAAQ,EAAG,CAAA,WAAA,CAAY,GAAG,CAAA,GAAI,IAAI,CAAA,CAAA;AACjF,MAAA,IAAI,IAAM,EAAA;AACR,QAAA,MAAM,IAAO,GAAA,GAAA,CAAI,eAAgB,CAAA,4BAAA,EAA8B,GAAG,CAAA,CAAA;AAClE,QAAA,IAAA,CAAK,eAAe,4BAA8B,EAAA,OAAA,EAAS,OAAO,OAAQ,CAAA,IAAA,CAAK,GAAG,CAAC,CAAA,CAAA;AACnF,QAAA,IAAA,CAAK,cAAe,CAAA,4BAAA,EAA8B,MAAQ,EAAA,MAAA,CAAO,IAAI,CAAA,CAAA;AACrE,QAAK,IAAA,CAAA,cAAA,CAAe,4BAA8B,EAAA,KAAA,EAAO,UAAU,CAAA,CAAA;AACnE,QAAA,IAAI,kBAAkB,SAAW,EAAA;AAC/B,UAAK,IAAA,CAAA,cAAA,CAAe,4BAA8B,EAAA,QAAA,EAAU,MAAM,CAAA,CAAA;AAAA,SACpE,MAAA,IAAW,OAAO,UAAY,EAAA;AAC5B,UAAA,IAAA,CAAK,cAAe,CAAA,4BAAA,EAA8B,QAAU,EAAA,MAAA,CAAO,UAAU,CAAA,CAAA;AAAA,SAC/E;AACA,QAAM,MAAA,QAAA,GAAW,IAAK,CAAA,MAAA,CAAO,WAAW;AACtC,UAAO,OAAA,IAAA,CAAA;AAAA,WACN,cAAc,CAAA,CAAA;AACjB,QAAM,MAAA,KAAA,GAAQ,IAAK,CAAA,MAAA,CAAO,kBAAkB,CAAA,CAAA;AAC5C,QAAA,IAAI,KAAO,EAAA;AACT,UAAA,QAAA,CAAS,OAAO,WAAW;AACzB,YAAA,OAAO,MAAM,IAAK,EAAA,CAAA;AAAA,WACnB,CAAA,CAAA;AAAA,SACH;AACA,QAAM,MAAA,KAAA,GAAQ,IAAK,CAAA,MAAA,CAAO,QAAQ,CAAA,CAAA;AAClC,QAAA,IAAI,KAAO,EAAA;AACT,UAAA,QAAA,CAAS,OAAO,WAAW;AACzB,YAAA,OAAO,MAAM,IAAK,EAAA,CAAA;AAAA,WACnB,CAAA,CAAA;AAAA,SACH;AAAA,OACF;AAAA,KACF;AAAA,GACD,CAAA,CAAA;AACH,CAAA,CAAA;AACA,IAAM,YAAe,GAAA;AAAA,EACnB,OAAA;AAAA,EACA,WAAA;AAAA,EACA,QAAA;AAAA,EACA,UAAA;AAAA,EACA,IAAA;AACF,CAAA,CAAA;AACA,IAAM,OAAU,GAAA;AAAA,EACd,MAAA,EAAA,QAAA;AAAA,EACA,EAAI,EAAA,MAAA;AAAA,EACJ,QAAU,EAAA,cAAA;AAAA,EACV,MAAQ,EAAA,UAAA;AAAA,EACR,IAAA,EAAM,CAAC,GAAQ,KAAA;AACb,IAAI,IAAA,CAAC,IAAI,SAAW,EAAA;AAClB,MAAA,GAAA,CAAI,YAAY,EAAC,CAAA;AAAA,KACnB;AACA,IAAI,GAAA,CAAA,SAAA,CAAU,sBAAsB,GAAI,CAAA,mBAAA,CAAA;AACxC,IAAa,YAAA,CAAA,OAAA,CAAQ,IAAI,SAAS,CAAA,CAAA;AAClC,IAAA,MAAA,CAAO,KAAM,EAAA,CAAA;AACb,IAAA,MAAA,CAAO,OAAO,OAAO,CAAA,CAAA;AAAA,GACvB;AACF","file":"flowDiagram-66a62f08-GD6WSJHD.js","sourcesContent":["import { p as parser, f as flowDb } from \"./flowDb-956e92f1.js\";\nimport * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\nimport { select, curveLinear, selectAll } from \"d3\";\nimport { k as getStylesFromArray, m as evaluate, c as getConfig, r as renderKatex, e as common, l as log, n as interpolateToCurve, o as setupGraphViewbox } from \"./mermaid-b5860b54.js\";\nimport { render } from \"dagre-d3-es\";\nimport { applyStyle } from \"dagre-d3-es/src/dagre-js/util.js\";\nimport { addHtmlLabel } from \"dagre-d3-es/src/dagre-js/label/add-html-label.js\";\nimport { intersectPolygon } from \"dagre-d3-es/src/dagre-js/intersect/intersect-polygon.js\";\nimport { intersectRect } from \"dagre-d3-es/src/dagre-js/intersect/intersect-rect.js\";\nimport { f as flowRendererV2, a as flowStyles } from \"./styles-c10674c1.js\";\nimport \"ts-dedent\";\nimport \"dayjs\";\nimport \"@braintree/sanitize-url\";\nimport \"dompurify\";\nimport \"khroma\";\nimport \"lodash-es/memoize.js\";\nimport \"lodash-es/merge.js\";\nimport \"stylis\";\nimport \"lodash-es/isEmpty.js\";\nimport \"./index-3862675e.js\";\nimport \"dagre-d3-es/src/dagre/index.js\";\nimport \"dagre-d3-es/src/graphlib/json.js\";\nimport \"./edges-e0da2a9e.js\";\nimport \"./createText-2e5e7dd3.js\";\nimport \"mdast-util-from-markdown\";\nfunction question(parent, bbox, node) {\n  const w = bbox.width;\n  const h = bbox.height;\n  const s = (w + h) * 0.9;\n  const points = [\n    { x: s / 2, y: 0 },\n    { x: s, y: -s / 2 },\n    { x: s / 2, y: -s },\n    { x: 0, y: -s / 2 }\n  ];\n  const shapeSvg = insertPolygonShape(parent, s, s, points);\n  node.intersect = function(point) {\n    return intersectPolygon(node, points, point);\n  };\n  return shapeSvg;\n}\nfunction hexagon(parent, bbox, node) {\n  const f = 4;\n  const h = bbox.height;\n  const m = h / f;\n  const w = bbox.width + 2 * m;\n  const points = [\n    { x: m, y: 0 },\n    { x: w - m, y: 0 },\n    { x: w, y: -h / 2 },\n    { x: w - m, y: -h },\n    { x: m, y: -h },\n    { x: 0, y: -h / 2 }\n  ];\n  const shapeSvg = insertPolygonShape(parent, w, h, points);\n  node.intersect = function(point) {\n    return intersectPolygon(node, points, point);\n  };\n  return shapeSvg;\n}\nfunction rect_left_inv_arrow(parent, bbox, node) {\n  const w = bbox.width;\n  const h = bbox.height;\n  const points = [\n    { x: -h / 2, y: 0 },\n    { x: w, y: 0 },\n    { x: w, y: -h },\n    { x: -h / 2, y: -h },\n    { x: 0, y: -h / 2 }\n  ];\n  const shapeSvg = insertPolygonShape(parent, w, h, points);\n  node.intersect = function(point) {\n    return intersectPolygon(node, points, point);\n  };\n  return shapeSvg;\n}\nfunction lean_right(parent, bbox, node) {\n  const w = bbox.width;\n  const h = bbox.height;\n  const points = [\n    { x: -2 * h / 6, y: 0 },\n    { x: w - h / 6, y: 0 },\n    { x: w + 2 * h / 6, y: -h },\n    { x: h / 6, y: -h }\n  ];\n  const shapeSvg = insertPolygonShape(parent, w, h, points);\n  node.intersect = function(point) {\n    return intersectPolygon(node, points, point);\n  };\n  return shapeSvg;\n}\nfunction lean_left(parent, bbox, node) {\n  const w = bbox.width;\n  const h = bbox.height;\n  const points = [\n    { x: 2 * h / 6, y: 0 },\n    { x: w + h / 6, y: 0 },\n    { x: w - 2 * h / 6, y: -h },\n    { x: -h / 6, y: -h }\n  ];\n  const shapeSvg = insertPolygonShape(parent, w, h, points);\n  node.intersect = function(point) {\n    return intersectPolygon(node, points, point);\n  };\n  return shapeSvg;\n}\nfunction trapezoid(parent, bbox, node) {\n  const w = bbox.width;\n  const h = bbox.height;\n  const points = [\n    { x: -2 * h / 6, y: 0 },\n    { x: w + 2 * h / 6, y: 0 },\n    { x: w - h / 6, y: -h },\n    { x: h / 6, y: -h }\n  ];\n  const shapeSvg = insertPolygonShape(parent, w, h, points);\n  node.intersect = function(point) {\n    return intersectPolygon(node, points, point);\n  };\n  return shapeSvg;\n}\nfunction inv_trapezoid(parent, bbox, node) {\n  const w = bbox.width;\n  const h = bbox.height;\n  const points = [\n    { x: h / 6, y: 0 },\n    { x: w - h / 6, y: 0 },\n    { x: w + 2 * h / 6, y: -h },\n    { x: -2 * h / 6, y: -h }\n  ];\n  const shapeSvg = insertPolygonShape(parent, w, h, points);\n  node.intersect = function(point) {\n    return intersectPolygon(node, points, point);\n  };\n  return shapeSvg;\n}\nfunction rect_right_inv_arrow(parent, bbox, node) {\n  const w = bbox.width;\n  const h = bbox.height;\n  const points = [\n    { x: 0, y: 0 },\n    { x: w + h / 2, y: 0 },\n    { x: w, y: -h / 2 },\n    { x: w + h / 2, y: -h },\n    { x: 0, y: -h }\n  ];\n  const shapeSvg = insertPolygonShape(parent, w, h, points);\n  node.intersect = function(point) {\n    return intersectPolygon(node, points, point);\n  };\n  return shapeSvg;\n}\nfunction stadium(parent, bbox, node) {\n  const h = bbox.height;\n  const w = bbox.width + h / 4;\n  const shapeSvg = parent.insert(\"rect\", \":first-child\").attr(\"rx\", h / 2).attr(\"ry\", h / 2).attr(\"x\", -w / 2).attr(\"y\", -h / 2).attr(\"width\", w).attr(\"height\", h);\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n}\nfunction subroutine(parent, bbox, node) {\n  const w = bbox.width;\n  const h = bbox.height;\n  const points = [\n    { x: 0, y: 0 },\n    { x: w, y: 0 },\n    { x: w, y: -h },\n    { x: 0, y: -h },\n    { x: 0, y: 0 },\n    { x: -8, y: 0 },\n    { x: w + 8, y: 0 },\n    { x: w + 8, y: -h },\n    { x: -8, y: -h },\n    { x: -8, y: 0 }\n  ];\n  const shapeSvg = insertPolygonShape(parent, w, h, points);\n  node.intersect = function(point) {\n    return intersectPolygon(node, points, point);\n  };\n  return shapeSvg;\n}\nfunction cylinder(parent, bbox, node) {\n  const w = bbox.width;\n  const rx = w / 2;\n  const ry = rx / (2.5 + w / 50);\n  const h = bbox.height + ry;\n  const shape = \"M 0,\" + ry + \" a \" + rx + \",\" + ry + \" 0,0,0 \" + w + \" 0 a \" + rx + \",\" + ry + \" 0,0,0 \" + -w + \" 0 l 0,\" + h + \" a \" + rx + \",\" + ry + \" 0,0,0 \" + w + \" 0 l 0,\" + -h;\n  const shapeSvg = parent.attr(\"label-offset-y\", ry).insert(\"path\", \":first-child\").attr(\"d\", shape).attr(\"transform\", \"translate(\" + -w / 2 + \",\" + -(h / 2 + ry) + \")\");\n  node.intersect = function(point) {\n    const pos = intersectRect(node, point);\n    const x = pos.x - node.x;\n    if (rx != 0 && (Math.abs(x) < node.width / 2 || Math.abs(x) == node.width / 2 && Math.abs(pos.y - node.y) > node.height / 2 - ry)) {\n      let y = ry * ry * (1 - x * x / (rx * rx));\n      if (y != 0) {\n        y = Math.sqrt(y);\n      }\n      y = ry - y;\n      if (point.y - node.y > 0) {\n        y = -y;\n      }\n      pos.y += y;\n    }\n    return pos;\n  };\n  return shapeSvg;\n}\nfunction addToRender(render2) {\n  render2.shapes().question = question;\n  render2.shapes().hexagon = hexagon;\n  render2.shapes().stadium = stadium;\n  render2.shapes().subroutine = subroutine;\n  render2.shapes().cylinder = cylinder;\n  render2.shapes().rect_left_inv_arrow = rect_left_inv_arrow;\n  render2.shapes().lean_right = lean_right;\n  render2.shapes().lean_left = lean_left;\n  render2.shapes().trapezoid = trapezoid;\n  render2.shapes().inv_trapezoid = inv_trapezoid;\n  render2.shapes().rect_right_inv_arrow = rect_right_inv_arrow;\n}\nfunction addToRenderV2(addShape) {\n  addShape({ question });\n  addShape({ hexagon });\n  addShape({ stadium });\n  addShape({ subroutine });\n  addShape({ cylinder });\n  addShape({ rect_left_inv_arrow });\n  addShape({ lean_right });\n  addShape({ lean_left });\n  addShape({ trapezoid });\n  addShape({ inv_trapezoid });\n  addShape({ rect_right_inv_arrow });\n}\nfunction insertPolygonShape(parent, w, h, points) {\n  return parent.insert(\"polygon\", \":first-child\").attr(\n    \"points\",\n    points.map(function(d) {\n      return d.x + \",\" + d.y;\n    }).join(\" \")\n  ).attr(\"transform\", \"translate(\" + -w / 2 + \",\" + h / 2 + \")\");\n}\nconst flowChartShapes = {\n  addToRender,\n  addToRenderV2\n};\nconst conf = {};\nconst setConf = function(cnf) {\n  const keys = Object.keys(cnf);\n  for (const key of keys) {\n    conf[key] = cnf[key];\n  }\n};\nconst addVertices = async function(vert, g, svgId, root, _doc, diagObj) {\n  const svg = !root ? select(`[id=\"${svgId}\"]`) : root.select(`[id=\"${svgId}\"]`);\n  const doc = !_doc ? document : _doc;\n  const keys = Object.keys(vert);\n  for (const id of keys) {\n    const vertex = vert[id];\n    let classStr = \"default\";\n    if (vertex.classes.length > 0) {\n      classStr = vertex.classes.join(\" \");\n    }\n    const styles = getStylesFromArray(vertex.styles);\n    let vertexText = vertex.text !== void 0 ? vertex.text : vertex.id;\n    let vertexNode;\n    if (evaluate(getConfig().flowchart.htmlLabels)) {\n      const node = {\n        label: await renderKatex(\n          vertexText.replace(\n            /fa[blrs]?:fa-[\\w-]+/g,\n            // cspell:disable-line\n            (s) => `<i class='${s.replace(\":\", \" \")}'></i>`\n          ),\n          getConfig()\n        )\n      };\n      vertexNode = addHtmlLabel(svg, node).node();\n      vertexNode.parentNode.removeChild(vertexNode);\n    } else {\n      const svgLabel = doc.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n      svgLabel.setAttribute(\"style\", styles.labelStyle.replace(\"color:\", \"fill:\"));\n      const rows = vertexText.split(common.lineBreakRegex);\n      for (const row of rows) {\n        const tspan = doc.createElementNS(\"http://www.w3.org/2000/svg\", \"tspan\");\n        tspan.setAttributeNS(\"http://www.w3.org/XML/1998/namespace\", \"xml:space\", \"preserve\");\n        tspan.setAttribute(\"dy\", \"1em\");\n        tspan.setAttribute(\"x\", \"1\");\n        tspan.textContent = row;\n        svgLabel.appendChild(tspan);\n      }\n      vertexNode = svgLabel;\n    }\n    let radius = 0;\n    let _shape = \"\";\n    switch (vertex.type) {\n      case \"round\":\n        radius = 5;\n        _shape = \"rect\";\n        break;\n      case \"square\":\n        _shape = \"rect\";\n        break;\n      case \"diamond\":\n        _shape = \"question\";\n        break;\n      case \"hexagon\":\n        _shape = \"hexagon\";\n        break;\n      case \"odd\":\n        _shape = \"rect_left_inv_arrow\";\n        break;\n      case \"lean_right\":\n        _shape = \"lean_right\";\n        break;\n      case \"lean_left\":\n        _shape = \"lean_left\";\n        break;\n      case \"trapezoid\":\n        _shape = \"trapezoid\";\n        break;\n      case \"inv_trapezoid\":\n        _shape = \"inv_trapezoid\";\n        break;\n      case \"odd_right\":\n        _shape = \"rect_left_inv_arrow\";\n        break;\n      case \"circle\":\n        _shape = \"circle\";\n        break;\n      case \"ellipse\":\n        _shape = \"ellipse\";\n        break;\n      case \"stadium\":\n        _shape = \"stadium\";\n        break;\n      case \"subroutine\":\n        _shape = \"subroutine\";\n        break;\n      case \"cylinder\":\n        _shape = \"cylinder\";\n        break;\n      case \"group\":\n        _shape = \"rect\";\n        break;\n      default:\n        _shape = \"rect\";\n    }\n    log.warn(\"Adding node\", vertex.id, vertex.domId);\n    g.setNode(diagObj.db.lookUpDomId(vertex.id), {\n      labelType: \"svg\",\n      labelStyle: styles.labelStyle,\n      shape: _shape,\n      label: vertexNode,\n      rx: radius,\n      ry: radius,\n      class: classStr,\n      style: styles.style,\n      id: diagObj.db.lookUpDomId(vertex.id)\n    });\n  }\n};\nconst addEdges = async function(edges, g, diagObj) {\n  let cnt = 0;\n  let defaultStyle;\n  let defaultLabelStyle;\n  if (edges.defaultStyle !== void 0) {\n    const defaultStyles = getStylesFromArray(edges.defaultStyle);\n    defaultStyle = defaultStyles.style;\n    defaultLabelStyle = defaultStyles.labelStyle;\n  }\n  for (const edge of edges) {\n    cnt++;\n    const linkId = \"L-\" + edge.start + \"-\" + edge.end;\n    const linkNameStart = \"LS-\" + edge.start;\n    const linkNameEnd = \"LE-\" + edge.end;\n    const edgeData = {};\n    if (edge.type === \"arrow_open\") {\n      edgeData.arrowhead = \"none\";\n    } else {\n      edgeData.arrowhead = \"normal\";\n    }\n    let style = \"\";\n    let labelStyle = \"\";\n    if (edge.style !== void 0) {\n      const styles = getStylesFromArray(edge.style);\n      style = styles.style;\n      labelStyle = styles.labelStyle;\n    } else {\n      switch (edge.stroke) {\n        case \"normal\":\n          style = \"fill:none\";\n          if (defaultStyle !== void 0) {\n            style = defaultStyle;\n          }\n          if (defaultLabelStyle !== void 0) {\n            labelStyle = defaultLabelStyle;\n          }\n          break;\n        case \"dotted\":\n          style = \"fill:none;stroke-width:2px;stroke-dasharray:3;\";\n          break;\n        case \"thick\":\n          style = \" stroke-width: 3.5px;fill:none\";\n          break;\n      }\n    }\n    edgeData.style = style;\n    edgeData.labelStyle = labelStyle;\n    if (edge.interpolate !== void 0) {\n      edgeData.curve = interpolateToCurve(edge.interpolate, curveLinear);\n    } else if (edges.defaultInterpolate !== void 0) {\n      edgeData.curve = interpolateToCurve(edges.defaultInterpolate, curveLinear);\n    } else {\n      edgeData.curve = interpolateToCurve(conf.curve, curveLinear);\n    }\n    if (edge.text === void 0) {\n      if (edge.style !== void 0) {\n        edgeData.arrowheadStyle = \"fill: #333\";\n      }\n    } else {\n      edgeData.arrowheadStyle = \"fill: #333\";\n      edgeData.labelpos = \"c\";\n      if (evaluate(getConfig().flowchart.htmlLabels)) {\n        edgeData.labelType = \"html\";\n        edgeData.label = `<span id=\"L-${linkId}\" class=\"edgeLabel L-${linkNameStart}' L-${linkNameEnd}\" style=\"${edgeData.labelStyle}\">${await renderKatex(\n          edge.text.replace(\n            /fa[blrs]?:fa-[\\w-]+/g,\n            // cspell:disable-line\n            (s) => `<i class='${s.replace(\":\", \" \")}'></i>`\n          ),\n          getConfig()\n        )}</span>`;\n      } else {\n        edgeData.labelType = \"text\";\n        edgeData.label = edge.text.replace(common.lineBreakRegex, \"\\n\");\n        if (edge.style === void 0) {\n          edgeData.style = edgeData.style || \"stroke: #333; stroke-width: 1.5px;fill:none\";\n        }\n        edgeData.labelStyle = edgeData.labelStyle.replace(\"color:\", \"fill:\");\n      }\n    }\n    edgeData.id = linkId;\n    edgeData.class = linkNameStart + \" \" + linkNameEnd;\n    edgeData.minlen = edge.length || 1;\n    g.setEdge(diagObj.db.lookUpDomId(edge.start), diagObj.db.lookUpDomId(edge.end), edgeData, cnt);\n  }\n};\nconst getClasses = function(text, diagObj) {\n  log.info(\"Extracting classes\");\n  return diagObj.db.getClasses();\n};\nconst draw = async function(text, id, _version, diagObj) {\n  log.info(\"Drawing flowchart\");\n  const { securityLevel, flowchart: conf2 } = getConfig();\n  let sandboxElement;\n  if (securityLevel === \"sandbox\") {\n    sandboxElement = select(\"#i\" + id);\n  }\n  const root = securityLevel === \"sandbox\" ? select(sandboxElement.nodes()[0].contentDocument.body) : select(\"body\");\n  const doc = securityLevel === \"sandbox\" ? sandboxElement.nodes()[0].contentDocument : document;\n  let dir = diagObj.db.getDirection();\n  if (dir === void 0) {\n    dir = \"TD\";\n  }\n  const nodeSpacing = conf2.nodeSpacing || 50;\n  const rankSpacing = conf2.rankSpacing || 50;\n  const g = new graphlib.Graph({\n    multigraph: true,\n    compound: true\n  }).setGraph({\n    rankdir: dir,\n    nodesep: nodeSpacing,\n    ranksep: rankSpacing,\n    marginx: 8,\n    marginy: 8\n  }).setDefaultEdgeLabel(function() {\n    return {};\n  });\n  let subG;\n  const subGraphs = diagObj.db.getSubGraphs();\n  for (let i2 = subGraphs.length - 1; i2 >= 0; i2--) {\n    subG = subGraphs[i2];\n    diagObj.db.addVertex(subG.id, subG.title, \"group\", void 0, subG.classes);\n  }\n  const vert = diagObj.db.getVertices();\n  log.warn(\"Get vertices\", vert);\n  const edges = diagObj.db.getEdges();\n  let i = 0;\n  for (i = subGraphs.length - 1; i >= 0; i--) {\n    subG = subGraphs[i];\n    selectAll(\"cluster\").append(\"text\");\n    for (let j = 0; j < subG.nodes.length; j++) {\n      log.warn(\n        \"Setting subgraph\",\n        subG.nodes[j],\n        diagObj.db.lookUpDomId(subG.nodes[j]),\n        diagObj.db.lookUpDomId(subG.id)\n      );\n      g.setParent(diagObj.db.lookUpDomId(subG.nodes[j]), diagObj.db.lookUpDomId(subG.id));\n    }\n  }\n  await addVertices(vert, g, id, root, doc, diagObj);\n  await addEdges(edges, g, diagObj);\n  const render$1 = new render();\n  flowChartShapes.addToRender(render$1);\n  render$1.arrows().none = function normal(parent, id2, edge, type) {\n    const marker = parent.append(\"marker\").attr(\"id\", id2).attr(\"viewBox\", \"0 0 10 10\").attr(\"refX\", 9).attr(\"refY\", 5).attr(\"markerUnits\", \"strokeWidth\").attr(\"markerWidth\", 8).attr(\"markerHeight\", 6).attr(\"orient\", \"auto\");\n    const path = marker.append(\"path\").attr(\"d\", \"M 0 0 L 0 0 L 0 0 z\");\n    applyStyle(path, edge[type + \"Style\"]);\n  };\n  render$1.arrows().normal = function normal(parent, id2) {\n    const marker = parent.append(\"marker\").attr(\"id\", id2).attr(\"viewBox\", \"0 0 10 10\").attr(\"refX\", 9).attr(\"refY\", 5).attr(\"markerUnits\", \"strokeWidth\").attr(\"markerWidth\", 8).attr(\"markerHeight\", 6).attr(\"orient\", \"auto\");\n    marker.append(\"path\").attr(\"d\", \"M 0 0 L 10 5 L 0 10 z\").attr(\"class\", \"arrowheadPath\").style(\"stroke-width\", 1).style(\"stroke-dasharray\", \"1,0\");\n  };\n  const svg = root.select(`[id=\"${id}\"]`);\n  const element = root.select(\"#\" + id + \" g\");\n  render$1(element, g);\n  element.selectAll(\"g.node\").attr(\"title\", function() {\n    return diagObj.db.getTooltip(this.id);\n  });\n  diagObj.db.indexNodes(\"subGraph\" + i);\n  for (i = 0; i < subGraphs.length; i++) {\n    subG = subGraphs[i];\n    if (subG.title !== \"undefined\") {\n      const clusterRects = doc.querySelectorAll(\n        \"#\" + id + ' [id=\"' + diagObj.db.lookUpDomId(subG.id) + '\"] rect'\n      );\n      const clusterEl = doc.querySelectorAll(\n        \"#\" + id + ' [id=\"' + diagObj.db.lookUpDomId(subG.id) + '\"]'\n      );\n      const xPos = clusterRects[0].x.baseVal.value;\n      const yPos = clusterRects[0].y.baseVal.value;\n      const _width = clusterRects[0].width.baseVal.value;\n      const cluster = select(clusterEl[0]);\n      const te = cluster.select(\".label\");\n      te.attr(\"transform\", `translate(${xPos + _width / 2}, ${yPos + 14})`);\n      te.attr(\"id\", id + \"Text\");\n      for (let j = 0; j < subG.classes.length; j++) {\n        clusterEl[0].classList.add(subG.classes[j]);\n      }\n    }\n  }\n  if (!conf2.htmlLabels) {\n    const labels = doc.querySelectorAll('[id=\"' + id + '\"] .edgeLabel .label');\n    for (const label of labels) {\n      const dim = label.getBBox();\n      const rect = doc.createElementNS(\"http://www.w3.org/2000/svg\", \"rect\");\n      rect.setAttribute(\"rx\", 0);\n      rect.setAttribute(\"ry\", 0);\n      rect.setAttribute(\"width\", dim.width);\n      rect.setAttribute(\"height\", dim.height);\n      label.insertBefore(rect, label.firstChild);\n    }\n  }\n  setupGraphViewbox(g, svg, conf2.diagramPadding, conf2.useMaxWidth);\n  const keys = Object.keys(vert);\n  keys.forEach(function(key) {\n    const vertex = vert[key];\n    if (vertex.link) {\n      const node = root.select(\"#\" + id + ' [id=\"' + diagObj.db.lookUpDomId(key) + '\"]');\n      if (node) {\n        const link = doc.createElementNS(\"http://www.w3.org/2000/svg\", \"a\");\n        link.setAttributeNS(\"http://www.w3.org/2000/svg\", \"class\", vertex.classes.join(\" \"));\n        link.setAttributeNS(\"http://www.w3.org/2000/svg\", \"href\", vertex.link);\n        link.setAttributeNS(\"http://www.w3.org/2000/svg\", \"rel\", \"noopener\");\n        if (securityLevel === \"sandbox\") {\n          link.setAttributeNS(\"http://www.w3.org/2000/svg\", \"target\", \"_top\");\n        } else if (vertex.linkTarget) {\n          link.setAttributeNS(\"http://www.w3.org/2000/svg\", \"target\", vertex.linkTarget);\n        }\n        const linkNode = node.insert(function() {\n          return link;\n        }, \":first-child\");\n        const shape = node.select(\".label-container\");\n        if (shape) {\n          linkNode.append(function() {\n            return shape.node();\n          });\n        }\n        const label = node.select(\".label\");\n        if (label) {\n          linkNode.append(function() {\n            return label.node();\n          });\n        }\n      }\n    }\n  });\n};\nconst flowRenderer = {\n  setConf,\n  addVertices,\n  addEdges,\n  getClasses,\n  draw\n};\nconst diagram = {\n  parser,\n  db: flowDb,\n  renderer: flowRendererV2,\n  styles: flowStyles,\n  init: (cnf) => {\n    if (!cnf.flowchart) {\n      cnf.flowchart = {};\n    }\n    cnf.flowchart.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;\n    flowRenderer.setConf(cnf.flowchart);\n    flowDb.clear();\n    flowDb.setGen(\"gen-1\");\n  }\n};\nexport {\n  diagram\n};\n","import { render } from './dagre-js/render.js';\nimport * as graphlib from './graphlib/index.js';\n\nimport * as intersect from './dagre-js/intersect/index.js';\n\nexport { graphlib, intersect, render };\n","import * as d3 from 'd3';\nimport * as _ from 'lodash-es';\nimport { layout } from '../dagre/index.js';\nimport { arrows, setArrows } from './arrows.js';\nimport { createClusters, setCreateClusters } from './create-clusters.js';\nimport { createEdgeLabels, setCreateEdgeLabels } from './create-edge-labels.js';\nimport { createEdgePaths, setCreateEdgePaths } from './create-edge-paths.js';\nimport { createNodes, setCreateNodes } from './create-nodes.js';\nimport { positionClusters } from './position-clusters.js';\nimport { positionEdgeLabels } from './position-edge-labels.js';\nimport { positionNodes } from './position-nodes.js';\nimport { shapes, setShapes } from './shapes.js';\n\nexport { render };\n\n// This design is based on http://bost.ocks.org/mike/chart/.\nfunction render() {\n  var fn = function (svg, g) {\n    preProcessGraph(g);\n\n    var outputGroup = createOrSelectGroup(svg, 'output');\n    var clustersGroup = createOrSelectGroup(outputGroup, 'clusters');\n    var edgePathsGroup = createOrSelectGroup(outputGroup, 'edgePaths');\n    var edgeLabels = createEdgeLabels(createOrSelectGroup(outputGroup, 'edgeLabels'), g);\n    var nodes = createNodes(createOrSelectGroup(outputGroup, 'nodes'), g, shapes);\n\n    layout(g);\n\n    positionNodes(nodes, g);\n    positionEdgeLabels(edgeLabels, g);\n    createEdgePaths(edgePathsGroup, g, arrows);\n\n    var clusters = createClusters(clustersGroup, g);\n    positionClusters(clusters, g);\n\n    postProcessGraph(g);\n  };\n\n  fn.createNodes = function (value) {\n    if (!arguments.length) return createNodes;\n    setCreateNodes(value);\n    return fn;\n  };\n\n  fn.createClusters = function (value) {\n    if (!arguments.length) return createClusters;\n    setCreateClusters(value);\n    return fn;\n  };\n\n  fn.createEdgeLabels = function (value) {\n    if (!arguments.length) return createEdgeLabels;\n    setCreateEdgeLabels(value);\n    return fn;\n  };\n\n  fn.createEdgePaths = function (value) {\n    if (!arguments.length) return createEdgePaths;\n    setCreateEdgePaths(value);\n    return fn;\n  };\n\n  fn.shapes = function (value) {\n    if (!arguments.length) return shapes;\n    setShapes(value);\n    return fn;\n  };\n\n  fn.arrows = function (value) {\n    if (!arguments.length) return arrows;\n    setArrows(value);\n    return fn;\n  };\n\n  return fn;\n}\n\nvar NODE_DEFAULT_ATTRS = {\n  paddingLeft: 10,\n  paddingRight: 10,\n  paddingTop: 10,\n  paddingBottom: 10,\n  rx: 0,\n  ry: 0,\n  shape: 'rect',\n};\n\nvar EDGE_DEFAULT_ATTRS = {\n  arrowhead: 'normal',\n  curve: d3.curveLinear,\n};\n\nfunction preProcessGraph(g) {\n  g.nodes().forEach(function (v) {\n    var node = g.node(v);\n    if (!_.has(node, 'label') && !g.children(v).length) {\n      node.label = v;\n    }\n\n    if (_.has(node, 'paddingX')) {\n      _.defaults(node, {\n        paddingLeft: node.paddingX,\n        paddingRight: node.paddingX,\n      });\n    }\n\n    if (_.has(node, 'paddingY')) {\n      _.defaults(node, {\n        paddingTop: node.paddingY,\n        paddingBottom: node.paddingY,\n      });\n    }\n\n    if (_.has(node, 'padding')) {\n      _.defaults(node, {\n        paddingLeft: node.padding,\n        paddingRight: node.padding,\n        paddingTop: node.padding,\n        paddingBottom: node.padding,\n      });\n    }\n\n    _.defaults(node, NODE_DEFAULT_ATTRS);\n\n    _.each(['paddingLeft', 'paddingRight', 'paddingTop', 'paddingBottom'], function (k) {\n      node[k] = Number(node[k]);\n    });\n\n    // Save dimensions for restore during post-processing\n    if (_.has(node, 'width')) {\n      node._prevWidth = node.width;\n    }\n    if (_.has(node, 'height')) {\n      node._prevHeight = node.height;\n    }\n  });\n\n  g.edges().forEach(function (e) {\n    var edge = g.edge(e);\n    if (!_.has(edge, 'label')) {\n      edge.label = '';\n    }\n    _.defaults(edge, EDGE_DEFAULT_ATTRS);\n  });\n}\n\nfunction postProcessGraph(g) {\n  _.each(g.nodes(), function (v) {\n    var node = g.node(v);\n\n    // Restore original dimensions\n    if (_.has(node, '_prevWidth')) {\n      node.width = node._prevWidth;\n    } else {\n      delete node.width;\n    }\n\n    if (_.has(node, '_prevHeight')) {\n      node.height = node._prevHeight;\n    } else {\n      delete node.height;\n    }\n\n    delete node._prevWidth;\n    delete node._prevHeight;\n  });\n}\n\nfunction createOrSelectGroup(root, name) {\n  var selection = root.select('g.' + name);\n  if (selection.empty()) {\n    selection = root.append('g').attr('class', name);\n  }\n  return selection;\n}\n","import * as util from './util.js';\n\nexport { arrows, setArrows };\n\nvar arrows = {\n  normal,\n  vee,\n  undirected,\n};\n\nfunction setArrows(value) {\n  arrows = value;\n}\n\nfunction normal(parent, id, edge, type) {\n  var marker = parent\n    .append('marker')\n    .attr('id', id)\n    .attr('viewBox', '0 0 10 10')\n    .attr('refX', 9)\n    .attr('refY', 5)\n    .attr('markerUnits', 'strokeWidth')\n    .attr('markerWidth', 8)\n    .attr('markerHeight', 6)\n    .attr('orient', 'auto');\n\n  var path = marker\n    .append('path')\n    .attr('d', 'M 0 0 L 10 5 L 0 10 z')\n    .style('stroke-width', 1)\n    .style('stroke-dasharray', '1,0');\n  util.applyStyle(path, edge[type + 'Style']);\n  if (edge[type + 'Class']) {\n    path.attr('class', edge[type + 'Class']);\n  }\n}\n\nfunction vee(parent, id, edge, type) {\n  var marker = parent\n    .append('marker')\n    .attr('id', id)\n    .attr('viewBox', '0 0 10 10')\n    .attr('refX', 9)\n    .attr('refY', 5)\n    .attr('markerUnits', 'strokeWidth')\n    .attr('markerWidth', 8)\n    .attr('markerHeight', 6)\n    .attr('orient', 'auto');\n\n  var path = marker\n    .append('path')\n    .attr('d', 'M 0 0 L 10 5 L 0 10 L 4 5 z')\n    .style('stroke-width', 1)\n    .style('stroke-dasharray', '1,0');\n  util.applyStyle(path, edge[type + 'Style']);\n  if (edge[type + 'Class']) {\n    path.attr('class', edge[type + 'Class']);\n  }\n}\n\nfunction undirected(parent, id, edge, type) {\n  var marker = parent\n    .append('marker')\n    .attr('id', id)\n    .attr('viewBox', '0 0 10 10')\n    .attr('refX', 9)\n    .attr('refY', 5)\n    .attr('markerUnits', 'strokeWidth')\n    .attr('markerWidth', 8)\n    .attr('markerHeight', 6)\n    .attr('orient', 'auto');\n\n  var path = marker\n    .append('path')\n    .attr('d', 'M 0 5 L 10 5')\n    .style('stroke-width', 1)\n    .style('stroke-dasharray', '1,0');\n  util.applyStyle(path, edge[type + 'Style']);\n  if (edge[type + 'Class']) {\n    path.attr('class', edge[type + 'Class']);\n  }\n}\n","import * as d3 from 'd3';\nimport { addLabel } from './label/add-label.js';\nimport * as util from './util.js';\n\nexport { createClusters, setCreateClusters };\n\nvar createClusters = function (selection, g) {\n  var clusters = g.nodes().filter(function (v) {\n    return util.isSubgraph(g, v);\n  });\n  var svgClusters = selection.selectAll('g.cluster').data(clusters, function (v) {\n    return v;\n  });\n\n  util.applyTransition(svgClusters.exit(), g).style('opacity', 0).remove();\n\n  var enterSelection = svgClusters\n    .enter()\n    .append('g')\n    .attr('class', 'cluster')\n    .attr('id', function (v) {\n      var node = g.node(v);\n      return node.id;\n    })\n    .style('opacity', 0)\n    .each(function (v) {\n      var node = g.node(v);\n      var thisGroup = d3.select(this);\n      d3.select(this).append('rect');\n      var labelGroup = thisGroup.append('g').attr('class', 'label');\n      addLabel(labelGroup, node, node.clusterLabelPos);\n    });\n\n  svgClusters = svgClusters.merge(enterSelection);\n\n  svgClusters = util.applyTransition(svgClusters, g).style('opacity', 1);\n\n  svgClusters.selectAll('rect').each(function (c) {\n    var node = g.node(c);\n    var domCluster = d3.select(this);\n    util.applyStyle(domCluster, node.style);\n  });\n\n  return svgClusters;\n};\n\nfunction setCreateClusters(value) {\n  createClusters = value;\n}\n","import { addHtmlLabel } from './add-html-label.js';\nimport { addSVGLabel } from './add-svg-label.js';\nimport { addTextLabel } from './add-text-label.js';\n\nexport { addLabel };\n\nfunction addLabel(root, node, location) {\n  var label = node.label;\n  var labelSvg = root.append('g');\n\n  // Allow the label to be a string, a function that returns a DOM element, or\n  // a DOM element itself.\n  if (node.labelType === 'svg') {\n    addSVGLabel(labelSvg, node);\n  } else if (typeof label !== 'string' || node.labelType === 'html') {\n    addHtmlLabel(labelSvg, node);\n  } else {\n    addTextLabel(labelSvg, node);\n  }\n\n  var labelBBox = labelSvg.node().getBBox();\n  var y;\n  switch (location) {\n    case 'top':\n      y = -node.height / 2;\n      break;\n    case 'bottom':\n      y = node.height / 2 - labelBBox.height;\n      break;\n    default:\n      y = -labelBBox.height / 2;\n  }\n  labelSvg.attr('transform', 'translate(' + -labelBBox.width / 2 + ',' + y + ')');\n\n  return labelSvg;\n}\n","import * as util from '../util.js';\n\nexport { addSVGLabel };\n\nfunction addSVGLabel(root, node) {\n  var domNode = root;\n\n  domNode.node().appendChild(node.label);\n\n  util.applyStyle(domNode, node.labelStyle);\n\n  return domNode;\n}\n","import * as util from '../util.js';\n\nexport { addTextLabel };\n\n/*\n * Attaches a text label to the specified root. Handles escape sequences.\n */\nfunction addTextLabel(root, node) {\n  var domNode = root.append('text');\n\n  var lines = processEscapeSequences(node.label).split('\\n');\n  for (var i = 0; i < lines.length; i++) {\n    domNode\n      .append('tspan')\n      .attr('xml:space', 'preserve')\n      .attr('dy', '1em')\n      .attr('x', '1')\n      .text(lines[i]);\n  }\n\n  util.applyStyle(domNode, node.labelStyle);\n\n  return domNode;\n}\n\nfunction processEscapeSequences(text) {\n  var newText = '';\n  var escaped = false;\n  var ch;\n  for (var i = 0; i < text.length; ++i) {\n    ch = text[i];\n    if (escaped) {\n      switch (ch) {\n        case 'n':\n          newText += '\\n';\n          break;\n        default:\n          newText += ch;\n      }\n      escaped = false;\n    } else if (ch === '\\\\') {\n      escaped = true;\n    } else {\n      newText += ch;\n    }\n  }\n  return newText;\n}\n","import * as d3 from 'd3';\nimport * as _ from 'lodash-es';\nimport { addLabel } from './label/add-label.js';\nimport * as util from './util.js';\n\nexport { createEdgeLabels, setCreateEdgeLabels };\n\nlet createEdgeLabels = function (selection, g) {\n  var svgEdgeLabels = selection\n    .selectAll('g.edgeLabel')\n    .data(g.edges(), function (e) {\n      return util.edgeToId(e);\n    })\n    .classed('update', true);\n\n  svgEdgeLabels.exit().remove();\n  svgEdgeLabels.enter().append('g').classed('edgeLabel', true).style('opacity', 0);\n\n  svgEdgeLabels = selection.selectAll('g.edgeLabel');\n\n  svgEdgeLabels.each(function (e) {\n    var root = d3.select(this);\n    root.select('.label').remove();\n    var edge = g.edge(e);\n    var label = addLabel(root, g.edge(e), 0).classed('label', true);\n    var bbox = label.node().getBBox();\n\n    if (edge.labelId) {\n      label.attr('id', edge.labelId);\n    }\n    if (!_.has(edge, 'width')) {\n      edge.width = bbox.width;\n    }\n    if (!_.has(edge, 'height')) {\n      edge.height = bbox.height;\n    }\n  });\n\n  var exitSelection;\n\n  if (svgEdgeLabels.exit) {\n    exitSelection = svgEdgeLabels.exit();\n  } else {\n    exitSelection = svgEdgeLabels.selectAll(null); // empty selection\n  }\n\n  util.applyTransition(exitSelection, g).style('opacity', 0).remove();\n\n  return svgEdgeLabels;\n};\n\nfunction setCreateEdgeLabels(value) {\n  createEdgeLabels = value;\n}\n","import * as d3 from 'd3';\nimport * as _ from 'lodash-es';\nimport { intersectNode } from './intersect/intersect-node.js';\nimport * as util from './util.js';\n\nexport { createEdgePaths, setCreateEdgePaths };\n\nvar createEdgePaths = function (selection, g, arrows) {\n  var previousPaths = selection\n    .selectAll('g.edgePath')\n    .data(g.edges(), function (e) {\n      return util.edgeToId(e);\n    })\n    .classed('update', true);\n\n  var newPaths = enter(previousPaths, g);\n  exit(previousPaths, g);\n\n  var svgPaths = previousPaths.merge !== undefined ? previousPaths.merge(newPaths) : previousPaths;\n  util.applyTransition(svgPaths, g).style('opacity', 1);\n\n  // Save DOM element in the path group, and set ID and class\n  svgPaths.each(function (e) {\n    var domEdge = d3.select(this);\n    var edge = g.edge(e);\n    edge.elem = this;\n\n    if (edge.id) {\n      domEdge.attr('id', edge.id);\n    }\n\n    util.applyClass(\n      domEdge,\n      edge['class'],\n      (domEdge.classed('update') ? 'update ' : '') + 'edgePath'\n    );\n  });\n\n  svgPaths.selectAll('path.path').each(function (e) {\n    var edge = g.edge(e);\n    edge.arrowheadId = _.uniqueId('arrowhead');\n\n    var domEdge = d3\n      .select(this)\n      .attr('marker-end', function () {\n        return 'url(' + makeFragmentRef(location.href, edge.arrowheadId) + ')';\n      })\n      .style('fill', 'none');\n\n    util.applyTransition(domEdge, g).attr('d', function (e) {\n      return calcPoints(g, e);\n    });\n\n    util.applyStyle(domEdge, edge.style);\n  });\n\n  svgPaths.selectAll('defs *').remove();\n  svgPaths.selectAll('defs').each(function (e) {\n    var edge = g.edge(e);\n    var arrowhead = arrows[edge.arrowhead];\n    arrowhead(d3.select(this), edge.arrowheadId, edge, 'arrowhead');\n  });\n\n  return svgPaths;\n};\n\nfunction setCreateEdgePaths(value) {\n  createEdgePaths = value;\n}\n\nfunction makeFragmentRef(url, fragmentId) {\n  var baseUrl = url.split('#')[0];\n  return baseUrl + '#' + fragmentId;\n}\n\nfunction calcPoints(g, e) {\n  var edge = g.edge(e);\n  var tail = g.node(e.v);\n  var head = g.node(e.w);\n  var points = edge.points.slice(1, edge.points.length - 1);\n  points.unshift(intersectNode(tail, points[0]));\n  points.push(intersectNode(head, points[points.length - 1]));\n\n  return createLine(edge, points);\n}\n\nfunction createLine(edge, points) {\n  // @ts-expect-error\n  var line = (d3.line || d3.svg.line)()\n    .x(function (d) {\n      return d.x;\n    })\n    .y(function (d) {\n      return d.y;\n    });\n\n  (line.curve || line.interpolate)(edge.curve);\n\n  return line(points);\n}\n\nfunction getCoords(elem) {\n  var bbox = elem.getBBox();\n  var matrix = elem.ownerSVGElement\n    .getScreenCTM()\n    .inverse()\n    .multiply(elem.getScreenCTM())\n    .translate(bbox.width / 2, bbox.height / 2);\n  return { x: matrix.e, y: matrix.f };\n}\n\nfunction enter(svgPaths, g) {\n  var svgPathsEnter = svgPaths.enter().append('g').attr('class', 'edgePath').style('opacity', 0);\n  svgPathsEnter\n    .append('path')\n    .attr('class', 'path')\n    .attr('d', function (e) {\n      var edge = g.edge(e);\n      var sourceElem = g.node(e.v).elem;\n      var points = _.range(edge.points.length).map(function () {\n        return getCoords(sourceElem);\n      });\n      return createLine(edge, points);\n    });\n  svgPathsEnter.append('defs');\n  return svgPathsEnter;\n}\n\nfunction exit(svgPaths, g) {\n  var svgPathExit = svgPaths.exit();\n  util.applyTransition(svgPathExit, g).style('opacity', 0).remove();\n}\n","export { intersectNode };\n\nfunction intersectNode(node, point) {\n  return node.intersect(point);\n}\n","import * as d3 from 'd3';\nimport * as _ from 'lodash-es';\nimport { addLabel } from './label/add-label.js';\nimport * as util from './util.js';\n\nexport { createNodes, setCreateNodes };\n\nvar createNodes = function (selection, g, shapes) {\n  var simpleNodes = g.nodes().filter(function (v) {\n    return !util.isSubgraph(g, v);\n  });\n  var svgNodes = selection\n    .selectAll('g.node')\n    .data(simpleNodes, function (v) {\n      return v;\n    })\n    .classed('update', true);\n\n  svgNodes.exit().remove();\n\n  svgNodes.enter().append('g').attr('class', 'node').style('opacity', 0);\n\n  svgNodes = selection.selectAll('g.node');\n\n  svgNodes.each(function (v) {\n    var node = g.node(v);\n    var thisGroup = d3.select(this);\n    util.applyClass(\n      thisGroup,\n      node['class'],\n      (thisGroup.classed('update') ? 'update ' : '') + 'node'\n    );\n\n    thisGroup.select('g.label').remove();\n    var labelGroup = thisGroup.append('g').attr('class', 'label');\n    var labelDom = addLabel(labelGroup, node);\n    var shape = shapes[node.shape];\n    var bbox = _.pick(labelDom.node().getBBox(), 'width', 'height');\n\n    node.elem = this;\n\n    if (node.id) {\n      thisGroup.attr('id', node.id);\n    }\n    if (node.labelId) {\n      labelGroup.attr('id', node.labelId);\n    }\n\n    if (_.has(node, 'width')) {\n      bbox.width = node.width;\n    }\n    if (_.has(node, 'height')) {\n      bbox.height = node.height;\n    }\n\n    bbox.width += node.paddingLeft + node.paddingRight;\n    bbox.height += node.paddingTop + node.paddingBottom;\n    labelGroup.attr(\n      'transform',\n      'translate(' +\n        (node.paddingLeft - node.paddingRight) / 2 +\n        ',' +\n        (node.paddingTop - node.paddingBottom) / 2 +\n        ')'\n    );\n\n    var root = d3.select(this);\n    root.select('.label-container').remove();\n    var shapeSvg = shape(root, bbox, node).classed('label-container', true);\n    util.applyStyle(shapeSvg, node.style);\n\n    var shapeBBox = shapeSvg.node().getBBox();\n    node.width = shapeBBox.width;\n    node.height = shapeBBox.height;\n  });\n\n  var exitSelection;\n\n  if (svgNodes.exit) {\n    exitSelection = svgNodes.exit();\n  } else {\n    exitSelection = svgNodes.selectAll(null); // empty selection\n  }\n\n  util.applyTransition(exitSelection, g).style('opacity', 0).remove();\n\n  return svgNodes;\n};\n\nfunction setCreateNodes(value) {\n  createNodes = value;\n}\n","import * as d3 from 'd3';\nimport * as util from './util.js';\n\nexport { positionClusters };\n\nfunction positionClusters(selection, g) {\n  var created = selection.filter(function () {\n    return !d3.select(this).classed('update');\n  });\n\n  function translate(v) {\n    var node = g.node(v);\n    return 'translate(' + node.x + ',' + node.y + ')';\n  }\n\n  created.attr('transform', translate);\n\n  util.applyTransition(selection, g).style('opacity', 1).attr('transform', translate);\n\n  util\n    .applyTransition(created.selectAll('rect'), g)\n    .attr('width', function (v) {\n      return g.node(v).width;\n    })\n    .attr('height', function (v) {\n      return g.node(v).height;\n    })\n    .attr('x', function (v) {\n      var node = g.node(v);\n      return -node.width / 2;\n    })\n    .attr('y', function (v) {\n      var node = g.node(v);\n      return -node.height / 2;\n    });\n}\n","import * as d3 from 'd3';\nimport * as _ from 'lodash-es';\nimport * as util from './util.js';\n\nexport { positionEdgeLabels };\n\nfunction positionEdgeLabels(selection, g) {\n  var created = selection.filter(function () {\n    return !d3.select(this).classed('update');\n  });\n\n  function translate(e) {\n    var edge = g.edge(e);\n    return _.has(edge, 'x') ? 'translate(' + edge.x + ',' + edge.y + ')' : '';\n  }\n\n  created.attr('transform', translate);\n\n  util.applyTransition(selection, g).style('opacity', 1).attr('transform', translate);\n}\n","import * as d3 from 'd3';\nimport * as util from './util.js';\n\nexport { positionNodes };\n\nfunction positionNodes(selection, g) {\n  var created = selection.filter(function () {\n    return !d3.select(this).classed('update');\n  });\n\n  function translate(v) {\n    var node = g.node(v);\n    return 'translate(' + node.x + ',' + node.y + ')';\n  }\n\n  created.attr('transform', translate);\n\n  util.applyTransition(selection, g).style('opacity', 1).attr('transform', translate);\n}\n","import { intersectCircle } from './intersect/intersect-circle.js';\nimport { intersectEllipse } from './intersect/intersect-ellipse.js';\nimport { intersectPolygon } from './intersect/intersect-polygon.js';\nimport { intersectRect } from './intersect/intersect-rect.js';\n\nexport { shapes, setShapes };\n\nvar shapes = {\n  rect,\n  ellipse,\n  circle,\n  diamond,\n};\n\nfunction setShapes(value) {\n  shapes = value;\n}\n\nfunction rect(parent, bbox, node) {\n  var shapeSvg = parent\n    .insert('rect', ':first-child')\n    .attr('rx', node.rx)\n    .attr('ry', node.ry)\n    .attr('x', -bbox.width / 2)\n    .attr('y', -bbox.height / 2)\n    .attr('width', bbox.width)\n    .attr('height', bbox.height);\n\n  node.intersect = function (point) {\n    return intersectRect(node, point);\n  };\n\n  return shapeSvg;\n}\n\nfunction ellipse(parent, bbox, node) {\n  var rx = bbox.width / 2;\n  var ry = bbox.height / 2;\n  var shapeSvg = parent\n    .insert('ellipse', ':first-child')\n    .attr('x', -bbox.width / 2)\n    .attr('y', -bbox.height / 2)\n    .attr('rx', rx)\n    .attr('ry', ry);\n\n  node.intersect = function (point) {\n    return intersectEllipse(node, rx, ry, point);\n  };\n\n  return shapeSvg;\n}\n\nfunction circle(parent, bbox, node) {\n  var r = Math.max(bbox.width, bbox.height) / 2;\n  var shapeSvg = parent\n    .insert('circle', ':first-child')\n    .attr('x', -bbox.width / 2)\n    .attr('y', -bbox.height / 2)\n    .attr('r', r);\n\n  node.intersect = function (point) {\n    return intersectCircle(node, r, point);\n  };\n\n  return shapeSvg;\n}\n\n// Circumscribe an ellipse for the bounding box with a diamond shape. I derived\n// the function to calculate the diamond shape from:\n// http://mathforum.org/kb/message.jspa?messageID=3750236\nfunction diamond(parent, bbox, node) {\n  var w = (bbox.width * Math.SQRT2) / 2;\n  var h = (bbox.height * Math.SQRT2) / 2;\n  var points = [\n    { x: 0, y: -h },\n    { x: -w, y: 0 },\n    { x: 0, y: h },\n    { x: w, y: 0 },\n  ];\n  var shapeSvg = parent.insert('polygon', ':first-child').attr(\n    'points',\n    points\n      .map(function (p) {\n        return p.x + ',' + p.y;\n      })\n      .join(' ')\n  );\n\n  node.intersect = function (p) {\n    return intersectPolygon(node, points, p);\n  };\n\n  return shapeSvg;\n}\n","import { intersectEllipse } from './intersect-ellipse.js';\n\nexport { intersectCircle };\n\nfunction intersectCircle(node, rx, point) {\n  return intersectEllipse(node, rx, rx, point);\n}\n","export { intersectEllipse };\n\nfunction intersectEllipse(node, rx, ry, point) {\n  // Formulae from: http://mathworld.wolfram.com/Ellipse-LineIntersection.html\n\n  var cx = node.x;\n  var cy = node.y;\n\n  var px = cx - point.x;\n  var py = cy - point.y;\n\n  var det = Math.sqrt(rx * rx * py * py + ry * ry * px * px);\n\n  var dx = Math.abs((rx * ry * px) / det);\n  if (point.x < cx) {\n    dx = -dx;\n  }\n  var dy = Math.abs((rx * ry * py) / det);\n  if (point.y < cy) {\n    dy = -dy;\n  }\n\n  return { x: cx + dx, y: cy + dy };\n}\n","import { intersectLine } from './intersect-line.js';\n\nexport { intersectPolygon };\n\n/*\n * Returns the point ({x, y}) at which the point argument intersects with the\n * node argument assuming that it has the shape specified by polygon.\n */\nfunction intersectPolygon(node, polyPoints, point) {\n  var x1 = node.x;\n  var y1 = node.y;\n\n  var intersections = [];\n\n  var minX = Number.POSITIVE_INFINITY;\n  var minY = Number.POSITIVE_INFINITY;\n  polyPoints.forEach(function (entry) {\n    minX = Math.min(minX, entry.x);\n    minY = Math.min(minY, entry.y);\n  });\n\n  var left = x1 - node.width / 2 - minX;\n  var top = y1 - node.height / 2 - minY;\n\n  for (var i = 0; i < polyPoints.length; i++) {\n    var p1 = polyPoints[i];\n    var p2 = polyPoints[i < polyPoints.length - 1 ? i + 1 : 0];\n    var intersect = intersectLine(\n      node,\n      point,\n      { x: left + p1.x, y: top + p1.y },\n      { x: left + p2.x, y: top + p2.y }\n    );\n    if (intersect) {\n      intersections.push(intersect);\n    }\n  }\n\n  if (!intersections.length) {\n    console.log('NO INTERSECTION FOUND, RETURN NODE CENTER', node);\n    return node;\n  }\n\n  if (intersections.length > 1) {\n    // More intersections, find the one nearest to edge end point\n    intersections.sort(function (p, q) {\n      var pdx = p.x - point.x;\n      var pdy = p.y - point.y;\n      var distp = Math.sqrt(pdx * pdx + pdy * pdy);\n\n      var qdx = q.x - point.x;\n      var qdy = q.y - point.y;\n      var distq = Math.sqrt(qdx * qdx + qdy * qdy);\n\n      return distp < distq ? -1 : distp === distq ? 0 : 1;\n    });\n  }\n  return intersections[0];\n}\n","export { intersectLine };\n\n/*\n * Returns the point at which two lines, p and q, intersect or returns\n * undefined if they do not intersect.\n */\nfunction intersectLine(p1, p2, q1, q2) {\n  // Algorithm from J. Avro, (ed.) Graphics Gems, No 2, Morgan Kaufmann, 1994,\n  // p7 and p473.\n\n  var a1, a2, b1, b2, c1, c2;\n  var r1, r2, r3, r4;\n  var denom, offset, num;\n  var x, y;\n\n  // Compute a1, b1, c1, where line joining points 1 and 2 is F(x,y) = a1 x +\n  // b1 y + c1 = 0.\n  a1 = p2.y - p1.y;\n  b1 = p1.x - p2.x;\n  c1 = p2.x * p1.y - p1.x * p2.y;\n\n  // Compute r3 and r4.\n  r3 = a1 * q1.x + b1 * q1.y + c1;\n  r4 = a1 * q2.x + b1 * q2.y + c1;\n\n  // Check signs of r3 and r4. If both point 3 and point 4 lie on\n  // same side of line 1, the line segments do not intersect.\n  if (r3 !== 0 && r4 !== 0 && sameSign(r3, r4)) {\n    return /*DONT_INTERSECT*/;\n  }\n\n  // Compute a2, b2, c2 where line joining points 3 and 4 is G(x,y) = a2 x + b2 y + c2 = 0\n  a2 = q2.y - q1.y;\n  b2 = q1.x - q2.x;\n  c2 = q2.x * q1.y - q1.x * q2.y;\n\n  // Compute r1 and r2\n  r1 = a2 * p1.x + b2 * p1.y + c2;\n  r2 = a2 * p2.x + b2 * p2.y + c2;\n\n  // Check signs of r1 and r2. If both point 1 and point 2 lie\n  // on same side of second line segment, the line segments do\n  // not intersect.\n  if (r1 !== 0 && r2 !== 0 && sameSign(r1, r2)) {\n    return /*DONT_INTERSECT*/;\n  }\n\n  // Line segments intersect: compute intersection point.\n  denom = a1 * b2 - a2 * b1;\n  if (denom === 0) {\n    return /*COLLINEAR*/;\n  }\n\n  offset = Math.abs(denom / 2);\n\n  // The denom/2 is to get rounding instead of truncating. It\n  // is added or subtracted to the numerator, depending upon the\n  // sign of the numerator.\n  num = b1 * c2 - b2 * c1;\n  x = num < 0 ? (num - offset) / denom : (num + offset) / denom;\n\n  num = a2 * c1 - a1 * c2;\n  y = num < 0 ? (num - offset) / denom : (num + offset) / denom;\n\n  return { x: x, y: y };\n}\n\nfunction sameSign(r1, r2) {\n  return r1 * r2 > 0;\n}\n","export { intersectRect };\n\nfunction intersectRect(node, point) {\n  var x = node.x;\n  var y = node.y;\n\n  // Rectangle intersection algorithm from:\n  // http://math.stackexchange.com/questions/108113/find-edge-between-two-boxes\n  var dx = point.x - x;\n  var dy = point.y - y;\n  var w = node.width / 2;\n  var h = node.height / 2;\n\n  var sx, sy;\n  if (Math.abs(dy) * w > Math.abs(dx) * h) {\n    // Intersection is top or bottom of rect.\n    if (dy < 0) {\n      h = -h;\n    }\n    sx = dy === 0 ? 0 : (h * dx) / dy;\n    sy = h;\n  } else {\n    // Intersection is left or right of rect.\n    if (dx < 0) {\n      w = -w;\n    }\n    sx = w;\n    sy = dx === 0 ? 0 : (w * dy) / dx;\n  }\n\n  return { x: x + sx, y: y + sy };\n}\n","import * as node from './intersect-node.js';\nimport * as circle from './intersect-circle.js';\nimport * as ellipse from './intersect-ellipse.js';\nimport * as polygon from './intersect-polygon.js';\nimport * as rect from './intersect-rect.js';\n\nexport { node, circle, ellipse, polygon, rect };\n"]}