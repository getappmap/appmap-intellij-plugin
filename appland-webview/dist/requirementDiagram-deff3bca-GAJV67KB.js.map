{"version":3,"sources":["../node_modules/mermaid/dist/requirementDiagram-deff3bca.js"],"names":["clear"],"mappings":";;;;;;AAAA,iBAAA,EAAA,CAAA;AAIO,OAAA,CAAA,YAAA,EAAA,EAAA,CAAA,EAAA;AACA,OAAA,CAAA,iBAAA,EAAA,EAAA,CAAA,EAAA;AACA,OAAA,CAAA,aAAA,EAAA,EAAA,CAAA,EAAA;AACA,OAAA,CAAA,cAAA,EAAA,EAAA,CAAA,EAAA;AAMP,IAAI,SAAS,WAAW;AACtB,EAAA,IAAI,CAAI,GAAA,SAAS,CAAG,EAAA,CAAA,EAAG,IAAI,CAAG,EAAA;AAC5B,IAAA,KAAK,EAAK,GAAA,EAAA,IAAM,EAAC,EAAG,CAAI,GAAA,CAAA,CAAE,MAAQ,EAAA,CAAA,EAAA,EAAK,EAAG,CAAA,CAAA,CAAE,CAAC,CAAC,CAAI,GAAA,CAAA;AAChD,MAAA,CAAA;AACF,IAAO,OAAA,EAAA,CAAA;AAAA,GACT,EAAG,GAAM,GAAA,CAAC,CAAG,EAAA,CAAC,GAAG,GAAM,GAAA,CAAC,CAAG,EAAA,CAAC,CAAG,EAAA,GAAA,GAAM,CAAC,CAAG,EAAA,CAAC,CAAG,EAAA,GAAA,GAAM,CAAC,CAAA,EAAG,CAAC,CAAG,EAAA,GAAA,GAAM,CAAC,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,IAAI,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,EAAE,CAAG,EAAA,GAAA,GAAM,CAAC,CAAG,EAAA,EAAE,CAAG,EAAA,GAAA,GAAM,CAAC,CAAA,EAAG,CAAC,CAAG,EAAA,GAAA,GAAM,CAAC,CAAA,EAAG,EAAE,CAAA,EAAG,MAAM,CAAC,CAAA,EAAG,EAAE,CAAA,EAAG,GAAM,GAAA,CAAC,GAAG,EAAE,CAAA,EAAG,GAAM,GAAA,CAAC,CAAG,EAAA,EAAE,GAAG,GAAM,GAAA,CAAC,CAAG,EAAA,EAAE,CAAG,EAAA,GAAA,GAAM,CAAC,CAAG,EAAA,EAAE,CAAG,EAAA,GAAA,GAAM,CAAC,CAAA,EAAG,EAAE,CAAG,EAAA,GAAA,GAAM,CAAC,CAAA,EAAG,EAAE,CAAA,EAAG,MAAM,CAAC,CAAA,EAAG,EAAE,CAAA,EAAG,GAAM,GAAA,CAAC,IAAI,EAAE,CAAA,EAAG,GAAM,GAAA,CAAC,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,IAAI,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,EAAE,CAAA,EAAG,MAAM,CAAC,CAAA,EAAG,EAAE,CAAA,EAAG,GAAM,GAAA,CAAC,GAAG,EAAE,CAAA,EAAG,GAAM,GAAA,CAAC,CAAG,EAAA,EAAE,GAAG,GAAM,GAAA,CAAC,CAAG,EAAA,EAAE,CAAG,EAAA,GAAA,GAAM,CAAC,CAAG,EAAA,EAAE,CAAG,EAAA,GAAA,GAAM,CAAC,CAAA,EAAG,EAAE,CAAG,EAAA,GAAA,GAAM,CAAC,CAAA,EAAG,EAAE,CAAA,EAAG,MAAM,CAAC,EAAA,EAAI,EAAE,CAAA,EAAG,GAAM,GAAA,CAAC,CAAG,EAAA,EAAE,CAAG,EAAA,GAAA,GAAM,CAAC,CAAA,EAAG,EAAE,CAAA,EAAG,MAAM,CAAC,CAAA,EAAG,EAAE,CAAA,EAAG,GAAM,GAAA,CAAC,GAAG,EAAE,CAAA,EAAG,GAAM,GAAA,CAAC,CAAG,EAAA,EAAE,GAAG,GAAM,GAAA,CAAC,CAAG,EAAA,EAAE,CAAG,EAAA,GAAA,GAAM,CAAC,CAAG,EAAA,EAAE,CAAG,EAAA,GAAA,GAAM,CAAC,CAAA,EAAG,EAAE,CAAG,EAAA,GAAA,GAAM,CAAC,CAAA,EAAG,EAAE,CAAA,EAAG,MAAM,CAAC,CAAA,EAAG,EAAE,CAAA,EAAG,GAAM,GAAA,CAAC,GAAG,CAAG,EAAA,CAAA,EAAG,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,EAAE,CAAA,CAAA;AAC7rB,EAAA,IAAI,OAAU,GAAA;AAAA,IACZ,KAAA,EAAO,SAAS,KAAQ,GAAA;AAAA,KACxB;AAAA,IACA,IAAI,EAAC;AAAA,IACL,QAAU,EAAA,EAAE,OAAS,EAAA,CAAA,EAAG,OAAS,EAAA,CAAA,EAAG,WAAa,EAAA,CAAA,EAAG,SAAW,EAAA,CAAA,EAAG,IAAM,EAAA,CAAA,EAAG,SAAW,EAAA,CAAA,EAAG,KAAO,EAAA,CAAA,EAAG,WAAa,EAAA,CAAA,EAAG,iBAAmB,EAAA,EAAA,EAAI,WAAa,EAAA,EAAA,EAAI,iBAAmB,EAAA,EAAA,EAAI,2BAA6B,EAAA,EAAA,EAAI,gBAAkB,EAAA,EAAA,EAAI,cAAc,EAAI,EAAA,iBAAA,EAAmB,EAAI,EAAA,iBAAA,EAAmB,EAAI,EAAA,iBAAA,EAAmB,EAAI,EAAA,cAAA,EAAgB,EAAI,EAAA,iBAAA,EAAmB,EAAI,EAAA,IAAA,EAAM,EAAI,EAAA,UAAA,EAAY,EAAI,EAAA,IAAA,EAAM,EAAI,EAAA,MAAA,EAAQ,EAAI,EAAA,MAAA,EAAQ,EAAI,EAAA,MAAA,EAAQ,EAAI,EAAA,WAAA,EAAa,EAAI,EAAA,YAAA,EAAc,EAAI,EAAA,YAAA,EAAc,EAAI,EAAA,aAAA,EAAe,EAAI,EAAA,aAAA,EAAe,IAAI,wBAA0B,EAAA,EAAA,EAAI,uBAAyB,EAAA,EAAA,EAAI,yBAA2B,EAAA,EAAA,EAAI,sBAAwB,EAAA,EAAA,EAAI,mBAAqB,EAAA,EAAA,EAAI,UAAY,EAAA,EAAA,EAAI,UAAY,EAAA,EAAA,EAAI,WAAa,EAAA,EAAA,EAAI,iBAAmB,EAAA,EAAA,EAAI,sBAAwB,EAAA,EAAA,EAAI,mBAAqB,EAAA,EAAA,EAAI,aAAe,EAAA,EAAA,EAAI,SAAW,EAAA,EAAA,EAAI,aAAe,EAAA,EAAA,EAAI,aAAe,EAAA,EAAA,EAAI,MAAQ,EAAA,EAAA,EAAI,QAAQ,EAAI,EAAA,QAAA,EAAU,EAAI,EAAA,KAAA,EAAO,EAAI,EAAA,aAAA,EAAe,EAAI,EAAA,cAAA,EAAgB,EAAI,EAAA,MAAA,EAAQ,EAAI,EAAA,aAAA,EAAe,EAAI,EAAA,UAAA,EAAY,EAAI,EAAA,QAAA,EAAU,IAAI,SAAW,EAAA,EAAA,EAAI,WAAa,EAAA,EAAA,EAAI,UAAY,EAAA,EAAA,EAAI,SAAW,EAAA,EAAA,EAAI,QAAU,EAAA,EAAA,EAAI,WAAa,EAAA,EAAA,EAAI,SAAW,EAAA,EAAA,EAAI,SAAW,EAAA,CAAA,EAAG,QAAQ,CAAE,EAAA;AAAA,IAC5nC,YAAY,EAAE,CAAA,EAAG,SAAS,CAAG,EAAA,SAAA,EAAW,GAAG,IAAM,EAAA,CAAA,EAAG,OAAO,CAAG,EAAA,WAAA,EAAa,IAAI,iBAAmB,EAAA,EAAA,EAAI,aAAa,EAAI,EAAA,iBAAA,EAAmB,IAAI,2BAA6B,EAAA,EAAA,EAAI,cAAgB,EAAA,EAAA,EAAI,MAAM,EAAI,EAAA,UAAA,EAAY,IAAI,MAAQ,EAAA,EAAA,EAAI,QAAQ,EAAI,EAAA,YAAA,EAAc,IAAI,aAAe,EAAA,EAAA,EAAI,eAAe,EAAI,EAAA,wBAAA,EAA0B,IAAI,uBAAyB,EAAA,EAAA,EAAI,2BAA2B,EAAI,EAAA,sBAAA,EAAwB,EAAI,EAAA,mBAAA,EAAqB,IAAI,UAAY,EAAA,EAAA,EAAI,YAAY,EAAI,EAAA,WAAA,EAAa,IAAI,iBAAmB,EAAA,EAAA,EAAI,wBAAwB,EAAI,EAAA,mBAAA,EAAqB,IAAI,aAAe,EAAA,EAAA,EAAI,WAAW,EAAI,EAAA,MAAA,EAAQ,IAAI,QAAU,EAAA,EAAA,EAAI,eAAe,EAAI,EAAA,MAAA,EAAQ,IAAI,aAAe,EAAA,EAAA,EAAI,YAAY,EAAI,EAAA,QAAA,EAAU,IAAI,SAAW,EAAA,EAAA,EAAI,aAAa,EAAI,EAAA,UAAA,EAAY,IAAI,SAAW,EAAA,EAAA,EAAI,UAAU,EAAI,EAAA,WAAA,EAAa,IAAI,SAAU,EAAA;AAAA,IAC7yB,YAAA,EAAcgB,aAAA,EAAe,SAAS,SAAU,CAAA,MAAA,EAAQ,QAAQ,QAAU,EAAA,EAAA,EAAI,OAAS,EAAA,EAAA,EAAI,EAAI,EAAA;AAC/E,MAAI,IAAA,EAAA,GAAK,GAAG,MAAS,GAAA,CAAA,CAAA;AACrB,MAAA,QAAQ,OAAS;AAAA,QACf,KAAK,CAAA;AACH,UAAA,IAAA,CAAK,CAAI,GAAA,EAAA,CAAG,EAAE,CAAA,CAAE,IAAK,EAAA,CAAA;AACrB,UAAG,EAAA,CAAA,WAAA,CAAY,KAAK,CAAC,CAAA,CAAA;AACrB,UAAA,MAAA;AAAA,QACF,KAAK,CAAA,CAAA;AAAA,QACL,KAAK,CAAA;AACH,UAAA,IAAA,CAAK,CAAI,GAAA,EAAA,CAAG,EAAE,CAAA,CAAE,IAAK,EAAA,CAAA;AACrB,UAAG,EAAA,CAAA,iBAAA,CAAkB,KAAK,CAAC,CAAA,CAAA;AAC3B,UAAA,MAAA;AAAA,QACF,KAAK,CAAA;AACH,UAAA,IAAA,CAAK,IAAI,EAAC,CAAA;AACV,UAAA,MAAA;AAAA,QACF,KAAK,EAAA;AACH,UAAG,EAAA,CAAA,cAAA,CAAe,GAAG,EAAK,GAAA,CAAC,GAAG,EAAG,CAAA,EAAA,GAAK,CAAC,CAAC,CAAA,CAAA;AACxC,UAAA,MAAA;AAAA,QACF,KAAK,EAAA;AACH,UAAA,EAAA,CAAG,WAAY,CAAA,EAAA,CAAG,EAAK,GAAA,CAAC,CAAC,CAAA,CAAA;AACzB,UAAA,MAAA;AAAA,QACF,KAAK,EAAA;AACH,UAAA,EAAA,CAAG,aAAc,CAAA,EAAA,CAAG,EAAK,GAAA,CAAC,CAAC,CAAA,CAAA;AAC3B,UAAA,MAAA;AAAA,QACF,KAAK,EAAA;AACH,UAAA,EAAA,CAAG,aAAc,CAAA,EAAA,CAAG,EAAK,GAAA,CAAC,CAAC,CAAA,CAAA;AAC3B,UAAA,MAAA;AAAA,QACF,KAAK,EAAA;AACH,UAAA,EAAA,CAAG,qBAAsB,CAAA,EAAA,CAAG,EAAK,GAAA,CAAC,CAAC,CAAA,CAAA;AACnC,UAAA,MAAA;AAAA,QACF,KAAK,EAAA;AACH,UAAK,IAAA,CAAA,CAAA,GAAI,GAAG,eAAgB,CAAA,WAAA,CAAA;AAC5B,UAAA,MAAA;AAAA,QACF,KAAK,EAAA;AACH,UAAK,IAAA,CAAA,CAAA,GAAI,GAAG,eAAgB,CAAA,sBAAA,CAAA;AAC5B,UAAA,MAAA;AAAA,QACF,KAAK,EAAA;AACH,UAAK,IAAA,CAAA,CAAA,GAAI,GAAG,eAAgB,CAAA,qBAAA,CAAA;AAC5B,UAAA,MAAA;AAAA,QACF,KAAK,EAAA;AACH,UAAK,IAAA,CAAA,CAAA,GAAI,GAAG,eAAgB,CAAA,uBAAA,CAAA;AAC5B,UAAA,MAAA;AAAA,QACF,KAAK,EAAA;AACH,UAAK,IAAA,CAAA,CAAA,GAAI,GAAG,eAAgB,CAAA,oBAAA,CAAA;AAC5B,UAAA,MAAA;AAAA,QACF,KAAK,EAAA;AACH,UAAK,IAAA,CAAA,CAAA,GAAI,GAAG,eAAgB,CAAA,iBAAA,CAAA;AAC5B,UAAA,MAAA;AAAA,QACF,KAAK,EAAA;AACH,UAAK,IAAA,CAAA,CAAA,GAAI,GAAG,SAAU,CAAA,QAAA,CAAA;AACtB,UAAA,MAAA;AAAA,QACF,KAAK,EAAA;AACH,UAAK,IAAA,CAAA,CAAA,GAAI,GAAG,SAAU,CAAA,QAAA,CAAA;AACtB,UAAA,MAAA;AAAA,QACF,KAAK,EAAA;AACH,UAAK,IAAA,CAAA,CAAA,GAAI,GAAG,SAAU,CAAA,SAAA,CAAA;AACtB,UAAA,MAAA;AAAA,QACF,KAAK,EAAA;AACH,UAAK,IAAA,CAAA,CAAA,GAAI,GAAG,UAAW,CAAA,eAAA,CAAA;AACvB,UAAA,MAAA;AAAA,QACF,KAAK,EAAA;AACH,UAAK,IAAA,CAAA,CAAA,GAAI,GAAG,UAAW,CAAA,oBAAA,CAAA;AACvB,UAAA,MAAA;AAAA,QACF,KAAK,EAAA;AACH,UAAK,IAAA,CAAA,CAAA,GAAI,GAAG,UAAW,CAAA,iBAAA,CAAA;AACvB,UAAA,MAAA;AAAA,QACF,KAAK,EAAA;AACH,UAAK,IAAA,CAAA,CAAA,GAAI,GAAG,UAAW,CAAA,WAAA,CAAA;AACvB,UAAA,MAAA;AAAA,QACF,KAAK,EAAA;AACH,UAAA,EAAA,CAAG,UAAW,CAAA,EAAA,CAAG,EAAK,GAAA,CAAC,CAAC,CAAA,CAAA;AACxB,UAAA,MAAA;AAAA,QACF,KAAK,EAAA;AACH,UAAA,EAAA,CAAG,iBAAkB,CAAA,EAAA,CAAG,EAAK,GAAA,CAAC,CAAC,CAAA,CAAA;AAC/B,UAAA,MAAA;AAAA,QACF,KAAK,EAAA;AACH,UAAA,EAAA,CAAG,mBAAoB,CAAA,EAAA,CAAG,EAAK,GAAA,CAAC,CAAC,CAAA,CAAA;AACjC,UAAA,MAAA;AAAA,QACF,KAAK,EAAA;AACH,UAAG,EAAA,CAAA,eAAA,CAAgB,EAAG,CAAA,EAAA,GAAK,CAAC,CAAA,EAAG,EAAG,CAAA,EAAE,CAAG,EAAA,EAAA,CAAG,EAAK,GAAA,CAAC,CAAC,CAAA,CAAA;AACjD,UAAA,MAAA;AAAA,QACF,KAAK,EAAA;AACH,UAAG,EAAA,CAAA,eAAA,CAAgB,EAAG,CAAA,EAAA,GAAK,CAAC,CAAA,EAAG,EAAG,CAAA,EAAA,GAAK,CAAC,CAAA,EAAG,EAAG,CAAA,EAAE,CAAC,CAAA,CAAA;AACjD,UAAA,MAAA;AAAA,QACF,KAAK,EAAA;AACH,UAAK,IAAA,CAAA,CAAA,GAAI,GAAG,aAAc,CAAA,QAAA,CAAA;AAC1B,UAAA,MAAA;AAAA,QACF,KAAK,EAAA;AACH,UAAK,IAAA,CAAA,CAAA,GAAI,GAAG,aAAc,CAAA,MAAA,CAAA;AAC1B,UAAA,MAAA;AAAA,QACF,KAAK,EAAA;AACH,UAAK,IAAA,CAAA,CAAA,GAAI,GAAG,aAAc,CAAA,OAAA,CAAA;AAC1B,UAAA,MAAA;AAAA,QACF,KAAK,EAAA;AACH,UAAK,IAAA,CAAA,CAAA,GAAI,GAAG,aAAc,CAAA,SAAA,CAAA;AAC1B,UAAA,MAAA;AAAA,QACF,KAAK,EAAA;AACH,UAAK,IAAA,CAAA,CAAA,GAAI,GAAG,aAAc,CAAA,QAAA,CAAA;AAC1B,UAAA,MAAA;AAAA,QACF,KAAK,EAAA;AACH,UAAK,IAAA,CAAA,CAAA,GAAI,GAAG,aAAc,CAAA,OAAA,CAAA;AAC1B,UAAA,MAAA;AAAA,QACF,KAAK,EAAA;AACH,UAAK,IAAA,CAAA,CAAA,GAAI,GAAG,aAAc,CAAA,MAAA,CAAA;AAC1B,UAAA,MAAA;AAAA,OACJ;AAAA,KACF;AAAA,IACA,KAAO,EAAA,CAAC,EAAE,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,GAAA,EAAK,CAAG,EAAA,GAAA,EAAK,EAAI,EAAA,GAAA,EAAK,IAAI,GAAI,EAAA,EAAG,EAAE,CAAA,EAAG,CAAC,CAAC,CAAE,EAAA,EAAG,EAAE,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAC,CAAA,EAAG,CAAC,CAAA,EAAG,GAAG,GAAK,EAAA,CAAA,EAAG,GAAK,EAAA,EAAA,EAAI,GAAK,EAAA,EAAA,EAAI,GAAI,EAAA,EAAG,EAAE,CAAG,EAAA,CAAC,CAAG,EAAA,CAAC,GAAK,EAAA,EAAE,EAAI,EAAA,CAAC,GAAG,EAAE,CAAA,EAAK,EAAA,EAAE,EAAI,EAAA,CAAC,CAAG,EAAA,EAAE,GAAK,EAAA,CAAA,CAAE,GAAK,EAAA,CAAC,GAAG,CAAC,CAAC,CAAG,EAAA,EAAE,GAAG,EAAI,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAK,EAAA,CAAA,EAAG,GAAK,EAAA,EAAA,EAAI,KAAK,EAAI,EAAA,GAAA,EAAO,EAAA,EAAE,CAAG,EAAA,CAAC,CAAG,EAAA,CAAC,GAAK,EAAA,EAAE,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,GAAA,EAAK,CAAG,EAAA,EAAA,EAAI,GAAG,GAAK,EAAA,CAAA,EAAG,GAAK,EAAA,EAAA,EAAI,KAAK,EAAI,EAAA,GAAA,EAAK,EAAI,EAAA,EAAA,EAAI,IAAI,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,KAAK,EAAI,EAAA,GAAA,EAAK,EAAI,EAAA,GAAA,EAAK,IAAI,GAAK,EAAA,EAAA,EAAI,GAAK,EAAA,EAAA,EAAI,KAAK,EAAI,EAAA,GAAA,EAAK,EAAI,EAAA,GAAA,EAAK,EAAI,EAAA,GAAA,EAAO,EAAA,CAAA,CAAE,KAAK,CAAC,CAAA,EAAG,CAAC,CAAC,GAAG,CAAE,CAAA,GAAA,EAAK,CAAC,CAAA,EAAG,CAAC,CAAC,CAAA,EAAG,EAAE,CAAA,EAAG,CAAC,CAAA,EAAG,CAAC,CAAA,IAAK,EAAE,CAAA,EAAG,CAAC,CAAA,EAAG,EAAE,CAAA,EAAK,EAAA,EAAE,GAAG,EAAI,EAAA,CAAA,EAAG,GAAK,EAAA,CAAA,EAAG,EAAI,EAAA,CAAA,EAAG,GAAK,EAAA,CAAA,EAAG,KAAK,EAAI,EAAA,GAAA,EAAK,EAAI,EAAA,GAAA,EAAK,IAAI,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,IAAI,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,GAAA,EAAK,EAAI,EAAA,GAAA,EAAK,IAAI,GAAK,EAAA,EAAA,EAAI,GAAK,EAAA,EAAA,EAAI,KAAK,EAAI,EAAA,GAAA,EAAK,EAAI,EAAA,GAAA,EAAK,IAAI,GAAK,EAAA,EAAA,EAAI,GAAI,EAAA,EAAG,EAAE,CAAA,EAAG,EAAI,EAAA,CAAA,EAAG,KAAK,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,GAAA,EAAK,GAAG,GAAK,EAAA,EAAA,EAAI,GAAK,EAAA,EAAA,EAAI,KAAK,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,IAAI,EAAI,EAAA,EAAA,EAAI,GAAK,EAAA,EAAA,EAAI,KAAK,EAAI,EAAA,GAAA,EAAK,EAAI,EAAA,GAAA,EAAK,IAAI,GAAK,EAAA,EAAA,EAAI,GAAK,EAAA,EAAA,EAAI,GAAK,EAAA,EAAA,EAAI,GAAK,EAAA,EAAA,EAAI,KAAO,EAAA,EAAE,CAAG,EAAA,EAAA,EAAI,GAAG,GAAK,EAAA,CAAA,EAAG,EAAI,EAAA,CAAA,EAAG,KAAK,CAAG,EAAA,GAAA,EAAK,EAAI,EAAA,GAAA,EAAK,EAAI,EAAA,GAAA,EAAK,EAAI,EAAA,EAAA,EAAI,IAAI,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,IAAI,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,GAAA,EAAK,IAAI,GAAK,EAAA,EAAA,EAAI,GAAK,EAAA,EAAA,EAAI,GAAK,EAAA,EAAA,EAAI,GAAK,EAAA,EAAA,EAAI,KAAK,EAAI,EAAA,GAAA,EAAK,EAAI,EAAA,GAAA,EAAK,IAAI,GAAI,EAAA,EAAG,EAAE,CAAA,EAAG,IAAI,CAAG,EAAA,GAAA,EAAK,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,GAAA,EAAK,CAAG,EAAA,GAAA,EAAK,IAAI,GAAK,EAAA,EAAA,EAAI,GAAK,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,IAAI,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,GAAA,EAAK,EAAI,EAAA,GAAA,EAAK,IAAI,GAAK,EAAA,EAAA,EAAI,GAAK,EAAA,EAAA,EAAI,KAAK,EAAI,EAAA,GAAA,EAAK,EAAI,EAAA,GAAA,EAAK,IAAI,GAAK,EAAA,EAAA,EAAI,GAAI,EAAA,EAAG,EAAE,CAAA,EAAG,EAAI,EAAA,CAAA,EAAG,KAAK,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,GAAA,EAAK,GAAG,GAAK,EAAA,EAAA,EAAI,GAAK,EAAA,EAAA,EAAI,KAAK,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,IAAI,EAAI,EAAA,EAAA,EAAI,GAAK,EAAA,EAAA,EAAI,KAAK,EAAI,EAAA,GAAA,EAAK,EAAI,EAAA,GAAA,EAAK,IAAI,GAAK,EAAA,EAAA,EAAI,GAAK,EAAA,EAAA,EAAI,GAAK,EAAA,EAAA,EAAI,GAAK,EAAA,EAAA,EAAI,KAAO,EAAA,EAAE,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,CAAC,CAAG,EAAA,EAAE,GAAG,EAAI,EAAA,CAAC,CAAG,EAAA,EAAE,CAAE,EAAA,EAAG,EAAE,EAAA,EAAI,IAAI,EAAI,EAAA,CAAC,CAAG,EAAA,EAAE,GAAG,EAAI,EAAA,CAAC,CAAG,EAAA,EAAE,GAAK,EAAA,EAAE,EAAI,EAAA,CAAC,CAAG,EAAA,EAAE,CAAG,EAAA,EAAA,EAAI,CAAC,CAAG,EAAA,EAAE,CAAE,EAAA,EAAG,EAAE,GAAK,EAAA,CAAC,CAAG,EAAA,EAAE,CAAC,CAAG,EAAA,CAAA,CAAE,GAAK,EAAA,CAAC,CAAG,EAAA,EAAE,CAAC,CAAA,EAAG,EAAE,GAAK,EAAA,CAAC,CAAG,EAAA,EAAE,CAAC,CAAG,EAAA,CAAA,CAAE,GAAK,EAAA,CAAC,GAAG,EAAE,CAAC,CAAG,EAAA,CAAA,CAAE,GAAK,EAAA,CAAC,CAAG,EAAA,EAAE,CAAC,CAAG,EAAA,CAAA,CAAE,GAAK,EAAA,CAAC,CAAG,EAAA,EAAE,CAAC,CAAA,EAAG,EAAE,GAAK,EAAA,CAAC,CAAG,EAAA,EAAE,CAAC,CAAA,EAAG,CAAE,CAAA,GAAA,EAAK,CAAC,CAAG,EAAA,EAAE,CAAC,CAAA,EAAG,EAAE,CAAG,EAAA,CAAC,CAAG,EAAA,CAAC,GAAK,EAAA,EAAE,CAAG,EAAA,CAAC,CAAG,EAAA,CAAC,CAAE,EAAA,EAAG,EAAE,CAAG,EAAA,CAAC,CAAG,EAAA,CAAC,GAAK,EAAA,EAAE,CAAG,EAAA,CAAC,GAAG,EAAE,CAAA,EAAK,EAAA,EAAE,CAAG,EAAA,CAAC,CAAG,EAAA,EAAE,GAAK,EAAA,EAAE,CAAG,EAAA,CAAC,GAAG,EAAE,CAAA,EAAK,EAAA,EAAE,IAAI,CAAC,CAAA,EAAG,EAAE,CAAA,EAAK,EAAA,EAAE,EAAI,EAAA,CAAC,GAAG,EAAE,CAAA,EAAK,EAAA,EAAE,IAAI,CAAC,CAAA,EAAG,EAAE,CAAA,IAAK,EAAE,EAAA,EAAI,CAAC,CAAA,EAAG,EAAE,CAAA,EAAK,EAAA,EAAE,IAAI,CAAC,CAAA,EAAG,EAAE,CAAA,IAAK,EAAE,EAAA,EAAI,CAAC,CAAA,EAAG,EAAE,CAAE,EAAA,EAAG,EAAE,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,GAAK,EAAA,EAAA,EAAI,KAAK,EAAI,EAAA,GAAA,EAAK,EAAI,EAAA,GAAA,EAAK,IAAI,GAAK,EAAA,EAAA,EAAI,GAAK,EAAA,EAAA,EAAI,KAAO,EAAA,EAAE,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,GAAA,EAAK,EAAI,EAAA,GAAA,EAAK,IAAI,GAAK,EAAA,EAAA,EAAI,GAAK,EAAA,EAAA,EAAI,KAAK,EAAI,EAAA,GAAA,EAAK,EAAI,EAAA,GAAA,IAAO,EAAE,CAAA,EAAG,CAAC,CAAA,EAAG,EAAE,CAAA,EAAK,EAAA,EAAE,GAAG,CAAC,CAAA,EAAG,EAAE,CAAA,EAAK,EAAA,EAAE,EAAI,EAAA,CAAC,GAAG,EAAE,CAAA,EAAK,EAAA,CAAA,CAAE,GAAK,EAAA,CAAC,CAAG,EAAA,EAAE,CAAC,CAAG,EAAA,CAAA,CAAE,GAAK,EAAA,CAAC,GAAG,EAAE,CAAC,CAAG,EAAA,CAAA,CAAE,KAAK,CAAC,CAAA,EAAG,EAAE,CAAC,CAAG,EAAA,CAAA,CAAE,GAAK,EAAA,CAAC,GAAG,EAAE,CAAC,CAAG,EAAA,CAAA,CAAE,KAAK,CAAC,CAAA,EAAG,EAAE,CAAC,GAAG,CAAE,CAAA,GAAA,EAAK,CAAC,CAAA,EAAG,EAAE,CAAC,CAAG,EAAA,CAAA,CAAE,KAAK,CAAC,CAAA,EAAG,EAAE,CAAC,GAAG,EAAE,EAAA,EAAI,CAAC,CAAA,EAAG,EAAE,CAAE,EAAA,EAAG,EAAE,CAAA,EAAG,GAAK,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,KAAK,EAAI,EAAA,GAAA,EAAK,EAAI,EAAA,GAAA,EAAK,EAAI,EAAA,GAAA,EAAK,EAAI,EAAA,GAAA,IAAO,EAAE,CAAA,EAAG,GAAK,EAAA,EAAA,EAAI,GAAK,EAAA,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,KAAK,EAAI,EAAA,GAAA,EAAO,EAAA,EAAE,IAAI,EAAI,EAAA,EAAA,EAAI,GAAK,EAAA,EAAA,EAAI,KAAO,EAAA,EAAE,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,GAAA,EAAK,EAAI,EAAA,GAAA,IAAO,CAAE,CAAA,GAAA,EAAK,CAAC,CAAA,EAAG,EAAE,CAAC,CAAA,EAAG,EAAE,EAAA,EAAI,CAAC,CAAG,EAAA,EAAE,CAAE,EAAA,EAAG,EAAE,EAAA,EAAI,CAAC,CAAA,EAAG,EAAE,CAAE,EAAA,EAAG,EAAE,EAAA,EAAI,CAAC,CAAG,EAAA,EAAE,CAAE,EAAA,EAAG,EAAE,EAAI,EAAA,CAAC,CAAG,EAAA,EAAE,CAAE,EAAA,EAAG,EAAE,CAAA,EAAG,KAAK,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,GAAA,EAAK,EAAI,EAAA,GAAA,EAAK,EAAI,EAAA,GAAA,EAAK,IAAI,GAAK,EAAA,EAAA,EAAI,GAAI,EAAA,EAAG,CAAE,CAAA,GAAA,EAAK,CAAC,CAAA,EAAG,EAAE,CAAC,CAAA,EAAG,CAAE,CAAA,GAAA,EAAK,CAAC,CAAG,EAAA,EAAE,CAAC,CAAA,EAAG,EAAE,EAAI,EAAA,CAAC,CAAG,EAAA,EAAE,CAAE,EAAA,EAAG,EAAE,EAAA,EAAI,CAAC,CAAG,EAAA,EAAE,CAAE,EAAA,EAAG,EAAE,CAAG,EAAA,GAAA,EAAK,EAAI,EAAA,GAAA,EAAK,IAAI,EAAI,EAAA,EAAA,EAAI,GAAK,EAAA,EAAA,EAAI,GAAI,EAAA,EAAG,CAAE,CAAA,GAAA,EAAK,CAAC,CAAG,EAAA,EAAE,CAAC,CAAA,EAAG,EAAE,GAAK,EAAA,CAAC,CAAG,EAAA,EAAE,CAAC,CAAG,EAAA,CAAA,CAAE,GAAK,EAAA,CAAC,CAAG,EAAA,EAAE,CAAC,CAAA,EAAG,EAAE,EAAI,EAAA,EAAA,EAAI,EAAI,EAAA,GAAA,EAAK,IAAI,GAAI,EAAA,EAAG,EAAE,EAAA,EAAI,IAAI,EAAI,EAAA,CAAC,CAAG,EAAA,EAAE,CAAG,EAAA,EAAA,EAAI,CAAC,CAAA,EAAG,EAAE,CAAE,EAAA,EAAG,EAAE,EAAA,EAAI,IAAI,EAAI,EAAA,CAAC,CAAG,EAAA,EAAE,GAAG,EAAI,EAAA,CAAC,CAAG,EAAA,EAAE,CAAG,EAAA,EAAA,EAAI,CAAC,CAAA,EAAG,EAAE,CAAE,EAAA,EAAG,EAAE,EAAA,EAAI,IAAI,EAAI,EAAA,CAAC,CAAG,EAAA,EAAE,GAAG,EAAI,EAAA,CAAC,CAAG,EAAA,EAAE,CAAG,EAAA,EAAA,EAAI,CAAC,CAAA,EAAG,EAAE,CAAG,EAAA,EAAA,EAAI,CAAC,CAAA,EAAG,EAAE,CAAE,EAAA,EAAG,CAAE,CAAA,GAAA,EAAK,CAAC,CAAG,EAAA,EAAE,CAAC,CAAA,EAAG,EAAE,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,CAAC,CAAG,EAAA,EAAE,CAAG,EAAA,EAAA,EAAI,CAAC,CAAA,EAAG,EAAE,CAAA,IAAK,EAAE,EAAA,EAAI,EAAI,EAAA,EAAA,EAAI,CAAC,CAAA,EAAG,EAAE,CAAA,EAAG,IAAI,CAAC,CAAA,EAAG,EAAE,CAAA,IAAK,CAAE,CAAA,GAAA,EAAK,CAAC,CAAA,EAAG,EAAE,CAAC,CAAA,EAAG,EAAE,CAAA,EAAG,CAAC,CAAA,EAAG,GAAG,CAAA,IAAK,EAAE,CAAA,EAAG,CAAC,CAAA,EAAG,GAAG,CAAE,EAAA,EAAG,EAAE,CAAA,EAAG,CAAC,CAAG,EAAA,EAAE,CAAE,EAAA,EAAG,EAAE,CAAA,EAAG,CAAC,CAAA,EAAG,EAAE,CAAE,EAAA,EAAG,EAAE,CAAA,EAAG,CAAC,CAAG,EAAA,GAAG,CAAE,EAAA,EAAG,EAAE,CAAG,EAAA,CAAC,CAAG,EAAA,EAAE,CAAE,EAAA,EAAG,EAAE,CAAA,EAAG,CAAC,CAAG,EAAA,EAAE,CAAE,EAAA,EAAG,EAAE,CAAA,EAAG,CAAC,CAAA,EAAG,EAAE,CAAE,EAAA,EAAG,EAAE,CAAA,EAAG,CAAC,CAAA,EAAG,GAAG,CAAA,IAAK,EAAE,CAAA,EAAG,CAAC,CAAA,EAAG,EAAE,CAAE,EAAA,EAAG,EAAE,CAAA,EAAG,CAAC,CAAG,EAAA,EAAE,CAAE,EAAA,EAAG,EAAE,CAAA,EAAG,CAAC,CAAA,EAAG,EAAE,CAAE,EAAA,EAAG,EAAE,CAAA,EAAG,CAAC,CAAG,EAAA,EAAE,CAAE,EAAA,EAAG,EAAE,CAAG,EAAA,CAAC,CAAG,EAAA,GAAG,CAAE,EAAA,EAAG,EAAE,CAAA,EAAG,CAAC,CAAG,EAAA,EAAE,CAAE,EAAA,EAAG,EAAE,CAAG,EAAA,CAAC,CAAG,EAAA,EAAE,GAAK,EAAA,EAAE,CAAG,EAAA,CAAC,CAAG,EAAA,GAAG,CAAE,EAAA,EAAG,EAAE,CAAG,EAAA,CAAC,CAAG,EAAA,EAAE,CAAE,EAAA,EAAG,EAAE,CAAA,EAAG,CAAC,CAAG,EAAA,EAAE,CAAE,EAAA,EAAG,EAAE,CAAA,EAAG,GAAK,EAAA,EAAA,EAAI,KAAK,EAAI,EAAA,GAAA,EAAK,EAAI,EAAA,GAAA,EAAK,IAAI,GAAK,EAAA,EAAA,EAAI,GAAK,EAAA,EAAA,EAAI,KAAO,EAAA,EAAE,CAAG,EAAA,GAAA,EAAK,EAAI,EAAA,GAAA,EAAK,EAAI,EAAA,GAAA,EAAK,IAAI,GAAK,EAAA,EAAA,EAAI,GAAK,EAAA,EAAA,EAAI,KAAK,EAAI,EAAA,GAAA,EAAO,EAAA,EAAE,GAAG,GAAK,EAAA,EAAA,EAAI,GAAK,EAAA,EAAA,EAAI,GAAK,EAAA,EAAA,EAAI,GAAK,EAAA,EAAA,EAAI,KAAK,EAAI,EAAA,GAAA,EAAK,EAAI,EAAA,GAAA,IAAO,EAAE,CAAA,EAAG,GAAK,EAAA,EAAA,EAAI,KAAK,EAAI,EAAA,GAAA,EAAK,EAAI,EAAA,GAAA,EAAK,EAAI,EAAA,GAAA,EAAK,EAAI,EAAA,GAAA,EAAK,IAAI,GAAI,EAAA,EAAG,EAAE,CAAA,EAAG,KAAK,EAAI,EAAA,GAAA,EAAK,EAAI,EAAA,GAAA,EAAK,IAAI,GAAK,EAAA,EAAA,EAAI,GAAI,EAAA,EAAG,EAAE,CAAA,EAAG,GAAK,EAAA,EAAA,EAAI,KAAK,EAAI,EAAA,GAAA,EAAK,EAAI,EAAA,GAAA,EAAK,IAAI,GAAI,EAAA,EAAG,CAAE,CAAA,GAAA,EAAK,CAAC,CAAG,EAAA,EAAE,CAAC,CAAA,EAAG,CAAE,CAAA,GAAA,EAAK,CAAC,CAAA,EAAG,EAAE,CAAC,CAAA,EAAG,CAAE,CAAA,GAAA,EAAK,CAAC,CAAG,EAAA,EAAE,CAAC,CAAA,EAAG,EAAE,GAAK,EAAA,CAAC,CAAG,EAAA,EAAE,CAAC,CAAA,EAAG,CAAE,CAAA,GAAA,EAAK,CAAC,CAAG,EAAA,EAAE,CAAC,CAAA,EAAG,EAAE,GAAK,EAAA,CAAC,CAAG,EAAA,EAAE,CAAC,CAAC,CAAA;AAAA,IACtpH,cAAgB,EAAA,EAAE,CAAG,EAAA,CAAC,CAAG,EAAA,CAAC,CAAG,EAAA,EAAA,EAAI,CAAC,CAAA,EAAG,CAAC,CAAA,EAAG,EAAI,EAAA,CAAC,CAAG,EAAA,CAAC,CAAG,EAAA,EAAA,EAAI,CAAC,CAAA,EAAG,CAAC,CAAA,EAAG,EAAI,EAAA,CAAC,CAAG,EAAA,CAAC,CAAG,EAAA,EAAA,EAAI,CAAC,CAAA,EAAG,EAAE,CAAA,EAAG,EAAI,EAAA,CAAC,CAAG,EAAA,EAAE,CAAG,EAAA,EAAA,EAAI,CAAC,CAAA,EAAG,EAAE,CAAA,EAAG,EAAI,EAAA,CAAC,CAAG,EAAA,EAAE,CAAG,EAAA,EAAA,EAAI,CAAC,CAAA,EAAG,EAAE,CAAA,EAAG,EAAI,EAAA,CAAC,CAAG,EAAA,EAAE,CAAG,EAAA,EAAA,EAAI,CAAC,CAAA,EAAG,EAAE,CAAG,EAAA,EAAA,EAAI,CAAC,CAAA,EAAG,EAAE,CAAA,EAAG,EAAI,EAAA,CAAC,CAAG,EAAA,EAAE,CAAG,EAAA,EAAA,EAAI,CAAC,CAAA,EAAG,EAAE,CAAA,EAAG,EAAI,EAAA,CAAC,CAAG,EAAA,EAAE,CAAG,EAAA,EAAA,EAAI,CAAC,CAAA,EAAG,EAAE,CAAA,EAAG,EAAI,EAAA,CAAC,CAAG,EAAA,EAAE,CAAG,EAAA,EAAA,EAAI,CAAC,CAAA,EAAG,EAAE,CAAA,EAAG,EAAI,EAAA,CAAC,CAAG,EAAA,EAAE,CAAG,EAAA,EAAA,EAAI,CAAC,CAAA,EAAG,EAAE,CAAA,EAAG,EAAI,EAAA,CAAC,CAAG,EAAA,EAAE,CAAG,EAAA,EAAA,EAAI,CAAC,CAAA,EAAG,EAAE,CAAA,EAAG,EAAI,EAAA,CAAC,CAAG,EAAA,EAAE,CAAG,EAAA,EAAA,EAAI,CAAC,CAAA,EAAG,EAAE,CAAE,EAAA;AAAA,IAChV,UAAY,EAAA,SAAS,UAAW,CAAA,GAAA,EAAK,IAAM,EAAA;AACzC,MAAA,IAAI,KAAK,WAAa,EAAA;AACpB,QAAA,IAAA,CAAK,MAAM,GAAG,CAAA,CAAA;AAAA,OACT,MAAA;AACL,QAAI,IAAA,KAAA,GAAQ,IAAI,KAAA,CAAM,GAAG,CAAA,CAAA;AACzB,QAAA,KAAA,CAAM,IAAO,GAAA,IAAA,CAAA;AACb,QAAM,MAAA,KAAA,CAAA;AAAA,OACR;AAAA,KACF;AAAA,IACA,KAAA,EAAO,SAAS,KAAA,CAAM,KAAO,EAAA;AAC3B,MAAI,IAAA,IAAA,GAAO,IAAM,EAAA,KAAA,GAAQ,CAAC,CAAC,CAAG,EAAA,MAAA,GAAS,EAAC,EAAG,MAAS,GAAA,CAAC,IAAI,CAAA,EAAG,MAAS,GAAA,EAAI,EAAA,KAAA,GAAQ,IAAK,CAAA,KAAA,EAAO,MAAS,GAAA,EAAA,EAAI,QAAW,GAAA,CAAA,EAAG,MAAS,GAAA,CAAA,EAAG,MAAS,GAAA,CAAA,EAAG,GAAM,GAAA,CAAA,CAAA;AACtJ,MAAA,IAAI,IAAO,GAAA,MAAA,CAAO,KAAM,CAAA,IAAA,CAAK,WAAW,CAAC,CAAA,CAAA;AACzC,MAAA,IAAI,MAAS,GAAA,MAAA,CAAO,MAAO,CAAA,IAAA,CAAK,KAAK,CAAA,CAAA;AACrC,MAAA,IAAI,WAAc,GAAA,EAAE,EAAI,EAAA,EAAG,EAAA,CAAA;AAC3B,MAAS,KAAA,IAAA,CAAA,IAAK,KAAK,EAAI,EAAA;AACrB,QAAA,IAAI,OAAO,SAAU,CAAA,cAAA,CAAe,KAAK,IAAK,CAAA,EAAA,EAAI,CAAC,CAAG,EAAA;AACpD,UAAA,WAAA,CAAY,EAAG,CAAA,CAAC,CAAI,GAAA,IAAA,CAAK,GAAG,CAAC,CAAA,CAAA;AAAA,SAC/B;AAAA,OACF;AACA,MAAO,MAAA,CAAA,QAAA,CAAS,KAAO,EAAA,WAAA,CAAY,EAAE,CAAA,CAAA;AACrC,MAAA,WAAA,CAAY,GAAG,KAAQ,GAAA,MAAA,CAAA;AACvB,MAAA,WAAA,CAAY,GAAG,MAAS,GAAA,IAAA,CAAA;AACxB,MAAI,IAAA,OAAO,MAAO,CAAA,MAAA,IAAU,WAAa,EAAA;AACvC,QAAA,MAAA,CAAO,SAAS,EAAC,CAAA;AAAA,OACnB;AACA,MAAA,IAAI,QAAQ,MAAO,CAAA,MAAA,CAAA;AACnB,MAAA,MAAA,CAAO,KAAK,KAAK,CAAA,CAAA;AACjB,MAAA,IAAI,MAAS,GAAA,MAAA,CAAO,OAAW,IAAA,MAAA,CAAO,OAAQ,CAAA,MAAA,CAAA;AAC9C,MAAA,IAAI,OAAO,WAAA,CAAY,EAAG,CAAA,UAAA,KAAe,UAAY,EAAA;AACnD,QAAK,IAAA,CAAA,UAAA,GAAa,YAAY,EAAG,CAAA,UAAA,CAAA;AAAA,OAC5B,MAAA;AACL,QAAA,IAAA,CAAK,UAAa,GAAA,MAAA,CAAO,cAAe,CAAA,IAAI,CAAE,CAAA,UAAA,CAAA;AAAA,OAChD;AACA,MAAA,SAAS,GAAM,GAAA;AACb,QAAI,IAAA,KAAA,CAAA;AACJ,QAAA,KAAA,GAAQ,MAAO,CAAA,GAAA,EAAS,IAAA,MAAA,CAAO,KAAS,IAAA,GAAA,CAAA;AACxC,QAAI,IAAA,OAAO,UAAU,QAAU,EAAA;AAC7B,UAAA,IAAI,iBAAiB,KAAO,EAAA;AAC1B,YAAS,MAAA,GAAA,KAAA,CAAA;AACT,YAAA,KAAA,GAAQ,OAAO,GAAI,EAAA,CAAA;AAAA,WACrB;AACA,UAAQ,KAAA,GAAA,IAAA,CAAK,QAAS,CAAA,KAAK,CAAK,IAAA,KAAA,CAAA;AAAA,SAClC;AACA,QAAO,OAAA,KAAA,CAAA;AAAA,OACT;AACA,MAAI,IAAA,MAAA,EAAQ,OAAO,MAAQ,EAAA,CAAA,EAAG,QAAQ,EAAC,EAAG,CAAG,EAAA,GAAA,EAAK,QAAU,EAAA,QAAA,CAAA;AAC5D,MAAA,OAAO,IAAM,EAAA;AACX,QAAQ,KAAA,GAAA,KAAA,CAAM,KAAM,CAAA,MAAA,GAAS,CAAC,CAAA,CAAA;AAC9B,QAAI,IAAA,IAAA,CAAK,cAAe,CAAA,KAAK,CAAG,EAAA;AAC9B,UAAS,MAAA,GAAA,IAAA,CAAK,eAAe,KAAK,CAAA,CAAA;AAAA,SAC7B,MAAA;AACL,UAAA,IAAI,MAAW,KAAA,IAAA,IAAQ,OAAO,MAAA,IAAU,WAAa,EAAA;AACnD,YAAA,MAAA,GAAS,GAAI,EAAA,CAAA;AAAA,WACf;AACA,UAAA,MAAA,GAAS,MAAM,KAAK,CAAA,IAAK,KAAM,CAAA,KAAK,EAAE,MAAM,CAAA,CAAA;AAAA,SAC9C;AACA,QAAI,IAAA,OAAO,WAAW,WAAe,IAAA,CAAC,OAAO,MAAU,IAAA,CAAC,MAAO,CAAA,CAAC,CAAG,EAAA;AACjE,UAAA,IAAI,MAAS,GAAA,EAAA,CAAA;AACb,UAAA,QAAA,GAAW,EAAC,CAAA;AACZ,UAAK,KAAA,CAAA,IAAK,KAAM,CAAA,KAAK,CAAG,EAAA;AACtB,YAAA,IAAI,IAAK,CAAA,UAAA,CAAW,CAAC,CAAA,IAAK,IAAI,MAAQ,EAAA;AACpC,cAAA,QAAA,CAAS,KAAK,GAAM,GAAA,IAAA,CAAK,UAAW,CAAA,CAAC,IAAI,GAAG,CAAA,CAAA;AAAA,aAC9C;AAAA,WACF;AACA,UAAA,IAAI,OAAO,YAAc,EAAA;AACvB,YAAA,MAAA,GAAS,0BAA0B,QAAW,GAAA,CAAA,CAAA,GAAK,KAAQ,GAAA,MAAA,CAAO,cAAiB,GAAA,cAAA,GAAiB,QAAS,CAAA,IAAA,CAAK,IAAI,CAAI,GAAA,SAAA,IAAa,KAAK,UAAW,CAAA,MAAM,KAAK,MAAU,CAAA,GAAA,GAAA,CAAA;AAAA,WACvK,MAAA;AACL,YAAA,MAAA,GAAS,sBAA0B,IAAA,QAAA,GAAW,CAAK,CAAA,GAAA,eAAA,IAAmB,MAAU,IAAA,GAAA,GAAM,cAAiB,GAAA,GAAA,IAAO,IAAK,CAAA,UAAA,CAAW,MAAM,CAAA,IAAK,MAAU,CAAA,GAAA,GAAA,CAAA,CAAA;AAAA,WACrJ;AACA,UAAA,IAAA,CAAK,WAAW,MAAQ,EAAA;AAAA,YACtB,MAAM,MAAO,CAAA,KAAA;AAAA,YACb,KAAO,EAAA,IAAA,CAAK,UAAW,CAAA,MAAM,CAAK,IAAA,MAAA;AAAA,YAClC,MAAM,MAAO,CAAA,QAAA;AAAA,YACb,GAAK,EAAA,KAAA;AAAA,YACL,QAAA;AAAA,WACD,CAAA,CAAA;AAAA,SACH;AACA,QAAA,IAAI,OAAO,CAAC,CAAA,YAAa,KAAS,IAAA,MAAA,CAAO,SAAS,CAAG,EAAA;AACnD,UAAA,MAAM,IAAI,KAAA,CAAM,mDAAsD,GAAA,KAAA,GAAQ,cAAc,MAAM,CAAA,CAAA;AAAA,SACpG;AACA,QAAQ,QAAA,MAAA,CAAO,CAAC,CAAG;AAAA,UACjB,KAAK,CAAA;AACH,YAAA,KAAA,CAAM,KAAK,MAAM,CAAA,CAAA;AACjB,YAAO,MAAA,CAAA,IAAA,CAAK,OAAO,MAAM,CAAA,CAAA;AACzB,YAAO,MAAA,CAAA,IAAA,CAAK,OAAO,MAAM,CAAA,CAAA;AACzB,YAAM,KAAA,CAAA,IAAA,CAAK,MAAO,CAAA,CAAC,CAAC,CAAA,CAAA;AACpB,YAAS,MAAA,GAAA,IAAA,CAAA;AACT,YAAA;AACE,cAAA,MAAA,GAAS,MAAO,CAAA,MAAA,CAAA;AAChB,cAAA,MAAA,GAAS,MAAO,CAAA,MAAA,CAAA;AAChB,cAAA,QAAA,GAAW,MAAO,CAAA,QAAA,CAAA;AAClB,cAAA,KAAA,GAAQ,MAAO,CAAA,MAAA,CAAA;AAAA,aACjB;AACA,YAAA,MAAA;AAAA,UACF,KAAK,CAAA;AACH,YAAA,GAAA,GAAM,KAAK,YAAa,CAAA,MAAA,CAAO,CAAC,CAAC,EAAE,CAAC,CAAA,CAAA;AACpC,YAAA,KAAA,CAAM,CAAI,GAAA,MAAA,CAAO,MAAO,CAAA,MAAA,GAAS,GAAG,CAAA,CAAA;AACpC,YAAA,KAAA,CAAM,EAAK,GAAA;AAAA,cACT,YAAY,MAAO,CAAA,MAAA,CAAO,MAAU,IAAA,GAAA,IAAO,EAAE,CAAE,CAAA,UAAA;AAAA,cAC/C,SAAW,EAAA,MAAA,CAAO,MAAO,CAAA,MAAA,GAAS,CAAC,CAAE,CAAA,SAAA;AAAA,cACrC,cAAc,MAAO,CAAA,MAAA,CAAO,MAAU,IAAA,GAAA,IAAO,EAAE,CAAE,CAAA,YAAA;AAAA,cACjD,WAAa,EAAA,MAAA,CAAO,MAAO,CAAA,MAAA,GAAS,CAAC,CAAE,CAAA,WAAA;AAAA,aACzC,CAAA;AACA,YAAA,IAAI,MAAQ,EAAA;AACV,cAAA,KAAA,CAAM,GAAG,KAAQ,GAAA;AAAA,gBACf,OAAO,MAAO,CAAA,MAAA,IAAU,OAAO,CAAE,CAAA,CAAA,CAAE,MAAM,CAAC,CAAA;AAAA,gBAC1C,OAAO,MAAO,CAAA,MAAA,GAAS,CAAC,CAAA,CAAE,MAAM,CAAC,CAAA;AAAA,eACnC,CAAA;AAAA,aACF;AACA,YAAI,CAAA,GAAA,IAAA,CAAK,aAAc,CAAA,KAAA,CAAM,KAAO,EAAA;AAAA,cAClC,MAAA;AAAA,cACA,MAAA;AAAA,cACA,QAAA;AAAA,cACA,WAAY,CAAA,EAAA;AAAA,cACZ,OAAO,CAAC,CAAA;AAAA,cACR,MAAA;AAAA,cACA,MAAA;AAAA,aACF,CAAE,MAAO,CAAA,IAAI,CAAC,CAAA,CAAA;AACd,YAAI,IAAA,OAAO,MAAM,WAAa,EAAA;AAC5B,cAAO,OAAA,CAAA,CAAA;AAAA,aACT;AACA,YAAA,IAAI,GAAK,EAAA;AACP,cAAA,KAAA,GAAQ,KAAM,CAAA,KAAA,CAAM,CAAG,EAAA,CAAA,CAAA,GAAK,MAAM,CAAC,CAAA,CAAA;AACnC,cAAA,MAAA,GAAS,MAAO,CAAA,KAAA,CAAM,CAAG,EAAA,CAAA,CAAA,GAAK,GAAG,CAAA,CAAA;AACjC,cAAA,MAAA,GAAS,MAAO,CAAA,KAAA,CAAM,CAAG,EAAA,CAAA,CAAA,GAAK,GAAG,CAAA,CAAA;AAAA,aACnC;AACA,YAAM,KAAA,CAAA,IAAA,CAAK,KAAK,YAAa,CAAA,MAAA,CAAO,CAAC,CAAC,CAAA,CAAE,CAAC,CAAC,CAAA,CAAA;AAC1C,YAAO,MAAA,CAAA,IAAA,CAAK,MAAM,CAAC,CAAA,CAAA;AACnB,YAAO,MAAA,CAAA,IAAA,CAAK,MAAM,EAAE,CAAA,CAAA;AACpB,YAAW,QAAA,GAAA,KAAA,CAAM,KAAM,CAAA,KAAA,CAAM,MAAS,GAAA,CAAC,CAAC,CAAA,CAAE,KAAM,CAAA,KAAA,CAAM,MAAS,GAAA,CAAC,CAAC,CAAA,CAAA;AACjE,YAAA,KAAA,CAAM,KAAK,QAAQ,CAAA,CAAA;AACnB,YAAA,MAAA;AAAA,UACF,KAAK,CAAA;AACH,YAAO,OAAA,IAAA,CAAA;AAAA,SACX;AAAA,OACF;AACA,MAAO,OAAA,IAAA,CAAA;AAAA,KACT;AAAA,GACF,CAAA;AACA,EAAA,IAAI,wBAAmB,WAAA;AACrB,IAAA,IAAI,MAAS,GAAA;AAAA,MACX,GAAK,EAAA,CAAA;AAAA,MACL,UAAY,EAAA,SAAS,UAAW,CAAA,GAAA,EAAK,IAAM,EAAA;AACzC,QAAI,IAAA,IAAA,CAAK,GAAG,MAAQ,EAAA;AAClB,UAAA,IAAA,CAAK,EAAG,CAAA,MAAA,CAAO,UAAW,CAAA,GAAA,EAAK,IAAI,CAAA,CAAA;AAAA,SAC9B,MAAA;AACL,UAAM,MAAA,IAAI,MAAM,GAAG,CAAA,CAAA;AAAA,SACrB;AAAA,OACF;AAAA;AAAA,MAEA,QAAA,EAAU,SAAS,KAAA,EAAO,EAAI,EAAA;AAC5B,QAAA,IAAA,CAAK,EAAK,GAAA,EAAA,IAAM,IAAK,CAAA,EAAA,IAAM,EAAC,CAAA;AAC5B,QAAA,IAAA,CAAK,MAAS,GAAA,KAAA,CAAA;AACd,QAAA,IAAA,CAAK,KAAQ,GAAA,IAAA,CAAK,UAAa,GAAA,IAAA,CAAK,IAAO,GAAA,KAAA,CAAA;AAC3C,QAAK,IAAA,CAAA,QAAA,GAAW,KAAK,MAAS,GAAA,CAAA,CAAA;AAC9B,QAAA,IAAA,CAAK,MAAS,GAAA,IAAA,CAAK,OAAU,GAAA,IAAA,CAAK,KAAQ,GAAA,EAAA,CAAA;AAC1C,QAAK,IAAA,CAAA,cAAA,GAAiB,CAAC,SAAS,CAAA,CAAA;AAChC,QAAA,IAAA,CAAK,MAAS,GAAA;AAAA,UACZ,UAAY,EAAA,CAAA;AAAA,UACZ,YAAc,EAAA,CAAA;AAAA,UACd,SAAW,EAAA,CAAA;AAAA,UACX,WAAa,EAAA,CAAA;AAAA,SACf,CAAA;AACA,QAAI,IAAA,IAAA,CAAK,QAAQ,MAAQ,EAAA;AACvB,UAAA,IAAA,CAAK,MAAO,CAAA,KAAA,GAAQ,CAAC,CAAA,EAAG,CAAC,CAAA,CAAA;AAAA,SAC3B;AACA,QAAA,IAAA,CAAK,MAAS,GAAA,CAAA,CAAA;AACd,QAAO,OAAA,IAAA,CAAA;AAAA,OACT;AAAA;AAAA,MAEA,OAAO,WAAW;AAChB,QAAI,IAAA,EAAA,GAAK,IAAK,CAAA,MAAA,CAAO,CAAC,CAAA,CAAA;AACtB,QAAA,IAAA,CAAK,MAAU,IAAA,EAAA,CAAA;AACf,QAAK,IAAA,CAAA,MAAA,EAAA,CAAA;AACL,QAAK,IAAA,CAAA,MAAA,EAAA,CAAA;AACL,QAAA,IAAA,CAAK,KAAS,IAAA,EAAA,CAAA;AACd,QAAA,IAAA,CAAK,OAAW,IAAA,EAAA,CAAA;AAChB,QAAI,IAAA,KAAA,GAAQ,EAAG,CAAA,KAAA,CAAM,iBAAiB,CAAA,CAAA;AACtC,QAAA,IAAI,KAAO,EAAA;AACT,UAAK,IAAA,CAAA,QAAA,EAAA,CAAA;AACL,UAAA,IAAA,CAAK,MAAO,CAAA,SAAA,EAAA,CAAA;AAAA,SACP,MAAA;AACL,UAAA,IAAA,CAAK,MAAO,CAAA,WAAA,EAAA,CAAA;AAAA,SACd;AACA,QAAI,IAAA,IAAA,CAAK,QAAQ,MAAQ,EAAA;AACvB,UAAK,IAAA,CAAA,MAAA,CAAO,MAAM,CAAC,CAAA,EAAA,CAAA;AAAA,SACrB;AACA,QAAA,IAAA,CAAK,MAAS,GAAA,IAAA,CAAK,MAAO,CAAA,KAAA,CAAM,CAAC,CAAA,CAAA;AACjC,QAAO,OAAA,EAAA,CAAA;AAAA,OACT;AAAA;AAAA,MAEA,KAAA,EAAO,SAAS,EAAI,EAAA;AAClB,QAAA,IAAI,MAAM,EAAG,CAAA,MAAA,CAAA;AACb,QAAI,IAAA,KAAA,GAAQ,EAAG,CAAA,KAAA,CAAM,eAAe,CAAA,CAAA;AACpC,QAAK,IAAA,CAAA,MAAA,GAAS,KAAK,IAAK,CAAA,MAAA,CAAA;AACxB,QAAK,IAAA,CAAA,MAAA,GAAS,KAAK,MAAO,CAAA,MAAA,CAAO,GAAG,IAAK,CAAA,MAAA,CAAO,SAAS,GAAG,CAAA,CAAA;AAC5D,QAAA,IAAA,CAAK,MAAU,IAAA,GAAA,CAAA;AACf,QAAA,IAAI,QAAW,GAAA,IAAA,CAAK,KAAM,CAAA,KAAA,CAAM,eAAe,CAAA,CAAA;AAC/C,QAAK,IAAA,CAAA,KAAA,GAAQ,KAAK,KAAM,CAAA,MAAA,CAAO,GAAG,IAAK,CAAA,KAAA,CAAM,SAAS,CAAC,CAAA,CAAA;AACvD,QAAK,IAAA,CAAA,OAAA,GAAU,KAAK,OAAQ,CAAA,MAAA,CAAO,GAAG,IAAK,CAAA,OAAA,CAAQ,SAAS,CAAC,CAAA,CAAA;AAC7D,QAAI,IAAA,KAAA,CAAM,SAAS,CAAG,EAAA;AACpB,UAAK,IAAA,CAAA,QAAA,IAAY,MAAM,MAAS,GAAA,CAAA,CAAA;AAAA,SAClC;AACA,QAAI,IAAA,CAAA,GAAI,KAAK,MAAO,CAAA,KAAA,CAAA;AACpB,QAAA,IAAA,CAAK,MAAS,GAAA;AAAA,UACZ,UAAA,EAAY,KAAK,MAAO,CAAA,UAAA;AAAA,UACxB,SAAA,EAAW,KAAK,QAAW,GAAA,CAAA;AAAA,UAC3B,YAAA,EAAc,KAAK,MAAO,CAAA,YAAA;AAAA,UAC1B,WAAA,EAAa,SAAS,KAAM,CAAA,MAAA,KAAW,SAAS,MAAS,GAAA,IAAA,CAAK,MAAO,CAAA,YAAA,GAAe,CAAK,IAAA,QAAA,CAAS,SAAS,MAAS,GAAA,KAAA,CAAM,MAAM,CAAA,CAAE,MAAS,GAAA,KAAA,CAAM,CAAC,CAAE,CAAA,MAAA,GAAS,IAAK,CAAA,MAAA,CAAO,YAAe,GAAA,GAAA;AAAA,SAC1L,CAAA;AACA,QAAI,IAAA,IAAA,CAAK,QAAQ,MAAQ,EAAA;AACvB,UAAK,IAAA,CAAA,MAAA,CAAO,KAAQ,GAAA,CAAC,CAAE,CAAA,CAAC,CAAG,EAAA,CAAA,CAAE,CAAC,CAAA,GAAI,IAAK,CAAA,MAAA,GAAS,GAAG,CAAA,CAAA;AAAA,SACrD;AACA,QAAK,IAAA,CAAA,MAAA,GAAS,KAAK,MAAO,CAAA,MAAA,CAAA;AAC1B,QAAO,OAAA,IAAA,CAAA;AAAA,OACT;AAAA;AAAA,MAEA,MAAM,WAAW;AACf,QAAA,IAAA,CAAK,KAAQ,GAAA,IAAA,CAAA;AACb,QAAO,OAAA,IAAA,CAAA;AAAA,OACT;AAAA;AAAA,MAEA,QAAQ,WAAW;AACjB,QAAI,IAAA,IAAA,CAAK,QAAQ,eAAiB,EAAA;AAChC,UAAA,IAAA,CAAK,UAAa,GAAA,IAAA,CAAA;AAAA,SACb,MAAA;AACL,UAAO,OAAA,IAAA,CAAK,WAAW,wBAA4B,IAAA,IAAA,CAAK,WAAW,CAAK,CAAA,GAAA,kIAAA,GAAqI,IAAK,CAAA,YAAA,EAAgB,EAAA;AAAA,YAChO,IAAM,EAAA,EAAA;AAAA,YACN,KAAO,EAAA,IAAA;AAAA,YACP,MAAM,IAAK,CAAA,QAAA;AAAA,WACZ,CAAA,CAAA;AAAA,SACH;AACA,QAAO,OAAA,IAAA,CAAA;AAAA,OACT;AAAA;AAAA,MAEA,IAAA,EAAM,SAAS,CAAG,EAAA;AAChB,QAAA,IAAA,CAAK,KAAM,CAAA,IAAA,CAAK,KAAM,CAAA,KAAA,CAAM,CAAC,CAAC,CAAA,CAAA;AAAA,OAChC;AAAA;AAAA,MAEA,WAAW,WAAW;AACpB,QAAI,IAAA,IAAA,GAAO,IAAK,CAAA,OAAA,CAAQ,MAAO,CAAA,CAAA,EAAG,KAAK,OAAQ,CAAA,MAAA,GAAS,IAAK,CAAA,KAAA,CAAM,MAAM,CAAA,CAAA;AACzE,QAAQ,OAAA,CAAA,IAAA,CAAK,MAAS,GAAA,EAAA,GAAK,KAAQ,GAAA,EAAA,IAAM,IAAK,CAAA,MAAA,CAAO,CAAG,EAAA,CAAA,CAAE,OAAQ,CAAA,KAAA,EAAO,EAAE,CAAA,CAAA;AAAA,OAC7E;AAAA;AAAA,MAEA,eAAe,WAAW;AACxB,QAAA,IAAI,OAAO,IAAK,CAAA,KAAA,CAAA;AAChB,QAAI,IAAA,IAAA,CAAK,SAAS,EAAI,EAAA;AACpB,UAAA,IAAA,IAAQ,KAAK,MAAO,CAAA,MAAA,CAAO,CAAG,EAAA,EAAA,GAAK,KAAK,MAAM,CAAA,CAAA;AAAA,SAChD;AACA,QAAA,OAAA,CAAQ,IAAK,CAAA,MAAA,CAAO,CAAG,EAAA,EAAE,CAAK,IAAA,IAAA,CAAK,MAAS,GAAA,EAAA,GAAK,KAAQ,GAAA,EAAA,CAAA,EAAK,OAAQ,CAAA,KAAA,EAAO,EAAE,CAAA,CAAA;AAAA,OACjF;AAAA;AAAA,MAEA,cAAc,WAAW;AACvB,QAAI,IAAA,GAAA,GAAM,KAAK,SAAU,EAAA,CAAA;AACzB,QAAI,IAAA,CAAA,GAAI,IAAI,KAAM,CAAA,GAAA,CAAI,SAAS,CAAC,CAAA,CAAE,KAAK,GAAG,CAAA,CAAA;AAC1C,QAAA,OAAO,GAAM,GAAA,IAAA,CAAK,aAAc,EAAA,GAAI,OAAO,CAAI,GAAA,GAAA,CAAA;AAAA,OACjD;AAAA;AAAA,MAEA,UAAA,EAAY,SAAS,KAAA,EAAO,YAAc,EAAA;AACxC,QAAA,IAAI,OAAO,KAAO,EAAA,MAAA,CAAA;AAClB,QAAI,IAAA,IAAA,CAAK,QAAQ,eAAiB,EAAA;AAChC,UAAS,MAAA,GAAA;AAAA,YACP,UAAU,IAAK,CAAA,QAAA;AAAA,YACf,MAAQ,EAAA;AAAA,cACN,UAAA,EAAY,KAAK,MAAO,CAAA,UAAA;AAAA,cACxB,WAAW,IAAK,CAAA,SAAA;AAAA,cAChB,YAAA,EAAc,KAAK,MAAO,CAAA,YAAA;AAAA,cAC1B,WAAA,EAAa,KAAK,MAAO,CAAA,WAAA;AAAA,aAC3B;AAAA,YACA,QAAQ,IAAK,CAAA,MAAA;AAAA,YACb,OAAO,IAAK,CAAA,KAAA;AAAA,YACZ,SAAS,IAAK,CAAA,OAAA;AAAA,YACd,SAAS,IAAK,CAAA,OAAA;AAAA,YACd,QAAQ,IAAK,CAAA,MAAA;AAAA,YACb,QAAQ,IAAK,CAAA,MAAA;AAAA,YACb,OAAO,IAAK,CAAA,KAAA;AAAA,YACZ,QAAQ,IAAK,CAAA,MAAA;AAAA,YACb,IAAI,IAAK,CAAA,EAAA;AAAA,YACT,cAAgB,EAAA,IAAA,CAAK,cAAe,CAAA,KAAA,CAAM,CAAC,CAAA;AAAA,YAC3C,MAAM,IAAK,CAAA,IAAA;AAAA,WACb,CAAA;AACA,UAAI,IAAA,IAAA,CAAK,QAAQ,MAAQ,EAAA;AACvB,YAAA,MAAA,CAAO,OAAO,KAAQ,GAAA,IAAA,CAAK,MAAO,CAAA,KAAA,CAAM,MAAM,CAAC,CAAA,CAAA;AAAA,WACjD;AAAA,SACF;AACA,QAAA,KAAA,GAAQ,KAAM,CAAA,CAAC,CAAE,CAAA,KAAA,CAAM,iBAAiB,CAAA,CAAA;AACxC,QAAA,IAAI,KAAO,EAAA;AACT,UAAA,IAAA,CAAK,YAAY,KAAM,CAAA,MAAA,CAAA;AAAA,SACzB;AACA,QAAA,IAAA,CAAK,MAAS,GAAA;AAAA,UACZ,UAAA,EAAY,KAAK,MAAO,CAAA,SAAA;AAAA,UACxB,SAAA,EAAW,KAAK,QAAW,GAAA,CAAA;AAAA,UAC3B,YAAA,EAAc,KAAK,MAAO,CAAA,WAAA;AAAA,UAC1B,WAAA,EAAa,KAAQ,GAAA,KAAA,CAAM,KAAM,CAAA,MAAA,GAAS,CAAC,CAAE,CAAA,MAAA,GAAS,KAAM,CAAA,KAAA,CAAM,MAAS,GAAA,CAAC,EAAE,KAAM,CAAA,QAAQ,CAAE,CAAA,CAAC,CAAE,CAAA,MAAA,GAAS,KAAK,MAAO,CAAA,WAAA,GAAc,KAAM,CAAA,CAAC,CAAE,CAAA,MAAA;AAAA,SAC/I,CAAA;AACA,QAAK,IAAA,CAAA,MAAA,IAAU,MAAM,CAAC,CAAA,CAAA;AACtB,QAAK,IAAA,CAAA,KAAA,IAAS,MAAM,CAAC,CAAA,CAAA;AACrB,QAAA,IAAA,CAAK,OAAU,GAAA,KAAA,CAAA;AACf,QAAK,IAAA,CAAA,MAAA,GAAS,KAAK,MAAO,CAAA,MAAA,CAAA;AAC1B,QAAI,IAAA,IAAA,CAAK,QAAQ,MAAQ,EAAA;AACvB,UAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,CAAC,IAAA,CAAK,QAAQ,IAAK,CAAA,MAAA,IAAU,KAAK,MAAM,CAAA,CAAA;AAAA,SAC9D;AACA,QAAA,IAAA,CAAK,KAAQ,GAAA,KAAA,CAAA;AACb,QAAA,IAAA,CAAK,UAAa,GAAA,KAAA,CAAA;AAClB,QAAA,IAAA,CAAK,SAAS,IAAK,CAAA,MAAA,CAAO,MAAM,KAAM,CAAA,CAAC,EAAE,MAAM,CAAA,CAAA;AAC/C,QAAK,IAAA,CAAA,OAAA,IAAW,MAAM,CAAC,CAAA,CAAA;AACvB,QAAA,KAAA,GAAQ,IAAK,CAAA,aAAA,CAAc,IAAK,CAAA,IAAA,EAAM,KAAK,EAAI,EAAA,IAAA,EAAM,YAAc,EAAA,IAAA,CAAK,cAAe,CAAA,IAAA,CAAK,cAAe,CAAA,MAAA,GAAS,CAAC,CAAC,CAAA,CAAA;AACtH,QAAI,IAAA,IAAA,CAAK,IAAQ,IAAA,IAAA,CAAK,MAAQ,EAAA;AAC5B,UAAA,IAAA,CAAK,IAAO,GAAA,KAAA,CAAA;AAAA,SACd;AACA,QAAA,IAAI,KAAO,EAAA;AACT,UAAO,OAAA,KAAA,CAAA;AAAA,SACT,MAAA,IAAW,KAAK,UAAY,EAAA;AAC1B,UAAA,KAAA,IAAS,KAAK,MAAQ,EAAA;AACpB,YAAK,IAAA,CAAA,CAAC,CAAI,GAAA,MAAA,CAAO,CAAC,CAAA,CAAA;AAAA,WACpB;AACA,UAAO,OAAA,KAAA,CAAA;AAAA,SACT;AACA,QAAO,OAAA,KAAA,CAAA;AAAA,OACT;AAAA;AAAA,MAEA,MAAM,WAAW;AACf,QAAA,IAAI,KAAK,IAAM,EAAA;AACb,UAAA,OAAO,IAAK,CAAA,GAAA,CAAA;AAAA,SACd;AACA,QAAI,IAAA,CAAC,KAAK,MAAQ,EAAA;AAChB,UAAA,IAAA,CAAK,IAAO,GAAA,IAAA,CAAA;AAAA,SACd;AACA,QAAI,IAAA,KAAA,EAAO,OAAO,SAAW,EAAA,KAAA,CAAA;AAC7B,QAAI,IAAA,CAAC,KAAK,KAAO,EAAA;AACf,UAAA,IAAA,CAAK,MAAS,GAAA,EAAA,CAAA;AACd,UAAA,IAAA,CAAK,KAAQ,GAAA,EAAA,CAAA;AAAA,SACf;AACA,QAAI,IAAA,KAAA,GAAQ,KAAK,aAAc,EAAA,CAAA;AAC/B,QAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,KAAA,CAAM,QAAQ,CAAK,EAAA,EAAA;AACrC,UAAY,SAAA,GAAA,IAAA,CAAK,OAAO,KAAM,CAAA,IAAA,CAAK,MAAM,KAAM,CAAA,CAAC,CAAC,CAAC,CAAA,CAAA;AAClD,UAAI,IAAA,SAAA,KAAc,CAAC,KAAA,IAAS,SAAU,CAAA,CAAC,EAAE,MAAS,GAAA,KAAA,CAAM,CAAC,CAAA,CAAE,MAAS,CAAA,EAAA;AAClE,YAAQ,KAAA,GAAA,SAAA,CAAA;AACR,YAAQ,KAAA,GAAA,CAAA,CAAA;AACR,YAAI,IAAA,IAAA,CAAK,QAAQ,eAAiB,EAAA;AAChC,cAAA,KAAA,GAAQ,IAAK,CAAA,UAAA,CAAW,SAAW,EAAA,KAAA,CAAM,CAAC,CAAC,CAAA,CAAA;AAC3C,cAAA,IAAI,UAAU,KAAO,EAAA;AACnB,gBAAO,OAAA,KAAA,CAAA;AAAA,eACT,MAAA,IAAW,KAAK,UAAY,EAAA;AAC1B,gBAAQ,KAAA,GAAA,KAAA,CAAA;AACR,gBAAA,SAAA;AAAA,eACK,MAAA;AACL,gBAAO,OAAA,KAAA,CAAA;AAAA,eACT;AAAA,aACS,MAAA,IAAA,CAAC,IAAK,CAAA,OAAA,CAAQ,IAAM,EAAA;AAC7B,cAAA,MAAA;AAAA,aACF;AAAA,WACF;AAAA,SACF;AACA,QAAA,IAAI,KAAO,EAAA;AACT,UAAA,KAAA,GAAQ,IAAK,CAAA,UAAA,CAAW,KAAO,EAAA,KAAA,CAAM,KAAK,CAAC,CAAA,CAAA;AAC3C,UAAA,IAAI,UAAU,KAAO,EAAA;AACnB,YAAO,OAAA,KAAA,CAAA;AAAA,WACT;AACA,UAAO,OAAA,KAAA,CAAA;AAAA,SACT;AACA,QAAI,IAAA,IAAA,CAAK,WAAW,EAAI,EAAA;AACtB,UAAA,OAAO,IAAK,CAAA,GAAA,CAAA;AAAA,SACP,MAAA;AACL,UAAO,OAAA,IAAA,CAAK,WAAW,wBAA4B,IAAA,IAAA,CAAK,WAAW,CAAK,CAAA,GAAA,wBAAA,GAA2B,IAAK,CAAA,YAAA,EAAgB,EAAA;AAAA,YACtH,IAAM,EAAA,EAAA;AAAA,YACN,KAAO,EAAA,IAAA;AAAA,YACP,MAAM,IAAK,CAAA,QAAA;AAAA,WACZ,CAAA,CAAA;AAAA,SACH;AAAA,OACF;AAAA;AAAA,MAEA,GAAA,EAAK,SAAS,GAAM,GAAA;AAClB,QAAI,IAAA,CAAA,GAAI,KAAK,IAAK,EAAA,CAAA;AAClB,QAAA,IAAI,CAAG,EAAA;AACL,UAAO,OAAA,CAAA,CAAA;AAAA,SACF,MAAA;AACL,UAAA,OAAO,KAAK,GAAI,EAAA,CAAA;AAAA,SAClB;AAAA,OACF;AAAA;AAAA,MAEA,KAAA,EAAO,SAAS,KAAA,CAAM,SAAW,EAAA;AAC/B,QAAK,IAAA,CAAA,cAAA,CAAe,KAAK,SAAS,CAAA,CAAA;AAAA,OACpC;AAAA;AAAA,MAEA,QAAA,EAAU,SAAS,QAAW,GAAA;AAC5B,QAAI,IAAA,CAAA,GAAI,IAAK,CAAA,cAAA,CAAe,MAAS,GAAA,CAAA,CAAA;AACrC,QAAA,IAAI,IAAI,CAAG,EAAA;AACT,UAAO,OAAA,IAAA,CAAK,eAAe,GAAI,EAAA,CAAA;AAAA,SAC1B,MAAA;AACL,UAAO,OAAA,IAAA,CAAK,eAAe,CAAC,CAAA,CAAA;AAAA,SAC9B;AAAA,OACF;AAAA;AAAA,MAEA,aAAA,EAAe,SAAS,aAAgB,GAAA;AACtC,QAAI,IAAA,IAAA,CAAK,eAAe,MAAU,IAAA,IAAA,CAAK,eAAe,IAAK,CAAA,cAAA,CAAe,MAAS,GAAA,CAAC,CAAG,EAAA;AACrF,UAAO,OAAA,IAAA,CAAK,WAAW,IAAK,CAAA,cAAA,CAAe,KAAK,cAAe,CAAA,MAAA,GAAS,CAAC,CAAC,CAAE,CAAA,KAAA,CAAA;AAAA,SACvE,MAAA;AACL,UAAO,OAAA,IAAA,CAAK,UAAW,CAAA,SAAS,CAAE,CAAA,KAAA,CAAA;AAAA,SACpC;AAAA,OACF;AAAA;AAAA,MAEA,QAAA,EAAU,SAAS,QAAA,CAAS,CAAG,EAAA;AAC7B,QAAA,CAAA,GAAI,KAAK,cAAe,CAAA,MAAA,GAAS,IAAI,IAAK,CAAA,GAAA,CAAI,KAAK,CAAC,CAAA,CAAA;AACpD,QAAA,IAAI,KAAK,CAAG,EAAA;AACV,UAAO,OAAA,IAAA,CAAK,eAAe,CAAC,CAAA,CAAA;AAAA,SACvB,MAAA;AACL,UAAO,OAAA,SAAA,CAAA;AAAA,SACT;AAAA,OACF;AAAA;AAAA,MAEA,SAAA,EAAW,SAAS,SAAA,CAAU,SAAW,EAAA;AACvC,QAAA,IAAA,CAAK,MAAM,SAAS,CAAA,CAAA;AAAA,OACtB;AAAA;AAAA,MAEA,cAAA,EAAgB,SAAS,cAAiB,GAAA;AACxC,QAAA,OAAO,KAAK,cAAe,CAAA,MAAA,CAAA;AAAA,OAC7B;AAAA,MACA,OAAA,EAAS,EAAE,kBAAA,EAAoB,IAAK,EAAA;AAAA,MACpC,eAAe,SAAS,SAAA,CAAU,EAAI,EAAA,GAAA,EAAK,2BAA2B,QAAU,EAAA;AAC9E,QAAA,QAAQ,yBAA2B;AAAA,UACjC,KAAK,CAAA;AACH,YAAO,OAAA,OAAA,CAAA;AAAA,UACT,KAAK,CAAA;AACH,YAAA,IAAA,CAAK,MAAM,WAAW,CAAA,CAAA;AACtB,YAAO,OAAA,CAAA,CAAA;AAAA,UACT,KAAK,CAAA;AACH,YAAA,IAAA,CAAK,QAAS,EAAA,CAAA;AACd,YAAO,OAAA,iBAAA,CAAA;AAAA,UACT,KAAK,CAAA;AACH,YAAA,IAAA,CAAK,MAAM,WAAW,CAAA,CAAA;AACtB,YAAO,OAAA,EAAA,CAAA;AAAA,UACT,KAAK,CAAA;AACH,YAAA,IAAA,CAAK,QAAS,EAAA,CAAA;AACd,YAAO,OAAA,iBAAA,CAAA;AAAA,UACT,KAAK,CAAA;AACH,YAAA,IAAA,CAAK,MAAM,qBAAqB,CAAA,CAAA;AAChC,YAAA,MAAA;AAAA,UACF,KAAK,CAAA;AACH,YAAA,IAAA,CAAK,QAAS,EAAA,CAAA;AACd,YAAA,MAAA;AAAA,UACF,KAAK,CAAA;AACH,YAAO,OAAA,2BAAA,CAAA;AAAA,UACT,KAAK,CAAA;AACH,YAAO,OAAA,CAAA,CAAA;AAAA,UACT,KAAK,CAAA;AACH,YAAA,MAAA;AAAA,UACF,KAAK,EAAA;AACH,YAAA,MAAA;AAAA,UACF,KAAK,EAAA;AACH,YAAA,MAAA;AAAA,UACF,KAAK,EAAA;AACH,YAAO,OAAA,CAAA,CAAA;AAAA,UACT,KAAK,EAAA;AACH,YAAO,OAAA,CAAA,CAAA;AAAA,UACT,KAAK,EAAA;AACH,YAAO,OAAA,EAAA,CAAA;AAAA,UACT,KAAK,EAAA;AACH,YAAO,OAAA,EAAA,CAAA;AAAA,UACT,KAAK,EAAA;AACH,YAAO,OAAA,EAAA,CAAA;AAAA,UACT,KAAK,EAAA;AACH,YAAO,OAAA,EAAA,CAAA;AAAA,UACT,KAAK,EAAA;AACH,YAAO,OAAA,EAAA,CAAA;AAAA,UACT,KAAK,EAAA;AACH,YAAO,OAAA,EAAA,CAAA;AAAA,UACT,KAAK,EAAA;AACH,YAAO,OAAA,EAAA,CAAA;AAAA,UACT,KAAK,EAAA;AACH,YAAO,OAAA,EAAA,CAAA;AAAA,UACT,KAAK,EAAA;AACH,YAAO,OAAA,EAAA,CAAA;AAAA,UACT,KAAK,EAAA;AACH,YAAO,OAAA,EAAA,CAAA;AAAA,UACT,KAAK,EAAA;AACH,YAAO,OAAA,EAAA,CAAA;AAAA,UACT,KAAK,EAAA;AACH,YAAO,OAAA,EAAA,CAAA;AAAA,UACT,KAAK,EAAA;AACH,YAAO,OAAA,EAAA,CAAA;AAAA,UACT,KAAK,EAAA;AACH,YAAO,OAAA,EAAA,CAAA;AAAA,UACT,KAAK,EAAA;AACH,YAAO,OAAA,EAAA,CAAA;AAAA,UACT,KAAK,EAAA;AACH,YAAO,OAAA,EAAA,CAAA;AAAA,UACT,KAAK,EAAA;AACH,YAAO,OAAA,EAAA,CAAA;AAAA,UACT,KAAK,EAAA;AACH,YAAO,OAAA,EAAA,CAAA;AAAA,UACT,KAAK,EAAA;AACH,YAAO,OAAA,EAAA,CAAA;AAAA,UACT,KAAK,EAAA;AACH,YAAO,OAAA,EAAA,CAAA;AAAA,UACT,KAAK,EAAA;AACH,YAAO,OAAA,EAAA,CAAA;AAAA,UACT,KAAK,EAAA;AACH,YAAO,OAAA,EAAA,CAAA;AAAA,UACT,KAAK,EAAA;AACH,YAAO,OAAA,EAAA,CAAA;AAAA,UACT,KAAK,EAAA;AACH,YAAO,OAAA,EAAA,CAAA;AAAA,UACT,KAAK,EAAA;AACH,YAAO,OAAA,EAAA,CAAA;AAAA,UACT,KAAK,EAAA;AACH,YAAO,OAAA,EAAA,CAAA;AAAA,UACT,KAAK,EAAA;AACH,YAAO,OA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","file":"requirementDiagram-deff3bca-GAJV67KB.js","sourcesContent":["import { c as getConfig, s as setAccTitle, g as getAccTitle, b as setAccDescription, a as getAccDescription, l as log, v as clear$1, i as configureSvgSize, e as common } from \"./mermaid-b5860b54.js\";\nimport { select, line } from \"d3\";\nimport { layout } from \"dagre-d3-es/src/dagre/index.js\";\nimport * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\nimport \"ts-dedent\";\nimport \"dayjs\";\nimport \"@braintree/sanitize-url\";\nimport \"dompurify\";\nimport \"khroma\";\nimport \"lodash-es/memoize.js\";\nimport \"lodash-es/merge.js\";\nimport \"stylis\";\nimport \"lodash-es/isEmpty.js\";\nvar parser = function() {\n  var o = function(k, v, o2, l) {\n    for (o2 = o2 || {}, l = k.length; l--; o2[k[l]] = v)\n      ;\n    return o2;\n  }, $V0 = [1, 3], $V1 = [1, 4], $V2 = [1, 5], $V3 = [1, 6], $V4 = [5, 6, 8, 9, 11, 13, 31, 32, 33, 34, 35, 36, 44, 62, 63], $V5 = [1, 18], $V6 = [2, 7], $V7 = [1, 22], $V8 = [1, 23], $V9 = [1, 24], $Va = [1, 25], $Vb = [1, 26], $Vc = [1, 27], $Vd = [1, 20], $Ve = [1, 28], $Vf = [1, 29], $Vg = [62, 63], $Vh = [5, 8, 9, 11, 13, 31, 32, 33, 34, 35, 36, 44, 51, 53, 62, 63], $Vi = [1, 47], $Vj = [1, 48], $Vk = [1, 49], $Vl = [1, 50], $Vm = [1, 51], $Vn = [1, 52], $Vo = [1, 53], $Vp = [53, 54], $Vq = [1, 64], $Vr = [1, 60], $Vs = [1, 61], $Vt = [1, 62], $Vu = [1, 63], $Vv = [1, 65], $Vw = [1, 69], $Vx = [1, 70], $Vy = [1, 67], $Vz = [1, 68], $VA = [5, 8, 9, 11, 13, 31, 32, 33, 34, 35, 36, 44, 62, 63];\n  var parser2 = {\n    trace: function trace() {\n    },\n    yy: {},\n    symbols_: { \"error\": 2, \"start\": 3, \"directive\": 4, \"NEWLINE\": 5, \"RD\": 6, \"diagram\": 7, \"EOF\": 8, \"acc_title\": 9, \"acc_title_value\": 10, \"acc_descr\": 11, \"acc_descr_value\": 12, \"acc_descr_multiline_value\": 13, \"requirementDef\": 14, \"elementDef\": 15, \"relationshipDef\": 16, \"requirementType\": 17, \"requirementName\": 18, \"STRUCT_START\": 19, \"requirementBody\": 20, \"ID\": 21, \"COLONSEP\": 22, \"id\": 23, \"TEXT\": 24, \"text\": 25, \"RISK\": 26, \"riskLevel\": 27, \"VERIFYMTHD\": 28, \"verifyType\": 29, \"STRUCT_STOP\": 30, \"REQUIREMENT\": 31, \"FUNCTIONAL_REQUIREMENT\": 32, \"INTERFACE_REQUIREMENT\": 33, \"PERFORMANCE_REQUIREMENT\": 34, \"PHYSICAL_REQUIREMENT\": 35, \"DESIGN_CONSTRAINT\": 36, \"LOW_RISK\": 37, \"MED_RISK\": 38, \"HIGH_RISK\": 39, \"VERIFY_ANALYSIS\": 40, \"VERIFY_DEMONSTRATION\": 41, \"VERIFY_INSPECTION\": 42, \"VERIFY_TEST\": 43, \"ELEMENT\": 44, \"elementName\": 45, \"elementBody\": 46, \"TYPE\": 47, \"type\": 48, \"DOCREF\": 49, \"ref\": 50, \"END_ARROW_L\": 51, \"relationship\": 52, \"LINE\": 53, \"END_ARROW_R\": 54, \"CONTAINS\": 55, \"COPIES\": 56, \"DERIVES\": 57, \"SATISFIES\": 58, \"VERIFIES\": 59, \"REFINES\": 60, \"TRACES\": 61, \"unqString\": 62, \"qString\": 63, \"$accept\": 0, \"$end\": 1 },\n    terminals_: { 2: \"error\", 5: \"NEWLINE\", 6: \"RD\", 8: \"EOF\", 9: \"acc_title\", 10: \"acc_title_value\", 11: \"acc_descr\", 12: \"acc_descr_value\", 13: \"acc_descr_multiline_value\", 19: \"STRUCT_START\", 21: \"ID\", 22: \"COLONSEP\", 24: \"TEXT\", 26: \"RISK\", 28: \"VERIFYMTHD\", 30: \"STRUCT_STOP\", 31: \"REQUIREMENT\", 32: \"FUNCTIONAL_REQUIREMENT\", 33: \"INTERFACE_REQUIREMENT\", 34: \"PERFORMANCE_REQUIREMENT\", 35: \"PHYSICAL_REQUIREMENT\", 36: \"DESIGN_CONSTRAINT\", 37: \"LOW_RISK\", 38: \"MED_RISK\", 39: \"HIGH_RISK\", 40: \"VERIFY_ANALYSIS\", 41: \"VERIFY_DEMONSTRATION\", 42: \"VERIFY_INSPECTION\", 43: \"VERIFY_TEST\", 44: \"ELEMENT\", 47: \"TYPE\", 49: \"DOCREF\", 51: \"END_ARROW_L\", 53: \"LINE\", 54: \"END_ARROW_R\", 55: \"CONTAINS\", 56: \"COPIES\", 57: \"DERIVES\", 58: \"SATISFIES\", 59: \"VERIFIES\", 60: \"REFINES\", 61: \"TRACES\", 62: \"unqString\", 63: \"qString\" },\n    productions_: [0, [3, 3], [3, 2], [3, 4], [4, 2], [4, 2], [4, 1], [7, 0], [7, 2], [7, 2], [7, 2], [7, 2], [7, 2], [14, 5], [20, 5], [20, 5], [20, 5], [20, 5], [20, 2], [20, 1], [17, 1], [17, 1], [17, 1], [17, 1], [17, 1], [17, 1], [27, 1], [27, 1], [27, 1], [29, 1], [29, 1], [29, 1], [29, 1], [15, 5], [46, 5], [46, 5], [46, 2], [46, 1], [16, 5], [16, 5], [52, 1], [52, 1], [52, 1], [52, 1], [52, 1], [52, 1], [52, 1], [18, 1], [18, 1], [23, 1], [23, 1], [25, 1], [25, 1], [45, 1], [45, 1], [48, 1], [48, 1], [50, 1], [50, 1]],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$) {\n      var $0 = $$.length - 1;\n      switch (yystate) {\n        case 4:\n          this.$ = $$[$0].trim();\n          yy.setAccTitle(this.$);\n          break;\n        case 5:\n        case 6:\n          this.$ = $$[$0].trim();\n          yy.setAccDescription(this.$);\n          break;\n        case 7:\n          this.$ = [];\n          break;\n        case 13:\n          yy.addRequirement($$[$0 - 3], $$[$0 - 4]);\n          break;\n        case 14:\n          yy.setNewReqId($$[$0 - 2]);\n          break;\n        case 15:\n          yy.setNewReqText($$[$0 - 2]);\n          break;\n        case 16:\n          yy.setNewReqRisk($$[$0 - 2]);\n          break;\n        case 17:\n          yy.setNewReqVerifyMethod($$[$0 - 2]);\n          break;\n        case 20:\n          this.$ = yy.RequirementType.REQUIREMENT;\n          break;\n        case 21:\n          this.$ = yy.RequirementType.FUNCTIONAL_REQUIREMENT;\n          break;\n        case 22:\n          this.$ = yy.RequirementType.INTERFACE_REQUIREMENT;\n          break;\n        case 23:\n          this.$ = yy.RequirementType.PERFORMANCE_REQUIREMENT;\n          break;\n        case 24:\n          this.$ = yy.RequirementType.PHYSICAL_REQUIREMENT;\n          break;\n        case 25:\n          this.$ = yy.RequirementType.DESIGN_CONSTRAINT;\n          break;\n        case 26:\n          this.$ = yy.RiskLevel.LOW_RISK;\n          break;\n        case 27:\n          this.$ = yy.RiskLevel.MED_RISK;\n          break;\n        case 28:\n          this.$ = yy.RiskLevel.HIGH_RISK;\n          break;\n        case 29:\n          this.$ = yy.VerifyType.VERIFY_ANALYSIS;\n          break;\n        case 30:\n          this.$ = yy.VerifyType.VERIFY_DEMONSTRATION;\n          break;\n        case 31:\n          this.$ = yy.VerifyType.VERIFY_INSPECTION;\n          break;\n        case 32:\n          this.$ = yy.VerifyType.VERIFY_TEST;\n          break;\n        case 33:\n          yy.addElement($$[$0 - 3]);\n          break;\n        case 34:\n          yy.setNewElementType($$[$0 - 2]);\n          break;\n        case 35:\n          yy.setNewElementDocRef($$[$0 - 2]);\n          break;\n        case 38:\n          yy.addRelationship($$[$0 - 2], $$[$0], $$[$0 - 4]);\n          break;\n        case 39:\n          yy.addRelationship($$[$0 - 2], $$[$0 - 4], $$[$0]);\n          break;\n        case 40:\n          this.$ = yy.Relationships.CONTAINS;\n          break;\n        case 41:\n          this.$ = yy.Relationships.COPIES;\n          break;\n        case 42:\n          this.$ = yy.Relationships.DERIVES;\n          break;\n        case 43:\n          this.$ = yy.Relationships.SATISFIES;\n          break;\n        case 44:\n          this.$ = yy.Relationships.VERIFIES;\n          break;\n        case 45:\n          this.$ = yy.Relationships.REFINES;\n          break;\n        case 46:\n          this.$ = yy.Relationships.TRACES;\n          break;\n      }\n    },\n    table: [{ 3: 1, 4: 2, 6: $V0, 9: $V1, 11: $V2, 13: $V3 }, { 1: [3] }, { 3: 8, 4: 2, 5: [1, 7], 6: $V0, 9: $V1, 11: $V2, 13: $V3 }, { 5: [1, 9] }, { 10: [1, 10] }, { 12: [1, 11] }, o($V4, [2, 6]), { 3: 12, 4: 2, 6: $V0, 9: $V1, 11: $V2, 13: $V3 }, { 1: [2, 2] }, { 4: 17, 5: $V5, 7: 13, 8: $V6, 9: $V1, 11: $V2, 13: $V3, 14: 14, 15: 15, 16: 16, 17: 19, 23: 21, 31: $V7, 32: $V8, 33: $V9, 34: $Va, 35: $Vb, 36: $Vc, 44: $Vd, 62: $Ve, 63: $Vf }, o($V4, [2, 4]), o($V4, [2, 5]), { 1: [2, 1] }, { 8: [1, 30] }, { 4: 17, 5: $V5, 7: 31, 8: $V6, 9: $V1, 11: $V2, 13: $V3, 14: 14, 15: 15, 16: 16, 17: 19, 23: 21, 31: $V7, 32: $V8, 33: $V9, 34: $Va, 35: $Vb, 36: $Vc, 44: $Vd, 62: $Ve, 63: $Vf }, { 4: 17, 5: $V5, 7: 32, 8: $V6, 9: $V1, 11: $V2, 13: $V3, 14: 14, 15: 15, 16: 16, 17: 19, 23: 21, 31: $V7, 32: $V8, 33: $V9, 34: $Va, 35: $Vb, 36: $Vc, 44: $Vd, 62: $Ve, 63: $Vf }, { 4: 17, 5: $V5, 7: 33, 8: $V6, 9: $V1, 11: $V2, 13: $V3, 14: 14, 15: 15, 16: 16, 17: 19, 23: 21, 31: $V7, 32: $V8, 33: $V9, 34: $Va, 35: $Vb, 36: $Vc, 44: $Vd, 62: $Ve, 63: $Vf }, { 4: 17, 5: $V5, 7: 34, 8: $V6, 9: $V1, 11: $V2, 13: $V3, 14: 14, 15: 15, 16: 16, 17: 19, 23: 21, 31: $V7, 32: $V8, 33: $V9, 34: $Va, 35: $Vb, 36: $Vc, 44: $Vd, 62: $Ve, 63: $Vf }, { 4: 17, 5: $V5, 7: 35, 8: $V6, 9: $V1, 11: $V2, 13: $V3, 14: 14, 15: 15, 16: 16, 17: 19, 23: 21, 31: $V7, 32: $V8, 33: $V9, 34: $Va, 35: $Vb, 36: $Vc, 44: $Vd, 62: $Ve, 63: $Vf }, { 18: 36, 62: [1, 37], 63: [1, 38] }, { 45: 39, 62: [1, 40], 63: [1, 41] }, { 51: [1, 42], 53: [1, 43] }, o($Vg, [2, 20]), o($Vg, [2, 21]), o($Vg, [2, 22]), o($Vg, [2, 23]), o($Vg, [2, 24]), o($Vg, [2, 25]), o($Vh, [2, 49]), o($Vh, [2, 50]), { 1: [2, 3] }, { 8: [2, 8] }, { 8: [2, 9] }, { 8: [2, 10] }, { 8: [2, 11] }, { 8: [2, 12] }, { 19: [1, 44] }, { 19: [2, 47] }, { 19: [2, 48] }, { 19: [1, 45] }, { 19: [2, 53] }, { 19: [2, 54] }, { 52: 46, 55: $Vi, 56: $Vj, 57: $Vk, 58: $Vl, 59: $Vm, 60: $Vn, 61: $Vo }, { 52: 54, 55: $Vi, 56: $Vj, 57: $Vk, 58: $Vl, 59: $Vm, 60: $Vn, 61: $Vo }, { 5: [1, 55] }, { 5: [1, 56] }, { 53: [1, 57] }, o($Vp, [2, 40]), o($Vp, [2, 41]), o($Vp, [2, 42]), o($Vp, [2, 43]), o($Vp, [2, 44]), o($Vp, [2, 45]), o($Vp, [2, 46]), { 54: [1, 58] }, { 5: $Vq, 20: 59, 21: $Vr, 24: $Vs, 26: $Vt, 28: $Vu, 30: $Vv }, { 5: $Vw, 30: $Vx, 46: 66, 47: $Vy, 49: $Vz }, { 23: 71, 62: $Ve, 63: $Vf }, { 23: 72, 62: $Ve, 63: $Vf }, o($VA, [2, 13]), { 22: [1, 73] }, { 22: [1, 74] }, { 22: [1, 75] }, { 22: [1, 76] }, { 5: $Vq, 20: 77, 21: $Vr, 24: $Vs, 26: $Vt, 28: $Vu, 30: $Vv }, o($VA, [2, 19]), o($VA, [2, 33]), { 22: [1, 78] }, { 22: [1, 79] }, { 5: $Vw, 30: $Vx, 46: 80, 47: $Vy, 49: $Vz }, o($VA, [2, 37]), o($VA, [2, 38]), o($VA, [2, 39]), { 23: 81, 62: $Ve, 63: $Vf }, { 25: 82, 62: [1, 83], 63: [1, 84] }, { 27: 85, 37: [1, 86], 38: [1, 87], 39: [1, 88] }, { 29: 89, 40: [1, 90], 41: [1, 91], 42: [1, 92], 43: [1, 93] }, o($VA, [2, 18]), { 48: 94, 62: [1, 95], 63: [1, 96] }, { 50: 97, 62: [1, 98], 63: [1, 99] }, o($VA, [2, 36]), { 5: [1, 100] }, { 5: [1, 101] }, { 5: [2, 51] }, { 5: [2, 52] }, { 5: [1, 102] }, { 5: [2, 26] }, { 5: [2, 27] }, { 5: [2, 28] }, { 5: [1, 103] }, { 5: [2, 29] }, { 5: [2, 30] }, { 5: [2, 31] }, { 5: [2, 32] }, { 5: [1, 104] }, { 5: [2, 55] }, { 5: [2, 56] }, { 5: [1, 105] }, { 5: [2, 57] }, { 5: [2, 58] }, { 5: $Vq, 20: 106, 21: $Vr, 24: $Vs, 26: $Vt, 28: $Vu, 30: $Vv }, { 5: $Vq, 20: 107, 21: $Vr, 24: $Vs, 26: $Vt, 28: $Vu, 30: $Vv }, { 5: $Vq, 20: 108, 21: $Vr, 24: $Vs, 26: $Vt, 28: $Vu, 30: $Vv }, { 5: $Vq, 20: 109, 21: $Vr, 24: $Vs, 26: $Vt, 28: $Vu, 30: $Vv }, { 5: $Vw, 30: $Vx, 46: 110, 47: $Vy, 49: $Vz }, { 5: $Vw, 30: $Vx, 46: 111, 47: $Vy, 49: $Vz }, o($VA, [2, 14]), o($VA, [2, 15]), o($VA, [2, 16]), o($VA, [2, 17]), o($VA, [2, 34]), o($VA, [2, 35])],\n    defaultActions: { 8: [2, 2], 12: [2, 1], 30: [2, 3], 31: [2, 8], 32: [2, 9], 33: [2, 10], 34: [2, 11], 35: [2, 12], 37: [2, 47], 38: [2, 48], 40: [2, 53], 41: [2, 54], 83: [2, 51], 84: [2, 52], 86: [2, 26], 87: [2, 27], 88: [2, 28], 90: [2, 29], 91: [2, 30], 92: [2, 31], 93: [2, 32], 95: [2, 55], 96: [2, 56], 98: [2, 57], 99: [2, 58] },\n    parseError: function parseError(str, hash) {\n      if (hash.recoverable) {\n        this.trace(str);\n      } else {\n        var error = new Error(str);\n        error.hash = hash;\n        throw error;\n      }\n    },\n    parse: function parse(input) {\n      var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = \"\", yylineno = 0, yyleng = 0, TERROR = 2, EOF = 1;\n      var args = lstack.slice.call(arguments, 1);\n      var lexer2 = Object.create(this.lexer);\n      var sharedState = { yy: {} };\n      for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n          sharedState.yy[k] = this.yy[k];\n        }\n      }\n      lexer2.setInput(input, sharedState.yy);\n      sharedState.yy.lexer = lexer2;\n      sharedState.yy.parser = this;\n      if (typeof lexer2.yylloc == \"undefined\") {\n        lexer2.yylloc = {};\n      }\n      var yyloc = lexer2.yylloc;\n      lstack.push(yyloc);\n      var ranges = lexer2.options && lexer2.options.ranges;\n      if (typeof sharedState.yy.parseError === \"function\") {\n        this.parseError = sharedState.yy.parseError;\n      } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n      }\n      function lex() {\n        var token;\n        token = tstack.pop() || lexer2.lex() || EOF;\n        if (typeof token !== \"number\") {\n          if (token instanceof Array) {\n            tstack = token;\n            token = tstack.pop();\n          }\n          token = self.symbols_[token] || token;\n        }\n        return token;\n      }\n      var symbol, state, action, r, yyval = {}, p, len, newState, expected;\n      while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n          action = this.defaultActions[state];\n        } else {\n          if (symbol === null || typeof symbol == \"undefined\") {\n            symbol = lex();\n          }\n          action = table[state] && table[state][symbol];\n        }\n        if (typeof action === \"undefined\" || !action.length || !action[0]) {\n          var errStr = \"\";\n          expected = [];\n          for (p in table[state]) {\n            if (this.terminals_[p] && p > TERROR) {\n              expected.push(\"'\" + this.terminals_[p] + \"'\");\n            }\n          }\n          if (lexer2.showPosition) {\n            errStr = \"Parse error on line \" + (yylineno + 1) + \":\\n\" + lexer2.showPosition() + \"\\nExpecting \" + expected.join(\", \") + \", got '\" + (this.terminals_[symbol] || symbol) + \"'\";\n          } else {\n            errStr = \"Parse error on line \" + (yylineno + 1) + \": Unexpected \" + (symbol == EOF ? \"end of input\" : \"'\" + (this.terminals_[symbol] || symbol) + \"'\");\n          }\n          this.parseError(errStr, {\n            text: lexer2.match,\n            token: this.terminals_[symbol] || symbol,\n            line: lexer2.yylineno,\n            loc: yyloc,\n            expected\n          });\n        }\n        if (action[0] instanceof Array && action.length > 1) {\n          throw new Error(\"Parse Error: multiple actions possible at state: \" + state + \", token: \" + symbol);\n        }\n        switch (action[0]) {\n          case 1:\n            stack.push(symbol);\n            vstack.push(lexer2.yytext);\n            lstack.push(lexer2.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            {\n              yyleng = lexer2.yyleng;\n              yytext = lexer2.yytext;\n              yylineno = lexer2.yylineno;\n              yyloc = lexer2.yylloc;\n            }\n            break;\n          case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n              first_line: lstack[lstack.length - (len || 1)].first_line,\n              last_line: lstack[lstack.length - 1].last_line,\n              first_column: lstack[lstack.length - (len || 1)].first_column,\n              last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n              yyval._$.range = [\n                lstack[lstack.length - (len || 1)].range[0],\n                lstack[lstack.length - 1].range[1]\n              ];\n            }\n            r = this.performAction.apply(yyval, [\n              yytext,\n              yyleng,\n              yylineno,\n              sharedState.yy,\n              action[1],\n              vstack,\n              lstack\n            ].concat(args));\n            if (typeof r !== \"undefined\") {\n              return r;\n            }\n            if (len) {\n              stack = stack.slice(0, -1 * len * 2);\n              vstack = vstack.slice(0, -1 * len);\n              lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n          case 3:\n            return true;\n        }\n      }\n      return true;\n    }\n  };\n  var lexer = function() {\n    var lexer2 = {\n      EOF: 1,\n      parseError: function parseError(str, hash) {\n        if (this.yy.parser) {\n          this.yy.parser.parseError(str, hash);\n        } else {\n          throw new Error(str);\n        }\n      },\n      // resets the lexer, sets new input\n      setInput: function(input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = \"\";\n        this.conditionStack = [\"INITIAL\"];\n        this.yylloc = {\n          first_line: 1,\n          first_column: 0,\n          last_line: 1,\n          last_column: 0\n        };\n        if (this.options.ranges) {\n          this.yylloc.range = [0, 0];\n        }\n        this.offset = 0;\n        return this;\n      },\n      // consumes and returns one char from the input\n      input: function() {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n          this.yylineno++;\n          this.yylloc.last_line++;\n        } else {\n          this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n          this.yylloc.range[1]++;\n        }\n        this._input = this._input.slice(1);\n        return ch;\n      },\n      // unshifts one char (or a string) into the input\n      unput: function(ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n        if (lines.length - 1) {\n          this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n        this.yylloc = {\n          first_line: this.yylloc.first_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.first_column,\n          last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len\n        };\n        if (this.options.ranges) {\n          this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n      },\n      // When called from action, caches matched text and appends it on next action\n      more: function() {\n        this._more = true;\n        return this;\n      },\n      // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\n      reject: function() {\n        if (this.options.backtrack_lexer) {\n          this._backtrack = true;\n        } else {\n          return this.parseError(\"Lexical error on line \" + (this.yylineno + 1) + \". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n\" + this.showPosition(), {\n            text: \"\",\n            token: null,\n            line: this.yylineno\n          });\n        }\n        return this;\n      },\n      // retain first n characters of the match\n      less: function(n) {\n        this.unput(this.match.slice(n));\n      },\n      // displays already matched input, i.e. for error messages\n      pastInput: function() {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? \"...\" : \"\") + past.substr(-20).replace(/\\n/g, \"\");\n      },\n      // displays upcoming input, i.e. for error messages\n      upcomingInput: function() {\n        var next = this.match;\n        if (next.length < 20) {\n          next += this._input.substr(0, 20 - next.length);\n        }\n        return (next.substr(0, 20) + (next.length > 20 ? \"...\" : \"\")).replace(/\\n/g, \"\");\n      },\n      // displays the character position where the lexing error occurred, i.e. for error messages\n      showPosition: function() {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n      },\n      // test the lexed token: return FALSE when not a match, otherwise return token\n      test_match: function(match, indexed_rule) {\n        var token, lines, backup;\n        if (this.options.backtrack_lexer) {\n          backup = {\n            yylineno: this.yylineno,\n            yylloc: {\n              first_line: this.yylloc.first_line,\n              last_line: this.last_line,\n              first_column: this.yylloc.first_column,\n              last_column: this.yylloc.last_column\n            },\n            yytext: this.yytext,\n            match: this.match,\n            matches: this.matches,\n            matched: this.matched,\n            yyleng: this.yyleng,\n            offset: this.offset,\n            _more: this._more,\n            _input: this._input,\n            yy: this.yy,\n            conditionStack: this.conditionStack.slice(0),\n            done: this.done\n          };\n          if (this.options.ranges) {\n            backup.yylloc.range = this.yylloc.range.slice(0);\n          }\n        }\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n          this.yylineno += lines.length;\n        }\n        this.yylloc = {\n          first_line: this.yylloc.last_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.last_column,\n          last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length : this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n          this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n          this.done = false;\n        }\n        if (token) {\n          return token;\n        } else if (this._backtrack) {\n          for (var k in backup) {\n            this[k] = backup[k];\n          }\n          return false;\n        }\n        return false;\n      },\n      // return next match in input\n      next: function() {\n        if (this.done) {\n          return this.EOF;\n        }\n        if (!this._input) {\n          this.done = true;\n        }\n        var token, match, tempMatch, index;\n        if (!this._more) {\n          this.yytext = \"\";\n          this.match = \"\";\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n          tempMatch = this._input.match(this.rules[rules[i]]);\n          if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n            match = tempMatch;\n            index = i;\n            if (this.options.backtrack_lexer) {\n              token = this.test_match(tempMatch, rules[i]);\n              if (token !== false) {\n                return token;\n              } else if (this._backtrack) {\n                match = false;\n                continue;\n              } else {\n                return false;\n              }\n            } else if (!this.options.flex) {\n              break;\n            }\n          }\n        }\n        if (match) {\n          token = this.test_match(match, rules[index]);\n          if (token !== false) {\n            return token;\n          }\n          return false;\n        }\n        if (this._input === \"\") {\n          return this.EOF;\n        } else {\n          return this.parseError(\"Lexical error on line \" + (this.yylineno + 1) + \". Unrecognized text.\\n\" + this.showPosition(), {\n            text: \"\",\n            token: null,\n            line: this.yylineno\n          });\n        }\n      },\n      // return next match that has a token\n      lex: function lex() {\n        var r = this.next();\n        if (r) {\n          return r;\n        } else {\n          return this.lex();\n        }\n      },\n      // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\n      begin: function begin(condition) {\n        this.conditionStack.push(condition);\n      },\n      // pop the previously active lexer condition state off the condition stack\n      popState: function popState() {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n          return this.conditionStack.pop();\n        } else {\n          return this.conditionStack[0];\n        }\n      },\n      // produce the lexer rule set which is active for the currently active lexer condition state\n      _currentRules: function _currentRules() {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n          return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n          return this.conditions[\"INITIAL\"].rules;\n        }\n      },\n      // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\n      topState: function topState(n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n          return this.conditionStack[n];\n        } else {\n          return \"INITIAL\";\n        }\n      },\n      // alias for begin(condition)\n      pushState: function pushState(condition) {\n        this.begin(condition);\n      },\n      // return the number of states currently on the stack\n      stateStackSize: function stateStackSize() {\n        return this.conditionStack.length;\n      },\n      options: { \"case-insensitive\": true },\n      performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {\n        switch ($avoiding_name_collisions) {\n          case 0:\n            return \"title\";\n          case 1:\n            this.begin(\"acc_title\");\n            return 9;\n          case 2:\n            this.popState();\n            return \"acc_title_value\";\n          case 3:\n            this.begin(\"acc_descr\");\n            return 11;\n          case 4:\n            this.popState();\n            return \"acc_descr_value\";\n          case 5:\n            this.begin(\"acc_descr_multiline\");\n            break;\n          case 6:\n            this.popState();\n            break;\n          case 7:\n            return \"acc_descr_multiline_value\";\n          case 8:\n            return 5;\n          case 9:\n            break;\n          case 10:\n            break;\n          case 11:\n            break;\n          case 12:\n            return 8;\n          case 13:\n            return 6;\n          case 14:\n            return 19;\n          case 15:\n            return 30;\n          case 16:\n            return 22;\n          case 17:\n            return 21;\n          case 18:\n            return 24;\n          case 19:\n            return 26;\n          case 20:\n            return 28;\n          case 21:\n            return 31;\n          case 22:\n            return 32;\n          case 23:\n            return 33;\n          case 24:\n            return 34;\n          case 25:\n            return 35;\n          case 26:\n            return 36;\n          case 27:\n            return 37;\n          case 28:\n            return 38;\n          case 29:\n            return 39;\n          case 30:\n            return 40;\n          case 31:\n            return 41;\n          case 32:\n            return 42;\n          case 33:\n            return 43;\n          case 34:\n            return 44;\n          case 35:\n            return 55;\n          case 36:\n            return 56;\n          case 37:\n            return 57;\n          case 38:\n            return 58;\n          case 39:\n            return 59;\n          case 40:\n            return 60;\n          case 41:\n            return 61;\n          case 42:\n            return 47;\n          case 43:\n            return 49;\n          case 44:\n            return 51;\n          case 45:\n            return 54;\n          case 46:\n            return 53;\n          case 47:\n            this.begin(\"string\");\n            break;\n          case 48:\n            this.popState();\n            break;\n          case 49:\n            return \"qString\";\n          case 50:\n            yy_.yytext = yy_.yytext.trim();\n            return 62;\n        }\n      },\n      rules: [/^(?:title\\s[^#\\n;]+)/i, /^(?:accTitle\\s*:\\s*)/i, /^(?:(?!\\n||)*[^\\n]*)/i, /^(?:accDescr\\s*:\\s*)/i, /^(?:(?!\\n||)*[^\\n]*)/i, /^(?:accDescr\\s*\\{\\s*)/i, /^(?:[\\}])/i, /^(?:[^\\}]*)/i, /^(?:(\\r?\\n)+)/i, /^(?:\\s+)/i, /^(?:#[^\\n]*)/i, /^(?:%[^\\n]*)/i, /^(?:$)/i, /^(?:requirementDiagram\\b)/i, /^(?:\\{)/i, /^(?:\\})/i, /^(?::)/i, /^(?:id\\b)/i, /^(?:text\\b)/i, /^(?:risk\\b)/i, /^(?:verifyMethod\\b)/i, /^(?:requirement\\b)/i, /^(?:functionalRequirement\\b)/i, /^(?:interfaceRequirement\\b)/i, /^(?:performanceRequirement\\b)/i, /^(?:physicalRequirement\\b)/i, /^(?:designConstraint\\b)/i, /^(?:low\\b)/i, /^(?:medium\\b)/i, /^(?:high\\b)/i, /^(?:analysis\\b)/i, /^(?:demonstration\\b)/i, /^(?:inspection\\b)/i, /^(?:test\\b)/i, /^(?:element\\b)/i, /^(?:contains\\b)/i, /^(?:copies\\b)/i, /^(?:derives\\b)/i, /^(?:satisfies\\b)/i, /^(?:verifies\\b)/i, /^(?:refines\\b)/i, /^(?:traces\\b)/i, /^(?:type\\b)/i, /^(?:docref\\b)/i, /^(?:<-)/i, /^(?:->)/i, /^(?:-)/i, /^(?:[\"])/i, /^(?:[\"])/i, /^(?:[^\"]*)/i, /^(?:[\\w][^\\r\\n\\{\\<\\>\\-\\=]*)/i],\n      conditions: { \"acc_descr_multiline\": { \"rules\": [6, 7], \"inclusive\": false }, \"acc_descr\": { \"rules\": [4], \"inclusive\": false }, \"acc_title\": { \"rules\": [2], \"inclusive\": false }, \"unqString\": { \"rules\": [], \"inclusive\": false }, \"token\": { \"rules\": [], \"inclusive\": false }, \"string\": { \"rules\": [48, 49], \"inclusive\": false }, \"INITIAL\": { \"rules\": [0, 1, 3, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50], \"inclusive\": true } }\n    };\n    return lexer2;\n  }();\n  parser2.lexer = lexer;\n  function Parser() {\n    this.yy = {};\n  }\n  Parser.prototype = parser2;\n  parser2.Parser = Parser;\n  return new Parser();\n}();\nparser.parser = parser;\nconst parser$1 = parser;\nlet relations = [];\nlet latestRequirement = {};\nlet requirements = {};\nlet latestElement = {};\nlet elements = {};\nconst RequirementType = {\n  REQUIREMENT: \"Requirement\",\n  FUNCTIONAL_REQUIREMENT: \"Functional Requirement\",\n  INTERFACE_REQUIREMENT: \"Interface Requirement\",\n  PERFORMANCE_REQUIREMENT: \"Performance Requirement\",\n  PHYSICAL_REQUIREMENT: \"Physical Requirement\",\n  DESIGN_CONSTRAINT: \"Design Constraint\"\n};\nconst RiskLevel = {\n  LOW_RISK: \"Low\",\n  MED_RISK: \"Medium\",\n  HIGH_RISK: \"High\"\n};\nconst VerifyType = {\n  VERIFY_ANALYSIS: \"Analysis\",\n  VERIFY_DEMONSTRATION: \"Demonstration\",\n  VERIFY_INSPECTION: \"Inspection\",\n  VERIFY_TEST: \"Test\"\n};\nconst Relationships = {\n  CONTAINS: \"contains\",\n  COPIES: \"copies\",\n  DERIVES: \"derives\",\n  SATISFIES: \"satisfies\",\n  VERIFIES: \"verifies\",\n  REFINES: \"refines\",\n  TRACES: \"traces\"\n};\nconst addRequirement = (name, type) => {\n  if (requirements[name] === void 0) {\n    requirements[name] = {\n      name,\n      type,\n      id: latestRequirement.id,\n      text: latestRequirement.text,\n      risk: latestRequirement.risk,\n      verifyMethod: latestRequirement.verifyMethod\n    };\n  }\n  latestRequirement = {};\n  return requirements[name];\n};\nconst getRequirements = () => requirements;\nconst setNewReqId = (id) => {\n  if (latestRequirement !== void 0) {\n    latestRequirement.id = id;\n  }\n};\nconst setNewReqText = (text) => {\n  if (latestRequirement !== void 0) {\n    latestRequirement.text = text;\n  }\n};\nconst setNewReqRisk = (risk) => {\n  if (latestRequirement !== void 0) {\n    latestRequirement.risk = risk;\n  }\n};\nconst setNewReqVerifyMethod = (verifyMethod) => {\n  if (latestRequirement !== void 0) {\n    latestRequirement.verifyMethod = verifyMethod;\n  }\n};\nconst addElement = (name) => {\n  if (elements[name] === void 0) {\n    elements[name] = {\n      name,\n      type: latestElement.type,\n      docRef: latestElement.docRef\n    };\n    log.info(\"Added new requirement: \", name);\n  }\n  latestElement = {};\n  return elements[name];\n};\nconst getElements = () => elements;\nconst setNewElementType = (type) => {\n  if (latestElement !== void 0) {\n    latestElement.type = type;\n  }\n};\nconst setNewElementDocRef = (docRef) => {\n  if (latestElement !== void 0) {\n    latestElement.docRef = docRef;\n  }\n};\nconst addRelationship = (type, src, dst) => {\n  relations.push({\n    type,\n    src,\n    dst\n  });\n};\nconst getRelationships = () => relations;\nconst clear = () => {\n  relations = [];\n  latestRequirement = {};\n  requirements = {};\n  latestElement = {};\n  elements = {};\n  clear$1();\n};\nconst db = {\n  RequirementType,\n  RiskLevel,\n  VerifyType,\n  Relationships,\n  getConfig: () => getConfig().req,\n  addRequirement,\n  getRequirements,\n  setNewReqId,\n  setNewReqText,\n  setNewReqRisk,\n  setNewReqVerifyMethod,\n  setAccTitle,\n  getAccTitle,\n  setAccDescription,\n  getAccDescription,\n  addElement,\n  getElements,\n  setNewElementType,\n  setNewElementDocRef,\n  addRelationship,\n  getRelationships,\n  clear\n};\nconst getStyles = (options) => `\n\n  marker {\n    fill: ${options.relationColor};\n    stroke: ${options.relationColor};\n  }\n\n  marker.cross {\n    stroke: ${options.lineColor};\n  }\n\n  svg {\n    font-family: ${options.fontFamily};\n    font-size: ${options.fontSize};\n  }\n\n  .reqBox {\n    fill: ${options.requirementBackground};\n    fill-opacity: 1.0;\n    stroke: ${options.requirementBorderColor};\n    stroke-width: ${options.requirementBorderSize};\n  }\n  \n  .reqTitle, .reqLabel{\n    fill:  ${options.requirementTextColor};\n  }\n  .reqLabelBox {\n    fill: ${options.relationLabelBackground};\n    fill-opacity: 1.0;\n  }\n\n  .req-title-line {\n    stroke: ${options.requirementBorderColor};\n    stroke-width: ${options.requirementBorderSize};\n  }\n  .relationshipLine {\n    stroke: ${options.relationColor};\n    stroke-width: 1;\n  }\n  .relationshipLabel {\n    fill: ${options.relationLabelColor};\n  }\n\n`;\nconst styles = getStyles;\nconst ReqMarkers = {\n  CONTAINS: \"contains\",\n  ARROW: \"arrow\"\n};\nconst insertLineEndings = (parentNode, conf2) => {\n  let containsNode = parentNode.append(\"defs\").append(\"marker\").attr(\"id\", ReqMarkers.CONTAINS + \"_line_ending\").attr(\"refX\", 0).attr(\"refY\", conf2.line_height / 2).attr(\"markerWidth\", conf2.line_height).attr(\"markerHeight\", conf2.line_height).attr(\"orient\", \"auto\").append(\"g\");\n  containsNode.append(\"circle\").attr(\"cx\", conf2.line_height / 2).attr(\"cy\", conf2.line_height / 2).attr(\"r\", conf2.line_height / 2).attr(\"fill\", \"none\");\n  containsNode.append(\"line\").attr(\"x1\", 0).attr(\"x2\", conf2.line_height).attr(\"y1\", conf2.line_height / 2).attr(\"y2\", conf2.line_height / 2).attr(\"stroke-width\", 1);\n  containsNode.append(\"line\").attr(\"y1\", 0).attr(\"y2\", conf2.line_height).attr(\"x1\", conf2.line_height / 2).attr(\"x2\", conf2.line_height / 2).attr(\"stroke-width\", 1);\n  parentNode.append(\"defs\").append(\"marker\").attr(\"id\", ReqMarkers.ARROW + \"_line_ending\").attr(\"refX\", conf2.line_height).attr(\"refY\", 0.5 * conf2.line_height).attr(\"markerWidth\", conf2.line_height).attr(\"markerHeight\", conf2.line_height).attr(\"orient\", \"auto\").append(\"path\").attr(\n    \"d\",\n    `M0,0\n      L${conf2.line_height},${conf2.line_height / 2}\n      M${conf2.line_height},${conf2.line_height / 2}\n      L0,${conf2.line_height}`\n  ).attr(\"stroke-width\", 1);\n};\nconst markers = {\n  ReqMarkers,\n  insertLineEndings\n};\nlet conf = {};\nlet relCnt = 0;\nconst newRectNode = (parentNode, id) => {\n  return parentNode.insert(\"rect\", \"#\" + id).attr(\"class\", \"req reqBox\").attr(\"x\", 0).attr(\"y\", 0).attr(\"width\", conf.rect_min_width + \"px\").attr(\"height\", conf.rect_min_height + \"px\");\n};\nconst newTitleNode = (parentNode, id, txts) => {\n  let x = conf.rect_min_width / 2;\n  let title = parentNode.append(\"text\").attr(\"class\", \"req reqLabel reqTitle\").attr(\"id\", id).attr(\"x\", x).attr(\"y\", conf.rect_padding).attr(\"dominant-baseline\", \"hanging\");\n  let i = 0;\n  txts.forEach((textStr) => {\n    if (i == 0) {\n      title.append(\"tspan\").attr(\"text-anchor\", \"middle\").attr(\"x\", conf.rect_min_width / 2).attr(\"dy\", 0).text(textStr);\n    } else {\n      title.append(\"tspan\").attr(\"text-anchor\", \"middle\").attr(\"x\", conf.rect_min_width / 2).attr(\"dy\", conf.line_height * 0.75).text(textStr);\n    }\n    i++;\n  });\n  let yPadding = 1.5 * conf.rect_padding;\n  let linePadding = i * conf.line_height * 0.75;\n  let totalY = yPadding + linePadding;\n  parentNode.append(\"line\").attr(\"class\", \"req-title-line\").attr(\"x1\", \"0\").attr(\"x2\", conf.rect_min_width).attr(\"y1\", totalY).attr(\"y2\", totalY);\n  return {\n    titleNode: title,\n    y: totalY\n  };\n};\nconst newBodyNode = (parentNode, id, txts, yStart) => {\n  let body = parentNode.append(\"text\").attr(\"class\", \"req reqLabel\").attr(\"id\", id).attr(\"x\", conf.rect_padding).attr(\"y\", yStart).attr(\"dominant-baseline\", \"hanging\");\n  let currentRow = 0;\n  const charLimit = 30;\n  let wrappedTxts = [];\n  txts.forEach((textStr) => {\n    let currentTextLen = textStr.length;\n    while (currentTextLen > charLimit && currentRow < 3) {\n      let firstPart = textStr.substring(0, charLimit);\n      textStr = textStr.substring(charLimit, textStr.length);\n      currentTextLen = textStr.length;\n      wrappedTxts[wrappedTxts.length] = firstPart;\n      currentRow++;\n    }\n    if (currentRow == 3) {\n      let lastStr = wrappedTxts[wrappedTxts.length - 1];\n      wrappedTxts[wrappedTxts.length - 1] = lastStr.substring(0, lastStr.length - 4) + \"...\";\n    } else {\n      wrappedTxts[wrappedTxts.length] = textStr;\n    }\n    currentRow = 0;\n  });\n  wrappedTxts.forEach((textStr) => {\n    body.append(\"tspan\").attr(\"x\", conf.rect_padding).attr(\"dy\", conf.line_height).text(textStr);\n  });\n  return body;\n};\nconst addEdgeLabel = (parentNode, svgPath, conf2, txt) => {\n  const len = svgPath.node().getTotalLength();\n  const labelPoint = svgPath.node().getPointAtLength(len * 0.5);\n  const labelId = \"rel\" + relCnt;\n  relCnt++;\n  const labelNode = parentNode.append(\"text\").attr(\"class\", \"req relationshipLabel\").attr(\"id\", labelId).attr(\"x\", labelPoint.x).attr(\"y\", labelPoint.y).attr(\"text-anchor\", \"middle\").attr(\"dominant-baseline\", \"middle\").text(txt);\n  const labelBBox = labelNode.node().getBBox();\n  parentNode.insert(\"rect\", \"#\" + labelId).attr(\"class\", \"req reqLabelBox\").attr(\"x\", labelPoint.x - labelBBox.width / 2).attr(\"y\", labelPoint.y - labelBBox.height / 2).attr(\"width\", labelBBox.width).attr(\"height\", labelBBox.height).attr(\"fill\", \"white\").attr(\"fill-opacity\", \"85%\");\n};\nconst drawRelationshipFromLayout = function(svg, rel, g, insert, diagObj) {\n  const edge = g.edge(elementString(rel.src), elementString(rel.dst));\n  const lineFunction = line().x(function(d) {\n    return d.x;\n  }).y(function(d) {\n    return d.y;\n  });\n  const svgPath = svg.insert(\"path\", \"#\" + insert).attr(\"class\", \"er relationshipLine\").attr(\"d\", lineFunction(edge.points)).attr(\"fill\", \"none\");\n  if (rel.type == diagObj.db.Relationships.CONTAINS) {\n    svgPath.attr(\n      \"marker-start\",\n      \"url(\" + common.getUrl(conf.arrowMarkerAbsolute) + \"#\" + rel.type + \"_line_ending)\"\n    );\n  } else {\n    svgPath.attr(\"stroke-dasharray\", \"10,7\");\n    svgPath.attr(\n      \"marker-end\",\n      \"url(\" + common.getUrl(conf.arrowMarkerAbsolute) + \"#\" + markers.ReqMarkers.ARROW + \"_line_ending)\"\n    );\n  }\n  addEdgeLabel(svg, svgPath, conf, `<<${rel.type}>>`);\n  return;\n};\nconst drawReqs = (reqs, graph, svgNode) => {\n  Object.keys(reqs).forEach((reqName) => {\n    let req = reqs[reqName];\n    reqName = elementString(reqName);\n    log.info(\"Added new requirement: \", reqName);\n    const groupNode = svgNode.append(\"g\").attr(\"id\", reqName);\n    const textId = \"req-\" + reqName;\n    const rectNode = newRectNode(groupNode, textId);\n    let titleNodeInfo = newTitleNode(groupNode, reqName + \"_title\", [\n      `<<${req.type}>>`,\n      `${req.name}`\n    ]);\n    newBodyNode(\n      groupNode,\n      reqName + \"_body\",\n      [\n        `Id: ${req.id}`,\n        `Text: ${req.text}`,\n        `Risk: ${req.risk}`,\n        `Verification: ${req.verifyMethod}`\n      ],\n      titleNodeInfo.y\n    );\n    const rectBBox = rectNode.node().getBBox();\n    graph.setNode(reqName, {\n      width: rectBBox.width,\n      height: rectBBox.height,\n      shape: \"rect\",\n      id: reqName\n    });\n  });\n};\nconst drawElements = (els, graph, svgNode) => {\n  Object.keys(els).forEach((elName) => {\n    let el = els[elName];\n    const id = elementString(elName);\n    const groupNode = svgNode.append(\"g\").attr(\"id\", id);\n    const textId = \"element-\" + id;\n    const rectNode = newRectNode(groupNode, textId);\n    let titleNodeInfo = newTitleNode(groupNode, textId + \"_title\", [`<<Element>>`, `${elName}`]);\n    newBodyNode(\n      groupNode,\n      textId + \"_body\",\n      [`Type: ${el.type || \"Not Specified\"}`, `Doc Ref: ${el.docRef || \"None\"}`],\n      titleNodeInfo.y\n    );\n    const rectBBox = rectNode.node().getBBox();\n    graph.setNode(id, {\n      width: rectBBox.width,\n      height: rectBBox.height,\n      shape: \"rect\",\n      id\n    });\n  });\n};\nconst addRelationships = (relationships, g) => {\n  relationships.forEach(function(r) {\n    let src = elementString(r.src);\n    let dst = elementString(r.dst);\n    g.setEdge(src, dst, { relationship: r });\n  });\n  return relationships;\n};\nconst adjustEntities = function(svgNode, graph) {\n  graph.nodes().forEach(function(v) {\n    if (v !== void 0 && graph.node(v) !== void 0) {\n      svgNode.select(\"#\" + v);\n      svgNode.select(\"#\" + v).attr(\n        \"transform\",\n        \"translate(\" + (graph.node(v).x - graph.node(v).width / 2) + \",\" + (graph.node(v).y - graph.node(v).height / 2) + \" )\"\n      );\n    }\n  });\n  return;\n};\nconst elementString = (str) => {\n  return str.replace(/\\s/g, \"\").replace(/\\./g, \"_\");\n};\nconst draw = (text, id, _version, diagObj) => {\n  conf = getConfig().requirement;\n  const securityLevel = conf.securityLevel;\n  let sandboxElement;\n  if (securityLevel === \"sandbox\") {\n    sandboxElement = select(\"#i\" + id);\n  }\n  const root = securityLevel === \"sandbox\" ? select(sandboxElement.nodes()[0].contentDocument.body) : select(\"body\");\n  const svg = root.select(`[id='${id}']`);\n  markers.insertLineEndings(svg, conf);\n  const g = new graphlib.Graph({\n    multigraph: false,\n    compound: false,\n    directed: true\n  }).setGraph({\n    rankdir: conf.layoutDirection,\n    marginx: 20,\n    marginy: 20,\n    nodesep: 100,\n    edgesep: 100,\n    ranksep: 100\n  }).setDefaultEdgeLabel(function() {\n    return {};\n  });\n  let requirements2 = diagObj.db.getRequirements();\n  let elements2 = diagObj.db.getElements();\n  let relationships = diagObj.db.getRelationships();\n  drawReqs(requirements2, g, svg);\n  drawElements(elements2, g, svg);\n  addRelationships(relationships, g);\n  layout(g);\n  adjustEntities(svg, g);\n  relationships.forEach(function(rel) {\n    drawRelationshipFromLayout(svg, rel, g, id, diagObj);\n  });\n  const padding = conf.rect_padding;\n  const svgBounds = svg.node().getBBox();\n  const width = svgBounds.width + padding * 2;\n  const height = svgBounds.height + padding * 2;\n  configureSvgSize(svg, height, width, conf.useMaxWidth);\n  svg.attr(\"viewBox\", `${svgBounds.x - padding} ${svgBounds.y - padding} ${width} ${height}`);\n};\nconst renderer = {\n  draw\n};\nconst diagram = {\n  parser: parser$1,\n  db,\n  renderer,\n  styles\n};\nexport {\n  diagram\n};\n"]}